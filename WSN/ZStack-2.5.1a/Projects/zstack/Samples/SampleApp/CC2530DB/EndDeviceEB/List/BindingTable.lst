###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:13
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\design\ZStack-2.5.1a\Components\stack\nwk\BindingTable.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\stack\nwk\BindingTable.c -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
#        -D xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\BindingTable.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\BindingTable.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\stack\nwk\BindingTable.c
      1          /**************************************************************************************************
      2            Filename:       BindingTable.c
      3            Revised:        $Date: 2012-03-28 15:40:50 -0700 (Wed, 28 Mar 2012) $
      4            Revision:       $Revision: 29930 $
      5          
      6            Description:    Device binding table functions.
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "nwk_globals.h"
     47          #include "AddrMgr.h"
     48          #include "BindingTable.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          #define NV_BIND_EMPTY   0xFF
     58          #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
     59          #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
     60          
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64          typedef struct
     65          {
     66            uint8        srcEP;
     67            uint16       srcIndex;
     68            uint16       dstIndex;
     69            uint8        dstEP;
     70            uint8        dstAddrMode;
     71            uint8        clusterIDs;
     72            uint16*      clusterIDList;
     73          } bindFields_t;
     74          
     75          /*********************************************************************
     76           * GLOBAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * LOCAL FUNCTIONS
     81           */
     82          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
     83                              AddrMgrEntry_t *entryNew );
     84          BindingEntry_t *bindFindEmpty( void );
     85          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
     86          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
     87          void bindAddrMgrLocalLoad( void );
     88          uint16 bindAddrIndexGet( zAddrType_t* addr );
     89          
     90          /*********************************************************************
     91           * LOCAL VARIABLES
     92           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          static uint8 bindAddrMgrLocalLoaded = FALSE;
   \                     bindAddrMgrLocalLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     94          
     95          /*********************************************************************
     96           * Function Pointers
     97           */
     98          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
   \                     pbindAddEntry:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    100                                            zAddrType_t *dstAddr, byte dstEpInt,
    101                                            byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
   \                     pbindNumOfEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
   \                     pbindRemoveDev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          byte (*pBindInitNV)( void ) = (void*)NULL;
   \                     pBindInitNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          void (*pBindSetDefaultNV)( void ) = (void*)NULL;
   \                     pBindSetDefaultNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
   \                     pBindRestoreFromNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          void (*pBindWriteNV)( void ) = (void*)NULL;
   \                     pBindWriteNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    108          
    109          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    110          /*********************************************************************
    111           * @fn      BindAddrMgrCB()
    112           *
    113           * @brief   Address Manager Callback function
    114           *
    115           * @param   update -
    116           * @param   entry -
    117           *
    118           * @return  pointer to
    119           */
    120          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
    121                              AddrMgrEntry_t *entryOld )
    122          {
    123            // Check for either deleted items or changed Extended (Duplicate) addresses
    124          }
    125          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
    126          
    127          /*********************************************************************
    128           * @fn      InitBindingTable()
    129           *
    130           * @brief
    131           *
    132           *   This function is used to initialise the binding table
    133           *
    134           * @param   none
    135           *
    136           * @return  none
    137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    138          void InitBindingTable( void )
   \                     InitBindingTable:
    139          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    140            osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
   \   000005                ; Setup parameters for call to function osal_memset
   \   000005   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000008   E4           CLR     A
   \   000009   93           MOVC    A,@A+DPTR
   \   00000A   FC           MOV     R4,A
   \   00000B   7401         MOV     A,#0x1
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   FD           MOV     R5,A
   \   00000F   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000012   E4           CLR     A
   \   000013   93           MOVC    A,@A+DPTR
   \   000014   F5..         MOV     ?V0,A
   \   000016   7401         MOV     A,#0x1
   \   000018   93           MOVC    A,@A+DPTR
   \   000019   F5..         MOV     ?V1,A
   \   00001B   EC           MOV     A,R4
   \   00001C   85..F0       MOV     B,?V0
   \   00001F   A4           MUL     AB
   \   000020   CC           XCH     A,R4
   \   000021   A8F0         MOV     R0,B
   \   000023   85..F0       MOV     B,?V1
   \   000026   A4           MUL     AB
   \   000027   28           ADD     A,R0
   \   000028   F8           MOV     R0,A
   \   000029   85..F0       MOV     B,?V0
   \   00002C   ED           MOV     A,R5
   \   00002D   A4           MUL     AB
   \   00002E   28           ADD     A,R0
   \   00002F   FD           MOV     R5,A
   \   000030   79FF         MOV     R1,#-0x1
   \   000032   7A..         MOV     R2,#BindingTable & 0xff
   \   000034   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
   \   000036   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    141          
    142            pbindAddEntry = bindAddEntry;
   \   000039   90....       MOV     DPTR,#pbindAddEntry
   \   00003C   74..         MOV     A,#`??bindAddEntry::?relay` & 0xff
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   74..         MOV     A,#(`??bindAddEntry::?relay` >> 8) & 0xff
   \   000042   F0           MOVX    @DPTR,A
    143            pbindNumOfEntries = bindNumOfEntries;
   \   000043   90....       MOV     DPTR,#pbindNumOfEntries
   \   000046   74..         MOV     A,#`??bindNumOfEntries::?relay` & 0xff
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   74..         MOV     A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
   \   00004C   F0           MOVX    @DPTR,A
    144            pbindRemoveDev = bindRemoveDev;
   \   00004D   90....       MOV     DPTR,#pbindRemoveDev
   \   000050   74..         MOV     A,#`??bindRemoveDev::?relay` & 0xff
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   74..         MOV     A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
   \   000056   F0           MOVX    @DPTR,A
    145            pBindInitNV = BindInitNV;
   \   000057   90....       MOV     DPTR,#pBindInitNV
   \   00005A   74..         MOV     A,#`??BindInitNV::?relay` & 0xff
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   74..         MOV     A,#(`??BindInitNV::?relay` >> 8) & 0xff
   \   000060   F0           MOVX    @DPTR,A
    146            pBindSetDefaultNV = BindSetDefaultNV;
   \   000061   90....       MOV     DPTR,#pBindSetDefaultNV
   \   000064   74..         MOV     A,#`??BindSetDefaultNV::?relay` & 0xff
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   74..         MOV     A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
   \   00006A   F0           MOVX    @DPTR,A
    147            pBindRestoreFromNV = BindRestoreFromNV;
   \   00006B   90....       MOV     DPTR,#pBindRestoreFromNV
   \   00006E   74..         MOV     A,#`??BindRestoreFromNV::?relay` & 0xff
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   74..         MOV     A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
   \   000074   F0           MOVX    @DPTR,A
    148            pBindWriteNV = BindWriteNV;
   \   000075   90....       MOV     DPTR,#pBindWriteNV
   \   000078   74..         MOV     A,#`??BindWriteNV::?relay` & 0xff
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   74..         MOV     A,#(`??BindWriteNV::?relay` >> 8) & 0xff
   \   00007E   F0           MOVX    @DPTR,A
    149          
    150            bindAddrMgrLocalLoaded = FALSE;
   \   00007F   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000082   7400         MOV     A,#0x0
   \   000084   F0           MOVX    @DPTR,A
    151          
    152          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    153            // Register with the address manager
    154            AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
    155          #endif
    156          }
   \   000085   7F02         MOV     R7,#0x2
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    157          
    158          /*********************************************************************
    159           * @fn      bindFindEmpty()
    160           *
    161           * @brief   This function returns a pointer to an empty binding slot
    162           *
    163           * @param   none
    164           *
    165           * @return  pointer to binding table entry, NULL if not added
    166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    167          BindingEntry_t *bindFindEmpty( void )
   \                     bindFindEmpty:
    168          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    169            uint16 x;
    170          
    171            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7800         MOV     R0,#0x0
   \   000006   7900         MOV     R1,#0x0
   \                     ??bindFindEmpty_0:
   \   000008   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000B   E4           CLR     A
   \   00000C   93           MOVC    A,@A+DPTR
   \   00000D   FA           MOV     R2,A
   \   00000E   7401         MOV     A,#0x1
   \   000010   93           MOVC    A,@A+DPTR
   \   000011   FB           MOV     R3,A
   \   000012   C3           CLR     C
   \   000013   E8           MOV     A,R0
   \   000014   9A           SUBB    A,R2
   \   000015   E9           MOV     A,R1
   \   000016   9B           SUBB    A,R3
   \   000017   504E         JNC     ??bindFindEmpty_1
    172            {
    173              // It's empty if the index is "Not Found"
    174              if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
   \   000019   E8           MOV     A,R0
   \   00001A   FA           MOV     R2,A
   \   00001B   E9           MOV     A,R1
   \   00001C   FB           MOV     R3,A
   \   00001D   EA           MOV     A,R2
   \   00001E   75F00E       MOV     B,#0xe
   \   000021   A4           MUL     AB
   \   000022   CA           XCH     A,R2
   \   000023   ACF0         MOV     R4,B
   \   000025   75F000       MOV     B,#0x0
   \   000028   A4           MUL     AB
   \   000029   2C           ADD     A,R4
   \   00002A   FC           MOV     R4,A
   \   00002B   75F00E       MOV     B,#0xe
   \   00002E   EB           MOV     A,R3
   \   00002F   A4           MUL     AB
   \   000030   2C           ADD     A,R4
   \   000031   FB           MOV     R3,A
   \   000032   74..         MOV     A,#BindingTable & 0xff
   \   000034   2A           ADD     A,R2
   \   000035   F582         MOV     DPL,A
   \   000037   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000039   3B           ADDC    A,R3
   \   00003A   F583         MOV     DPH,A
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   64FF         XRL     A,#0xff
   \   00003F   701F         JNZ     ??bindFindEmpty_2
    175              {
    176                return ( &BindingTable[x] );
   \   000041   E8           MOV     A,R0
   \   000042   75F00E       MOV     B,#0xe
   \   000045   A4           MUL     AB
   \   000046   C8           XCH     A,R0
   \   000047   AAF0         MOV     R2,B
   \   000049   75F000       MOV     B,#0x0
   \   00004C   A4           MUL     AB
   \   00004D   2A           ADD     A,R2
   \   00004E   FA           MOV     R2,A
   \   00004F   75F00E       MOV     B,#0xe
   \   000052   E9           MOV     A,R1
   \   000053   A4           MUL     AB
   \   000054   2A           ADD     A,R2
   \   000055   F9           MOV     R1,A
   \   000056   74..         MOV     A,#BindingTable & 0xff
   \   000058   28           ADD     A,R0
   \   000059   FA           MOV     R2,A
   \   00005A   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00005C   39           ADDC    A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   800B         SJMP    ??bindFindEmpty_3
    177              }
    178            }
   \                     ??bindFindEmpty_2:
   \   000060   08           INC     R0
   \   000061   E8           MOV     A,R0
   \   000062   70A4         JNZ     ??bindFindEmpty_0
   \   000064   09           INC     R1
   \   000065   80A1         SJMP    ??bindFindEmpty_0
    179          
    180            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindEmpty_1:
   \   000067   7A00         MOV     R2,#0x0
   \   000069   7B00         MOV     R3,#0x0
   \                     ??bindFindEmpty_3:
   \   00006B   D083         POP     DPH
   \   00006D   D082         POP     DPL
   \   00006F   02....       LJMP    ?BRET
    181          }
    182          
    183          /*********************************************************************
    184           * @fn      bindNumOfEntries()
    185           *
    186           * @brief   This function returns the number of binding table entries.
    187           *          The return for this is the number of clusters in the
    188           *          table NOT the number of entries.
    189           *
    190           * @param   none
    191           *
    192           * @return  number of entries
    193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    194          uint16 bindNumOfEntries( void )
   \                     bindNumOfEntries:
    195          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    196            uint16 x;
    197            uint16 found;
    198          
    199            for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   7800         MOV     R0,#0x0
   \   00000B   7900         MOV     R1,#0x0
   \                     ??bindNumOfEntries_0:
   \   00000D   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000010   E4           CLR     A
   \   000011   93           MOVC    A,@A+DPTR
   \   000012   FC           MOV     R4,A
   \   000013   7401         MOV     A,#0x1
   \   000015   93           MOVC    A,@A+DPTR
   \   000016   FD           MOV     R5,A
   \   000017   C3           CLR     C
   \   000018   E8           MOV     A,R0
   \   000019   9C           SUBB    A,R4
   \   00001A   E9           MOV     A,R1
   \   00001B   9D           SUBB    A,R5
   \   00001C   505C         JNC     ??bindNumOfEntries_1
    200            {
    201              // It's empty if the index is "Not Found"
    202              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   00001E   E8           MOV     A,R0
   \   00001F   FC           MOV     R4,A
   \   000020   E9           MOV     A,R1
   \   000021   FD           MOV     R5,A
   \   000022   EC           MOV     A,R4
   \   000023   75F00E       MOV     B,#0xe
   \   000026   A4           MUL     AB
   \   000027   CC           XCH     A,R4
   \   000028   AEF0         MOV     R6,B
   \   00002A   75F000       MOV     B,#0x0
   \   00002D   A4           MUL     AB
   \   00002E   2E           ADD     A,R6
   \   00002F   FE           MOV     R6,A
   \   000030   75F00E       MOV     B,#0xe
   \   000033   ED           MOV     A,R5
   \   000034   A4           MUL     AB
   \   000035   2E           ADD     A,R6
   \   000036   FD           MOV     R5,A
   \   000037   74..         MOV     A,#BindingTable & 0xff
   \   000039   2C           ADD     A,R4
   \   00003A   F582         MOV     DPL,A
   \   00003C   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00003E   3D           ADDC    A,R5
   \   00003F   F583         MOV     DPH,A
   \   000041   E0           MOVX    A,@DPTR
   \   000042   64FF         XRL     A,#0xff
   \   000044   602D         JZ      ??bindNumOfEntries_2
    203              {
    204                found += BindingTable[x].numClusterIds;
   \   000046   E8           MOV     A,R0
   \   000047   FC           MOV     R4,A
   \   000048   E9           MOV     A,R1
   \   000049   FD           MOV     R5,A
   \   00004A   EC           MOV     A,R4
   \   00004B   75F00E       MOV     B,#0xe
   \   00004E   A4           MUL     AB
   \   00004F   CC           XCH     A,R4
   \   000050   AEF0         MOV     R6,B
   \   000052   75F000       MOV     B,#0x0
   \   000055   A4           MUL     AB
   \   000056   2E           ADD     A,R6
   \   000057   FE           MOV     R6,A
   \   000058   75F00E       MOV     B,#0xe
   \   00005B   ED           MOV     A,R5
   \   00005C   A4           MUL     AB
   \   00005D   2E           ADD     A,R6
   \   00005E   FD           MOV     R5,A
   \   00005F   74..         MOV     A,#(BindingTable + 5) & 0xff
   \   000061   2C           ADD     A,R4
   \   000062   F582         MOV     DPL,A
   \   000064   74..         MOV     A,#((BindingTable + 5) >> 8) & 0xff
   \   000066   3D           ADDC    A,R5
   \   000067   F583         MOV     DPH,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FC           MOV     R4,A
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   EA           MOV     A,R2
   \   00006E   2C           ADD     A,R4
   \   00006F   FA           MOV     R2,A
   \   000070   EB           MOV     A,R3
   \   000071   3D           ADDC    A,R5
   \   000072   FB           MOV     R3,A
    205              }
    206            }
   \                     ??bindNumOfEntries_2:
   \   000073   08           INC     R0
   \   000074   E8           MOV     A,R0
   \   000075   7096         JNZ     ??bindNumOfEntries_0
   \   000077   09           INC     R1
   \   000078   8093         SJMP    ??bindNumOfEntries_0
    207          
    208            return ( found );
   \                     ??bindNumOfEntries_1:
   \   00007A   7F01         MOV     R7,#0x1
   \   00007C   02....       LJMP    ?BANKED_LEAVE_XDATA
    209          }
    210          
    211          /*********************************************************************
    212           * @fn      bindCapacity()
    213           *
    214           * @brief   This function returns the number of binding entries
    215           *          possible and used.
    216           *
    217           * @param   maxEntries - pointer to a place to put the max entries
    218           * @param   usedEntries - pointer to a place to put the number
    219           *               of used entries
    220           *
    221           * @return  none
    222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
   \                     bindCapacity:
    224          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    225            uint16 x;
    226            uint16 used;
    227          
    228            for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   75..00       MOV     ?V1,#0x0
   \   00000F   7800         MOV     R0,#0x0
   \   000011   7900         MOV     R1,#0x0
   \                     ??bindCapacity_0:
   \   000013   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000016   E4           CLR     A
   \   000017   93           MOVC    A,@A+DPTR
   \   000018   FA           MOV     R2,A
   \   000019   7401         MOV     A,#0x1
   \   00001B   93           MOVC    A,@A+DPTR
   \   00001C   FB           MOV     R3,A
   \   00001D   C3           CLR     C
   \   00001E   E8           MOV     A,R0
   \   00001F   9A           SUBB    A,R2
   \   000020   E9           MOV     A,R1
   \   000021   9B           SUBB    A,R3
   \   000022   503B         JNC     ??bindCapacity_1
    229            {
    230              // It's empty if the index is "Not Found"
    231              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   000024   E8           MOV     A,R0
   \   000025   FA           MOV     R2,A
   \   000026   E9           MOV     A,R1
   \   000027   FB           MOV     R3,A
   \   000028   EA           MOV     A,R2
   \   000029   75F00E       MOV     B,#0xe
   \   00002C   A4           MUL     AB
   \   00002D   CA           XCH     A,R2
   \   00002E   85F0..       MOV     ?V2,B
   \   000031   75F000       MOV     B,#0x0
   \   000034   A4           MUL     AB
   \   000035   25..         ADD     A,?V2
   \   000037   F5..         MOV     ?V2,A
   \   000039   75F00E       MOV     B,#0xe
   \   00003C   EB           MOV     A,R3
   \   00003D   A4           MUL     AB
   \   00003E   25..         ADD     A,?V2
   \   000040   FB           MOV     R3,A
   \   000041   74..         MOV     A,#BindingTable & 0xff
   \   000043   2A           ADD     A,R2
   \   000044   F582         MOV     DPL,A
   \   000046   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000048   3B           ADDC    A,R3
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   64FF         XRL     A,#0xff
   \   00004E   6008         JZ      ??bindCapacity_2
    232              {
    233                used++;
   \   000050   05..         INC     ?V0
   \   000052   E5..         MOV     A,?V0
   \   000054   7002         JNZ     ??bindCapacity_2
   \   000056   05..         INC     ?V1
    234              }
    235            }
   \                     ??bindCapacity_2:
   \   000058   08           INC     R0
   \   000059   E8           MOV     A,R0
   \   00005A   70B7         JNZ     ??bindCapacity_0
   \   00005C   09           INC     R1
   \   00005D   80B4         SJMP    ??bindCapacity_0
    236          
    237            *maxEntries = gNWK_MAX_BINDING_ENTRIES;
   \                     ??bindCapacity_1:
   \   00005F   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000062   E4           CLR     A
   \   000063   93           MOVC    A,@A+DPTR
   \   000064   FA           MOV     R2,A
   \   000065   7401         MOV     A,#0x1
   \   000067   93           MOVC    A,@A+DPTR
   \   000068   FB           MOV     R3,A
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   EA           MOV     A,R2
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   EB           MOV     A,R3
   \   000071   F0           MOVX    @DPTR,A
    238            *usedEntries = used;
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   E5..         MOV     A,?V0
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   E5..         MOV     A,?V1
   \   00007C   F0           MOVX    @DPTR,A
    239          }
   \   00007D   7F03         MOV     R7,#0x3
   \   00007F   02....       LJMP    ?BANKED_LEAVE_XDATA
    240          
    241          /*********************************************************************
    242           * @fn      bindAddEntry()
    243           *
    244           * @brief   This function is used to Add an entry to the binding table
    245           *
    246           * @param       srcAddr - source Address
    247           * @param       srcEpInt - source endpoint
    248           * @param       dstAddr - destination Address
    249           * @param       dstEpInt - destination endpoint
    250           * @param       numClusterIds - number of cluster Ids in the list
    251           * @param       clusterIds - pointer to the Object ID list
    252           *
    253           * @return  pointer to binding table entry, NULL if not added
    254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    255          BindingEntry_t *bindAddEntry( byte srcEpInt,
   \                     bindAddEntry:
    256                                        zAddrType_t *dstAddr, byte dstEpInt,
    257                                        byte numClusterIds, uint16 *clusterIds )
    258          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   740B         MOV     A,#0xb
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C..         MOV     ?V5,R4
   \   000022   8D..         MOV     ?V4,R5
   \   000024   741D         MOV     A,#0x1d
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V7,A
    259            uint8           index;
    260            BindingEntry_t* entry;
    261            bindFields_t    fields;
    262          
    263            // initialize results
    264            entry = NULL;
   \   000030   7E00         MOV     R6,#0x0
   \   000032   7F00         MOV     R7,#0x0
    265          
    266            // make sure local addresses have been loaded
    267            bindAddrMgrLocalLoad();
   \   000034                ; Setup parameters for call to function bindAddrMgrLocalLoad
   \   000034   12....       LCALL   `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
    268          
    269            // setup fields
    270            fields.dstIndex = bindAddrIndexGet( dstAddr );
   \   000037                ; Setup parameters for call to function bindAddrIndexGet
   \   000037   740B         MOV     A,#0xb
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FA           MOV     R2,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   000044   7404         MOV     A,#0x4
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   EA           MOV     A,R2
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   EB           MOV     A,R3
   \   00004D   F0           MOVX    @DPTR,A
    271            fields.srcEP    = srcEpInt;
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   C0E0         PUSH    A
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
    272          
    273            if ( dstAddr->addrMode == AddrGroup )
   \   00005F   740B         MOV     A,#0xb
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   C8           XCH     A,R0
   \   000069   2408         ADD     A,#0x8
   \   00006B   F582         MOV     DPL,A
   \   00006D   C8           XCH     A,R0
   \   00006E   3400         ADDC    A,#0x0
   \   000070   F583         MOV     DPH,A
   \   000072   E0           MOVX    A,@DPTR
   \   000073   6401         XRL     A,#0x1
   \   000075   7012         JNZ     ??bindAddEntry_0
    274            {
    275              fields.dstAddrMode = DSTGROUPMODE_GROUP;
   \   000077   7407         MOV     A,#0x7
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   7401         MOV     A,#0x1
   \   00007E   F0           MOVX    @DPTR,A
    276              fields.dstEP       = 0;
   \   00007F   7406         MOV     A,#0x6
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   8014         SJMP    ??bindAddEntry_1
    277            }
    278            else
    279            {
    280              fields.dstAddrMode = DSTGROUPMODE_ADDR;
   \                     ??bindAddEntry_0:
   \   000089   7407         MOV     A,#0x7
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   7400         MOV     A,#0x0
   \   000090   F0           MOVX    @DPTR,A
    281              fields.dstEP       = dstEpInt;
   \   000091   E5..         MOV     A,?V5
   \   000093   C0E0         PUSH    A
   \   000095   7406         MOV     A,#0x6
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
    282            }
    283          
    284            if ( fields.dstIndex != INVALID_NODE_ADDR  )
   \                     ??bindAddEntry_1:
   \   00009D   7404         MOV     A,#0x4
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   64FE         XRL     A,#0xfe
   \   0000A5   7004         JNZ     ??bindAddEntry_2
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   64FF         XRL     A,#0xff
   \                     ??bindAddEntry_2:
   \   0000AB   7003         JNZ     $+5
   \   0000AD   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    285            {
    286              for ( index = 0; index < gNWK_MAX_BINDING_ENTRIES; index++ )
   \   0000B0   75..00       MOV     ?V3,#0x0
   \                     ??bindAddEntry_4:
   \   0000B3   A8..         MOV     R0,?V3
   \   0000B5   7900         MOV     R1,#0x0
   \   0000B7   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000BA   E4           CLR     A
   \   0000BB   93           MOVC    A,@A+DPTR
   \   0000BC   FA           MOV     R2,A
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   93           MOVC    A,@A+DPTR
   \   0000C0   FB           MOV     R3,A
   \   0000C1   C3           CLR     C
   \   0000C2   E8           MOV     A,R0
   \   0000C3   9A           SUBB    A,R2
   \   0000C4   E9           MOV     A,R1
   \   0000C5   9B           SUBB    A,R3
   \   0000C6   4003         JC      $+5
   \   0000C8   02....       LJMP    ??bindAddEntry_5 & 0xFFFF
    287              {
    288                if ( ( fields.srcEP       == BindingTable[index].srcEP        ) &&
    289                     ( fields.dstAddrMode == BindingTable[index].dstGroupMode ) &&
    290                     ( fields.dstIndex    == BindingTable[index].dstIdx       ) &&
    291                     ( fields.dstEP       == BindingTable[index].dstEP        )    )
   \   0000CB   7401         MOV     A,#0x1
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FB           MOV     R3,A
   \   0000D2   A8..         MOV     R0,?V3
   \   0000D4   7900         MOV     R1,#0x0
   \   0000D6   E8           MOV     A,R0
   \   0000D7   75F00E       MOV     B,#0xe
   \   0000DA   A4           MUL     AB
   \   0000DB   C8           XCH     A,R0
   \   0000DC   AAF0         MOV     R2,B
   \   0000DE   75F000       MOV     B,#0x0
   \   0000E1   A4           MUL     AB
   \   0000E2   2A           ADD     A,R2
   \   0000E3   FA           MOV     R2,A
   \   0000E4   75F00E       MOV     B,#0xe
   \   0000E7   E9           MOV     A,R1
   \   0000E8   A4           MUL     AB
   \   0000E9   2A           ADD     A,R2
   \   0000EA   F9           MOV     R1,A
   \   0000EB   74..         MOV     A,#BindingTable & 0xff
   \   0000ED   28           ADD     A,R0
   \   0000EE   F582         MOV     DPL,A
   \   0000F0   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000F2   39           ADDC    A,R1
   \   0000F3   F583         MOV     DPH,A
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   6B           XRL     A,R3
   \   0000F7   6003         JZ      $+5
   \   0000F9   02....       LJMP    ??bindAddEntry_6 & 0xFFFF
   \   0000FC   7407         MOV     A,#0x7
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   E0           MOVX    A,@DPTR
   \   000102   FB           MOV     R3,A
   \   000103   A8..         MOV     R0,?V3
   \   000105   7900         MOV     R1,#0x0
   \   000107   E8           MOV     A,R0
   \   000108   75F00E       MOV     B,#0xe
   \   00010B   A4           MUL     AB
   \   00010C   C8           XCH     A,R0
   \   00010D   AAF0         MOV     R2,B
   \   00010F   75F000       MOV     B,#0x0
   \   000112   A4           MUL     AB
   \   000113   2A           ADD     A,R2
   \   000114   FA           MOV     R2,A
   \   000115   75F00E       MOV     B,#0xe
   \   000118   E9           MOV     A,R1
   \   000119   A4           MUL     AB
   \   00011A   2A           ADD     A,R2
   \   00011B   F9           MOV     R1,A
   \   00011C   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   00011E   28           ADD     A,R0
   \   00011F   F582         MOV     DPL,A
   \   000121   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   000123   39           ADDC    A,R1
   \   000124   F583         MOV     DPH,A
   \   000126   E0           MOVX    A,@DPTR
   \   000127   6B           XRL     A,R3
   \   000128   6003         JZ      $+5
   \   00012A   02....       LJMP    ??bindAddEntry_6 & 0xFFFF
   \   00012D   7404         MOV     A,#0x4
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   E0           MOVX    A,@DPTR
   \   000133   FA           MOV     R2,A
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   FB           MOV     R3,A
   \   000137   A8..         MOV     R0,?V3
   \   000139   7900         MOV     R1,#0x0
   \   00013B   E8           MOV     A,R0
   \   00013C   75F00E       MOV     B,#0xe
   \   00013F   A4           MUL     AB
   \   000140   C8           XCH     A,R0
   \   000141   ACF0         MOV     R4,B
   \   000143   75F000       MOV     B,#0x0
   \   000146   A4           MUL     AB
   \   000147   2C           ADD     A,R4
   \   000148   FC           MOV     R4,A
   \   000149   75F00E       MOV     B,#0xe
   \   00014C   E9           MOV     A,R1
   \   00014D   A4           MUL     AB
   \   00014E   2C           ADD     A,R4
   \   00014F   F9           MOV     R1,A
   \   000150   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000152   28           ADD     A,R0
   \   000153   F582         MOV     DPL,A
   \   000155   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000157   39           ADDC    A,R1
   \   000158   F583         MOV     DPH,A
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   6A           XRL     A,R2
   \   00015C   7003         JNZ     ??bindAddEntry_7
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   6B           XRL     A,R3
   \                     ??bindAddEntry_7:
   \   000161   7055         JNZ     ??bindAddEntry_6
   \   000163   7406         MOV     A,#0x6
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   E0           MOVX    A,@DPTR
   \   000169   FB           MOV     R3,A
   \   00016A   A8..         MOV     R0,?V3
   \   00016C   7900         MOV     R1,#0x0
   \   00016E   E8           MOV     A,R0
   \   00016F   75F00E       MOV     B,#0xe
   \   000172   A4           MUL     AB
   \   000173   C8           XCH     A,R0
   \   000174   AAF0         MOV     R2,B
   \   000176   75F000       MOV     B,#0x0
   \   000179   A4           MUL     AB
   \   00017A   2A           ADD     A,R2
   \   00017B   FA           MOV     R2,A
   \   00017C   75F00E       MOV     B,#0xe
   \   00017F   E9           MOV     A,R1
   \   000180   A4           MUL     AB
   \   000181   2A           ADD     A,R2
   \   000182   F9           MOV     R1,A
   \   000183   74..         MOV     A,#(BindingTable + 4) & 0xff
   \   000185   28           ADD     A,R0
   \   000186   F582         MOV     DPL,A
   \   000188   74..         MOV     A,#((BindingTable + 4) >> 8) & 0xff
   \   00018A   39           ADDC    A,R1
   \   00018B   F583         MOV     DPH,A
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   6B           XRL     A,R3
   \   00018F   7027         JNZ     ??bindAddEntry_6
    292                {
    293                  entry = &BindingTable[index];
   \   000191   A8..         MOV     R0,?V3
   \   000193   7900         MOV     R1,#0x0
   \   000195   E8           MOV     A,R0
   \   000196   75F00E       MOV     B,#0xe
   \   000199   A4           MUL     AB
   \   00019A   C8           XCH     A,R0
   \   00019B   AAF0         MOV     R2,B
   \   00019D   75F000       MOV     B,#0x0
   \   0001A0   A4           MUL     AB
   \   0001A1   2A           ADD     A,R2
   \   0001A2   FA           MOV     R2,A
   \   0001A3   75F00E       MOV     B,#0xe
   \   0001A6   E9           MOV     A,R1
   \   0001A7   A4           MUL     AB
   \   0001A8   2A           ADD     A,R2
   \   0001A9   F9           MOV     R1,A
   \   0001AA   74..         MOV     A,#BindingTable & 0xff
   \   0001AC   28           ADD     A,R0
   \   0001AD   F8           MOV     R0,A
   \   0001AE   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0001B0   39           ADDC    A,R1
   \   0001B1   F9           MOV     R1,A
   \   0001B2   E8           MOV     A,R0
   \   0001B3   FE           MOV     R6,A
   \   0001B4   E9           MOV     A,R1
   \   0001B5   FF           MOV     R7,A
    294          
    295                  // break from loop
    296                  break;
   \   0001B6   8005         SJMP    ??bindAddEntry_5
    297                }
    298              }
   \                     ??bindAddEntry_6:
   \   0001B8   05..         INC     ?V3
   \   0001BA   02....       LJMP    ??bindAddEntry_4 & 0xFFFF
    299          
    300              if ( entry != NULL )
   \                     ??bindAddEntry_5:
   \   0001BD   EE           MOV     A,R6
   \   0001BE   4F           ORL     A,R7
   \   0001BF   6079         JZ      ??bindAddEntry_8
    301              {
    302                // Loop through the cluster IDs
    303                for ( index = 0; index < numClusterIds; index++ )
   \   0001C1   75..00       MOV     ?V3,#0x0
   \                     ??bindAddEntry_9:
   \   0001C4   E5..         MOV     A,?V3
   \   0001C6   C3           CLR     C
   \   0001C7   95..         SUBB    A,?V4
   \   0001C9   4003         JC      $+5
   \   0001CB   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    304                {
    305                  // Found - is the cluster already defined?
    306                  if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
   \   0001CE                ; Setup parameters for call to function bindIsClusterIDinList
   \   0001CE   A8..         MOV     R0,?V3
   \   0001D0   7900         MOV     R1,#0x0
   \   0001D2   E8           MOV     A,R0
   \   0001D3   75F002       MOV     B,#0x2
   \   0001D6   A4           MUL     AB
   \   0001D7   C8           XCH     A,R0
   \   0001D8   AAF0         MOV     R2,B
   \   0001DA   75F000       MOV     B,#0x0
   \   0001DD   A4           MUL     AB
   \   0001DE   2A           ADD     A,R2
   \   0001DF   FA           MOV     R2,A
   \   0001E0   75F002       MOV     B,#0x2
   \   0001E3   E9           MOV     A,R1
   \   0001E4   A4           MUL     AB
   \   0001E5   2A           ADD     A,R2
   \   0001E6   F9           MOV     R1,A
   \   0001E7   E5..         MOV     A,?V6
   \   0001E9   28           ADD     A,R0
   \   0001EA   F582         MOV     DPL,A
   \   0001EC   E5..         MOV     A,?V7
   \   0001EE   39           ADDC    A,R1
   \   0001EF   F583         MOV     DPH,A
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   FC           MOV     R4,A
   \   0001F3   A3           INC     DPTR
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   FD           MOV     R5,A
   \   0001F6   EE           MOV     A,R6
   \   0001F7   FA           MOV     R2,A
   \   0001F8   EF           MOV     A,R7
   \   0001F9   FB           MOV     R3,A
   \   0001FA   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   0001FD   E9           MOV     A,R1
   \   0001FE   7036         JNZ     ??bindAddEntry_10
    307                  {
    308                    // Nope, add this cluster
    309                    if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
   \   000200                ; Setup parameters for call to function bindAddClusterIdToList
   \   000200   A8..         MOV     R0,?V3
   \   000202   7900         MOV     R1,#0x0
   \   000204   E8           MOV     A,R0
   \   000205   75F002       MOV     B,#0x2
   \   000208   A4           MUL     AB
   \   000209   C8           XCH     A,R0
   \   00020A   AAF0         MOV     R2,B
   \   00020C   75F000       MOV     B,#0x0
   \   00020F   A4           MUL     AB
   \   000210   2A           ADD     A,R2
   \   000211   FA           MOV     R2,A
   \   000212   75F002       MOV     B,#0x2
   \   000215   E9           MOV     A,R1
   \   000216   A4           MUL     AB
   \   000217   2A           ADD     A,R2
   \   000218   F9           MOV     R1,A
   \   000219   E5..         MOV     A,?V6
   \   00021B   28           ADD     A,R0
   \   00021C   F582         MOV     DPL,A
   \   00021E   E5..         MOV     A,?V7
   \   000220   39           ADDC    A,R1
   \   000221   F583         MOV     DPH,A
   \   000223   E0           MOVX    A,@DPTR
   \   000224   FC           MOV     R4,A
   \   000225   A3           INC     DPTR
   \   000226   E0           MOVX    A,@DPTR
   \   000227   FD           MOV     R5,A
   \   000228   EE           MOV     A,R6
   \   000229   FA           MOV     R2,A
   \   00022A   EF           MOV     A,R7
   \   00022B   FB           MOV     R3,A
   \   00022C   12....       LCALL   `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
   \   00022F   E9           MOV     A,R1
   \   000230   7004         JNZ     ??bindAddEntry_10
    310                    {
    311                      // Indicate error if cluster list was full
    312                      entry = NULL;
   \   000232   7E00         MOV     R6,#0x0
   \   000234   7F00         MOV     R7,#0x0
    313                    }
    314                  }
    315                }
   \                     ??bindAddEntry_10:
   \   000236   05..         INC     ?V3
   \   000238   808A         SJMP    ??bindAddEntry_9
    316              }
    317              else
    318              {
    319                // Find an empty slot
    320                entry = bindFindEmpty();
   \                     ??bindAddEntry_8:
   \   00023A                ; Setup parameters for call to function bindFindEmpty
   \   00023A   12....       LCALL   `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
   \   00023D   8A..         MOV     ?V0,R2
   \   00023F   8B..         MOV     ?V1,R3
   \   000241   AE..         MOV     R6,?V0
   \   000243   AF..         MOV     R7,?V1
    321          
    322                // Check against the maximum number allowed
    323                if ( entry != NULL )
   \   000245   EE           MOV     A,R6
   \   000246   4F           ORL     A,R7
   \   000247   7003         JNZ     $+5
   \   000249   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    324                {
    325                  // Add new entry
    326                  entry->srcEP         = fields.srcEP;
   \   00024C   7401         MOV     A,#0x1
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   E0           MOVX    A,@DPTR
   \   000252   C0E0         PUSH    A
   \   000254   8E82         MOV     DPL,R6
   \   000256   8F83         MOV     DPH,R7
   \   000258   D0E0         POP     A
   \   00025A   F0           MOVX    @DPTR,A
    327                  entry->dstGroupMode  = fields.dstAddrMode;
   \   00025B   7407         MOV     A,#0x7
   \   00025D   12....       LCALL   ?XSTACK_DISP0_8
   \   000260   E0           MOVX    A,@DPTR
   \   000261   C0E0         PUSH    A
   \   000263   8E82         MOV     DPL,R6
   \   000265   8F83         MOV     DPH,R7
   \   000267   A3           INC     DPTR
   \   000268   D0E0         POP     A
   \   00026A   F0           MOVX    @DPTR,A
    328                  entry->dstIdx        = fields.dstIndex;
   \   00026B   7404         MOV     A,#0x4
   \   00026D   12....       LCALL   ?XSTACK_DISP0_8
   \   000270   E0           MOVX    A,@DPTR
   \   000271   F8           MOV     R0,A
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   F9           MOV     R1,A
   \   000275   8E82         MOV     DPL,R6
   \   000277   8F83         MOV     DPH,R7
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   E8           MOV     A,R0
   \   00027C   F0           MOVX    @DPTR,A
   \   00027D   A3           INC     DPTR
   \   00027E   E9           MOV     A,R1
   \   00027F   F0           MOVX    @DPTR,A
    329                  entry->dstEP         = fields.dstEP;
   \   000280   7406         MOV     A,#0x6
   \   000282   12....       LCALL   ?XSTACK_DISP0_8
   \   000285   E0           MOVX    A,@DPTR
   \   000286   C0E0         PUSH    A
   \   000288   8E82         MOV     DPL,R6
   \   00028A   8F83         MOV     DPH,R7
   \   00028C   A3           INC     DPTR
   \   00028D   A3           INC     DPTR
   \   00028E   A3           INC     DPTR
   \   00028F   A3           INC     DPTR
   \   000290   D0E0         POP     A
   \   000292   F0           MOVX    @DPTR,A
    330          
    331                  if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
   \   000293   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000296   E4           CLR     A
   \   000297   93           MOVC    A,@A+DPTR
   \   000298   C3           CLR     C
   \   000299   95..         SUBB    A,?V4
   \   00029B   5007         JNC     ??bindAddEntry_11
    332                  {
    333                    numClusterIds = gMAX_BINDING_CLUSTER_IDS;
   \   00029D   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   0002A0   E4           CLR     A
   \   0002A1   93           MOVC    A,@A+DPTR
   \   0002A2   F5..         MOV     ?V4,A
    334                  }
    335          
    336                  entry->numClusterIds = numClusterIds;
   \                     ??bindAddEntry_11:
   \   0002A4   E5..         MOV     A,?V4
   \   0002A6   C0E0         PUSH    A
   \   0002A8   8E82         MOV     DPL,R6
   \   0002AA   8F83         MOV     DPH,R7
   \   0002AC   A3           INC     DPTR
   \   0002AD   A3           INC     DPTR
   \   0002AE   A3           INC     DPTR
   \   0002AF   A3           INC     DPTR
   \   0002B0   A3           INC     DPTR
   \   0002B1   D0E0         POP     A
   \   0002B3   F0           MOVX    @DPTR,A
    337          
    338                  osal_memcpy( entry->clusterIdList,
    339                               clusterIds,
    340                               numClusterIds * sizeof(uint16) );
   \   0002B4                ; Setup parameters for call to function osal_memcpy
   \   0002B4   85....       MOV     ?V0,?V6
   \   0002B7   85....       MOV     ?V1,?V7
   \   0002BA   75..00       MOV     ?V2,#0x0
   \   0002BD   78..         MOV     R0,#?V0
   \   0002BF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002C2   AC..         MOV     R4,?V4
   \   0002C4   7D00         MOV     R5,#0x0
   \   0002C6   EC           MOV     A,R4
   \   0002C7   75F002       MOV     B,#0x2
   \   0002CA   A4           MUL     AB
   \   0002CB   CC           XCH     A,R4
   \   0002CC   A8F0         MOV     R0,B
   \   0002CE   75F000       MOV     B,#0x0
   \   0002D1   A4           MUL     AB
   \   0002D2   28           ADD     A,R0
   \   0002D3   F8           MOV     R0,A
   \   0002D4   75F002       MOV     B,#0x2
   \   0002D7   ED           MOV     A,R5
   \   0002D8   A4           MUL     AB
   \   0002D9   28           ADD     A,R0
   \   0002DA   FD           MOV     R5,A
   \   0002DB   EE           MOV     A,R6
   \   0002DC   2406         ADD     A,#0x6
   \   0002DE   FA           MOV     R2,A
   \   0002DF   E4           CLR     A
   \   0002E0   3F           ADDC    A,R7
   \   0002E1   FB           MOV     R3,A
   \   0002E2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002E5   7403         MOV     A,#0x3
   \   0002E7   12....       LCALL   ?DEALLOC_XSTACK8
    341                }
    342              }
    343            }
    344          
    345            return entry;
   \                     ??bindAddEntry_3:
   \   0002EA   EE           MOV     A,R6
   \   0002EB   FA           MOV     R2,A
   \   0002EC   EF           MOV     A,R7
   \   0002ED   FB           MOV     R3,A
   \   0002EE   740D         MOV     A,#0xd
   \   0002F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002F3   7F08         MOV     R7,#0x8
   \   0002F5   02....       LJMP    ?BANKED_LEAVE_XDATA
    346          }
    347          
    348          /*********************************************************************
    349           * @fn      bindRemoveEntry
    350           *
    351           * @brief   Removes a binding table entry.
    352           *
    353           * @param   pBind - pointer to binding table entry to delete
    354           *
    355           * @return  TRUE if Removed, FALSE if not
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          byte bindRemoveEntry( BindingEntry_t *pBind )
   \                     bindRemoveEntry:
    358          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    359            osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   FC           MOV     R4,A
   \   00000F   7401         MOV     A,#0x1
   \   000011   93           MOVC    A,@A+DPTR
   \   000012   FD           MOV     R5,A
   \   000013   79FF         MOV     R1,#-0x1
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    360            return ( TRUE );
   \   00001C   7901         MOV     R1,#0x1
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
    361          }
    362          
    363          /*********************************************************************
    364           * @fn      bindIsClusterIDinList()
    365           *
    366           * @brief   Is the clusterID in the clusterID list?
    367           *
    368           * @param   enter - binding table entry
    369           * @param   clusterId  - Cluster ID to look for
    370           *
    371           * @return  TRUE if found, FALSE if not found
    372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindIsClusterIDinList:
    374          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    375            uint8 x;
    376          
    377            if ( entry != NULL )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6049         JZ      ??bindIsClusterIDinList_0
    378            {
    379              for ( x = 0; x < entry->numClusterIds; x++ )
   \   000009   7E00         MOV     R6,#0x0
   \                     ??bindIsClusterIDinList_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   EE           MOV     A,R6
   \   000017   C3           CLR     C
   \   000018   98           SUBB    A,R0
   \   000019   5037         JNC     ??bindIsClusterIDinList_0
    380              {
    381                if ( entry->clusterIdList[x] == clusterId )
   \   00001B   EE           MOV     A,R6
   \   00001C   F8           MOV     R0,A
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   E8           MOV     A,R0
   \   000020   75F002       MOV     B,#0x2
   \   000023   A4           MUL     AB
   \   000024   C8           XCH     A,R0
   \   000025   AFF0         MOV     R7,B
   \   000027   75F000       MOV     B,#0x0
   \   00002A   A4           MUL     AB
   \   00002B   2F           ADD     A,R7
   \   00002C   FF           MOV     R7,A
   \   00002D   75F002       MOV     B,#0x2
   \   000030   E9           MOV     A,R1
   \   000031   A4           MUL     AB
   \   000032   2F           ADD     A,R7
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   28           ADD     A,R0
   \   000036   F582         MOV     DPL,A
   \   000038   EB           MOV     A,R3
   \   000039   39           ADDC    A,R1
   \   00003A   F583         MOV     DPH,A
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6C           XRL     A,R4
   \   000044   7003         JNZ     ??bindIsClusterIDinList_2
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6D           XRL     A,R5
   \                     ??bindIsClusterIDinList_2:
   \   000049   7004         JNZ     ??bindIsClusterIDinList_3
    382                {
    383                  return ( TRUE );
   \   00004B   7901         MOV     R1,#0x1
   \   00004D   8005         SJMP    ??bindIsClusterIDinList_4
    384                }
    385              }
   \                     ??bindIsClusterIDinList_3:
   \   00004F   0E           INC     R6
   \   000050   80B9         SJMP    ??bindIsClusterIDinList_1
    386            }
    387          
    388            return ( FALSE );
   \                     ??bindIsClusterIDinList_0:
   \   000052   7900         MOV     R1,#0x0
   \                     ??bindIsClusterIDinList_4:
   \   000054   7F01         MOV     R7,#0x1
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    389          }
    390          
    391          /*********************************************************************
    392           * @fn      bindRemoveClusterIdFromList()
    393           *
    394           * @brief   Removes a ClusterID from a list of ClusterIDs.
    395           *
    396           * @param   enter - binding table entry
    397           * @param   clusterId  - Cluster ID to look for
    398           *
    399           * @return  TRUE if there are at least 1 clusterID left, FALSE if none
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindRemoveClusterIdFromList:
    402          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    403            byte x;
    404            uint16 *listPtr;
    405            byte numIds;
    406          
    407            if ( entry )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   7003         JNZ     $+5
   \   000009   02....       LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
    408            {
    409              if ( entry->numClusterIds > 0 )
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
    410              {
    411                listPtr = entry->clusterIdList;
   \   00001B   EA           MOV     A,R2
   \   00001C   2406         ADD     A,#0x6
   \   00001E   F8           MOV     R0,A
   \   00001F   E4           CLR     A
   \   000020   3B           ADDC    A,R3
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   FE           MOV     R6,A
   \   000024   E9           MOV     A,R1
   \   000025   FF           MOV     R7,A
    412                numIds = entry->numClusterIds;
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V1,A
    413          
    414                // Copy the new list over
    415                for ( x = 0; x < numIds; x++ )
   \   000032   75..00       MOV     ?V0,#0x0
   \                     ??bindRemoveClusterIdFromList_1:
   \   000035   E5..         MOV     A,?V0
   \   000037   C3           CLR     C
   \   000038   95..         SUBB    A,?V1
   \   00003A   4003         JC      $+5
   \   00003C   02....       LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
    416                {
    417                  if ( entry->clusterIdList[x] != clusterId )
   \   00003F   A8..         MOV     R0,?V0
   \   000041   7900         MOV     R1,#0x0
   \   000043   E8           MOV     A,R0
   \   000044   75F002       MOV     B,#0x2
   \   000047   A4           MUL     AB
   \   000048   C8           XCH     A,R0
   \   000049   85F0..       MOV     ?V2,B
   \   00004C   75F000       MOV     B,#0x0
   \   00004F   A4           MUL     AB
   \   000050   25..         ADD     A,?V2
   \   000052   F5..         MOV     ?V2,A
   \   000054   75F002       MOV     B,#0x2
   \   000057   E9           MOV     A,R1
   \   000058   A4           MUL     AB
   \   000059   25..         ADD     A,?V2
   \   00005B   F9           MOV     R1,A
   \   00005C   EA           MOV     A,R2
   \   00005D   28           ADD     A,R0
   \   00005E   F582         MOV     DPL,A
   \   000060   EB           MOV     A,R3
   \   000061   39           ADDC    A,R1
   \   000062   F583         MOV     DPH,A
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6C           XRL     A,R4
   \   00006C   7003         JNZ     ??bindRemoveClusterIdFromList_2
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6D           XRL     A,R5
   \                     ??bindRemoveClusterIdFromList_2:
   \   000071   6046         JZ      ??bindRemoveClusterIdFromList_3
    418                  {
    419                    *listPtr++ = entry->clusterIdList[x];
   \   000073   A8..         MOV     R0,?V0
   \   000075   7900         MOV     R1,#0x0
   \   000077   E8           MOV     A,R0
   \   000078   75F002       MOV     B,#0x2
   \   00007B   A4           MUL     AB
   \   00007C   C8           XCH     A,R0
   \   00007D   85F0..       MOV     ?V2,B
   \   000080   75F000       MOV     B,#0x0
   \   000083   A4           MUL     AB
   \   000084   25..         ADD     A,?V2
   \   000086   F5..         MOV     ?V2,A
   \   000088   75F002       MOV     B,#0x2
   \   00008B   E9           MOV     A,R1
   \   00008C   A4           MUL     AB
   \   00008D   25..         ADD     A,?V2
   \   00008F   F9           MOV     R1,A
   \   000090   EA           MOV     A,R2
   \   000091   28           ADD     A,R0
   \   000092   F582         MOV     DPL,A
   \   000094   EB           MOV     A,R3
   \   000095   39           ADDC    A,R1
   \   000096   F583         MOV     DPH,A
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F8           MOV     R0,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F9           MOV     R1,A
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   E8           MOV     A,R0
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E9           MOV     A,R1
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   EE           MOV     A,R6
   \   0000AD   2402         ADD     A,#0x2
   \   0000AF   F8           MOV     R0,A
   \   0000B0   E4           CLR     A
   \   0000B1   3F           ADDC    A,R7
   \   0000B2   F9           MOV     R1,A
   \   0000B3   E8           MOV     A,R0
   \   0000B4   FE           MOV     R6,A
   \   0000B5   E9           MOV     A,R1
   \   0000B6   FF           MOV     R7,A
   \   0000B7   8019         SJMP    ??bindRemoveClusterIdFromList_4
    420                  }
    421                  else
    422                  {
    423                    entry->numClusterIds--;
   \                     ??bindRemoveClusterIdFromList_3:
   \   0000B9   8A82         MOV     DPL,R2
   \   0000BB   8B83         MOV     DPH,R3
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   24FF         ADD     A,#-0x1
   \   0000C5   F0           MOVX    @DPTR,A
    424                    if ( entry->numClusterIds == 0 )
   \   0000C6   8A82         MOV     DPL,R2
   \   0000C8   8B83         MOV     DPH,R3
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   6005         JZ      ??bindRemoveClusterIdFromList_0
    425                    {
    426                      break;
    427                    }
    428                  }
    429                }
   \                     ??bindRemoveClusterIdFromList_4:
   \   0000D2   05..         INC     ?V0
   \   0000D4   02....       LJMP    ??bindRemoveClusterIdFromList_1 & 0xFFFF
    430              }
    431            }
    432          
    433            if ( entry && (entry->numClusterIds > 0) )
   \                     ??bindRemoveClusterIdFromList_0:
   \   0000D7   EA           MOV     A,R2
   \   0000D8   4B           ORL     A,R3
   \   0000D9   6010         JZ      ??bindRemoveClusterIdFromList_5
   \   0000DB   8A82         MOV     DPL,R2
   \   0000DD   8B83         MOV     DPH,R3
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   6004         JZ      ??bindRemoveClusterIdFromList_5
    434            {
    435              return ( TRUE );
   \   0000E7   7901         MOV     R1,#0x1
   \   0000E9   8002         SJMP    ??bindRemoveClusterIdFromList_6
    436            }
    437            else
    438            {
    439              return ( FALSE );
   \                     ??bindRemoveClusterIdFromList_5:
   \   0000EB   7900         MOV     R1,#0x0
   \                     ??bindRemoveClusterIdFromList_6:
   \   0000ED   7F03         MOV     R7,#0x3
   \   0000EF   02....       LJMP    ?BANKED_LEAVE_XDATA
    440            }
    441          }
    442          
    443          /*********************************************************************
    444           * @fn      bindAddClusterIdToList()
    445           *
    446           * @brief   Adds a ClusterID to a list of ClusterIDs.
    447           *
    448           * @param   enter - binding table entry
    449           * @param   clusterId  - Cluster ID to Add
    450           *
    451           * @return  TRUE if Added, FALSE if not
    452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindAddClusterIdToList:
    454          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    455            if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   605A         JZ      ??bindAddClusterIdToList_0
   \   000009   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C3           CLR     C
   \   00001A   98           SUBB    A,R0
   \   00001B   5046         JNC     ??bindAddClusterIdToList_0
    456            {
    457              // Add the new one
    458              entry->clusterIdList[entry->numClusterIds] = clusterId;
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   7900         MOV     R1,#0x0
   \   00002A   E8           MOV     A,R0
   \   00002B   75F002       MOV     B,#0x2
   \   00002E   A4           MUL     AB
   \   00002F   C8           XCH     A,R0
   \   000030   AEF0         MOV     R6,B
   \   000032   75F000       MOV     B,#0x0
   \   000035   A4           MUL     AB
   \   000036   2E           ADD     A,R6
   \   000037   FE           MOV     R6,A
   \   000038   75F002       MOV     B,#0x2
   \   00003B   E9           MOV     A,R1
   \   00003C   A4           MUL     AB
   \   00003D   2E           ADD     A,R6
   \   00003E   F9           MOV     R1,A
   \   00003F   EA           MOV     A,R2
   \   000040   28           ADD     A,R0
   \   000041   F582         MOV     DPL,A
   \   000043   EB           MOV     A,R3
   \   000044   39           ADDC    A,R1
   \   000045   F583         MOV     DPH,A
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   EC           MOV     A,R4
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   ED           MOV     A,R5
   \   000051   F0           MOVX    @DPTR,A
    459              entry->numClusterIds++;
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   2401         ADD     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    460              return ( TRUE );
   \   00005F   7901         MOV     R1,#0x1
   \   000061   8002         SJMP    ??bindAddClusterIdToList_1
    461            }
    462            return ( FALSE );
   \                     ??bindAddClusterIdToList_0:
   \   000063   7900         MOV     R1,#0x0
   \                     ??bindAddClusterIdToList_1:
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
    463          }
    464          
    465          /*********************************************************************
    466           * @fn      bindFindExisting
    467           *
    468           * @brief   Finds an existing src/epint to dst/epint bind record
    469           *
    470           * @param   srcAddr - Source address
    471           * @param   srcEpInt - Source Endpoint/Interface
    472           * @param   dstAddr - Destination address
    473           * @param   dstEpInt - Destination Endpoint/Interface
    474           *
    475           * @return  pointer to existing entry or NULL
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          BindingEntry_t *bindFindExisting( byte srcEpInt,
   \                     bindFindExisting:
    478                                            zAddrType_t *dstAddr, byte dstEpInt )
    479          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V7,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   \   00000B   8C..         MOV     ?V6,R4
    480            uint16 dstIdx;
    481            uint16 x;
    482          
    483            // Find the records in the assoc list
    484            if ( dstAddr->addrMode == AddrGroup )
   \   00000D   85..82       MOV     DPL,?V2
   \   000010   85..83       MOV     DPH,?V3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6401         XRL     A,#0x1
   \   00001E   700F         JNZ     ??bindFindExisting_0
    485            {
    486              dstIdx = dstAddr->addr.shortAddr;
   \   000020   85..82       MOV     DPL,?V2
   \   000023   85..83       MOV     DPH,?V3
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V1,A
   \   00002D   8011         SJMP    ??bindFindExisting_1
    487            }
    488            else
    489            {
    490              dstIdx = bindingAddrMgsHelperFind( dstAddr );
   \                     ??bindFindExisting_0:
   \   00002F                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002F   AA..         MOV     R2,?V2
   \   000031   AB..         MOV     R3,?V3
   \   000033   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000036   8A..         MOV     ?V4,R2
   \   000038   8B..         MOV     ?V5,R3
   \   00003A   85....       MOV     ?V0,?V4
   \   00003D   85....       MOV     ?V1,?V5
    491            }
    492          
    493            if ( dstIdx == INVALID_NODE_ADDR )
   \                     ??bindFindExisting_1:
   \   000040   74FE         MOV     A,#-0x2
   \   000042   65..         XRL     A,?V0
   \   000044   7004         JNZ     ??bindFindExisting_2
   \   000046   74FF         MOV     A,#-0x1
   \   000048   65..         XRL     A,?V1
   \                     ??bindFindExisting_2:
   \   00004A   7007         JNZ     ??bindFindExisting_3
    494            {
    495              return ( (BindingEntry_t *)NULL );
   \   00004C   7A00         MOV     R2,#0x0
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   02....       LJMP    ??bindFindExisting_4 & 0xFFFF
    496            }
    497          
    498            // Start at the beginning
    499            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindFindExisting_3:
   \   000053   7E00         MOV     R6,#0x0
   \   000055   7F00         MOV     R7,#0x0
   \                     ??bindFindExisting_5:
   \   000057   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00005A   E4           CLR     A
   \   00005B   93           MOVC    A,@A+DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   7401         MOV     A,#0x1
   \   00005F   93           MOVC    A,@A+DPTR
   \   000060   F9           MOV     R1,A
   \   000061   C3           CLR     C
   \   000062   EE           MOV     A,R6
   \   000063   98           SUBB    A,R0
   \   000064   EF           MOV     A,R7
   \   000065   99           SUBB    A,R1
   \   000066   4003         JC      $+5
   \   000068   02....       LJMP    ??bindFindExisting_6 & 0xFFFF
    500            {
    501              if ( (BindingTable[x].srcEP == srcEpInt) )
   \   00006B   EE           MOV     A,R6
   \   00006C   F8           MOV     R0,A
   \   00006D   EF           MOV     A,R7
   \   00006E   F9           MOV     R1,A
   \   00006F   E8           MOV     A,R0
   \   000070   75F00E       MOV     B,#0xe
   \   000073   A4           MUL     AB
   \   000074   C8           XCH     A,R0
   \   000075   AAF0         MOV     R2,B
   \   000077   75F000       MOV     B,#0x0
   \   00007A   A4           MUL     AB
   \   00007B   2A           ADD     A,R2
   \   00007C   FA           MOV     R2,A
   \   00007D   75F00E       MOV     B,#0xe
   \   000080   E9           MOV     A,R1
   \   000081   A4           MUL     AB
   \   000082   2A           ADD     A,R2
   \   000083   F9           MOV     R1,A
   \   000084   74..         MOV     A,#BindingTable & 0xff
   \   000086   28           ADD     A,R0
   \   000087   F582         MOV     DPL,A
   \   000089   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00008B   39           ADDC    A,R1
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   65..         XRL     A,?V7
   \   000091   6003         JZ      $+5
   \   000093   02....       LJMP    ??bindFindExisting_7 & 0xFFFF
    502              {
    503                if ( ((dstAddr->addrMode == AddrGroup)
    504                        && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    505                        && (dstIdx == BindingTable[x].dstIdx))
    506                   || ((dstAddr->addrMode != AddrGroup)
    507                       && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    508                       && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
   \   000096   85..82       MOV     DPL,?V2
   \   000099   85..83       MOV     DPH,?V3
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   6401         XRL     A,#0x1
   \   0000A7   7059         JNZ     ??bindFindExisting_8
   \   0000A9   EE           MOV     A,R6
   \   0000AA   F8           MOV     R0,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   F9           MOV     R1,A
   \   0000AD   E8           MOV     A,R0
   \   0000AE   75F00E       MOV     B,#0xe
   \   0000B1   A4           MUL     AB
   \   0000B2   C8           XCH     A,R0
   \   0000B3   AAF0         MOV     R2,B
   \   0000B5   75F000       MOV     B,#0x0
   \   0000B8   A4           MUL     AB
   \   0000B9   2A           ADD     A,R2
   \   0000BA   FA           MOV     R2,A
   \   0000BB   75F00E       MOV     B,#0xe
   \   0000BE   E9           MOV     A,R1
   \   0000BF   A4           MUL     AB
   \   0000C0   2A           ADD     A,R2
   \   0000C1   F9           MOV     R1,A
   \   0000C2   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   0000C4   28           ADD     A,R0
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   0000C9   39           ADDC    A,R1
   \   0000CA   F583         MOV     DPH,A
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6401         XRL     A,#0x1
   \   0000CF   7031         JNZ     ??bindFindExisting_8
   \   0000D1   EE           MOV     A,R6
   \   0000D2   F8           MOV     R0,A
   \   0000D3   EF           MOV     A,R7
   \   0000D4   F9           MOV     R1,A
   \   0000D5   E8           MOV     A,R0
   \   0000D6   75F00E       MOV     B,#0xe
   \   0000D9   A4           MUL     AB
   \   0000DA   C8           XCH     A,R0
   \   0000DB   AAF0         MOV     R2,B
   \   0000DD   75F000       MOV     B,#0x0
   \   0000E0   A4           MUL     AB
   \   0000E1   2A           ADD     A,R2
   \   0000E2   FA           MOV     R2,A
   \   0000E3   75F00E       MOV     B,#0xe
   \   0000E6   E9           MOV     A,R1
   \   0000E7   A4           MUL     AB
   \   0000E8   2A           ADD     A,R2
   \   0000E9   F9           MOV     R1,A
   \   0000EA   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   0000EC   28           ADD     A,R0
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   0000F1   39           ADDC    A,R1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   65..         XRL     A,?V0
   \   0000F7   7004         JNZ     ??bindFindExisting_9
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   65..         XRL     A,?V1
   \                     ??bindFindExisting_9:
   \   0000FD   7003         JNZ     $+5
   \   0000FF   02....       LJMP    ??bindFindExisting_10 & 0xFFFF
   \                     ??bindFindExisting_8:
   \   000102   85..82       MOV     DPL,?V2
   \   000105   85..83       MOV     DPH,?V3
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   6401         XRL     A,#0x1
   \   000113   7003         JNZ     $+5
   \   000115   02....       LJMP    ??bindFindExisting_7 & 0xFFFF
   \   000118   EE           MOV     A,R6
   \   000119   F8           MOV     R0,A
   \   00011A   EF           MOV     A,R7
   \   00011B   F9           MOV     R1,A
   \   00011C   E8           MOV     A,R0
   \   00011D   75F00E       MOV     B,#0xe
   \   000120   A4           MUL     AB
   \   000121   C8           XCH     A,R0
   \   000122   AAF0         MOV     R2,B
   \   000124   75F000       MOV     B,#0x0
   \   000127   A4           MUL     AB
   \   000128   2A           ADD     A,R2
   \   000129   FA           MOV     R2,A
   \   00012A   75F00E       MOV     B,#0xe
   \   00012D   E9           MOV     A,R1
   \   00012E   A4           MUL     AB
   \   00012F   2A           ADD     A,R2
   \   000130   F9           MOV     R1,A
   \   000131   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000133   28           ADD     A,R0
   \   000134   F582         MOV     DPL,A
   \   000136   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   000138   39           ADDC    A,R1
   \   000139   F583         MOV     DPH,A
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   7075         JNZ     ??bindFindExisting_7
   \   00013E   EE           MOV     A,R6
   \   00013F   F8           MOV     R0,A
   \   000140   EF           MOV     A,R7
   \   000141   F9           MOV     R1,A
   \   000142   E8           MOV     A,R0
   \   000143   75F00E       MOV     B,#0xe
   \   000146   A4           MUL     AB
   \   000147   C8           XCH     A,R0
   \   000148   AAF0         MOV     R2,B
   \   00014A   75F000       MOV     B,#0x0
   \   00014D   A4           MUL     AB
   \   00014E   2A           ADD     A,R2
   \   00014F   FA           MOV     R2,A
   \   000150   75F00E       MOV     B,#0xe
   \   000153   E9           MOV     A,R1
   \   000154   A4           MUL     AB
   \   000155   2A           ADD     A,R2
   \   000156   F9           MOV     R1,A
   \   000157   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000159   28           ADD     A,R0
   \   00015A   F582         MOV     DPL,A
   \   00015C   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   00015E   39           ADDC    A,R1
   \   00015F   F583         MOV     DPH,A
   \   000161   E0           MOVX    A,@DPTR
   \   000162   65..         XRL     A,?V0
   \   000164   7004         JNZ     ??bindFindExisting_11
   \   000166   A3           INC     DPTR
   \   000167   E0           MOVX    A,@DPTR
   \   000168   65..         XRL     A,?V1
   \                     ??bindFindExisting_11:
   \   00016A   7047         JNZ     ??bindFindExisting_7
   \   00016C   EE           MOV     A,R6
   \   00016D   F8           MOV     R0,A
   \   00016E   EF           MOV     A,R7
   \   00016F   F9           MOV     R1,A
   \   000170   E8           MOV     A,R0
   \   000171   75F00E       MOV     B,#0xe
   \   000174   A4           MUL     AB
   \   000175   C8           XCH     A,R0
   \   000176   AAF0         MOV     R2,B
   \   000178   75F000       MOV     B,#0x0
   \   00017B   A4           MUL     AB
   \   00017C   2A           ADD     A,R2
   \   00017D   FA           MOV     R2,A
   \   00017E   75F00E       MOV     B,#0xe
   \   000181   E9           MOV     A,R1
   \   000182   A4           MUL     AB
   \   000183   2A           ADD     A,R2
   \   000184   F9           MOV     R1,A
   \   000185   74..         MOV     A,#(BindingTable + 4) & 0xff
   \   000187   28           ADD     A,R0
   \   000188   F582         MOV     DPL,A
   \   00018A   74..         MOV     A,#((BindingTable + 4) >> 8) & 0xff
   \   00018C   39           ADDC    A,R1
   \   00018D   F583         MOV     DPH,A
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   65..         XRL     A,?V6
   \   000192   701F         JNZ     ??bindFindExisting_7
    509                {
    510                  return ( &BindingTable[x] );
   \                     ??bindFindExisting_10:
   \   000194   EE           MOV     A,R6
   \   000195   75F00E       MOV     B,#0xe
   \   000198   A4           MUL     AB
   \   000199   CE           XCH     A,R6
   \   00019A   A8F0         MOV     R0,B
   \   00019C   75F000       MOV     B,#0x0
   \   00019F   A4           MUL     AB
   \   0001A0   28           ADD     A,R0
   \   0001A1   F8           MOV     R0,A
   \   0001A2   75F00E       MOV     B,#0xe
   \   0001A5   EF           MOV     A,R7
   \   0001A6   A4           MUL     AB
   \   0001A7   28           ADD     A,R0
   \   0001A8   FF           MOV     R7,A
   \   0001A9   74..         MOV     A,#BindingTable & 0xff
   \   0001AB   2E           ADD     A,R6
   \   0001AC   FA           MOV     R2,A
   \   0001AD   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0001AF   3F           ADDC    A,R7
   \   0001B0   FB           MOV     R3,A
   \   0001B1   800C         SJMP    ??bindFindExisting_4
    511                }
    512              }
    513            }
   \                     ??bindFindExisting_7:
   \   0001B3   0E           INC     R6
   \   0001B4   EE           MOV     A,R6
   \   0001B5   7001         JNZ     ??bindFindExisting_12
   \   0001B7   0F           INC     R7
   \                     ??bindFindExisting_12:
   \   0001B8   02....       LJMP    ??bindFindExisting_5 & 0xFFFF
    514          
    515            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindExisting_6:
   \   0001BB   7A00         MOV     R2,#0x0
   \   0001BD   7B00         MOV     R3,#0x0
   \                     ??bindFindExisting_4:
   \   0001BF   7F08         MOV     R7,#0x8
   \   0001C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    516          }
    517          
    518          /*********************************************************************
    519           * @fn       bindRemoveDev()
    520           *
    521           * @brief
    522           *
    523           *   Remove all bind(s) entries associated to a device address (destination).
    524           *   Updates binding table.
    525           *
    526           * @param   Addr - address of device to be removed from Binding Table
    527           *
    528           * @return  none
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          void bindRemoveDev( zAddrType_t *Addr )
   \                     bindRemoveDev:
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    532            uint16 idx;
    533            uint16 x;
    534          
    535            if ( Addr->addrMode == AddrGroup )
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   85..83       MOV     DPH,?V3
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   700F         JNZ     ??bindRemoveDev_0
    536            {
    537              idx = Addr->addr.shortAddr;
   \   00001C   85..82       MOV     DPL,?V2
   \   00001F   85..83       MOV     DPH,?V3
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V1,A
   \   000029   8011         SJMP    ??bindRemoveDev_1
    538            }
    539            else
    540            {
    541              idx = bindingAddrMgsHelperFind( Addr );
   \                     ??bindRemoveDev_0:
   \   00002B                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002B   AA..         MOV     R2,?V2
   \   00002D   AB..         MOV     R3,?V3
   \   00002F   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000032   8A..         MOV     ?V4,R2
   \   000034   8B..         MOV     ?V5,R3
   \   000036   85....       MOV     ?V0,?V4
   \   000039   85....       MOV     ?V1,?V5
    542            }
    543          
    544            if ( idx == INVALID_NODE_ADDR )
   \                     ??bindRemoveDev_1:
   \   00003C   74FE         MOV     A,#-0x2
   \   00003E   65..         XRL     A,?V0
   \   000040   7004         JNZ     ??bindRemoveDev_2
   \   000042   74FF         MOV     A,#-0x1
   \   000044   65..         XRL     A,?V1
   \                     ??bindRemoveDev_2:
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??bindRemoveDev_3 & 0xFFFF
    545            {
    546              return;
    547            }
    548          
    549            // Removes all the entries that match the destination Address/Index
    550            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00004B   7E00         MOV     R6,#0x0
   \   00004D   7F00         MOV     R7,#0x0
   \                     ??bindRemoveDev_4:
   \   00004F   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000052   E4           CLR     A
   \   000053   93           MOVC    A,@A+DPTR
   \   000054   F8           MOV     R0,A
   \   000055   7401         MOV     A,#0x1
   \   000057   93           MOVC    A,@A+DPTR
   \   000058   F9           MOV     R1,A
   \   000059   C3           CLR     C
   \   00005A   EE           MOV     A,R6
   \   00005B   98           SUBB    A,R0
   \   00005C   EF           MOV     A,R7
   \   00005D   99           SUBB    A,R1
   \   00005E   4003         JC      $+5
   \   000060   02....       LJMP    ??bindRemoveDev_3 & 0xFFFF
    551            {
    552              if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    553                                                   && (BindingTable[x].dstIdx == idx) ) ||
    554                   ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    555                                                   && (BindingTable[x].dstIdx == idx) ) )
   \   000063   85..82       MOV     DPL,?V2
   \   000066   85..83       MOV     DPH,?V3
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   6401         XRL     A,#0x1
   \   000074   7056         JNZ     ??bindRemoveDev_5
   \   000076   EE           MOV     A,R6
   \   000077   F8           MOV     R0,A
   \   000078   EF           MOV     A,R7
   \   000079   F9           MOV     R1,A
   \   00007A   E8           MOV     A,R0
   \   00007B   75F00E       MOV     B,#0xe
   \   00007E   A4           MUL     AB
   \   00007F   C8           XCH     A,R0
   \   000080   AAF0         MOV     R2,B
   \   000082   75F000       MOV     B,#0x0
   \   000085   A4           MUL     AB
   \   000086   2A           ADD     A,R2
   \   000087   FA           MOV     R2,A
   \   000088   75F00E       MOV     B,#0xe
   \   00008B   E9           MOV     A,R1
   \   00008C   A4           MUL     AB
   \   00008D   2A           ADD     A,R2
   \   00008E   F9           MOV     R1,A
   \   00008F   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000091   28           ADD     A,R0
   \   000092   F582         MOV     DPL,A
   \   000094   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   000096   39           ADDC    A,R1
   \   000097   F583         MOV     DPH,A
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   6401         XRL     A,#0x1
   \   00009C   702E         JNZ     ??bindRemoveDev_5
   \   00009E   EE           MOV     A,R6
   \   00009F   F8           MOV     R0,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   F9           MOV     R1,A
   \   0000A2   E8           MOV     A,R0
   \   0000A3   75F00E       MOV     B,#0xe
   \   0000A6   A4           MUL     AB
   \   0000A7   C8           XCH     A,R0
   \   0000A8   AAF0         MOV     R2,B
   \   0000AA   75F000       MOV     B,#0x0
   \   0000AD   A4           MUL     AB
   \   0000AE   2A           ADD     A,R2
   \   0000AF   FA           MOV     R2,A
   \   0000B0   75F00E       MOV     B,#0xe
   \   0000B3   E9           MOV     A,R1
   \   0000B4   A4           MUL     AB
   \   0000B5   2A           ADD     A,R2
   \   0000B6   F9           MOV     R1,A
   \   0000B7   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   0000B9   28           ADD     A,R0
   \   0000BA   F582         MOV     DPL,A
   \   0000BC   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   0000BE   39           ADDC    A,R1
   \   0000BF   F583         MOV     DPH,A
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   65..         XRL     A,?V0
   \   0000C4   7004         JNZ     ??bindRemoveDev_6
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   65..         XRL     A,?V1
   \                     ??bindRemoveDev_6:
   \   0000CA   6067         JZ      ??bindRemoveDev_7
   \                     ??bindRemoveDev_5:
   \   0000CC   85..82       MOV     DPL,?V2
   \   0000CF   85..83       MOV     DPH,?V3
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   6401         XRL     A,#0x1
   \   0000DD   6079         JZ      ??bindRemoveDev_8
   \   0000DF   EE           MOV     A,R6
   \   0000E0   F8           MOV     R0,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   F9           MOV     R1,A
   \   0000E3   E8           MOV     A,R0
   \   0000E4   75F00E       MOV     B,#0xe
   \   0000E7   A4           MUL     AB
   \   0000E8   C8           XCH     A,R0
   \   0000E9   AAF0         MOV     R2,B
   \   0000EB   75F000       MOV     B,#0x0
   \   0000EE   A4           MUL     AB
   \   0000EF   2A           ADD     A,R2
   \   0000F0   FA           MOV     R2,A
   \   0000F1   75F00E       MOV     B,#0xe
   \   0000F4   E9           MOV     A,R1
   \   0000F5   A4           MUL     AB
   \   0000F6   2A           ADD     A,R2
   \   0000F7   F9           MOV     R1,A
   \   0000F8   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   0000FA   28           ADD     A,R0
   \   0000FB   F582         MOV     DPL,A
   \   0000FD   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   0000FF   39           ADDC    A,R1
   \   000100   F583         MOV     DPH,A
   \   000102   E0           MOVX    A,@DPTR
   \   000103   7053         JNZ     ??bindRemoveDev_8
   \   000105   EE           MOV     A,R6
   \   000106   F8           MOV     R0,A
   \   000107   EF           MOV     A,R7
   \   000108   F9           MOV     R1,A
   \   000109   E8           MOV     A,R0
   \   00010A   75F00E       MOV     B,#0xe
   \   00010D   A4           MUL     AB
   \   00010E   C8           XCH     A,R0
   \   00010F   AAF0         MOV     R2,B
   \   000111   75F000       MOV     B,#0x0
   \   000114   A4           MUL     AB
   \   000115   2A           ADD     A,R2
   \   000116   FA           MOV     R2,A
   \   000117   75F00E       MOV     B,#0xe
   \   00011A   E9           MOV     A,R1
   \   00011B   A4           MUL     AB
   \   00011C   2A           ADD     A,R2
   \   00011D   F9           MOV     R1,A
   \   00011E   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000120   28           ADD     A,R0
   \   000121   F582         MOV     DPL,A
   \   000123   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000125   39           ADDC    A,R1
   \   000126   F583         MOV     DPH,A
   \   000128   E0           MOVX    A,@DPTR
   \   000129   65..         XRL     A,?V0
   \   00012B   7004         JNZ     ??bindRemoveDev_9
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   65..         XRL     A,?V1
   \                     ??bindRemoveDev_9:
   \   000131   7025         JNZ     ??bindRemoveDev_8
    556              {
    557                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveDev_7:
   \   000133                ; Setup parameters for call to function bindRemoveEntry
   \   000133   EE           MOV     A,R6
   \   000134   F8           MOV     R0,A
   \   000135   EF           MOV     A,R7
   \   000136   F9           MOV     R1,A
   \   000137   E8           MOV     A,R0
   \   000138   75F00E       MOV     B,#0xe
   \   00013B   A4           MUL     AB
   \   00013C   C8           XCH     A,R0
   \   00013D   AAF0         MOV     R2,B
   \   00013F   75F000       MOV     B,#0x0
   \   000142   A4           MUL     AB
   \   000143   2A           ADD     A,R2
   \   000144   FA           MOV     R2,A
   \   000145   75F00E       MOV     B,#0xe
   \   000148   E9           MOV     A,R1
   \   000149   A4           MUL     AB
   \   00014A   2A           ADD     A,R2
   \   00014B   F9           MOV     R1,A
   \   00014C   74..         MOV     A,#BindingTable & 0xff
   \   00014E   28           ADD     A,R0
   \   00014F   FA           MOV     R2,A
   \   000150   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000152   39           ADDC    A,R1
   \   000153   FB           MOV     R3,A
   \   000154   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   000157   E9           MOV     A,R1
    558              }
    559            }
   \                     ??bindRemoveDev_8:
   \   000158   0E           INC     R6
   \   000159   EE           MOV     A,R6
   \   00015A   7001         JNZ     ??bindRemoveDev_10
   \   00015C   0F           INC     R7
   \                     ??bindRemoveDev_10:
   \   00015D   02....       LJMP    ??bindRemoveDev_4 & 0xFFFF
    560          }
   \                     ??bindRemoveDev_3:
   \   000160   7F06         MOV     R7,#0x6
   \   000162   02....       LJMP    ?BANKED_LEAVE_XDATA
    561          
    562          /*********************************************************************
    563           * @fn       bindRemoveSrcDev()
    564           *
    565           * @brief
    566           *
    567           *   Remove binds(s) associated to device address (source).
    568           *   Updates binding table.
    569           *
    570           * @param   srcAddr - address of device
    571           * @param   ep - endpoint to remove, 0xFF is all endpoints
    572           *
    573           * @return  none
    574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    575          void bindRemoveSrcDev( uint8 ep )
   \                     bindRemoveSrcDev:
    576          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    577            uint16 x;
    578          
    579            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000007   7E00         MOV     R6,#0x0
   \   000009   7F00         MOV     R7,#0x0
   \                     ??bindRemoveSrcDev_0:
   \   00000B   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000E   E4           CLR     A
   \   00000F   93           MOVC    A,@A+DPTR
   \   000010   F8           MOV     R0,A
   \   000011   7401         MOV     A,#0x1
   \   000013   93           MOVC    A,@A+DPTR
   \   000014   F9           MOV     R1,A
   \   000015   C3           CLR     C
   \   000016   EE           MOV     A,R6
   \   000017   98           SUBB    A,R0
   \   000018   EF           MOV     A,R7
   \   000019   99           SUBB    A,R1
   \   00001A   505A         JNC     ??bindRemoveSrcDev_1
    580            {
    581              if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
   \   00001C   74FF         MOV     A,#-0x1
   \   00001E   65..         XRL     A,?V0
   \   000020   6028         JZ      ??bindRemoveSrcDev_2
   \   000022   EE           MOV     A,R6
   \   000023   F8           MOV     R0,A
   \   000024   EF           MOV     A,R7
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   75F00E       MOV     B,#0xe
   \   00002A   A4           MUL     AB
   \   00002B   C8           XCH     A,R0
   \   00002C   AAF0         MOV     R2,B
   \   00002E   75F000       MOV     B,#0x0
   \   000031   A4           MUL     AB
   \   000032   2A           ADD     A,R2
   \   000033   FA           MOV     R2,A
   \   000034   75F00E       MOV     B,#0xe
   \   000037   E9           MOV     A,R1
   \   000038   A4           MUL     AB
   \   000039   2A           ADD     A,R2
   \   00003A   F9           MOV     R1,A
   \   00003B   74..         MOV     A,#BindingTable & 0xff
   \   00003D   28           ADD     A,R0
   \   00003E   F582         MOV     DPL,A
   \   000040   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000042   39           ADDC    A,R1
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   65..         XRL     A,?V0
   \   000048   7025         JNZ     ??bindRemoveSrcDev_3
    582              {
    583                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveSrcDev_2:
   \   00004A                ; Setup parameters for call to function bindRemoveEntry
   \   00004A   EE           MOV     A,R6
   \   00004B   F8           MOV     R0,A
   \   00004C   EF           MOV     A,R7
   \   00004D   F9           MOV     R1,A
   \   00004E   E8           MOV     A,R0
   \   00004F   75F00E       MOV     B,#0xe
   \   000052   A4           MUL     AB
   \   000053   C8           XCH     A,R0
   \   000054   AAF0         MOV     R2,B
   \   000056   75F000       MOV     B,#0x0
   \   000059   A4           MUL     AB
   \   00005A   2A           ADD     A,R2
   \   00005B   FA           MOV     R2,A
   \   00005C   75F00E       MOV     B,#0xe
   \   00005F   E9           MOV     A,R1
   \   000060   A4           MUL     AB
   \   000061   2A           ADD     A,R2
   \   000062   F9           MOV     R1,A
   \   000063   74..         MOV     A,#BindingTable & 0xff
   \   000065   28           ADD     A,R0
   \   000066   FA           MOV     R2,A
   \   000067   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000069   39           ADDC    A,R1
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   00006E   E9           MOV     A,R1
    584              }
    585            }
   \                     ??bindRemoveSrcDev_3:
   \   00006F   0E           INC     R6
   \   000070   EE           MOV     A,R6
   \   000071   7098         JNZ     ??bindRemoveSrcDev_0
   \   000073   0F           INC     R7
   \   000074   8095         SJMP    ??bindRemoveSrcDev_0
    586          }
   \                     ??bindRemoveSrcDev_1:
   \   000076   7F01         MOV     R7,#0x1
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA
    587          
    588          /*********************************************************************
    589           * @fn          bindNumBoundTo
    590           *
    591           * @brief       Calculate the number items this device is bound to.
    592           *              When srcMode is set to TRUE, discard what value devAddr
    593           *              has, it returns number count bound to the local dev.
    594           *
    595           * @param       devAddr - device Address
    596           * @param       devEP - endpoint
    597           * @param       srcMode - TRUE - assume devHandle is a source address
    598           *                        FALSE - destination address
    599           *
    600           * @return      status
    601           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    602          byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
   \                     bindNumBoundTo:
    603          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   C0E0         PUSH    A
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8A..         MOV     ?V2,R2
   \   000017   8B..         MOV     ?V3,R3
   \   000019   89..         MOV     ?V5,R1
    604            BindingEntry_t *pBind;
    605            uint16 idx;
    606            byte   num;
    607            uint16 x;
    608          
    609            // Init
    610            num = 0;
   \   00001B   75..00       MOV     ?V4,#0x0
    611          
    612            if ( devAddr->addrMode == AddrGroup )
   \   00001E   85..82       MOV     DPL,?V2
   \   000021   85..83       MOV     DPH,?V3
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6401         XRL     A,#0x1
   \   00002F   7018         JNZ     ??bindNumBoundTo_0
    613            {
    614              idx = devAddr->addr.shortAddr;
   \   000031   85..82       MOV     DPL,?V2
   \   000034   85..83       MOV     DPH,?V3
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E8           MOV     A,R0
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   E9           MOV     A,R1
   \   000046   F0           MOVX    @DPTR,A
   \   000047   8012         SJMP    ??bindNumBoundTo_1
    615            }
    616            else
    617            {
    618              idx = bindingAddrMgsHelperFind( devAddr );
   \                     ??bindNumBoundTo_0:
   \   000049                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000049   AA..         MOV     R2,?V2
   \   00004B   AB..         MOV     R3,?V3
   \   00004D   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   EA           MOV     A,R2
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   EB           MOV     A,R3
   \   00005A   F0           MOVX    @DPTR,A
    619            }
    620          
    621            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindNumBoundTo_1:
   \   00005B   75..00       MOV     ?V0,#0x0
   \   00005E   75..00       MOV     ?V1,#0x0
   \                     ??bindNumBoundTo_2:
   \   000061   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000064   E4           CLR     A
   \   000065   93           MOVC    A,@A+DPTR
   \   000066   F8           MOV     R0,A
   \   000067   7401         MOV     A,#0x1
   \   000069   93           MOVC    A,@A+DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   C3           CLR     C
   \   00006C   E5..         MOV     A,?V0
   \   00006E   98           SUBB    A,R0
   \   00006F   E5..         MOV     A,?V1
   \   000071   99           SUBB    A,R1
   \   000072   4003         JC      $+5
   \   000074   02....       LJMP    ??bindNumBoundTo_3 & 0xFFFF
    622            {
    623              pBind = &BindingTable[x];
   \   000077   A8..         MOV     R0,?V0
   \   000079   A9..         MOV     R1,?V1
   \   00007B   E8           MOV     A,R0
   \   00007C   75F00E       MOV     B,#0xe
   \   00007F   A4           MUL     AB
   \   000080   C8           XCH     A,R0
   \   000081   AAF0         MOV     R2,B
   \   000083   75F000       MOV     B,#0x0
   \   000086   A4           MUL     AB
   \   000087   2A           ADD     A,R2
   \   000088   FA           MOV     R2,A
   \   000089   75F00E       MOV     B,#0xe
   \   00008C   E9           MOV     A,R1
   \   00008D   A4           MUL     AB
   \   00008E   2A           ADD     A,R2
   \   00008F   F9           MOV     R1,A
   \   000090   74..         MOV     A,#BindingTable & 0xff
   \   000092   28           ADD     A,R0
   \   000093   F8           MOV     R0,A
   \   000094   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000096   39           ADDC    A,R1
   \   000097   F9           MOV     R1,A
   \   000098   E8           MOV     A,R0
   \   000099   FE           MOV     R6,A
   \   00009A   E9           MOV     A,R1
   \   00009B   FF           MOV     R7,A
    624              if ( srcMode )
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   600D         JZ      ??bindNumBoundTo_4
    625              {
    626                if ( pBind->srcEP == devEpInt )
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   65..         XRL     A,?V5
   \   0000AB   707F         JNZ     ??bindNumBoundTo_5
    627                {
    628                  num++;
   \   0000AD   05..         INC     ?V4
   \   0000AF   807B         SJMP    ??bindNumBoundTo_5
    629                }
    630              }
    631              else
    632              {
    633                if ( ((devAddr->addrMode == AddrGroup)
    634                        && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
    635                    || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
    636                                          && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
   \                     ??bindNumBoundTo_4:
   \   0000B1   85..82       MOV     DPL,?V2
   \   0000B4   85..83       MOV     DPH,?V3
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   6401         XRL     A,#0x1
   \   0000C2   7024         JNZ     ??bindNumBoundTo_6
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   6401         XRL     A,#0x1
   \   0000CC   701A         JNZ     ??bindNumBoundTo_6
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F9           MOV     R1,A
   \   0000D9   85..82       MOV     DPL,?XSP + 0
   \   0000DC   85..83       MOV     DPH,?XSP + 1
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   68           XRL     A,R0
   \   0000E1   7003         JNZ     ??bindNumBoundTo_7
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   69           XRL     A,R1
   \                     ??bindNumBoundTo_7:
   \   0000E6   6042         JZ      ??bindNumBoundTo_8
   \                     ??bindNumBoundTo_6:
   \   0000E8   85..82       MOV     DPL,?V2
   \   0000EB   85..83       MOV     DPH,?V3
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   6401         XRL     A,#0x1
   \   0000F9   6031         JZ      ??bindNumBoundTo_5
   \   0000FB   8E82         MOV     DPL,R6
   \   0000FD   8F83         MOV     DPH,R7
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   7029         JNZ     ??bindNumBoundTo_5
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F8           MOV     R0,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F9           MOV     R1,A
   \   00010E   85..82       MOV     DPL,?XSP + 0
   \   000111   85..83       MOV     DPH,?XSP + 1
   \   000114   E0           MOVX    A,@DPTR
   \   000115   68           XRL     A,R0
   \   000116   7003         JNZ     ??bindNumBoundTo_9
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   69           XRL     A,R1
   \                     ??bindNumBoundTo_9:
   \   00011B   700F         JNZ     ??bindNumBoundTo_5
   \   00011D   8E82         MOV     DPL,R6
   \   00011F   8F83         MOV     DPH,R7
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   65..         XRL     A,?V5
   \   000128   7002         JNZ     ??bindNumBoundTo_5
    637                {
    638                  num++;
   \                     ??bindNumBoundTo_8:
   \   00012A   05..         INC     ?V4
    639                }
    640              }
    641            }
   \                     ??bindNumBoundTo_5:
   \   00012C   05..         INC     ?V0
   \   00012E   E5..         MOV     A,?V0
   \   000130   7002         JNZ     ??bindNumBoundTo_10
   \   000132   05..         INC     ?V1
   \                     ??bindNumBoundTo_10:
   \   000134   02....       LJMP    ??bindNumBoundTo_2 & 0xFFFF
    642          
    643            return num;
   \                     ??bindNumBoundTo_3:
   \   000137   A9..         MOV     R1,?V4
   \   000139   7403         MOV     A,#0x3
   \   00013B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013E   7F06         MOV     R7,#0x6
   \   000140   02....       LJMP    ?BANKED_LEAVE_XDATA
    644          }
    645          
    646          /*********************************************************************
    647           * @fn          bindNumReflections
    648           *
    649           * @brief       Counts the number of reflections needed for a
    650           *              endpoint and cluster ID combo.
    651           *
    652           * @param       ep - source endpoint
    653           * @param       clusterID - matching clusterID
    654           *
    655           * @return      number of reflections needed.
    656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    657          uint16 bindNumReflections( uint8 ep, uint16 clusterID )
   \                     bindNumReflections:
    658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V5,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    659            uint16 x;
    660            BindingEntry_t *pBind;
    661            uint16 cnt = 0;
   \   00000B   75..00       MOV     ?V2,#0x0
   \   00000E   75..00       MOV     ?V3,#0x0
    662            uint8 bindEP;
    663          
    664            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000011   75..00       MOV     ?V0,#0x0
   \   000014   75..00       MOV     ?V1,#0x0
   \                     ??bindNumReflections_0:
   \   000017   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001A   E4           CLR     A
   \   00001B   93           MOVC    A,@A+DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   7401         MOV     A,#0x1
   \   00001F   93           MOVC    A,@A+DPTR
   \   000020   F9           MOV     R1,A
   \   000021   C3           CLR     C
   \   000022   E5..         MOV     A,?V0
   \   000024   98           SUBB    A,R0
   \   000025   E5..         MOV     A,?V1
   \   000027   99           SUBB    A,R1
   \   000028   5054         JNC     ??bindNumReflections_1
    665            {
    666              pBind = &BindingTable[x];
   \   00002A   A8..         MOV     R0,?V0
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   E8           MOV     A,R0
   \   00002F   75F00E       MOV     B,#0xe
   \   000032   A4           MUL     AB
   \   000033   C8           XCH     A,R0
   \   000034   AAF0         MOV     R2,B
   \   000036   75F000       MOV     B,#0x0
   \   000039   A4           MUL     AB
   \   00003A   2A           ADD     A,R2
   \   00003B   FA           MOV     R2,A
   \   00003C   75F00E       MOV     B,#0xe
   \   00003F   E9           MOV     A,R1
   \   000040   A4           MUL     AB
   \   000041   2A           ADD     A,R2
   \   000042   F9           MOV     R1,A
   \   000043   74..         MOV     A,#BindingTable & 0xff
   \   000045   28           ADD     A,R0
   \   000046   F8           MOV     R0,A
   \   000047   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000049   39           ADDC    A,R1
   \   00004A   F9           MOV     R1,A
   \   00004B   88..         MOV     ?V6,R0
   \   00004D   89..         MOV     ?V7,R1
    667              bindEP = pBind->srcEP;
   \   00004F   85..82       MOV     DPL,?V6
   \   000052   85..83       MOV     DPH,?V7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F5..         MOV     ?V4,A
    668          
    669              if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
   \   000058   E5..         MOV     A,?V5
   \   00005A   65..         XRL     A,?V4
   \   00005C   7016         JNZ     ??bindNumReflections_2
   \   00005E                ; Setup parameters for call to function bindIsClusterIDinList
   \   00005E   EE           MOV     A,R6
   \   00005F   FC           MOV     R4,A
   \   000060   EF           MOV     A,R7
   \   000061   FD           MOV     R5,A
   \   000062   AA..         MOV     R2,?V6
   \   000064   AB..         MOV     R3,?V7
   \   000066   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000069   E9           MOV     A,R1
   \   00006A   6008         JZ      ??bindNumReflections_2
    670              {
    671                cnt++;
   \   00006C   05..         INC     ?V2
   \   00006E   E5..         MOV     A,?V2
   \   000070   7002         JNZ     ??bindNumReflections_2
   \   000072   05..         INC     ?V3
    672              }
    673            }
   \                     ??bindNumReflections_2:
   \   000074   05..         INC     ?V0
   \   000076   E5..         MOV     A,?V0
   \   000078   709D         JNZ     ??bindNumReflections_0
   \   00007A   05..         INC     ?V1
   \   00007C   8099         SJMP    ??bindNumReflections_0
    674          
    675            return ( cnt );
   \                     ??bindNumReflections_1:
   \   00007E   AA..         MOV     R2,?V2
   \   000080   AB..         MOV     R3,?V3
   \   000082   7F08         MOV     R7,#0x8
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
    676          }
    677          
    678          /*********************************************************************
    679           * @fn          bindFind
    680           *
    681           * @brief       Finds the binding entry for the source address, endpoint
    682           *              and cluster ID passed in as a parameter.
    683           *
    684           * @param       ep - source endpoint
    685           * @param       clusterID - matching clusterID
    686           * @param       skip - number of matches to skip before returning
    687           *
    688           * @return      pointer to the binding table entry, NULL if not found
    689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    690          BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
   \                     bindFind:
    691          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V6,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V3,R4
    692            BindingEntry_t *pBind;
    693            byte skipped = 0;
   \   00000D   75..00       MOV     ?V2,#0x0
    694            uint16 x;
    695          
    696            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000010   75..00       MOV     ?V0,#0x0
   \   000013   75..00       MOV     ?V1,#0x0
   \                     ??bindFind_0:
   \   000016   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000019   E4           CLR     A
   \   00001A   93           MOVC    A,@A+DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   7401         MOV     A,#0x1
   \   00001E   93           MOVC    A,@A+DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   C3           CLR     C
   \   000021   E5..         MOV     A,?V0
   \   000023   98           SUBB    A,R0
   \   000024   E5..         MOV     A,?V1
   \   000026   99           SUBB    A,R1
   \   000027   5059         JNC     ??bindFind_1
    697            {
    698              pBind = &BindingTable[x];
   \   000029   A8..         MOV     R0,?V0
   \   00002B   A9..         MOV     R1,?V1
   \   00002D   E8           MOV     A,R0
   \   00002E   75F00E       MOV     B,#0xe
   \   000031   A4           MUL     AB
   \   000032   C8           XCH     A,R0
   \   000033   AAF0         MOV     R2,B
   \   000035   75F000       MOV     B,#0x0
   \   000038   A4           MUL     AB
   \   000039   2A           ADD     A,R2
   \   00003A   FA           MOV     R2,A
   \   00003B   75F00E       MOV     B,#0xe
   \   00003E   E9           MOV     A,R1
   \   00003F   A4           MUL     AB
   \   000040   2A           ADD     A,R2
   \   000041   F9           MOV     R1,A
   \   000042   74..         MOV     A,#BindingTable & 0xff
   \   000044   28           ADD     A,R0
   \   000045   F8           MOV     R0,A
   \   000046   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000048   39           ADDC    A,R1
   \   000049   F9           MOV     R1,A
   \   00004A   88..         MOV     ?V4,R0
   \   00004C   89..         MOV     ?V5,R1
    699          
    700              if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
   \   00004E   85..82       MOV     DPL,?V4
   \   000051   85..83       MOV     DPH,?V5
   \   000054   E0           MOVX    A,@DPTR
   \   000055   65..         XRL     A,?V6
   \   000057   701F         JNZ     ??bindFind_2
   \   000059                ; Setup parameters for call to function bindIsClusterIDinList
   \   000059   EE           MOV     A,R6
   \   00005A   FC           MOV     R4,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FD           MOV     R5,A
   \   00005D   AA..         MOV     R2,?V4
   \   00005F   AB..         MOV     R3,?V5
   \   000061   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000064   E9           MOV     A,R1
   \   000065   6011         JZ      ??bindFind_2
    701              {
    702                if ( skipped < skipping )
   \   000067   E5..         MOV     A,?V2
   \   000069   C3           CLR     C
   \   00006A   95..         SUBB    A,?V3
   \   00006C   5004         JNC     ??bindFind_3
    703                {
    704                  skipped++;
   \   00006E   05..         INC     ?V2
   \   000070   8006         SJMP    ??bindFind_2
    705                }
    706                else
    707                {
    708                  return ( pBind );
   \                     ??bindFind_3:
   \   000072   AA..         MOV     R2,?V4
   \   000074   AB..         MOV     R3,?V5
   \   000076   800E         SJMP    ??bindFind_4
    709                }
    710              }
    711            }
   \                     ??bindFind_2:
   \   000078   05..         INC     ?V0
   \   00007A   E5..         MOV     A,?V0
   \   00007C   7098         JNZ     ??bindFind_0
   \   00007E   05..         INC     ?V1
   \   000080   8094         SJMP    ??bindFind_0
    712          
    713            return ( (BindingEntry_t *)NULL );
   \                     ??bindFind_1:
   \   000082   7A00         MOV     R2,#0x0
   \   000084   7B00         MOV     R3,#0x0
   \                     ??bindFind_4:
   \   000086   7F07         MOV     R7,#0x7
   \   000088   02....       LJMP    ?BANKED_LEAVE_XDATA
    714          }
    715          
    716          /*********************************************************************
    717           * @fn          BindInitNV
    718           *
    719           * @brief       Initialize the Binding NV Item
    720           *
    721           * @param       none
    722           *
    723           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    724           *              exist in NV, NV_OPER_FAILED if failure.
    725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    726          byte BindInitNV( void )
   \                     BindInitNV:
    727          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    728            byte ret;
    729          
    730            // Initialize the device list
    731            ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
    732                            (uint16)(gBIND_REC_SIZE + NV_BIND_ITEM_SIZE), NULL );
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0,A
   \   000008   F5..         MOV     ?V1,A
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000012   C082         PUSH    DPL
   \   000014   C083         PUSH    DPH
   \   000016   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000019   E4           CLR     A
   \   00001A   93           MOVC    A,@A+DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   7401         MOV     A,#0x1
   \   00001E   93           MOVC    A,@A+DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000023   E4           CLR     A
   \   000024   93           MOVC    A,@A+DPTR
   \   000025   F5..         MOV     ?V0,A
   \   000027   7401         MOV     A,#0x1
   \   000029   93           MOVC    A,@A+DPTR
   \   00002A   F5..         MOV     ?V1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   85..F0       MOV     B,?V0
   \   000030   A4           MUL     AB
   \   000031   C8           XCH     A,R0
   \   000032   AAF0         MOV     R2,B
   \   000034   85..F0       MOV     B,?V1
   \   000037   A4           MUL     AB
   \   000038   2A           ADD     A,R2
   \   000039   FA           MOV     R2,A
   \   00003A   85..F0       MOV     B,?V0
   \   00003D   E9           MOV     A,R1
   \   00003E   A4           MUL     AB
   \   00003F   2A           ADD     A,R2
   \   000040   F9           MOV     R1,A
   \   000041   D083         POP     DPH
   \   000043   D082         POP     DPL
   \   000045   E4           CLR     A
   \   000046   93           MOVC    A,@A+DPTR
   \   000047   28           ADD     A,R0
   \   000048   FC           MOV     R4,A
   \   000049   A3           INC     DPTR
   \   00004A   E4           CLR     A
   \   00004B   93           MOVC    A,@A+DPTR
   \   00004C   39           ADDC    A,R1
   \   00004D   FD           MOV     R5,A
   \   00004E   7A41         MOV     R2,#0x41
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
   \   00005B   FE           MOV     R6,A
    733          
    734            if ( ret != ZSUCCESS )
   \   00005C   EE           MOV     A,R6
   \   00005D   6003         JZ      ??BindInitNV_0
    735            {
    736              BindSetDefaultNV();
   \   00005F                ; Setup parameters for call to function BindSetDefaultNV
   \   00005F   12....       LCALL   `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
    737            }
    738          
    739            return ( ret );
   \                     ??BindInitNV_0:
   \   000062   EE           MOV     A,R6
   \   000063   F9           MOV     R1,A
   \   000064   7F02         MOV     R7,#0x2
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
    740          }
    741          
    742          /*********************************************************************
    743           * @fn          BindSetDefaultNV
    744           *
    745           * @brief       Write the defaults to NV
    746           *
    747           * @param       none
    748           *
    749           * @return      none
    750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          void BindSetDefaultNV( void )
   \                     BindSetDefaultNV:
    752          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    753            nvBindingHdr_t hdr;
    754          
    755            // Initialize the header
    756            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    757          
    758            // Save off the header
    759            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0,#0x2
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A41         MOV     R2,#0x41
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
    760          }
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
    761          
    762          /*********************************************************************
    763           * @fn          BindRestoreFromNV
    764           *
    765           * @brief       Restore the binding table from NV
    766           *
    767           * @param       none
    768           *
    769           * @return      Number of entries restored
    770           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    771          uint16 BindRestoreFromNV( void )
   \                     BindRestoreFromNV:
    772          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    773            nvBindingHdr_t hdr;
    774            uint16 numAdded = 0;
   \   00000A   7E00         MOV     R6,#0x0
   \   00000C   7F00         MOV     R7,#0x0
    775          
    776            if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
   \   00000E                ; Setup parameters for call to function osal_nv_read
   \   00000E   A8..         MOV     R0,?XSP + 0
   \   000010   A9..         MOV     R1,?XSP + 1
   \   000012   88..         MOV     ?V0,R0
   \   000014   89..         MOV     ?V1,R1
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   75..02       MOV     ?V0,#0x2
   \   00001E   75..00       MOV     ?V1,#0x0
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   7C00         MOV     R4,#0x0
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A41         MOV     R2,#0x41
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   \   000036   E9           MOV     A,R1
   \   000037   7075         JNZ     ??BindRestoreFromNV_0
    777            {
    778              if (hdr.numRecs > 0)
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   E8           MOV     A,R0
   \   000045   49           ORL     A,R1
   \   000046   6066         JZ      ??BindRestoreFromNV_0
    779              {
    780                // Read the whole table at once
    781                if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
    782                                   (uint16)(sizeof(nvBindingHdr_t)),
    783                                   (NV_BIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES), BindingTable ) == ZSUCCESS )
   \   000048                ; Setup parameters for call to function osal_nv_read
   \   000048   75....       MOV     ?V0,#BindingTable & 0xff
   \   00004B   75....       MOV     ?V1,#(BindingTable >> 8) & 0xff
   \   00004E   78..         MOV     R0,#?V0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000056   E4           CLR     A
   \   000057   93           MOVC    A,@A+DPTR
   \   000058   F5..         MOV     ?V2,A
   \   00005A   7401         MOV     A,#0x1
   \   00005C   93           MOVC    A,@A+DPTR
   \   00005D   F5..         MOV     ?V3,A
   \   00005F   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000062   E4           CLR     A
   \   000063   93           MOVC    A,@A+DPTR
   \   000064   F5..         MOV     ?V0,A
   \   000066   7401         MOV     A,#0x1
   \   000068   93           MOVC    A,@A+DPTR
   \   000069   F5..         MOV     ?V1,A
   \   00006B   E5..         MOV     A,?V2
   \   00006D   85..F0       MOV     B,?V0
   \   000070   A4           MUL     AB
   \   000071   C5..         XCH     A,?V2
   \   000073   A8F0         MOV     R0,B
   \   000075   85..F0       MOV     B,?V1
   \   000078   A4           MUL     AB
   \   000079   28           ADD     A,R0
   \   00007A   F8           MOV     R0,A
   \   00007B   85..F0       MOV     B,?V0
   \   00007E   E5..         MOV     A,?V3
   \   000080   A4           MUL     AB
   \   000081   28           ADD     A,R0
   \   000082   F5..         MOV     ?V3,A
   \   000084   78..         MOV     R0,#?V2
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   7C02         MOV     R4,#0x2
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   7A41         MOV     R2,#0x41
   \   00008F   7B00         MOV     R3,#0x0
   \   000091   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000094   7404         MOV     A,#0x4
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   E9           MOV     A,R1
   \   00009A   7012         JNZ     ??BindRestoreFromNV_0
    784                {
    785                  numAdded = gNWK_MAX_BINDING_ENTRIES;
   \   00009C   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00009F   E4           CLR     A
   \   0000A0   93           MOVC    A,@A+DPTR
   \   0000A1   C0E0         PUSH    A
   \   0000A3   7401         MOV     A,#0x1
   \   0000A5   93           MOVC    A,@A+DPTR
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   D082         POP     DPL
   \   0000AA   AE82         MOV     R6,DPL
   \   0000AC   AF83         MOV     R7,DPH
    786                }
    787              }
    788            }
    789            return ( numAdded );
   \                     ??BindRestoreFromNV_0:
   \   0000AE   EE           MOV     A,R6
   \   0000AF   FA           MOV     R2,A
   \   0000B0   EF           MOV     A,R7
   \   0000B1   FB           MOV     R3,A
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7   7F04         MOV     R7,#0x4
   \   0000B9   02....       LJMP    ?BANKED_LEAVE_XDATA
    790          }
    791          
    792          /*********************************************************************
    793           * @fn          BindWriteNV
    794           *
    795           * @brief       Save the Binding Table in NV
    796           *
    797           * @param       none
    798           *
    799           * @return      none
    800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    801          void BindWriteNV( void )
   \                     BindWriteNV:
    802          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    803            BindingEntry_t *pBind;
    804            BindingEntry_t bind;
    805            nvBindingHdr_t hdr;
    806            uint16 x;
    807          
    808            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    809          
    810            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000017   7E00         MOV     R6,#0x0
   \   000019   7F00         MOV     R7,#0x0
   \                     ??BindWriteNV_0:
   \   00001B   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001E   E4           CLR     A
   \   00001F   93           MOVC    A,@A+DPTR
   \   000020   F8           MOV     R0,A
   \   000021   7401         MOV     A,#0x1
   \   000023   93           MOVC    A,@A+DPTR
   \   000024   F9           MOV     R1,A
   \   000025   C3           CLR     C
   \   000026   EE           MOV     A,R6
   \   000027   98           SUBB    A,R0
   \   000028   EF           MOV     A,R7
   \   000029   99           SUBB    A,R1
   \   00002A   4003         JC      $+5
   \   00002C   02....       LJMP    ??BindWriteNV_1 & 0xFFFF
    811            {
    812              pBind = &BindingTable[x];
   \   00002F   EE           MOV     A,R6
   \   000030   F8           MOV     R0,A
   \   000031   EF           MOV     A,R7
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   75F00E       MOV     B,#0xe
   \   000037   A4           MUL     AB
   \   000038   C8           XCH     A,R0
   \   000039   AAF0         MOV     R2,B
   \   00003B   75F000       MOV     B,#0x0
   \   00003E   A4           MUL     AB
   \   00003F   2A           ADD     A,R2
   \   000040   FA           MOV     R2,A
   \   000041   75F00E       MOV     B,#0xe
   \   000044   E9           MOV     A,R1
   \   000045   A4           MUL     AB
   \   000046   2A           ADD     A,R2
   \   000047   F9           MOV     R1,A
   \   000048   74..         MOV     A,#BindingTable & 0xff
   \   00004A   28           ADD     A,R0
   \   00004B   F8           MOV     R0,A
   \   00004C   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00004E   39           ADDC    A,R1
   \   00004F   F9           MOV     R1,A
   \   000050   88..         MOV     ?V4,R0
   \   000052   89..         MOV     ?V5,R1
    813          
    814              osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
   \   000054                ; Setup parameters for call to function osal_memcpy
   \   000054   85....       MOV     ?V0,?V4
   \   000057   85....       MOV     ?V1,?V5
   \   00005A   75..00       MOV     ?V2,#0x0
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000062   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000065   E4           CLR     A
   \   000066   93           MOVC    A,@A+DPTR
   \   000067   FC           MOV     R4,A
   \   000068   7401         MOV     A,#0x1
   \   00006A   93           MOVC    A,@A+DPTR
   \   00006B   FD           MOV     R5,A
   \   00006C   7405         MOV     A,#0x5
   \   00006E   12....       LCALL   ?XSTACK_DISP101_8
   \   000071   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    815          
    816              // Save the record to NV
    817              osal_nv_write( ZCD_NV_BINDING_TABLE,
    818                             (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
    819                             NV_BIND_REC_SIZE, &bind );
   \   000079                ; Setup parameters for call to function osal_nv_write
   \   000079   7402         MOV     A,#0x2
   \   00007B   12....       LCALL   ?XSTACK_DISP100_8
   \   00007E   88..         MOV     ?V0,R0
   \   000080   89..         MOV     ?V1,R1
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00008A   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   00008D   EE           MOV     A,R6
   \   00008E   F8           MOV     R0,A
   \   00008F   EF           MOV     A,R7
   \   000090   F9           MOV     R1,A
   \   000091   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000094   E4           CLR     A
   \   000095   93           MOVC    A,@A+DPTR
   \   000096   F5..         MOV     ?V0,A
   \   000098   7401         MOV     A,#0x1
   \   00009A   93           MOVC    A,@A+DPTR
   \   00009B   F5..         MOV     ?V1,A
   \   00009D   E8           MOV     A,R0
   \   00009E   85..F0       MOV     B,?V0
   \   0000A1   A4           MUL     AB
   \   0000A2   C8           XCH     A,R0
   \   0000A3   AAF0         MOV     R2,B
   \   0000A5   85..F0       MOV     B,?V1
   \   0000A8   A4           MUL     AB
   \   0000A9   2A           ADD     A,R2
   \   0000AA   FA           MOV     R2,A
   \   0000AB   85..F0       MOV     B,?V0
   \   0000AE   E9           MOV     A,R1
   \   0000AF   A4           MUL     AB
   \   0000B0   2A           ADD     A,R2
   \   0000B1   F9           MOV     R1,A
   \   0000B2   E8           MOV     A,R0
   \   0000B3   2402         ADD     A,#0x2
   \   0000B5   FC           MOV     R4,A
   \   0000B6   E4           CLR     A
   \   0000B7   39           ADDC    A,R1
   \   0000B8   FD           MOV     R5,A
   \   0000B9   7A41         MOV     R2,#0x41
   \   0000BB   7B00         MOV     R3,#0x0
   \   0000BD   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000C0   7404         MOV     A,#0x4
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   E9           MOV     A,R1
    820          
    821              if ( pBind->srcEP != NV_BIND_EMPTY )
   \   0000C6   85..82       MOV     DPL,?V4
   \   0000C9   85..83       MOV     DPH,?V5
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   64FF         XRL     A,#0xff
   \   0000CF   600F         JZ      ??BindWriteNV_2
    822              {
    823                hdr.numRecs++;
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   2401         ADD     A,#0x1
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   3400         ADDC    A,#0x0
   \   0000DF   F0           MOVX    @DPTR,A
    824              }
    825            }
   \                     ??BindWriteNV_2:
   \   0000E0   0E           INC     R6
   \   0000E1   EE           MOV     A,R6
   \   0000E2   7001         JNZ     ??BindWriteNV_3
   \   0000E4   0F           INC     R7
   \                     ??BindWriteNV_3:
   \   0000E5   02....       LJMP    ??BindWriteNV_0 & 0xFFFF
    826          
    827            // Save off the header
    828            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \                     ??BindWriteNV_1:
   \   0000E8                ; Setup parameters for call to function osal_nv_write
   \   0000E8   A8..         MOV     R0,?XSP + 0
   \   0000EA   A9..         MOV     R1,?XSP + 1
   \   0000EC   88..         MOV     ?V0,R0
   \   0000EE   89..         MOV     ?V1,R1
   \   0000F0   78..         MOV     R0,#?V0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   75..02       MOV     ?V0,#0x2
   \   0000F8   75..00       MOV     ?V1,#0x0
   \   0000FB   78..         MOV     R0,#?V0
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   7C00         MOV     R4,#0x0
   \   000102   7D00         MOV     R5,#0x0
   \   000104   7A41         MOV     R2,#0x41
   \   000106   7B00         MOV     R3,#0x0
   \   000108   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00010B   7404         MOV     A,#0x4
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   E9           MOV     A,R1
    829          }
   \   000111   7410         MOV     A,#0x10
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   \   000116   7F06         MOV     R7,#0x6
   \   000118   02....       LJMP    ?BANKED_LEAVE_XDATA
    830          
    831          /*********************************************************************
    832           * @fn          bindUpdateAddr
    833           *
    834           * @brief       Update the network address in the binding table.
    835           *
    836           * @param       oldAddr - old network address
    837           * @param       newAddr - new network address
    838           *
    839           * @return      none
    840           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
   \                     bindUpdateAddr:
    842          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   EC           MOV     A,R4
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   ED           MOV     A,R5
   \   00001E   F0           MOVX    @DPTR,A
    843            uint16 oldIdx;
    844            uint16 newIdx;
    845            zAddrType_t addr;
    846            uint16 x;
    847            BindingEntry_t *pBind;
    848          
    849            addr.addrMode = Addr16Bit;
   \   00001F   740C         MOV     A,#0xc
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7402         MOV     A,#0x2
   \   000026   F0           MOVX    @DPTR,A
    850            addr.addr.shortAddr = oldAddr;
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E8           MOV     A,R0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E9           MOV     A,R1
   \   00003A   F0           MOVX    @DPTR,A
    851            oldIdx = bindingAddrMgsHelperFind( &addr );
   \   00003B                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000043   8A..         MOV     ?V4,R2
   \   000045   8B..         MOV     ?V5,R3
   \   000047   85....       MOV     ?V6,?V4
   \   00004A   85....       MOV     ?V7,?V5
    852            addr.addr.shortAddr = newAddr;
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F8           MOV     R0,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E8           MOV     A,R0
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E9           MOV     A,R1
   \   000061   F0           MOVX    @DPTR,A
    853            newIdx = bindingAddrMgsHelperFind( &addr );
   \   000062                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000062   7404         MOV     A,#0x4
   \   000064   12....       LCALL   ?XSTACK_DISP101_8
   \   000067   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00006A   8A..         MOV     ?V4,R2
   \   00006C   8B..         MOV     ?V5,R3
   \   00006E   85....       MOV     ?V2,?V4
   \   000071   85....       MOV     ?V3,?V5
    854          
    855            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000074   7E00         MOV     R6,#0x0
   \   000076   7F00         MOV     R7,#0x0
   \                     ??bindUpdateAddr_0:
   \   000078   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00007B   E4           CLR     A
   \   00007C   93           MOVC    A,@A+DPTR
   \   00007D   F8           MOV     R0,A
   \   00007E   7401         MOV     A,#0x1
   \   000080   93           MOVC    A,@A+DPTR
   \   000081   F9           MOV     R1,A
   \   000082   C3           CLR     C
   \   000083   EE           MOV     A,R6
   \   000084   98           SUBB    A,R0
   \   000085   EF           MOV     A,R7
   \   000086   99           SUBB    A,R1
   \   000087   504E         JNC     ??bindUpdateAddr_1
    856            {
    857              pBind = &BindingTable[x];
   \   000089   EE           MOV     A,R6
   \   00008A   F8           MOV     R0,A
   \   00008B   EF           MOV     A,R7
   \   00008C   F9           MOV     R1,A
   \   00008D   E8           MOV     A,R0
   \   00008E   75F00E       MOV     B,#0xe
   \   000091   A4           MUL     AB
   \   000092   C8           XCH     A,R0
   \   000093   AAF0         MOV     R2,B
   \   000095   75F000       MOV     B,#0x0
   \   000098   A4           MUL     AB
   \   000099   2A           ADD     A,R2
   \   00009A   FA           MOV     R2,A
   \   00009B   75F00E       MOV     B,#0xe
   \   00009E   E9           MOV     A,R1
   \   00009F   A4           MUL     AB
   \   0000A0   2A           ADD     A,R2
   \   0000A1   F9           MOV     R1,A
   \   0000A2   74..         MOV     A,#BindingTable & 0xff
   \   0000A4   28           ADD     A,R0
   \   0000A5   F8           MOV     R0,A
   \   0000A6   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000A8   39           ADDC    A,R1
   \   0000A9   F9           MOV     R1,A
   \   0000AA   88..         MOV     ?V0,R0
   \   0000AC   89..         MOV     ?V1,R1
    858          
    859              if ( pBind->dstIdx == oldIdx )
   \   0000AE   85..82       MOV     DPL,?V0
   \   0000B1   85..83       MOV     DPH,?V1
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   65..         XRL     A,?V6
   \   0000B9   7004         JNZ     ??bindUpdateAddr_2
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   65..         XRL     A,?V7
   \                     ??bindUpdateAddr_2:
   \   0000BF   700F         JNZ     ??bindUpdateAddr_3
    860              {
    861                pBind->dstIdx = newIdx;
   \   0000C1   85..82       MOV     DPL,?V0
   \   0000C4   85..83       MOV     DPH,?V1
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   E5..         MOV     A,?V2
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E5..         MOV     A,?V3
   \   0000CF   F0           MOVX    @DPTR,A
    862              }
    863            }
   \                     ??bindUpdateAddr_3:
   \   0000D0   0E           INC     R6
   \   0000D1   EE           MOV     A,R6
   \   0000D2   70A4         JNZ     ??bindUpdateAddr_0
   \   0000D4   0F           INC     R7
   \   0000D5   80A1         SJMP    ??bindUpdateAddr_0
    864          }
   \                     ??bindUpdateAddr_1:
   \   0000D7   740D         MOV     A,#0xd
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   7F08         MOV     R7,#0x8
   \   0000DE   02....       LJMP    ?BANKED_LEAVE_XDATA
    865          
    866          /*********************************************************************
    867           * @fn      bindingAddrMgsHelperFind
    868           *
    869           * @brief   Turns an zAddrType_t to an Addr Manager index
    870           *
    871           * @param   addr - zAddrType_t
    872           *
    873           * @return  INVALID_NODE_ADDR if not found, otherwise an index
    874           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    875          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
   \                     bindingAddrMgsHelperFind:
    876          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    877            AddrMgrEntry_t entry;
    878          
    879            // Resolve addresses with the address manager
    880            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7404         MOV     A,#0x4
   \   000016   F0           MOVX    @DPTR,A
    881            if ( addr->addrMode == Addr16Bit )
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6402         XRL     A,#0x2
   \   000026   701D         JNZ     ??bindingAddrMgsHelperFind_0
    882            {
    883              entry.nwkAddr = addr->addr.shortAddr;
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E8           MOV     A,R0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E9           MOV     A,R1
   \   00003A   F0           MOVX    @DPTR,A
    884              AddrMgrEntryLookupNwk( &entry );
   \   00003B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00003B   AA..         MOV     R2,?XSP + 0
   \   00003D   AB..         MOV     R3,?XSP + 1
   \   00003F   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000042   E9           MOV     A,R1
   \   000043   8018         SJMP    ??bindingAddrMgsHelperFind_1
    885            }
    886            else
    887            {
    888              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \                     ??bindingAddrMgsHelperFind_0:
   \   000045                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000045   EE           MOV     A,R6
   \   000046   FC           MOV     R4,A
   \   000047   EF           MOV     A,R7
   \   000048   FD           MOV     R5,A
   \   000049   7403         MOV     A,#0x3
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   \   000052   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    889              AddrMgrEntryLookupExt( &entry );
   \   000055                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000055   AA..         MOV     R2,?XSP + 0
   \   000057   AB..         MOV     R3,?XSP + 1
   \   000059   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00005C   E9           MOV     A,R1
    890            }
    891          
    892            return ( entry.index );
   \                     ??bindingAddrMgsHelperFind_1:
   \   00005D   740B         MOV     A,#0xb
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FB           MOV     R3,A
   \   000067   740D         MOV     A,#0xd
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   7F01         MOV     R7,#0x1
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
    893          }
    894          
    895          /*********************************************************************
    896           * @fn      bindingAddrMgsHelperConvert
    897           *
    898           * @brief   Convert an index into an zAddrType_t
    899           *
    900           * @param   idx -
    901           * @param   addr - zAddrType_t
    902           *
    903           * @return  TRUE if found, FALSE if not
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
   \                     bindingAddrMgsHelperConvert:
    906          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    907            AddrMgrEntry_t entry;
    908            uint8 stat;
    909          
    910            // Resolve addresses with the address manager
    911            entry.user = ADDRMGR_USER_BINDING;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   7404         MOV     A,#0x4
   \   00001A   F0           MOVX    @DPTR,A
    912            entry.index = idx;
   \   00001B   740B         MOV     A,#0xb
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E5..         MOV     A,?V0
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E5..         MOV     A,?V1
   \   000026   F0           MOVX    @DPTR,A
    913            stat = AddrMgrEntryGet( &entry );
   \   000027                ; Setup parameters for call to function AddrMgrEntryGet
   \   000027   AA..         MOV     R2,?XSP + 0
   \   000029   AB..         MOV     R3,?XSP + 1
   \   00002B   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   00002E   E9           MOV     A,R1
   \   00002F   F5..         MOV     ?V2,A
    914            if ( stat )
   \   000031   E5..         MOV     A,?V2
   \   000033   601F         JZ      ??bindingAddrMgsHelperConvert_0
    915            {
    916              addr->addrMode = Addr64Bit;
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   7403         MOV     A,#0x3
   \   000043   F0           MOVX    @DPTR,A
    917              osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
   \   000044                ; Setup parameters for call to function sAddrExtCpy
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   AC82         MOV     R4,DPL
   \   00004B   AD83         MOV     R5,DPH
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    918            }
    919          
    920            return ( stat );
   \                     ??bindingAddrMgsHelperConvert_0:
   \   000054   A9..         MOV     R1,?V2
   \   000056   740D         MOV     A,#0xd
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   7F03         MOV     R7,#0x3
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
    921          }
    922          
    923          /*********************************************************************
    924           * @fn      bindingAddrMgsHelperConvertShort
    925           *
    926           * @brief   Convert an index into a short address
    927           *
    928           * @param   idx -
    929           *
    930           * @return  INVALID_NODE_ADDR if not available, otherwise the short address
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
   \                     bindingAddrMgsHelperConvertShort:
    933          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    934            AddrMgrEntry_t entry;
    935          
    936            // Resolve addresses with the address manager
    937            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7404         MOV     A,#0x4
   \   000016   F0           MOVX    @DPTR,A
    938            entry.index = idx;
   \   000017   740B         MOV     A,#0xb
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   EE           MOV     A,R6
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   EF           MOV     A,R7
   \   000020   F0           MOVX    @DPTR,A
    939            AddrMgrEntryGet( &entry );
   \   000021                ; Setup parameters for call to function AddrMgrEntryGet
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000028   E9           MOV     A,R1
    940          
    941            return ( entry.nwkAddr );
   \   000029   7401         MOV     A,#0x1
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FB           MOV     R3,A
   \   000033   740D         MOV     A,#0xd
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   7F01         MOV     R7,#0x1
   \   00003A   02....       LJMP    ?BANKED_LEAVE_XDATA
    942          }
    943          
    944          /*********************************************************************
    945           * @fn      bindAddrMgrLocalLoad
    946           *
    947           * @brief   Load local(self and parent) address information into
    948           *          Address Manager
    949           *
    950           * @param   none
    951           *
    952           * @return  none
    953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    954          void bindAddrMgrLocalLoad( void )
   \                     bindAddrMgrLocalLoad:
    955          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    956            AddrMgrEntry_t entry;
    957            uint16         parent;
    958          
    959            // add "local"(self and parent) address informtion into the Address
    960            // Manager
    961            if ( bindAddrMgrLocalLoaded == FALSE )
   \   00000A   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      $+5
   \   000010   02....       LJMP    ??bindAddrMgrLocalLoad_0 & 0xFFFF
    962            {
    963              // add the device's address information
    964              entry.user    = ADDRMGR_USER_BINDING;
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
    965              entry.nwkAddr = _NIB.nwkDevAddress;
   \   00001C   90....       MOV     DPTR,#_NIB + 20
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E8           MOV     A,R0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E9           MOV     A,R1
   \   00002D   F0           MOVX    @DPTR,A
    966              AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
   \   00002E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00002E   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000031   8A..         MOV     ?V0,R2
   \   000033   8B..         MOV     ?V1,R3
   \   000035   AC..         MOV     R4,?V0
   \   000037   AD..         MOV     R5,?V1
   \   000039                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   \   000042   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    967              AddrMgrEntryUpdate( &entry );
   \   000045                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000045   AA..         MOV     R2,?XSP + 0
   \   000047   AB..         MOV     R3,?XSP + 1
   \   000049   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004C   E9           MOV     A,R1
    968          
    969              // make sure parent address is valid
    970              parent = NLME_GetCoordShortAddr();
   \   00004D                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004D   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000050   8A..         MOV     ?V0,R2
   \   000052   8B..         MOV     ?V1,R3
   \   000054   AE..         MOV     R6,?V0
   \   000056   AF..         MOV     R7,?V1
    971              if ( ( parent != entry.nwkAddr     ) &&
    972                   ( parent != INVALID_NODE_ADDR )    )
   \   000058   7401         MOV     A,#0x1
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6E           XRL     A,R6
   \   00005F   7003         JNZ     ??bindAddrMgrLocalLoad_1
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   6F           XRL     A,R7
   \                     ??bindAddrMgrLocalLoad_1:
   \   000064   6028         JZ      ??bindAddrMgrLocalLoad_2
   \   000066   74FE         MOV     A,#-0x2
   \   000068   6E           XRL     A,R6
   \   000069   7003         JNZ     ??bindAddrMgrLocalLoad_3
   \   00006B   74FF         MOV     A,#-0x1
   \   00006D   6F           XRL     A,R7
   \                     ??bindAddrMgrLocalLoad_3:
   \   00006E   601E         JZ      ??bindAddrMgrLocalLoad_2
    973              {
    974                // add the parent's address information
    975                entry.nwkAddr = parent;
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   EE           MOV     A,R6
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   EF           MOV     A,R7
   \   000079   F0           MOVX    @DPTR,A
    976                NLME_GetCoordExtAddr( entry.extAddr );
   \   00007A                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00007A   7403         MOV     A,#0x3
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   AA82         MOV     R2,DPL
   \   000081   AB83         MOV     R3,DPH
   \   000083   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
    977                AddrMgrEntryUpdate( &entry );
   \   000086                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000086   AA..         MOV     R2,?XSP + 0
   \   000088   AB..         MOV     R3,?XSP + 1
   \   00008A   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00008D   E9           MOV     A,R1
    978              }
    979          
    980              bindAddrMgrLocalLoaded = TRUE;
   \                     ??bindAddrMgrLocalLoad_2:
   \   00008E   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000091   7401         MOV     A,#0x1
   \   000093   F0           MOVX    @DPTR,A
    981            }
    982          }
   \                     ??bindAddrMgrLocalLoad_0:
   \   000094   740D         MOV     A,#0xd
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   7F02         MOV     R7,#0x2
   \   00009B   02....       LJMP    ?BANKED_LEAVE_XDATA
    983          
    984          /*********************************************************************
    985           * @fn      bindAddrIndexGet
    986           *
    987           * @brief   Get bind address index.
    988           *
    989           * @param   addr - <zAddrType_t>
    990           *
    991           * @return  (uint16) address index
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          uint16 bindAddrIndexGet( zAddrType_t* addr )
   \                     bindAddrIndexGet:
    994          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    995            AddrMgrEntry_t entry;
    996            uint8          update;
    997          
    998            update = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
    999          
   1000            // sync binding addresses with the address manager
   1001            entry.user = ADDRMGR_USER_BINDING;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   7404         MOV     A,#0x4
   \   000019   F0           MOVX    @DPTR,A
   1002          
   1003            if ( addr->addrMode == Addr16Bit )
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6402         XRL     A,#0x2
   \   000029   7022         JNZ     ??bindAddrIndexGet_0
   1004            {
   1005              entry.nwkAddr = addr->addr.shortAddr;
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   1006          
   1007              if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
   \   00003E                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00003E   AA..         MOV     R2,?XSP + 0
   \   000040   AB..         MOV     R3,?XSP + 1
   \   000042   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000045   E9           MOV     A,R1
   \   000046   7067         JNZ     ??bindAddrIndexGet_1
   1008              {
   1009                update = TRUE;
   \   000048   75..01       MOV     ?V0,#0x1
   \   00004B   8062         SJMP    ??bindAddrIndexGet_1
   1010              }
   1011            }
   1012            else if ( addr->addrMode == Addr64Bit )
   \                     ??bindAddrIndexGet_0:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6403         XRL     A,#0x3
   \   00005C   701F         JNZ     ??bindAddrIndexGet_2
   1013            {
   1014              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \   00005E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00005E   EE           MOV     A,R6
   \   00005F   FC           MOV     R4,A
   \   000060   EF           MOV     A,R7
   \   000061   FD           MOV     R5,A
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   AA82         MOV     R2,DPL
   \   000069   AB83         MOV     R3,DPH
   \   00006B   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1015          
   1016              if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
   \   00006E                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00006E   AA..         MOV     R2,?XSP + 0
   \   000070   AB..         MOV     R3,?XSP + 1
   \   000072   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000075   E9           MOV     A,R1
   \   000076   7037         JNZ     ??bindAddrIndexGet_1
   1017              {
   1018                update = TRUE;
   \   000078   75..01       MOV     ?V0,#0x1
   \   00007B   8032         SJMP    ??bindAddrIndexGet_1
   1019              }
   1020            }
   1021            else if ( addr->addrMode == AddrGroup )
   \                     ??bindAddrIndexGet_2:
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   6401         XRL     A,#0x1
   \   00008C   7015         JNZ     ??bindAddrIndexGet_3
   1022            {
   1023              entry.index = addr->addr.shortAddr;
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F8           MOV     R0,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F9           MOV     R1,A
   \   000097   740B         MOV     A,#0xb
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   E8           MOV     A,R0
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   E9           MOV     A,R1
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   800C         SJMP    ??bindAddrIndexGet_1
   1024            }
   1025            else
   1026            {
   1027              entry.index = INVALID_NODE_ADDR;
   \                     ??bindAddrIndexGet_3:
   \   0000A3   740B         MOV     A,#0xb
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   74FE         MOV     A,#-0x2
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   74FF         MOV     A,#-0x1
   \   0000AE   F0           MOVX    @DPTR,A
   1028            }
   1029          
   1030            if ( update )
   \                     ??bindAddrIndexGet_1:
   \   0000AF   E5..         MOV     A,?V0
   \   0000B1   6008         JZ      ??bindAddrIndexGet_4
   1031            {
   1032              AddrMgrEntryUpdate( &entry );
   \   0000B3                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0000B3   AA..         MOV     R2,?XSP + 0
   \   0000B5   AB..         MOV     R3,?XSP + 1
   \   0000B7   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   0000BA   E9           MOV     A,R1
   1033            }
   1034          
   1035            return entry.index;
   \                     ??bindAddrIndexGet_4:
   \   0000BB   740B         MOV     A,#0xb
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   FA           MOV     R2,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FB           MOV     R3,A
   \   0000C5   740D         MOV     A,#0xd
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   7F01         MOV     R7,#0x1
   \   0000CC   02....       LJMP    ?BANKED_LEAVE_XDATA
   1036          }
   1037          
   1038          /*********************************************************************
   1039           * @fn      GetBindingTableEntry
   1040           *
   1041           * @brief   Get a pointer to the Nth valid binding table entry.
   1042           *
   1043           * @param   Nth valid entry being requested.
   1044           *
   1045           * @return  The Nth valid binding table entry.
   1046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047          BindingEntry_t *GetBindingTableEntry( uint16 Nth )
   \                     GetBindingTableEntry:
   1048          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1049            BindingEntry_t *rtrn = NULL;
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   7B00         MOV     R3,#0x0
   1050          
   1051          #if defined ( REFLECTOR )
   1052            uint16 idx, cnt = 0;
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
   1053          
   1054            for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
   \   000011   7800         MOV     R0,#0x0
   \   000013   7900         MOV     R1,#0x0
   \                     ??GetBindingTableEntry_0:
   \   000015   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000018   E4           CLR     A
   \   000019   93           MOVC    A,@A+DPTR
   \   00001A   FC           MOV     R4,A
   \   00001B   7401         MOV     A,#0x1
   \   00001D   93           MOVC    A,@A+DPTR
   \   00001E   FD           MOV     R5,A
   \   00001F   C3           CLR     C
   \   000020   E8           MOV     A,R0
   \   000021   9C           SUBB    A,R4
   \   000022   E9           MOV     A,R1
   \   000023   9D           SUBB    A,R5
   \   000024   5074         JNC     ??GetBindingTableEntry_1
   1055            {
   1056              if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
   \   000026   E8           MOV     A,R0
   \   000027   FC           MOV     R4,A
   \   000028   E9           MOV     A,R1
   \   000029   FD           MOV     R5,A
   \   00002A   EC           MOV     A,R4
   \   00002B   75F00E       MOV     B,#0xe
   \   00002E   A4           MUL     AB
   \   00002F   CC           XCH     A,R4
   \   000030   85F0..       MOV     ?V2,B
   \   000033   75F000       MOV     B,#0x0
   \   000036   A4           MUL     AB
   \   000037   25..         ADD     A,?V2
   \   000039   F5..         MOV     ?V2,A
   \   00003B   75F00E       MOV     B,#0xe
   \   00003E   ED           MOV     A,R5
   \   00003F   A4           MUL     AB
   \   000040   25..         ADD     A,?V2
   \   000042   FD           MOV     R5,A
   \   000043   74..         MOV     A,#BindingTable & 0xff
   \   000045   2C           ADD     A,R4
   \   000046   F582         MOV     DPL,A
   \   000048   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00004A   3D           ADDC    A,R5
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   64FF         XRL     A,#0xff
   \   000050   6040         JZ      ??GetBindingTableEntry_2
   1057              {
   1058                if ( cnt++ == Nth )
   \   000052   EE           MOV     A,R6
   \   000053   FC           MOV     R4,A
   \   000054   EF           MOV     A,R7
   \   000055   FD           MOV     R5,A
   \   000056   EC           MOV     A,R4
   \   000057   2401         ADD     A,#0x1
   \   000059   FE           MOV     R6,A
   \   00005A   E4           CLR     A
   \   00005B   3D           ADDC    A,R5
   \   00005C   FF           MOV     R7,A
   \   00005D   E5..         MOV     A,?V0
   \   00005F   6C           XRL     A,R4
   \   000060   7003         JNZ     ??GetBindingTableEntry_3
   \   000062   E5..         MOV     A,?V1
   \   000064   6D           XRL     A,R5
   \                     ??GetBindingTableEntry_3:
   \   000065   702B         JNZ     ??GetBindingTableEntry_2
   1059                {
   1060                  rtrn = BindingTable+idx;
   \   000067   E8           MOV     A,R0
   \   000068   FC           MOV     R4,A
   \   000069   E9           MOV     A,R1
   \   00006A   FD           MOV     R5,A
   \   00006B   EC           MOV     A,R4
   \   00006C   75F00E       MOV     B,#0xe
   \   00006F   A4           MUL     AB
   \   000070   CC           XCH     A,R4
   \   000071   85F0..       MOV     ?V2,B
   \   000074   75F000       MOV     B,#0x0
   \   000077   A4           MUL     AB
   \   000078   25..         ADD     A,?V2
   \   00007A   F5..         MOV     ?V2,A
   \   00007C   75F00E       MOV     B,#0xe
   \   00007F   ED           MOV     A,R5
   \   000080   A4           MUL     AB
   \   000081   25..         ADD     A,?V2
   \   000083   FD           MOV     R5,A
   \   000084   74..         MOV     A,#BindingTable & 0xff
   \   000086   2C           ADD     A,R4
   \   000087   FC           MOV     R4,A
   \   000088   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00008A   3D           ADDC    A,R5
   \   00008B   FD           MOV     R5,A
   \   00008C   EC           MOV     A,R4
   \   00008D   FA           MOV     R2,A
   \   00008E   ED           MOV     A,R5
   \   00008F   FB           MOV     R3,A
   1061                  break;
   \   000090   8008         SJMP    ??GetBindingTableEntry_1
   1062                }
   1063              }
   1064            }
   \                     ??GetBindingTableEntry_2:
   \   000092   08           INC     R0
   \   000093   E8           MOV     A,R0
   \   000094   7001         JNZ     ??GetBindingTableEntry_4
   \   000096   09           INC     R1
   \                     ??GetBindingTableEntry_4:
   \   000097   02....       LJMP    ??GetBindingTableEntry_0 & 0xFFFF
   1065          #else
   1066            (void)Nth;
   1067          #endif
   1068          
   1069            return rtrn;
   \                     ??GetBindingTableEntry_1:
   \   00009A   7F03         MOV     R7,#0x3
   \   00009C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1070          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitBindingTable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBindingTable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindEmpty::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindEmpty

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumOfEntries::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumOfEntries

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindCapacity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindCapacity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindIsClusterIDinList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindIsClusterIDinList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveClusterIdFromList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveClusterIdFromList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddClusterIdToList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddClusterIdToList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindExisting::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindExisting

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveSrcDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveSrcDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumBoundTo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumBoundTo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumReflections::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumReflections

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindRestoreFromNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindUpdateAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindUpdateAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvert::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvert

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvertShort::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvertShort

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrMgrLocalLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrMgrLocalLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrIndexGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrIndexGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GetBindingTableEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetBindingTableEntry
   1071          
   1072          /*********************************************************************
   1073          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     12   BindInitNV
        0     10   -> BindSetDefaultNV
        0     12   -> osal_nv_item_init
      0     18   BindRestoreFromNV
        0     18   -> osal_nv_read
      0     26   BindSetDefaultNV
        0     16   -> osal_nv_write
      0     34   BindWriteNV
        0     33   -> osal_memcpy
        0     34   -> osal_nv_write
      0     11   GetBindingTableEntry
      0     10   InitBindingTable
        0     10   -> osal_memset
      0     38   bindAddClusterIdToList
      1     34   bindAddEntry
        0     29   -> bindAddClusterIdToList
        0     29   -> bindAddrIndexGet
        0     29   -> bindAddrMgrLocalLoad
        0     29   -> bindFindEmpty
        0     29   -> bindIsClusterIDinList
        0     32   -> osal_memcpy
      0     51   bindAddrIndexGet
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrEntryLookupNwk
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0     52   bindAddrMgrLocalLoad
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
        0     23   -> NLME_GetCoordExtAddr
        0     23   -> NLME_GetCoordShortAddr
        0     23   -> NLME_GetExtAddr
      0     11   bindCapacity
      0     15   bindFind
        0     15   -> bindIsClusterIDinList
      2     29   bindFindEmpty
      0     16   bindFindExisting
        0     16   -> bindingAddrMgsHelperFind
      0     38   bindIsClusterIDinList
      1     17   bindNumBoundTo
        0     17   -> bindingAddrMgsHelperFind
      0      9   bindNumOfEntries
      0     16   bindNumReflections
        0     16   -> bindIsClusterIDinList
      0     11   bindRemoveClusterIdFromList
      0     14   bindRemoveDev
        0     14   -> bindRemoveEntry
        0     14   -> bindingAddrMgsHelperFind
      0     23   bindRemoveEntry
        0      9   -> osal_memset
      0      9   bindRemoveSrcDev
        0      9   -> bindRemoveEntry
      0     29   bindUpdateAddr
        0     29   -> bindingAddrMgsHelperFind
      0     24   bindingAddrMgsHelperConvert
        0     24   -> AddrMgrEntryGet
        0     24   -> sAddrExtCpy
      0     22   bindingAddrMgsHelperConvertShort
        0     22   -> AddrMgrEntryGet
      0     51   bindingAddrMgsHelperFind
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrEntryLookupNwk
        0     22   -> AddrMgrExtAddrSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     105  BindInitNV
       6  BindInitNV::?relay
     188  BindRestoreFromNV
       6  BindRestoreFromNV::?relay
      74  BindSetDefaultNV
       6  BindSetDefaultNV::?relay
     283  BindWriteNV
       6  BindWriteNV::?relay
     159  GetBindingTableEntry
       6  GetBindingTableEntry::?relay
     138  InitBindingTable
       6  InitBindingTable::?relay
     106  bindAddClusterIdToList
       6  bindAddClusterIdToList::?relay
     760  bindAddEntry
       6  bindAddEntry::?relay
     207  bindAddrIndexGet
       6  bindAddrIndexGet::?relay
     158  bindAddrMgrLocalLoad
       6  bindAddrMgrLocalLoad::?relay
       1  bindAddrMgrLocalLoaded
     130  bindCapacity
       6  bindCapacity::?relay
     139  bindFind
       6  bindFind::?relay
     114  bindFindEmpty
       6  bindFindEmpty::?relay
     452  bindFindExisting
       6  bindFindExisting::?relay
      89  bindIsClusterIDinList
       6  bindIsClusterIDinList::?relay
     323  bindNumBoundTo
       6  bindNumBoundTo::?relay
     127  bindNumOfEntries
       6  bindNumOfEntries::?relay
     135  bindNumReflections
       6  bindNumReflections::?relay
     242  bindRemoveClusterIdFromList
       6  bindRemoveClusterIdFromList::?relay
     357  bindRemoveDev
       6  bindRemoveDev::?relay
      35  bindRemoveEntry
       6  bindRemoveEntry::?relay
     123  bindRemoveSrcDev
       6  bindRemoveSrcDev::?relay
     225  bindUpdateAddr
       6  bindUpdateAddr::?relay
      96  bindingAddrMgsHelperConvert
       6  bindingAddrMgsHelperConvert::?relay
      61  bindingAddrMgsHelperConvertShort
       6  bindingAddrMgsHelperConvertShort::?relay
     113  bindingAddrMgsHelperFind
       6  bindingAddrMgsHelperFind::?relay
       2  pBindInitNV
       2  pBindRestoreFromNV
       2  pBindSetDefaultNV
       2  pBindWriteNV
       2  pbindAddEntry
       2  pbindNumOfEntries
       2  pbindRemoveDev

 
 4 939 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
    15 bytes in segment XDATA_Z
 
 5 095 bytes of CODE  memory
    15 bytes of XDATA memory

Errors: none
Warnings: none
