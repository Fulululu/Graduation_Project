###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:20
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\design\ZStack-2.5.1a\Components\mac\low_level\srf04\mac_rx.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\mac\low_level\srf04\mac_rx.c -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
#        -D xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\mac_rx.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\mac_rx.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
      4            Revision:       $Revision: 15624 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* OSAL */
     50          #include "OSAL.h"
     51          
     52          /* high-level */
     53          #include "mac_high_level.h"
     54          #include "mac_spec.h"
     55          
     56          /* MAC security */
     57          #include "mac_security.h"
     58          
     59          /* exported low-level */
     60          #include "mac_low_level.h"
     61          
     62          /* low-level specific */
     63          #include "mac_rx.h"
     64          #include "mac_tx.h"
     65          #include "mac_rx_onoff.h"
     66          #include "mac_radio.h"
     67          
     68          /* target specific */
     69          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     70          #include "mac_autopend.h"
     71          
     72          /* debug */
     73          #include "mac_assert.h"
     74          
     75          
     76          /* ------------------------------------------------------------------------------------------------
     77           *                                            Defines
     78           * ------------------------------------------------------------------------------------------------
     79           */
     80          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     81          
     82          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     83          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     84                                             MAC_FCF_FIELD_LEN      +  \
     85                                             MAC_SEQ_NUM_FIELD_LEN  +  \
     86                                             MAC_FCS_FIELD_LEN)
     87          
     88          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
     89          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
     90          
     91          /* addressing mode reserved value */
     92          #define ADDR_MODE_RESERVERED  1
     93          
     94          /* length of command frame identifier */
     95          #define CMD_FRAME_ID_LEN      1
     96          
     97          /* packet size mask is equal to the maximum value */
     98          #define PHY_PACKET_SIZE_MASK  0x7F
     99          
    100          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
    101          #define PROMISCUOUS_MODE_OFF  0x00
    102          
    103          /* bit of proprietary FCS format that indicates if the CRC is OK */
    104          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
    105          
    106          /* dummy length value for unused entry in lookup table */
    107          #define DUMMY_LEN   0xBE
    108          
    109          /* value for rxThresholdIntState */
    110          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    111          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    112          #define RX_THRESHOLD_INT_STATE_RESET      2
    113          
    114          
    115          /* ------------------------------------------------------------------------------------------------
    116           *                                             Macros
    117           * ------------------------------------------------------------------------------------------------
    118           */
    119          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    120          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    121          
    122          /*
    123           *  Macro for encoding frame control information into internal flags format.
    124           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    125           *  format *or* the specification changes, this macro will need to be modified.
    126           */
    127          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    128          
    129          /*
    130           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    131           *  the same length as the original and includes:
    132           *    1) the RSSI value
    133           *    2) the average correlation value (used for LQI)
    134           *    3) a CRC passed bit
    135           *
    136           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    137           */
    138          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    139          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    140          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    141          
    142          /*
    143           *  Macros for security control field.
    144           */
    145          #define SECURITY_LEVEL(s)                       (s & 0x07)
    146          #define KEY_IDENTIFIER_MODE(s)                  ((s & 0x18) >> 3)
    147          #define SECURITY_CONTROL_RESERVED(s)            ((s & 0xE0) >> 5)
    148          
    149          /* ------------------------------------------------------------------------------------------------
    150           *                                       Global Variables
    151           * ------------------------------------------------------------------------------------------------
    152           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    156          
    157          
    158          /* ------------------------------------------------------------------------------------------------
    159           *                                       Local Constants
    160           * ------------------------------------------------------------------------------------------------
    161           */

   \                                 In  segment CODE_C, align 1
    162          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    163          {
    164            0,                                                /* no address */
    165            DUMMY_LEN,                                        /* reserved */
    166            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    167            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    168          };
    169          
    170          
    171          /* ------------------------------------------------------------------------------------------------
    172           *                                       Local Prototypes
    173           * ------------------------------------------------------------------------------------------------
    174           */
    175          static void rxHaltCleanupFinalStep(void);
    176          
    177          static void rxStartIsr(void);
    178          static void rxAddrIsr(void);
    179          
    180          #ifdef MAC_SECURITY
    181            static void rxSecurityHdrIsr(void);
    182          #endif
    183            
    184          static void rxPayloadIsr(void);
    185          static void rxDiscardIsr(void);
    186          static void rxFcsIsr(void);
    187          
    188          static void rxPrepPayload(void);
    189          static void rxDiscardFrame(void);
    190          static void rxDone(void);
    191          static void rxPostRxUpdates(void);
    192          
    193          
    194          /* ------------------------------------------------------------------------------------------------
    195           *                                         Local Variables
    196           * ------------------------------------------------------------------------------------------------
    197           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    200          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    210          
    211          #ifdef PACKET_FILTER_STATS
    212            uint32      rxCrcFailure = 0;
    213            uint32      rxCrcSuccess = 0;
    214          #endif /* PACKET_FILTER_STATS */
    215          
    216          #ifdef CC2591_COMPRESSION_WORKAROUND
    217            void macRxResetRssi(void);
    218          #endif
    219          
    220          /**************************************************************************************************
    221           * @fn          macRxInit
    222           *
    223           * @brief       Initialize receive variable states.
    224           *
    225           * @param       none
    226           *
    227           * @return      none
    228           **************************************************************************************************
    229           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    231          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    232            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV     DPTR,#macRxFilter
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
    233            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   00000A   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    234            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   000010   90....       MOV     DPTR,#pRxBuf
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
    235            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   00001A   90....       MOV     DPTR,#macRxActive
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
    236            pFuncRxState         = &rxStartIsr;
   \   000020   90....       MOV     DPTR,#pFuncRxState
   \   000023   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000029   F0           MOVX    @DPTR,A
    237            macRxOutgoingAckFlag = 0;
   \   00002A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00002D   7400         MOV     A,#0x0
   \   00002F   F0           MOVX    @DPTR,A
    238            rxIsrActiveFlag      = 0;
   \   000030   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
    239            rxResetFlag          = 0;
   \   000036   90....       MOV     DPTR,#rxResetFlag
   \   000039   7400         MOV     A,#0x0
   \   00003B   F0           MOVX    @DPTR,A
    240            rxFifoOverflowCount  = 0;
   \   00003C   90....       MOV     DPTR,#rxFifoOverflowCount
   \   00003F   7400         MOV     A,#0x0
   \   000041   F0           MOVX    @DPTR,A
    241          }
   \   000042   D083         POP     DPH
   \   000044   D082         POP     DPL
   \   000046   02....       LJMP    ?BRET
    242          
    243          
    244          /**************************************************************************************************
    245           * @fn          macRxRadioPowerUpInit
    246           *
    247           * @brief       Initialization for after radio first powers up.
    248           *
    249           * @param       none
    250           *
    251           * @return      none
    252           **************************************************************************************************
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    255          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    256            /* set threshold at initial value */
    257            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV     DPTR,#0x6194
   \   000007   7405         MOV     A,#0x5
   \   000009   F0           MOVX    @DPTR,A
    258          
    259            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    260            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   00000A   A2AF         MOV     C,0xa8.7
   \   00000C   E4           CLR     A
   \   00000D   33           RLC     A
   \   00000E   F8           MOV     R0,A
   \   00000F   C2AF         CLR     0xa8.7
   \   000011   759B00       MOV     0x9b,#0x0
   \   000014   75E9FB       MOV     0xe9,#-0x5
   \   000017   E8           MOV     A,R0
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001C   92AF         MOV     0xa8.7,C
    261          
    262            /* enable threshold interrupts */
    263            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   00001E   9061A3       MOV     DPTR,#0x61a3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   D2E2         SETB    0xE0 /* A   */.2
   \   000024   F0           MOVX    @DPTR,A
    264          }
   \   000025   D083         POP     DPH
   \   000027   D082         POP     DPL
   \   000029   02....       LJMP    ?BRET
   \   00002C                REQUIRE _A_IEN0
   \   00002C                REQUIRE S1CON
   \   00002C                REQUIRE RFIRQF0
    265          
    266          
    267          /**************************************************************************************************
    268           * @fn          macRxTxReset
    269           *
    270           * @brief       Reset the receive state.
    271           *
    272           * @param       none
    273           *
    274           * @return      none
    275           **************************************************************************************************
    276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    277          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    278          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    279            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    280            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL   `??macRxHardDisable::?relay`; Banked call to: macRxHardDisable
    281          
    282            /*
    283             *   Note : transmit does not require any reset logic
    284             *          beyond what macRxHardDisable() provides.
    285             */
    286          
    287            /* restore deault filter mode to off */
    288            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV     DPTR,#macRxFilter
   \   00000A   7400         MOV     A,#0x0
   \   00000C   F0           MOVX    @DPTR,A
    289          
    290            /* return promiscuous mode to default off state */
    291            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000D                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   `??macRxPromiscuousMode::?relay`; Banked call to: macRxPromiscuousMode
    292          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    293          
    294          
    295          /**************************************************************************************************
    296           * @fn          macRxHaltCleanup
    297           *
    298           * @brief       Cleanup up the receive logic after receiver is forced off.
    299           *
    300           * @param       none
    301           *
    302           * @return      none
    303           **************************************************************************************************
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    306          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    307            rxResetFlag = 1;
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    308            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7009         JNZ     ??macRxHaltCleanup_0
    309            {
    310              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL   `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    311              rxResetFlag = 0;
   \   000013   90....       MOV     DPTR,#rxResetFlag
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
    312            }
    313          }
   \                     ??macRxHaltCleanup_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    314          
    315          
    316          /*=================================================================================================
    317           * @fn          rxHaltCleanupFinalStep
    318           *
    319           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    320           *
    321           * @param       none
    322           *
    323           * @return      none
    324           *=================================================================================================
    325           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    326          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    327          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    328            /* cancel any upcoming ACK transmit complete callback */
    329            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000005   9061A4       MOV     DPTR,#0x61a4
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C2E0         CLR     0xE0 /* A   */.0
   \   00000B   F0           MOVX    @DPTR,A
    330          
    331            /* set start of frame threshold */
    332            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000C   906194       MOV     DPTR,#0x6194
   \   00000F   7405         MOV     A,#0x5
   \   000011   F0           MOVX    @DPTR,A
    333          
    334            /* flush the receive FIFO */
    335            MAC_RADIO_FLUSH_RX_FIFO();
   \   000012   75E1ED       MOV     0xe1,#-0x13
   \   000015   75E1ED       MOV     0xe1,#-0x13
    336          
    337            /* clear any receive interrupt that happened to squeak through */
    338            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000018   A2AF         MOV     C,0xa8.7
   \   00001A   E4           CLR     A
   \   00001B   33           RLC     A
   \   00001C   FA           MOV     R2,A
   \   00001D   C2AF         CLR     0xa8.7
   \   00001F   759B00       MOV     0x9b,#0x0
   \   000022   75E9FB       MOV     0xe9,#-0x5
   \   000025   EA           MOV     A,R2
   \   000026   FE           MOV     R6,A
   \   000027   EA           MOV     A,R2
   \   000028   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002A   92AF         MOV     0xa8.7,C
    339          
    340            /* if data buffer has been allocated, free it */
    341            if (pRxBuf != NULL)
   \   00002C   90....       MOV     DPTR,#pRxBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   6008         JZ      ??rxHaltCleanupFinalStep_0
    342            {
    343              MEM_FREE((uint8 **)&pRxBuf);
   \   000038                ; Setup parameters for call to function macDataRxMemFree
   \   000038   7A..         MOV     R2,#pRxBuf & 0xff
   \   00003A   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   00003C   12....       LCALL   `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   \   00003F   E9           MOV     A,R1
    344            }
    345            /* MEM_FREE() sets parameter to NULL. */
    346          
    347            pFuncRxState = &rxStartIsr;
   \                     ??rxHaltCleanupFinalStep_0:
   \   000040   90....       MOV     DPTR,#pFuncRxState
   \   000043   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000049   F0           MOVX    @DPTR,A
    348          
    349            /* if receive was active, perform the post receive updates */
    350            if (macRxActive || macRxOutgoingAckFlag)
   \   00004A   90....       MOV     DPTR,#macRxActive
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   7006         JNZ     ??rxHaltCleanupFinalStep_1
   \   000050   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000053   E0           MOVX    A,@DPTR
   \   000054   600F         JZ      ??rxHaltCleanupFinalStep_2
    351            {
    352              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   000056   90....       MOV     DPTR,#macRxActive
   \   000059   7400         MOV     A,#0x0
   \   00005B   F0           MOVX    @DPTR,A
    353              macRxOutgoingAckFlag = 0;
   \   00005C   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00005F   7400         MOV     A,#0x0
   \   000061   F0           MOVX    @DPTR,A
    354          
    355              rxPostRxUpdates();
   \   000062                ; Setup parameters for call to function rxPostRxUpdates
   \   000062   12....       LCALL   `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    356            }
    357          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00006A                REQUIRE RFST
   \   00006A                REQUIRE _A_IEN0
   \   00006A                REQUIRE S1CON
   \   00006A                REQUIRE RFIRQF0
    358          
    359          
    360          /**************************************************************************************************
    361           * @fn          macRxThresholdIsr
    362           *
    363           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    364           *              It implements a state machine for receiving a packet.
    365           *
    366           * @param       none
    367           *
    368           * @return      none
    369           **************************************************************************************************
    370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    372          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    373            /* if currently reseting, do not execute receive ISR logic */
    374            if (rxResetFlag)
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7029         JNZ     ??macRxThresholdIsr_0
    375            {
    376              return;
    377            }
    378          
    379            /*
    380             *  Call the function that handles the current receive state.
    381             *  A flag is set for the duration of the call to indicate
    382             *  the ISR is executing.  This is necessary for the reset
    383             *  logic so it does not perform a reset in the middle of
    384             *  executing the ISR.
    385             */
    386            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    387            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F583         MOV     DPH,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   12....       LCALL   ?CALL_IND
    388            rxIsrActiveFlag = 0;
   \   00001E   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000021   7400         MOV     A,#0x0
   \   000023   F0           MOVX    @DPTR,A
    389          
    390            /* if a reset occurred during the ISR, peform cleanup here */
    391            if (rxResetFlag)
   \   000024   90....       MOV     DPTR,#rxResetFlag
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6009         JZ      ??macRxThresholdIsr_0
    392            {
    393              rxHaltCleanupFinalStep();
   \   00002A                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   00002A   12....       LCALL   `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    394              rxResetFlag = 0;
   \   00002D   90....       MOV     DPTR,#rxResetFlag
   \   000030   7400         MOV     A,#0x0
   \   000032   F0           MOVX    @DPTR,A
    395            }
    396          }
   \                     ??macRxThresholdIsr_0:
   \   000033   D083         POP     DPH
   \   000035   D082         POP     DPL
   \   000037   02....       LJMP    ?BRET
    397          
    398          
    399          /*=================================================================================================
    400           * @fn          rxStartIsr
    401           *
    402           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    403           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    404           *              allocating a buffer.
    405           *
    406           * @param       none
    407           *
    408           * @return      none
    409           *=================================================================================================
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          static void rxStartIsr(void)
   \                     rxStartIsr:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    413            uint8  addrLen;
    414            uint8  ackWithPending;
    415            uint8  dstAddrMode;
    416            uint8  srcAddrMode;
    417            uint8  mhrLen = 0;
   \   00000A   75..00       MOV     ?V5,#0x0
    418          
    419            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000D   90....       MOV     DPTR,#macRxActive
   \   000010   E0           MOVX    A,@DPTR
   \   000011   6003         JZ      ??rxStartIsr_0
   \   000013                ; Setup parameters for call to function halAssertHandler
   \   000013   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    420          
    421            /* indicate rx is active */
    422            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000016   90....       MOV     DPTR,#macRxActive
   \   000019   7481         MOV     A,#-0x7f
   \   00001B   F0           MOVX    @DPTR,A
    423          
    424            /*
    425             *  For bullet proof functionality, need to see if the receiver was just turned off.
    426             *  The logic to request turning off the receiver, disables interrupts and then checks
    427             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    428             *
    429             *  There is a small hole though.  It's possible to attempt turning off the receiver
    430             *  in the window from when the receive interrupt fires and the point where macRxActive
    431             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    432             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    433             *  in the RX fifo and the receive is simply aborted.
    434             *
    435             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    436             *  the receiver will just be off at this point after a hard disable.  The check described
    437             *  above will account for this case too.  However, if a hard disable were immediately
    438             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    439             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    440             */
    441            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   00001C   90....       MOV     DPTR,#macRxOnFlag
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6010         JZ      ??rxStartIsr_1
   \   000022   906193       MOV     DPTR,#0x6193
   \   000025   E0           MOVX    A,@DPTR
   \   000026   A2E7         MOV     C,0xE0 /* A   */.7
   \   000028   4014         JC      ??rxStartIsr_2
   \   00002A   906193       MOV     DPTR,#0x6193
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   A2E6         MOV     C,0xE0 /* A   */.6
   \   000030   400C         JC      ??rxStartIsr_2
    442            {
    443              /* reset active flag */
    444              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   000032   90....       MOV     DPTR,#macRxActive
   \   000035   7400         MOV     A,#0x0
   \   000037   F0           MOVX    @DPTR,A
    445          
    446              /*
    447               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    448               *  the tiny, tiny window when macRxActive was not zero.
    449               */
    450              rxPostRxUpdates();
   \   000038                ; Setup parameters for call to function rxPostRxUpdates
   \   000038   12....       LCALL   `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    451          
    452              /* return immediately from here */
    453              return;
   \   00003B   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    454            }
    455          
    456            /*
    457             *  If interrupts are held off for too long it's possible the previous "transmit done"
    458             *  callback is pending.  If this is the case, it needs to be completed before
    459             *  continuing with the receive logic.
    460             */
    461            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   00003E                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   00003E   12....       LCALL   `??macCspForceTxDoneIfPending::?relay`; Banked call to: macCspForceTxDoneIfPending
    462          
    463            /*
    464             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    465             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    466             *  That callback execute receive cleanup logic that will run at the completion
    467             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    468             */
    469            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000041   9061A4       MOV     DPTR,#0x61a4
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C2E0         CLR     0xE0 /* A   */.0
   \   000047   F0           MOVX    @DPTR,A
    470            macRxOutgoingAckFlag = 0;
   \   000048   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
    471          
    472            /*
    473             *  Make a module-local copy of macRxFilter.  This prevents the selected
    474             *  filter from changing in the middle of a receive.
    475             */
    476            rxFilter = macRxFilter;
   \   00004E   90....       MOV     DPTR,#macRxFilter
   \   000051   E0           MOVX    A,@DPTR
   \   000052   90....       MOV     DPTR,#rxFilter
   \   000055   F0           MOVX    @DPTR,A
    477          
    478            /*-------------------------------------------------------------------------------
    479             *  Read initial frame information from FIFO.
    480             *
    481             *   This code is not triggered until the following are in the RX FIFO:
    482             *     frame length          - one byte containing length of MAC frame (excludes this field)
    483             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    484             *     sequence number       - one byte unique sequence identifier
    485             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    486             *                             if so, the frame can be verified and responded to immediately,
    487             *                             if not an ACK, these bytes will be processed normally
    488             */
    489          
    490            /* read frame length, frame control field, and sequence number from FIFO */
    491            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000056                ; Setup parameters for call to function macMemReadRxFifo
   \   000056   7904         MOV     R1,#0x4
   \   000058   7A..         MOV     R2,#rxBuf & 0xff
   \   00005A   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00005C   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    492          
    493            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    494            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   00005F   90....       MOV     DPTR,#rxBuf
   \   000062   E0           MOVX    A,@DPTR
   \   000063   547F         ANL     A,#0x7f
   \   000065   24FD         ADD     A,#-0x3
   \   000067   90....       MOV     DPTR,#rxUnreadLen
   \   00006A   F0           MOVX    @DPTR,A
    495          
    496            /*
    497             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    498             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    499             *  the entire receive buffer is flushed.
    500             *
    501             *  In the case that this workaround is not needed, an assert is used to make sure the
    502             *  receive length field is not corrupted.  This is important because a corrupted receive
    503             *  length field is utterly fatal and, if not caught here, extremely hard to track down.
    504             */
    505            if (macChipVersion == REV_A)
   \   00006B   90....       MOV     DPTR,#macChipVersion
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   7032         JNZ     ??rxStartIsr_4
    506            {
    507              if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    508                  (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   000071   90....       MOV     DPTR,#rxUnreadLen
   \   000074   E0           MOVX    A,@DPTR
   \   000075   C3           CLR     C
   \   000076   947D         SUBB    A,#0x7d
   \   000078   501D         JNC     ??rxStartIsr_5
   \   00007A   90....       MOV     DPTR,#rxBuf + 1
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F8           MOV     R0,A
   \   00007F   7900         MOV     R1,#0x0
   \   000081   E8           MOV     A,R0
   \   000082   5407         ANL     A,#0x7
   \   000084   F8           MOV     R0,A
   \   000085   E9           MOV     A,R1
   \   000086   5400         ANL     A,#0x0
   \   000088   F9           MOV     R1,A
   \   000089   C3           CLR     C
   \   00008A   E8           MOV     A,R0
   \   00008B   9404         SUBB    A,#0x4
   \   00008D   E9           MOV     A,R1
   \   00008E   9400         SUBB    A,#0x0
   \   000090   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000092   65D0         XRL     A,PSW
   \   000094   33           RLC     A
   \   000095   4018         JC      ??rxStartIsr_6
    509              {
    510                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_5:
   \   000097   75E1ED       MOV     0xe1,#-0x13
   \   00009A   75E1ED       MOV     0xe1,#-0x13
    511                rxDone();
   \   00009D                ; Setup parameters for call to function rxDone
   \   00009D   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
    512                return;
   \   0000A0   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    513              }
    514            }
    515            else
    516            {
    517              /* radio supplied a corrupted receive buffer length */
    518              MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
   \                     ??rxStartIsr_4:
   \   0000A3   90....       MOV     DPTR,#rxUnreadLen
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   C3           CLR     C
   \   0000A8   947D         SUBB    A,#0x7d
   \   0000AA   4003         JC      ??rxStartIsr_6
   \   0000AC                ; Setup parameters for call to function halAssertHandler
   \   0000AC   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    519            }
    520          
    521          
    522          
    523            /*-------------------------------------------------------------------------------
    524             *  Process ACKs.
    525             *
    526             *  If this frame is an ACK, process it immediately and exit from here.
    527             *  If this frame is not an ACK and transmit is listening for an ACK, let
    528             *  the transmit logic know an non-ACK was received so transmit can complete.
    529             *
    530             *  In promiscuous mode ACKs are treated like any other frame.
    531             */
    532            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \                     ??rxStartIsr_6:
   \   0000AF   90....       MOV     DPTR,#rxBuf + 1
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   5407         ANL     A,#0x7
   \   0000B5   6402         XRL     A,#0x2
   \   0000B7   6003         JZ      $+5
   \   0000B9   02....       LJMP    ??rxStartIsr_7 & 0xFFFF
   \   0000BC   90....       MOV     DPTR,#rxPromiscuousMode
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   6003         JZ      $+5
   \   0000C2   02....       LJMP    ??rxStartIsr_7 & 0xFFFF
    533            {
    534              halIntState_t  s;
    535              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    536              /*
    537               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    538               *  these two bytes will be the FCS.
    539               */
    540          
    541              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    542              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   0000C5                ; Setup parameters for call to function macMemReadRxFifo
   \   0000C5   7902         MOV     R1,#0x2
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   12....       LCALL   ?XSTACK_DISP101_8
   \   0000CC   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    543          
    544              /*
    545               *  This critical section ensures that the ACK timeout won't be triggered in the
    546               *  middle of receiving the ACK frame.
    547               */
    548              HAL_ENTER_CRITICAL_SECTION(s);
   \   0000CF   A2AF         MOV     C,0xa8.7
   \   0000D1   E4           CLR     A
   \   0000D2   33           RLC     A
   \   0000D3   F5..         MOV     ?V0,A
   \   0000D5   C2AF         CLR     0xa8.7
    549          
    550              /* see if transmit is listening for an ACK */
    551              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   0000D7   90....       MOV     DPTR,#macTxActive
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   6486         XRL     A,#0x86
   \   0000DD   6003         JZ      $+5
   \   0000DF   02....       LJMP    ??rxStartIsr_8 & 0xFFFF
    552              {
    553                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000E2   90....       MOV     DPTR,#pMacDataTx
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F8           MOV     R0,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   F9           MOV     R1,A
   \   0000EA   E8           MOV     A,R0
   \   0000EB   49           ORL     A,R1
   \   0000EC   7003         JNZ     ??rxStartIsr_9
   \   0000EE                ; Setup parameters for call to function halAssertHandler
   \   0000EE   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    554          
    555                /* record link quality metrics for the receive ACK */
    556                {
    557                  int8 rssiDbm;
    558                  uint8 corr;
    559          
    560                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_9:
   \   0000F1   7401         MOV     A,#0x1
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   24B7         ADD     A,#-0x49
   \   0000F9   F5..         MOV     ?V2,A
    561                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    562                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   E0           MOVX    A,@DPTR
   \   000101   547F         ANL     A,#0x7f
   \   000103   F5..         MOV     ?V1,A
    563          
    564                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   000105                ; Setup parameters for call to function macRadioComputeLQI
   \   000105   AA..         MOV     R2,?V1
   \   000107   A9..         MOV     R1,?V2
   \   000109   12....       LCALL   `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   00010C   E9           MOV     A,R1
   \   00010D   C0E0         PUSH    A
   \   00010F   90....       MOV     DPTR,#pMacDataTx
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F8           MOV     R0,A
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   C8           XCH     A,R0
   \   000117   2414         ADD     A,#0x14
   \   000119   F582         MOV     DPL,A
   \   00011B   C8           XCH     A,R0
   \   00011C   3400         ADDC    A,#0x0
   \   00011E   F583         MOV     DPH,A
   \   000120   D0E0         POP     A
   \   000122   F0           MOVX    @DPTR,A
    565                  pMacDataTx->internal.correlation = corr;
   \   000123   E5..         MOV     A,?V1
   \   000125   C0E0         PUSH    A
   \   000127   90....       MOV     DPTR,#pMacDataTx
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F8           MOV     R0,A
   \   00012C   A3           INC     DPTR
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   C8           XCH     A,R0
   \   00012F   2415         ADD     A,#0x15
   \   000131   F582         MOV     DPL,A
   \   000133   C8           XCH     A,R0
   \   000134   3400         ADDC    A,#0x0
   \   000136   F583         MOV     DPH,A
   \   000138   D0E0         POP     A
   \   00013A   F0           MOVX    @DPTR,A
    566                  pMacDataTx->internal.rssi= rssiDbm;
   \   00013B   E5..         MOV     A,?V2
   \   00013D   C0E0         PUSH    A
   \   00013F   90....       MOV     DPTR,#pMacDataTx
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F8           MOV     R0,A
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   C8           XCH     A,R0
   \   000147   2416         ADD     A,#0x16
   \   000149   F582         MOV     DPL,A
   \   00014B   C8           XCH     A,R0
   \   00014C   3400         ADDC    A,#0x0
   \   00014E   F583         MOV     DPH,A
   \   000150   D0E0         POP     A
   \   000152   F0           MOVX    @DPTR,A
    567                }
    568          
    569                /*
    570                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    571                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    572                 */
    573                HAL_EXIT_CRITICAL_SECTION(s);
   \   000153   E5..         MOV     A,?V0
   \   000155   C0E0         PUSH    A
   \   000157   85..82       MOV     DPL,?XSP + 0
   \   00015A   85..83       MOV     DPH,?XSP + 1
   \   00015D   D0E0         POP     A
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   E5..         MOV     A,?V0
   \   000162   A2E0         MOV     C,0xE0 /* A   */.0
   \   000164   92AF         MOV     0xa8.7,C
    574          
    575                /*
    576                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    577                 *  the transmit logic still needs to know.  In that case, treat the frame
    578                 *  as a non-ACK to complete the active transmit.
    579                 */
    580                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   000166   7402         MOV     A,#0x2
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00016E   5011         JNC     ??rxStartIsr_10
    581                {
    582                  /* call transmit logic to indicate ACK was received */
    583                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   000170                ; Setup parameters for call to function macTxAckReceivedCallback
   \   000170   90....       MOV     DPTR,#rxBuf + 1
   \   000173   E0           MOVX    A,@DPTR
   \   000174   5410         ANL     A,#0x10
   \   000176   FA           MOV     R2,A
   \   000177   90....       MOV     DPTR,#rxBuf + 3
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   F9           MOV     R1,A
   \   00017C   12....       LCALL   `??macTxAckReceivedCallback::?relay`; Banked call to: macTxAckReceivedCallback
   \   00017F   8018         SJMP    ??rxStartIsr_11
    584                }
    585                else
    586                {
    587                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_10:
   \   000181                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   000181   12....       LCALL   `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
   \   000184   8013         SJMP    ??rxStartIsr_11
    588                }
    589              }
    590              else
    591              {
    592                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_8:
   \   000186   E5..         MOV     A,?V0
   \   000188   C0E0         PUSH    A
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   D0E0         POP     A
   \   000192   F0           MOVX    @DPTR,A
   \   000193   E5..         MOV     A,?V0
   \   000195   A2E0         MOV     C,0xE0 /* A   */.0
   \   000197   92AF         MOV     0xa8.7,C
    593              }
    594          
    595              /* receive is done, exit from here */
    596              rxDone();
   \                     ??rxStartIsr_11:
   \   000199                ; Setup parameters for call to function rxDone
   \   000199   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
    597              return;
   \   00019C   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    598            }
    599            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_7:
   \   00019F   90....       MOV     DPTR,#macTxActive
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   6486         XRL     A,#0x86
   \   0001A5   7003         JNZ     ??rxStartIsr_12
    600            {
    601              macTxAckNotReceivedCallback();
   \   0001A7                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   0001A7   12....       LCALL   `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
    602            }
    603          
    604            /*-------------------------------------------------------------------------------
    605             *  Apply filtering.
    606             *
    607             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    608             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    609             *  do not apply filtering.
    610             */
    611            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_12:
   \   0001AA   90....       MOV     DPTR,#rxFilter
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   6036         JZ      ??rxStartIsr_13
   \   0001B0   90....       MOV     DPTR,#rxPromiscuousMode
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   7030         JNZ     ??rxStartIsr_13
    612            {
    613              if (/* filter all frames */
    614                   (rxFilter == RX_FILTER_ALL) ||
    615          
    616                   /* filter non-beacon frames */
    617                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    618                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    619          
    620                   /* filter non-command frames */
    621                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    622                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   0001B6   90....       MOV     DPTR,#rxFilter
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   6401         XRL     A,#0x1
   \   0001BC   6022         JZ      ??rxStartIsr_14
   \   0001BE   90....       MOV     DPTR,#rxFilter
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   6402         XRL     A,#0x2
   \   0001C4   7008         JNZ     ??rxStartIsr_15
   \   0001C6   90....       MOV     DPTR,#rxBuf + 1
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   5407         ANL     A,#0x7
   \   0001CC   7012         JNZ     ??rxStartIsr_14
   \                     ??rxStartIsr_15:
   \   0001CE   90....       MOV     DPTR,#rxFilter
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   6403         XRL     A,#0x3
   \   0001D4   7010         JNZ     ??rxStartIsr_13
   \   0001D6   90....       MOV     DPTR,#rxBuf + 1
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   5407         ANL     A,#0x7
   \   0001DC   6403         XRL     A,#0x3
   \   0001DE   6006         JZ      ??rxStartIsr_13
    623              {
    624                /* discard rest of frame */
    625                rxDiscardFrame();
   \                     ??rxStartIsr_14:
   \   0001E0                ; Setup parameters for call to function rxDiscardFrame
   \   0001E0   12....       LCALL   `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    626                return;
   \   0001E3   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    627              }
    628            }
    629          
    630            /*-------------------------------------------------------------------------------
    631             *  Compute length of addressing fields.  Compute payload length.
    632             */
    633          
    634            /* decode addressing modes */
    635            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_13:
   \   0001E6   90....       MOV     DPTR,#rxBuf + 2
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   13           RRC     A
   \   0001EB   13           RRC     A
   \   0001EC   543F         ANL     A,#0x3f
   \   0001EE   5403         ANL     A,#0x3
   \   0001F0   F5..         MOV     ?V6,A
    636            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   0001F2   90....       MOV     DPTR,#rxBuf + 2
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   C4           SWAP    A
   \   0001F7   13           RRC     A
   \   0001F8   13           RRC     A
   \   0001F9   5403         ANL     A,#0x3
   \   0001FB   F5..         MOV     ?V4,A
    637          
    638            /*
    639            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    640             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    641             *  the entire receive buffer is flushed.
    642             */
    643            if (macChipVersion == REV_A)
   \   0001FD   90....       MOV     DPTR,#macChipVersion
   \   000200   E0           MOVX    A,@DPTR
   \   000201   7018         JNZ     ??rxStartIsr_16
    644            {
    645              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   000203   7401         MOV     A,#0x1
   \   000205   65..         XRL     A,?V4
   \   000207   6006         JZ      ??rxStartIsr_17
   \   000209   7401         MOV     A,#0x1
   \   00020B   65..         XRL     A,?V6
   \   00020D   700C         JNZ     ??rxStartIsr_16
    646              {
    647                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_17:
   \   00020F   75E1ED       MOV     0xe1,#-0x13
   \   000212   75E1ED       MOV     0xe1,#-0x13
    648                rxDone();
   \   000215                ; Setup parameters for call to function rxDone
   \   000215   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
    649                return;
   \   000218   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    650              }
    651            }
    652          
    653            /*
    654             *  Compute the addressing field length.  A lookup table based on addressing
    655             *  mode is used for efficiency.  If the source address is present and the
    656             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    657             *  length is adjusted to match the smaller length.
    658             */
    659            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_16:
   \   00021B   A8..         MOV     R0,?V4
   \   00021D   7900         MOV     R1,#0x0
   \   00021F   74..         MOV     A,#macRxAddrLen & 0xff
   \   000221   28           ADD     A,R0
   \   000222   F582         MOV     DPL,A
   \   000224   74..         MOV     A,#(macRxAddrLen >> 8) & 0xff
   \   000226   39           ADDC    A,R1
   \   000227   F583         MOV     DPH,A
   \   000229   E4           CLR     A
   \   00022A   93           MOVC    A,@A+DPTR
   \   00022B   FA           MOV     R2,A
   \   00022C   A8..         MOV     R0,?V6
   \   00022E   7900         MOV     R1,#0x0
   \   000230   74..         MOV     A,#macRxAddrLen & 0xff
   \   000232   28           ADD     A,R0
   \   000233   F582         MOV     DPL,A
   \   000235   74..         MOV     A,#(macRxAddrLen >> 8) & 0xff
   \   000237   39           ADDC    A,R1
   \   000238   F583         MOV     DPH,A
   \   00023A   E4           CLR     A
   \   00023B   93           MOVC    A,@A+DPTR
   \   00023C   2A           ADD     A,R2
   \   00023D   FF           MOV     R7,A
    660            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   00023E   E5..         MOV     A,?V4
   \   000240   600C         JZ      ??rxStartIsr_18
   \   000242   90....       MOV     DPTR,#rxBuf + 1
   \   000245   E0           MOVX    A,@DPTR
   \   000246   A2E6         MOV     C,0xE0 /* A   */.6
   \   000248   5004         JNC     ??rxStartIsr_18
    661            {
    662              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   00024A   74FE         MOV     A,#-0x2
   \   00024C   2F           ADD     A,R7
   \   00024D   FF           MOV     R7,A
    663            }
    664          
    665            /*
    666             *  If there are not enough unread bytes to include the computed address
    667             *  plus FCS field, the frame is corrupted and must be discarded.
    668             */
    669            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_18:
   \   00024E   90....       MOV     DPTR,#rxUnreadLen
   \   000251   E0           MOVX    A,@DPTR
   \   000252   FA           MOV     R2,A
   \   000253   7B00         MOV     R3,#0x0
   \   000255   EF           MOV     A,R7
   \   000256   F8           MOV     R0,A
   \   000257   7900         MOV     R1,#0x0
   \   000259   E8           MOV     A,R0
   \   00025A   2402         ADD     A,#0x2
   \   00025C   F8           MOV     R0,A
   \   00025D   5001         JNC     ??rxStartIsr_19
   \   00025F   09           INC     R1
   \                     ??rxStartIsr_19:
   \   000260   C3           CLR     C
   \   000261   EA           MOV     A,R2
   \   000262   98           SUBB    A,R0
   \   000263   EB           MOV     A,R3
   \   000264   99           SUBB    A,R1
   \   000265   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000267   65D0         XRL     A,PSW
   \   000269   33           RLC     A
   \   00026A   5006         JNC     ??rxStartIsr_20
    670            {
    671              /* discard frame and exit */
    672              rxDiscardFrame();
   \   00026C                ; Setup parameters for call to function rxDiscardFrame
   \   00026C   12....       LCALL   `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    673              return;
   \   00026F   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    674            }
    675          
    676            /* aux security header plus payload length is equal to unread bytes minus
    677             * address length, minus the FCS
    678             */
    679            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \                     ??rxStartIsr_20:
   \   000272   90....       MOV     DPTR,#rxUnreadLen
   \   000275   E0           MOVX    A,@DPTR
   \   000276   C3           CLR     C
   \   000277   9F           SUBB    A,R7
   \   000278   24FE         ADD     A,#-0x2
   \   00027A   90....       MOV     DPTR,#rxPayloadLen
   \   00027D   F0           MOVX    @DPTR,A
    680          
    681            /*-------------------------------------------------------------------------------
    682             *  Allocate memory for the incoming frame.
    683             */
    684            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   00027E   90....       MOV     DPTR,#rxBuf + 1
   \   000281   E0           MOVX    A,@DPTR
   \   000282   A2E3         MOV     C,0xE0 /* A   */.3
   \   000284   5003         JNC     ??rxStartIsr_21
    685            {
    686              /* increase the allocation size of MAC header for security */
    687              mhrLen = MAC_MHR_LEN;
   \   000286   75..25       MOV     ?V5,#0x25
    688            }
    689          
    690            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + mhrLen + rxPayloadLen);
   \                     ??rxStartIsr_21:
   \   000289                ; Setup parameters for call to function macDataRxMemAlloc
   \   000289   A8..         MOV     R0,?V5
   \   00028B   7900         MOV     R1,#0x0
   \   00028D   90....       MOV     DPTR,#rxPayloadLen
   \   000290   E0           MOVX    A,@DPTR
   \   000291   FA           MOV     R2,A
   \   000292   7B00         MOV     R3,#0x0
   \   000294   E8           MOV     A,R0
   \   000295   2A           ADD     A,R2
   \   000296   F8           MOV     R0,A
   \   000297   E9           MOV     A,R1
   \   000298   3B           ADDC    A,R3
   \   000299   F9           MOV     R1,A
   \   00029A   E8           MOV     A,R0
   \   00029B   2435         ADD     A,#0x35
   \   00029D   FA           MOV     R2,A
   \   00029E   E4           CLR     A
   \   00029F   39           ADDC    A,R1
   \   0002A0   FB           MOV     R3,A
   \   0002A1   12....       LCALL   `??macDataRxMemAlloc::?relay`; Banked call to: macDataRxMemAlloc
   \   0002A4   90....       MOV     DPTR,#pRxBuf
   \   0002A7   EA           MOV     A,R2
   \   0002A8   F0           MOVX    @DPTR,A
   \   0002A9   A3           INC     DPTR
   \   0002AA   EB           MOV     A,R3
   \   0002AB   F0           MOVX    @DPTR,A
    691            if (pRxBuf == NULL)
   \   0002AC   90....       MOV     DPTR,#pRxBuf
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   F8           MOV     R0,A
   \   0002B1   A3           INC     DPTR
   \   0002B2   E0           MOVX    A,@DPTR
   \   0002B3   F9           MOV     R1,A
   \   0002B4   E8           MOV     A,R0
   \   0002B5   49           ORL     A,R1
   \   0002B6   7009         JNZ     ??rxStartIsr_22
    692            {
    693              /* Cancel the outgoing TX ACK */
    694              MAC_RADIO_CANCEL_TX_ACK();
   \   0002B8   75E1E8       MOV     0xe1,#-0x18
    695          
    696              /* buffer allocation failed, discard the frame and exit*/
    697              rxDiscardFrame();
   \   0002BB                ; Setup parameters for call to function rxDiscardFrame
   \   0002BB   12....       LCALL   `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    698              return;
   \   0002BE   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    699            }
    700          
    701            /*-------------------------------------------------------------------------------
    702             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    703             */
    704            ackWithPending = 0;
   \                     ??rxStartIsr_22:
   \   0002C1   7E00         MOV     R6,#0x0
    705            if (!rxPromiscuousMode)
   \   0002C3   90....       MOV     DPTR,#rxPromiscuousMode
   \   0002C6   E0           MOVX    A,@DPTR
   \   0002C7   700A         JNZ     ??rxStartIsr_23
    706            {
    707              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   0002C9   90....       MOV     DPTR,#rxBuf + 1
   \   0002CC   E0           MOVX    A,@DPTR
   \   0002CD   5420         ANL     A,#0x20
   \   0002CF   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   0002D2   F0           MOVX    @DPTR,A
    708            }
    709          
    710            /*-------------------------------------------------------------------------------
    711             *  Process any ACK request.
    712             */
    713            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_23:
   \   0002D3   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   0002D6   E0           MOVX    A,@DPTR
   \   0002D7   6079         JZ      ??rxStartIsr_24
    714            {
    715              halIntState_t  s;
    716          
    717              /*
    718               *  This critical section ensures that the callback ISR is initiated within time
    719               *  to guarantee correlation with the strobe.
    720               */
    721              HAL_ENTER_CRITICAL_SECTION(s);
   \   0002D9   A2AF         MOV     C,0xa8.7
   \   0002DB   E4           CLR     A
   \   0002DC   33           RLC     A
   \   0002DD   F5..         MOV     ?V0,A
   \   0002DF   C2AF         CLR     0xa8.7
    722          
    723              /* Do not ack data packet with pending more data */
    724              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   0002E1   90....       MOV     DPTR,#rxBuf + 1
   \   0002E4   E0           MOVX    A,@DPTR
   \   0002E5   5407         ANL     A,#0x7
   \   0002E7   6403         XRL     A,#0x3
   \   0002E9   7024         JNZ     ??rxStartIsr_25
    725              {
    726                if( macRxCheckMACPendingCallback())
   \   0002EB                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   0002EB   12....       LCALL   `??macRxCheckMACPendingCallback::?relay`; Banked call to: macRxCheckMACPendingCallback
   \   0002EE   E9           MOV     A,R1
   \   0002EF   6004         JZ      ??rxStartIsr_26
    727                {
    728                  /* Check is any mac data pending for end devices */
    729                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002F1   7E04         MOV     R6,#0x4
   \   0002F3   801A         SJMP    ??rxStartIsr_25
    730                }
    731                else
    732                {
    733                  if( macSrcMatchIsEnabled )
   \                     ??rxStartIsr_26:
   \   0002F5   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   0002F8   E0           MOVX    A,@DPTR
   \   0002F9   600C         JZ      ??rxStartIsr_27
    734                  {
    735                    /* When autopend is enabled, check if allpending is set to true */
    736                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
   \   0002FB                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   0002FB   12....       LCALL   `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   0002FE   E9           MOV     A,R1
   \   0002FF   64FE         XRL     A,#0xfe
   \   000301   700C         JNZ     ??rxStartIsr_25
    737                    {
    738                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   000303   7E04         MOV     R6,#0x4
   \   000305   8008         SJMP    ??rxStartIsr_25
    739                    }
    740                  }
    741                  else
    742                  {
    743                    /* When autopend is disabled, check the application pending callback */
    744                    if( macRxCheckPendingCallback() )
   \                     ??rxStartIsr_27:
   \   000307                ; Setup parameters for call to function macRxCheckPendingCallback
   \   000307   12....       LCALL   `??macRxCheckPendingCallback::?relay`; Banked call to: macRxCheckPendingCallback
   \   00030A   E9           MOV     A,R1
   \   00030B   6002         JZ      ??rxStartIsr_25
    745                    {
    746                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   00030D   7E04         MOV     R6,#0x4
    747                    }
    748                  }
    749                }
    750              }
    751          
    752              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
   \                     ??rxStartIsr_25:
   \   00030F   7404         MOV     A,#0x4
   \   000311   6E           XRL     A,R6
   \   000312   7009         JNZ     ??rxStartIsr_28
    753              {
    754                MAC_RADIO_TX_ACK_PEND();
   \   000314   90618A       MOV     DPTR,#0x618a
   \   000317   E0           MOVX    A,@DPTR
   \   000318   D2E2         SETB    0xE0 /* A   */.2
   \   00031A   F0           MOVX    @DPTR,A
   \   00031B   8007         SJMP    ??rxStartIsr_29
    755              }
    756              else
    757              {
    758                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_28:
   \   00031D   90618A       MOV     DPTR,#0x618a
   \   000320   E0           MOVX    A,@DPTR
   \   000321   C2E2         CLR     0xE0 /* A   */.2
   \   000323   F0           MOVX    @DPTR,A
    759              }
    760          
    761          
    762              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    763              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??rxStartIsr_29:
   \   000324   A2AF         MOV     C,0xa8.7
   \   000326   E4           CLR     A
   \   000327   33           RLC     A
   \   000328   F8           MOV     R0,A
   \   000329   C2AF         CLR     0xa8.7
   \   00032B   759B00       MOV     0x9b,#0x0
   \   00032E   7591FE       MOV     0x91,#-0x2
   \   000331   E8           MOV     A,R0
   \   000332   C0E0         PUSH    A
   \   000334   85..82       MOV     DPL,?XSP + 0
   \   000337   85..83       MOV     DPH,?XSP + 1
   \   00033A   D0E0         POP     A
   \   00033C   F0           MOVX    @DPTR,A
   \   00033D   E8           MOV     A,R0
   \   00033E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000340   92AF         MOV     0xa8.7,C
   \   000342   9061A4       MOV     DPTR,#0x61a4
   \   000345   E0           MOVX    A,@DPTR
   \   000346   D2E0         SETB    0xE0 /* A   */.0
   \   000348   F0           MOVX    @DPTR,A
    764              HAL_EXIT_CRITICAL_SECTION(s);
   \   000349   85....       MOV     ?V7,?V0
   \   00034C   E5..         MOV     A,?V0
   \   00034E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000350   92AF         MOV     0xa8.7,C
    765            }
    766          
    767           /*-------------------------------------------------------------------------------
    768            *  Populate the receive buffer going up to high-level.
    769            */
    770          
    771            /* configure the payload buffer
    772             * save MAC header pointer regardless of security status.
    773             */
    774            pRxBuf->mhr.p   = pRxBuf->msdu.p   = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_24:
   \   000352   90....       MOV     DPTR,#pRxBuf
   \   000355   E0           MOVX    A,@DPTR
   \   000356   2435         ADD     A,#0x35
   \   000358   FA           MOV     R2,A
   \   000359   A3           INC     DPTR
   \   00035A   E0           MOVX    A,@DPTR
   \   00035B   3400         ADDC    A,#0x0
   \   00035D   FB           MOV     R3,A
   \   00035E   90....       MOV     DPTR,#pRxBuf
   \   000361   E0           MOVX    A,@DPTR
   \   000362   F8           MOV     R0,A
   \   000363   A3           INC     DPTR
   \   000364   E0           MOVX    A,@DPTR
   \   000365   F583         MOV     DPH,A
   \   000367   8882         MOV     DPL,R0
   \   000369   A3           INC     DPTR
   \   00036A   A3           INC     DPTR
   \   00036B   EA           MOV     A,R2
   \   00036C   F0           MOVX    @DPTR,A
   \   00036D   A3           INC     DPTR
   \   00036E   EB           MOV     A,R3
   \   00036F   F0           MOVX    @DPTR,A
   \   000370   90....       MOV     DPTR,#pRxBuf
   \   000373   E0           MOVX    A,@DPTR
   \   000374   F8           MOV     R0,A
   \   000375   A3           INC     DPTR
   \   000376   E0           MOVX    A,@DPTR
   \   000377   F583         MOV     DPH,A
   \   000379   8882         MOV     DPL,R0
   \   00037B   A3           INC     DPTR
   \   00037C   A3           INC     DPTR
   \   00037D   E0           MOVX    A,@DPTR
   \   00037E   FA           MOV     R2,A
   \   00037F   A3           INC     DPTR
   \   000380   E0           MOVX    A,@DPTR
   \   000381   FB           MOV     R3,A
   \   000382   90....       MOV     DPTR,#pRxBuf
   \   000385   E0           MOVX    A,@DPTR
   \   000386   F8           MOV     R0,A
   \   000387   A3           INC     DPTR
   \   000388   E0           MOVX    A,@DPTR
   \   000389   C8           XCH     A,R0
   \   00038A   2432         ADD     A,#0x32
   \   00038C   F582         MOV     DPL,A
   \   00038E   C8           XCH     A,R0
   \   00038F   3400         ADDC    A,#0x0
   \   000391   F583         MOV     DPH,A
   \   000393   EA           MOV     A,R2
   \   000394   F0           MOVX    @DPTR,A
   \   000395   A3           INC     DPTR
   \   000396   EB           MOV     A,R3
   \   000397   F0           MOVX    @DPTR,A
    775            pRxBuf->mhr.len = pRxBuf->msdu.len =  rxPayloadLen;
   \   000398   90....       MOV     DPTR,#rxPayloadLen
   \   00039B   E0           MOVX    A,@DPTR
   \   00039C   C0E0         PUSH    A
   \   00039E   90....       MOV     DPTR,#pRxBuf
   \   0003A1   E0           MOVX    A,@DPTR
   \   0003A2   F8           MOV     R0,A
   \   0003A3   A3           INC     DPTR
   \   0003A4   E0           MOVX    A,@DPTR
   \   0003A5   F583         MOV     DPH,A
   \   0003A7   8882         MOV     DPL,R0
   \   0003A9   A3           INC     DPTR
   \   0003AA   A3           INC     DPTR
   \   0003AB   A3           INC     DPTR
   \   0003AC   A3           INC     DPTR
   \   0003AD   D0E0         POP     A
   \   0003AF   F0           MOVX    @DPTR,A
   \   0003B0   90....       MOV     DPTR,#pRxBuf
   \   0003B3   E0           MOVX    A,@DPTR
   \   0003B4   F8           MOV     R0,A
   \   0003B5   A3           INC     DPTR
   \   0003B6   E0           MOVX    A,@DPTR
   \   0003B7   F583         MOV     DPH,A
   \   0003B9   8882         MOV     DPL,R0
   \   0003BB   A3           INC     DPTR
   \   0003BC   A3           INC     DPTR
   \   0003BD   A3           INC     DPTR
   \   0003BE   A3           INC     DPTR
   \   0003BF   E0           MOVX    A,@DPTR
   \   0003C0   C0E0         PUSH    A
   \   0003C2   90....       MOV     DPTR,#pRxBuf
   \   0003C5   E0           MOVX    A,@DPTR
   \   0003C6   F8           MOV     R0,A
   \   0003C7   A3           INC     DPTR
   \   0003C8   E0           MOVX    A,@DPTR
   \   0003C9   C8           XCH     A,R0
   \   0003CA   2434         ADD     A,#0x34
   \   0003CC   F582         MOV     DPL,A
   \   0003CE   C8           XCH     A,R0
   \   0003CF   3400         ADDC    A,#0x0
   \   0003D1   F583         MOV     DPH,A
   \   0003D3   D0E0         POP     A
   \   0003D5   F0           MOVX    @DPTR,A
    776          
    777            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   0003D6   90....       MOV     DPTR,#rxBuf + 1
   \   0003D9   E0           MOVX    A,@DPTR
   \   0003DA   A2E3         MOV     C,0xE0 /* A   */.3
   \   0003DC   4003         JC      $+5
   \   0003DE   02....       LJMP    ??rxStartIsr_30 & 0xFFFF
    778            {
    779              /* Copy FCF and sequence number to RX buffer */
    780              pRxBuf->mhr.len = MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN;
   \   0003E1   90....       MOV     DPTR,#pRxBuf
   \   0003E4   E0           MOVX    A,@DPTR
   \   0003E5   F8           MOV     R0,A
   \   0003E6   A3           INC     DPTR
   \   0003E7   E0           MOVX    A,@DPTR
   \   0003E8   C8           XCH     A,R0
   \   0003E9   2434         ADD     A,#0x34
   \   0003EB   F582         MOV     DPL,A
   \   0003ED   C8           XCH     A,R0
   \   0003EE   3400         ADDC    A,#0x0
   \   0003F0   F583         MOV     DPH,A
   \   0003F2   7403         MOV     A,#0x3
   \   0003F4   F0           MOVX    @DPTR,A
    781              osal_memcpy(pRxBuf->mhr.p, &rxBuf[1], pRxBuf->mhr.len);
   \   0003F5                ; Setup parameters for call to function osal_memcpy
   \   0003F5   75....       MOV     ?V0,#(rxBuf + 1) & 0xff
   \   0003F8   75....       MOV     ?V1,#((rxBuf + 1) >> 8) & 0xff
   \   0003FB   75..00       MOV     ?V2,#0x0
   \   0003FE   78..         MOV     R0,#?V0
   \   000400   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000403   90....       MOV     DPTR,#pRxBuf
   \   000406   E0           MOVX    A,@DPTR
   \   000407   F8           MOV     R0,A
   \   000408   A3           INC     DPTR
   \   000409   E0           MOVX    A,@DPTR
   \   00040A   C8           XCH     A,R0
   \   00040B   2434         ADD     A,#0x34
   \   00040D   F582         MOV     DPL,A
   \   00040F   C8           XCH     A,R0
   \   000410   3400         ADDC    A,#0x0
   \   000412   F583         MOV     DPH,A
   \   000414   E0           MOVX    A,@DPTR
   \   000415   FC           MOV     R4,A
   \   000416   7D00         MOV     R5,#0x0
   \   000418   90....       MOV     DPTR,#pRxBuf
   \   00041B   E0           MOVX    A,@DPTR
   \   00041C   F8           MOV     R0,A
   \   00041D   A3           INC     DPTR
   \   00041E   E0           MOVX    A,@DPTR
   \   00041F   C8           XCH     A,R0
   \   000420   2432         ADD     A,#0x32
   \   000422   F582         MOV     DPL,A
   \   000424   C8           XCH     A,R0
   \   000425   3400         ADDC    A,#0x0
   \   000427   F583         MOV     DPH,A
   \   000429   E0           MOVX    A,@DPTR
   \   00042A   FA           MOV     R2,A
   \   00042B   A3           INC     DPTR
   \   00042C   E0           MOVX    A,@DPTR
   \   00042D   FB           MOV     R3,A
   \   00042E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000431   7403         MOV     A,#0x3
   \   000433   12....       LCALL   ?DEALLOC_XSTACK8
    782              pRxBuf->mhr.p += pRxBuf->mhr.len;
   \   000436   90....       MOV     DPTR,#pRxBuf
   \   000439   E0           MOVX    A,@DPTR
   \   00043A   F8           MOV     R0,A
   \   00043B   A3           INC     DPTR
   \   00043C   E0           MOVX    A,@DPTR
   \   00043D   C8           XCH     A,R0
   \   00043E   2434         ADD     A,#0x34
   \   000440   F582         MOV     DPL,A
   \   000442   C8           XCH     A,R0
   \   000443   3400         ADDC    A,#0x0
   \   000445   F583         MOV     DPH,A
   \   000447   E0           MOVX    A,@DPTR
   \   000448   FA           MOV     R2,A
   \   000449   7B00         MOV     R3,#0x0
   \   00044B   90....       MOV     DPTR,#pRxBuf
   \   00044E   E0           MOVX    A,@DPTR
   \   00044F   F8           MOV     R0,A
   \   000450   A3           INC     DPTR
   \   000451   E0           MOVX    A,@DPTR
   \   000452   C8           XCH     A,R0
   \   000453   2432         ADD     A,#0x32
   \   000455   F582         MOV     DPL,A
   \   000457   C8           XCH     A,R0
   \   000458   3400         ADDC    A,#0x0
   \   00045A   F583         MOV     DPH,A
   \   00045C   E0           MOVX    A,@DPTR
   \   00045D   2A           ADD     A,R2
   \   00045E   FA           MOV     R2,A
   \   00045F   A3           INC     DPTR
   \   000460   E0           MOVX    A,@DPTR
   \   000461   3B           ADDC    A,R3
   \   000462   FB           MOV     R3,A
   \   000463   90....       MOV     DPTR,#pRxBuf
   \   000466   E0           MOVX    A,@DPTR
   \   000467   F8           MOV     R0,A
   \   000468   A3           INC     DPTR
   \   000469   E0           MOVX    A,@DPTR
   \   00046A   C8           XCH     A,R0
   \   00046B   2432         ADD     A,#0x32
   \   00046D   F582         MOV     DPL,A
   \   00046F   C8           XCH     A,R0
   \   000470   3400         ADDC    A,#0x0
   \   000472   F583         MOV     DPH,A
   \   000474   EA           MOV     A,R2
   \   000475   F0           MOVX    @DPTR,A
   \   000476   A3           INC     DPTR
   \   000477   EB           MOV     A,R3
   \   000478   F0           MOVX    @DPTR,A
    783            }
    784          
    785            /* set internal values */
    786            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??rxStartIsr_30:
   \   000479   E5..         MOV     A,?V4
   \   00047B   C0E0         PUSH    A
   \   00047D   90....       MOV     DPTR,#pRxBuf
   \   000480   E0           MOVX    A,@DPTR
   \   000481   F8           MOV     R0,A
   \   000482   A3           INC     DPTR
   \   000483   E0           MOVX    A,@DPTR
   \   000484   C8           XCH     A,R0
   \   000485   241A         ADD     A,#0x1a
   \   000487   F582         MOV     DPL,A
   \   000489   C8           XCH     A,R0
   \   00048A   3400         ADDC    A,#0x0
   \   00048C   F583         MOV     DPH,A
   \   00048E   D0E0         POP     A
   \   000490   F0           MOVX    @DPTR,A
    787            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \   000491   E5..         MOV     A,?V6
   \   000493   C0E0         PUSH    A
   \   000495   90....       MOV     DPTR,#pRxBuf
   \   000498   E0           MOVX    A,@DPTR
   \   000499   F8           MOV     R0,A
   \   00049A   A3           INC     DPTR
   \   00049B   E0           MOVX    A,@DPTR
   \   00049C   C8           XCH     A,R0
   \   00049D   2423         ADD     A,#0x23
   \   00049F   F582         MOV     DPL,A
   \   0004A1   C8           XCH     A,R0
   \   0004A2   3400         ADDC    A,#0x0
   \   0004A4   F583         MOV     DPH,A
   \   0004A6   D0E0         POP     A
   \   0004A8   F0           MOVX    @DPTR,A
    788            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   0004A9                ; Setup parameters for call to function macMcuOverflowCapture
   \   0004A9   12....       LCALL   `??macMcuOverflowCapture::?relay`; Banked call to: macMcuOverflowCapture
   \   0004AC   8A..         MOV     ?V0,R2
   \   0004AE   8B..         MOV     ?V1,R3
   \   0004B0   8C..         MOV     ?V2,R4
   \   0004B2   8D..         MOV     ?V3,R5
   \   0004B4   90....       MOV     DPTR,#pRxBuf
   \   0004B7   E0           MOVX    A,@DPTR
   \   0004B8   F8           MOV     R0,A
   \   0004B9   A3           INC     DPTR
   \   0004BA   E0           MOVX    A,@DPTR
   \   0004BB   C8           XCH     A,R0
   \   0004BC   2424         ADD     A,#0x24
   \   0004BE   F582         MOV     DPL,A
   \   0004C0   C8           XCH     A,R0
   \   0004C1   3400         ADDC    A,#0x0
   \   0004C3   F583         MOV     DPH,A
   \   0004C5   78..         MOV     R0,#?V0
   \   0004C7   12....       LCALL   ?L_MOV_TO_X
    789            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   0004CA                ; Setup parameters for call to function macMcuTimerCapture
   \   0004CA   12....       LCALL   `??macMcuTimerCapture::?relay`; Banked call to: macMcuTimerCapture
   \   0004CD   8A..         MOV     ?V0,R2
   \   0004CF   8B..         MOV     ?V1,R3
   \   0004D1   A8..         MOV     R0,?V0
   \   0004D3   A9..         MOV     R1,?V1
   \   0004D5   90....       MOV     DPTR,#pRxBuf
   \   0004D8   E0           MOVX    A,@DPTR
   \   0004D9   FA           MOV     R2,A
   \   0004DA   A3           INC     DPTR
   \   0004DB   E0           MOVX    A,@DPTR
   \   0004DC   CA           XCH     A,R2
   \   0004DD   2428         ADD     A,#0x28
   \   0004DF   F582         MOV     DPL,A
   \   0004E1   CA           XCH     A,R2
   \   0004E2   3400         ADDC    A,#0x0
   \   0004E4   F583         MOV     DPH,A
   \   0004E6   E8           MOV     A,R0
   \   0004E7   F0           MOVX    @DPTR,A
   \   0004E8   A3           INC     DPTR
   \   0004E9   E9           MOV     A,R1
   \   0004EA   F0           MOVX    @DPTR,A
    790            pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
   \   0004EB   90....       MOV     DPTR,#rxBuf + 1
   \   0004EE   E0           MOVX    A,@DPTR
   \   0004EF   5407         ANL     A,#0x7
   \   0004F1   C0E0         PUSH    A
   \   0004F3   90....       MOV     DPTR,#pRxBuf
   \   0004F6   E0           MOVX    A,@DPTR
   \   0004F7   F8           MOV     R0,A
   \   0004F8   A3           INC     DPTR
   \   0004F9   E0           MOVX    A,@DPTR
   \   0004FA   F583         MOV     DPH,A
   \   0004FC   8882         MOV     DPL,R0
   \   0004FE   A3           INC     DPTR
   \   0004FF   A3           INC     DPTR
   \   000500   A3           INC     DPTR
   \   000501   A3           INC     DPTR
   \   000502   A3           INC     DPTR
   \   000503   D0E0         POP     A
   \   000505   F0           MOVX    @DPTR,A
    791            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   000506   90....       MOV     DPTR,#rxBuf + 3
   \   000509   E0           MOVX    A,@DPTR
   \   00050A   C0E0         PUSH    A
   \   00050C   90....       MOV     DPTR,#pRxBuf
   \   00050F   E0           MOVX    A,@DPTR
   \   000510   F8           MOV     R0,A
   \   000511   A3           INC     DPTR
   \   000512   E0           MOVX    A,@DPTR
   \   000513   C8           XCH     A,R0
   \   000514   2431         ADD     A,#0x31
   \   000516   F582         MOV     DPL,A
   \   000518   C8           XCH     A,R0
   \   000519   3400         ADDC    A,#0x0
   \   00051B   F583         MOV     DPH,A
   \   00051D   D0E0         POP     A
   \   00051F   F0           MOVX    @DPTR,A
    792            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   000520   90....       MOV     DPTR,#rxBuf + 1
   \   000523   E0           MOVX    A,@DPTR
   \   000524   5478         ANL     A,#0x78
   \   000526   F8           MOV     R0,A
   \   000527   90....       MOV     DPTR,#rxBuf + 2
   \   00052A   E0           MOVX    A,@DPTR
   \   00052B   C4           SWAP    A
   \   00052C   540F         ANL     A,#0xf
   \   00052E   5403         ANL     A,#0x3
   \   000530   48           ORL     A,R0
   \   000531   4E           ORL     A,R6
   \   000532   C0E0         PUSH    A
   \   000534   90....       MOV     DPTR,#pRxBuf
   \   000537   E0           MOVX    A,@DPTR
   \   000538   F8           MOV     R0,A
   \   000539   A3           INC     DPTR
   \   00053A   E0           MOVX    A,@DPTR
   \   00053B   C8           XCH     A,R0
   \   00053C   2406         ADD     A,#0x6
   \   00053E   F582         MOV     DPL,A
   \   000540   C8           XCH     A,R0
   \   000541   3400         ADDC    A,#0x0
   \   000543   F583         MOV     DPH,A
   \   000545   D0E0         POP     A
   \   000547   F0           MOVX    @DPTR,A
    793          
    794            /*-------------------------------------------------------------------------------
    795             *  If the processing the addressing fields does not require more bytes from
    796             *  the FIFO go directly address processing function.  Otherwise, configure
    797             *  interrupt to jump there once bytes are received.
    798             */
    799            if (addrLen == 0)
   \   000548   EF           MOV     A,R7
   \   000549   700F         JNZ     ??rxStartIsr_31
    800            {
    801              /* no addressing fields to read, prepare for payload interrupts */
    802              pFuncRxState = &rxPayloadIsr;
   \   00054B   90....       MOV     DPTR,#pFuncRxState
   \   00054E   74..         MOV     A,#`??rxPayloadIsr::?relay` & 0xff
   \   000550   F0           MOVX    @DPTR,A
   \   000551   A3           INC     DPTR
   \   000552   74..         MOV     A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   000554   F0           MOVX    @DPTR,A
    803              rxPrepPayload();
   \   000555                ; Setup parameters for call to function rxPrepPayload
   \   000555   12....       LCALL   `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   \   000558   802B         SJMP    ??rxStartIsr_3
    804            }
    805            else
    806            {
    807              /* need to read and process addressing fields, prepare for address interrupt */
    808              rxNextLen = addrLen;
   \                     ??rxStartIsr_31:
   \   00055A   EF           MOV     A,R7
   \   00055B   90....       MOV     DPTR,#rxNextLen
   \   00055E   F0           MOVX    @DPTR,A
    809              if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   00055F   90....       MOV     DPTR,#rxBuf + 1
   \   000562   E0           MOVX    A,@DPTR
   \   000563   A2E3         MOV     C,0xE0 /* A   */.3
   \   000565   500A         JNC     ??rxStartIsr_32
    810              {
    811                /* When security is enabled, read off security control field as well */
    812                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   \   000567   90....       MOV     DPTR,#rxNextLen
   \   00056A   E0           MOVX    A,@DPTR
   \   00056B   906194       MOV     DPTR,#0x6194
   \   00056E   F0           MOVX    @DPTR,A
   \   00056F   800A         SJMP    ??rxStartIsr_33
    813              }
    814              else
    815              {
    816                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxStartIsr_32:
   \   000571   90....       MOV     DPTR,#rxNextLen
   \   000574   E0           MOVX    A,@DPTR
   \   000575   24FF         ADD     A,#-0x1
   \   000577   906194       MOV     DPTR,#0x6194
   \   00057A   F0           MOVX    @DPTR,A
    817              }
    818              pFuncRxState = &rxAddrIsr;
   \                     ??rxStartIsr_33:
   \   00057B   90....       MOV     DPTR,#pFuncRxState
   \   00057E   74..         MOV     A,#`??rxAddrIsr::?relay` & 0xff
   \   000580   F0           MOVX    @DPTR,A
   \   000581   A3           INC     DPTR
   \   000582   74..         MOV     A,#(`??rxAddrIsr::?relay` >> 8) & 0xff
   \   000584   F0           MOVX    @DPTR,A
    819            }
    820          }
   \                     ??rxStartIsr_3:
   \   000585   7403         MOV     A,#0x3
   \   000587   12....       LCALL   ?DEALLOC_XSTACK8
   \   00058A   7F08         MOV     R7,#0x8
   \   00058C   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00058F                REQUIRE RFST
   \   00058F                REQUIRE _A_IEN0
   \   00058F                REQUIRE S1CON
   \   00058F                REQUIRE RFIRQF1
    821          
    822          
    823          /*=================================================================================================
    824           * @fn          rxAddrIsr
    825           *
    826           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    827           *              from the incoming packet.
    828           *
    829           * @param       none
    830           *
    831           * @return      none
    832           *=================================================================================================
    833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    834          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    836            uint8 buf[MAX_ADDR_FIELDS_LEN];
    837            uint8 dstAddrMode;
    838            uint8 srcAddrMode;
    839          #ifdef MAC_SECURITY  
    840            uint8 securityControl;
    841          #endif /* MAC_SECURITY */  
    842            uint8  * p;
    843          
    844            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV     DPTR,#rxNextLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    845          
    846            /*  read out address fields into local buffer in one shot */
    847            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   90....       MOV     DPTR,#rxNextLen
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   AA..         MOV     R2,?XSP + 0
   \   00001A   AB..         MOV     R3,?XSP + 1
   \   00001C   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    848          
    849            /* set pointer to buffer with addressing fields */
    850            p = buf;
   \   00001F   A8..         MOV     R0,?XSP + 0
   \   000021   A9..         MOV     R1,?XSP + 1
   \   000023   88..         MOV     ?V2,R0
   \   000025   89..         MOV     ?V3,R1
   \   000027   AE..         MOV     R6,?V2
   \   000029   AF..         MOV     R7,?V3
    851          
    852            /* destination address */
    853            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   00002B   90....       MOV     DPTR,#rxBuf + 2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   13           RRC     A
   \   000030   13           RRC     A
   \   000031   543F         ANL     A,#0x3f
   \   000033   5403         ANL     A,#0x3
   \   000035   F5..         MOV     ?V0,A
    854            if (dstAddrMode != SADDR_MODE_NONE)
   \   000037   E5..         MOV     A,?V0
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??rxAddrIsr_1 & 0xFFFF
    855            {
    856              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   7B00         MOV     R3,#0x0
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   7900         MOV     R1,#0x0
   \   00004F   E4           CLR     A
   \   000050   C8           XCH     A,R0
   \   000051   F9           MOV     R1,A
   \   000052   EA           MOV     A,R2
   \   000053   28           ADD     A,R0
   \   000054   F8           MOV     R0,A
   \   000055   EB           MOV     A,R3
   \   000056   39           ADDC    A,R1
   \   000057   F9           MOV     R1,A
   \   000058   90....       MOV     DPTR,#pRxBuf
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   CA           XCH     A,R2
   \   000060   242C         ADD     A,#0x2c
   \   000062   F582         MOV     DPL,A
   \   000064   CA           XCH     A,R2
   \   000065   3400         ADDC    A,#0x0
   \   000067   F583         MOV     DPH,A
   \   000069   E8           MOV     A,R0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E9           MOV     A,R1
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   90....       MOV     DPTR,#pRxBuf
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   C8           XCH     A,R0
   \   000076   242C         ADD     A,#0x2c
   \   000078   F582         MOV     DPL,A
   \   00007A   C8           XCH     A,R0
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   90....       MOV     DPTR,#pRxBuf
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FA           MOV     R2,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   CA           XCH     A,R2
   \   00008C   242A         ADD     A,#0x2a
   \   00008E   F582         MOV     DPL,A
   \   000090   CA           XCH     A,R2
   \   000091   3400         ADDC    A,#0x0
   \   000093   F583         MOV     DPH,A
   \   000095   E8           MOV     A,R0
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   E9           MOV     A,R1
   \   000099   F0           MOVX    @DPTR,A
    857              p += MAC_PAN_ID_FIELD_LEN;
   \   00009A   EE           MOV     A,R6
   \   00009B   2402         ADD     A,#0x2
   \   00009D   FE           MOV     R6,A
   \   00009E   5001         JNC     ??rxAddrIsr_2
   \   0000A0   0F           INC     R7
    858              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_2:
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   65..         XRL     A,?V0
   \   0000A5   701C         JNZ     ??rxAddrIsr_3
    859              {
    860                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   0000A7                ; Setup parameters for call to function sAddrExtCpy
   \   0000A7   EE           MOV     A,R6
   \   0000A8   FC           MOV     R4,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   FD           MOV     R5,A
   \   0000AB   90....       MOV     DPTR,#pRxBuf
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   241B         ADD     A,#0x1b
   \   0000B1   FA           MOV     R2,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   3400         ADDC    A,#0x0
   \   0000B6   FB           MOV     R3,A
   \   0000B7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    861                p += MAC_EXT_ADDR_FIELD_LEN;
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2408         ADD     A,#0x8
   \   0000BD   FE           MOV     R6,A
   \   0000BE   503A         JNC     ??rxAddrIsr_1
   \   0000C0   0F           INC     R7
   \   0000C1   8037         SJMP    ??rxAddrIsr_1
    862              }
    863              else
    864              {
    865                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_3:
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FA           MOV     R2,A
   \   0000C9   7B00         MOV     R3,#0x0
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   7900         MOV     R1,#0x0
   \   0000D4   E4           CLR     A
   \   0000D5   C8           XCH     A,R0
   \   0000D6   F9           MOV     R1,A
   \   0000D7   EA           MOV     A,R2
   \   0000D8   28           ADD     A,R0
   \   0000D9   F8           MOV     R0,A
   \   0000DA   EB           MOV     A,R3
   \   0000DB   39           ADDC    A,R1
   \   0000DC   F9           MOV     R1,A
   \   0000DD   90....       MOV     DPTR,#pRxBuf
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FA           MOV     R2,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   CA           XCH     A,R2
   \   0000E5   241B         ADD     A,#0x1b
   \   0000E7   F582         MOV     DPL,A
   \   0000E9   CA           XCH     A,R2
   \   0000EA   3400         ADDC    A,#0x0
   \   0000EC   F583         MOV     DPH,A
   \   0000EE   E8           MOV     A,R0
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E9           MOV     A,R1
   \   0000F2   F0           MOVX    @DPTR,A
    866                p += MAC_SHORT_ADDR_FIELD_LEN;
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2402         ADD     A,#0x2
   \   0000F6   FE           MOV     R6,A
   \   0000F7   5001         JNC     ??rxAddrIsr_1
   \   0000F9   0F           INC     R7
    867              }
    868            }
    869          
    870            /* sources address */
    871            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   0000FA   90....       MOV     DPTR,#rxBuf + 2
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   C4           SWAP    A
   \   0000FF   13           RRC     A
   \   000100   13           RRC     A
   \   000101   5403         ANL     A,#0x3
   \   000103   F5..         MOV     ?V1,A
    872            if (srcAddrMode != SADDR_MODE_NONE)
   \   000105   E5..         MOV     A,?V1
   \   000107   7003         JNZ     $+5
   \   000109   02....       LJMP    ??rxAddrIsr_4 & 0xFFFF
    873            {
    874              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   00010C   90....       MOV     DPTR,#pRxBuf
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F8           MOV     R0,A
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   C8           XCH     A,R0
   \   000114   2406         ADD     A,#0x6
   \   000116   F582         MOV     DPL,A
   \   000118   C8           XCH     A,R0
   \   000119   3400         ADDC    A,#0x0
   \   00011B   F583         MOV     DPH,A
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   A2E6         MOV     C,0xE0 /* A   */.6
   \   000120   4037         JC      ??rxAddrIsr_5
    875              {
    876                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   000122   8E82         MOV     DPL,R6
   \   000124   8F83         MOV     DPH,R7
   \   000126   E0           MOVX    A,@DPTR
   \   000127   FA           MOV     R2,A
   \   000128   7B00         MOV     R3,#0x0
   \   00012A   8E82         MOV     DPL,R6
   \   00012C   8F83         MOV     DPH,R7
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F8           MOV     R0,A
   \   000131   7900         MOV     R1,#0x0
   \   000133   E4           CLR     A
   \   000134   C8           XCH     A,R0
   \   000135   F9           MOV     R1,A
   \   000136   EA           MOV     A,R2
   \   000137   28           ADD     A,R0
   \   000138   F8           MOV     R0,A
   \   000139   EB           MOV     A,R3
   \   00013A   39           ADDC    A,R1
   \   00013B   F9           MOV     R1,A
   \   00013C   90....       MOV     DPTR,#pRxBuf
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   FA           MOV     R2,A
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   CA           XCH     A,R2
   \   000144   242A         ADD     A,#0x2a
   \   000146   F582         MOV     DPL,A
   \   000148   CA           XCH     A,R2
   \   000149   3400         ADDC    A,#0x0
   \   00014B   F583         MOV     DPH,A
   \   00014D   E8           MOV     A,R0
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   E9           MOV     A,R1
   \   000151   F0           MOVX    @DPTR,A
    877                p += MAC_PAN_ID_FIELD_LEN;
   \   000152   EE           MOV     A,R6
   \   000153   2402         ADD     A,#0x2
   \   000155   FE           MOV     R6,A
   \   000156   5001         JNC     ??rxAddrIsr_5
   \   000158   0F           INC     R7
    878              }
    879              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_5:
   \   000159   7403         MOV     A,#0x3
   \   00015B   65..         XRL     A,?V1
   \   00015D   7015         JNZ     ??rxAddrIsr_6
    880              {
    881                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   00015F                ; Setup parameters for call to function sAddrExtCpy
   \   00015F   EE           MOV     A,R6
   \   000160   FC           MOV     R4,A
   \   000161   EF           MOV     A,R7
   \   000162   FD           MOV     R5,A
   \   000163   90....       MOV     DPTR,#pRxBuf
   \   000166   E0           MOVX    A,@DPTR
   \   000167   2412         ADD     A,#0x12
   \   000169   FA           MOV     R2,A
   \   00016A   A3           INC     DPTR
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   3400         ADDC    A,#0x0
   \   00016E   FB           MOV     R3,A
   \   00016F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000172   8030         SJMP    ??rxAddrIsr_4
    882              }
    883              else
    884              {
    885                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_6:
   \   000174   8E82         MOV     DPL,R6
   \   000176   8F83         MOV     DPH,R7
   \   000178   E0           MOVX    A,@DPTR
   \   000179   FA           MOV     R2,A
   \   00017A   7B00         MOV     R3,#0x0
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   F8           MOV     R0,A
   \   000183   7900         MOV     R1,#0x0
   \   000185   E4           CLR     A
   \   000186   C8           XCH     A,R0
   \   000187   F9           MOV     R1,A
   \   000188   EA           MOV     A,R2
   \   000189   28           ADD     A,R0
   \   00018A   F8           MOV     R0,A
   \   00018B   EB           MOV     A,R3
   \   00018C   39           ADDC    A,R1
   \   00018D   F9           MOV     R1,A
   \   00018E   90....       MOV     DPTR,#pRxBuf
   \   000191   E0           MOVX    A,@DPTR
   \   000192   FA           MOV     R2,A
   \   000193   A3           INC     DPTR
   \   000194   E0           MOVX    A,@DPTR
   \   000195   CA           XCH     A,R2
   \   000196   2412         ADD     A,#0x12
   \   000198   F582         MOV     DPL,A
   \   00019A   CA           XCH     A,R2
   \   00019B   3400         ADDC    A,#0x0
   \   00019D   F583         MOV     DPH,A
   \   00019F   E8           MOV     A,R0
   \   0001A0   F0           MOVX    @DPTR,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E9           MOV     A,R1
   \   0001A3   F0           MOVX    @DPTR,A
    886              }
    887            }
    888          
    889          #ifdef MAC_SECURITY
    890            if (MAC_SEC_ENABLED(&rxBuf[1]))
    891            {
    892              uint8 keyIdMode;
    893          
    894              if (MAC_FRAME_VERSION(&rxBuf[1]) == 0)
    895              {
    896                /* MAC_UNSUPPORTED_LEGACY - Cancel the outgoing TX ACK.
    897                 * It may be too late but we have to try.
    898                 */
    899                MAC_RADIO_CANCEL_TX_ACK();
    900          
    901                /* clean up after unsupported security legacy */
    902                macRxHaltCleanup();
    903                return;
    904              }
    905          
    906              /* Copy addressing fields to RX buffer */
    907              osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    908              pRxBuf->mhr.p   += rxNextLen;
    909              pRxBuf->mhr.len += rxNextLen;
    910          
    911              /*-------------------------------------------------------------------------------
    912               *  Prepare for auxiliary security header interrupts.
    913               */
    914          
    915              /* read out security control field from FIFO (threshold set so bytes are guaranteed to be there) */
    916              MAC_RADIO_READ_RX_FIFO(&securityControl, MAC_SEC_CONTROL_FIELD_LEN);
    917          
    918              /* Copy security fields to MHR buffer */
    919              *pRxBuf->mhr.p   = securityControl;
    920              pRxBuf->mhr.p   += MAC_SEC_CONTROL_FIELD_LEN;
    921              pRxBuf->mhr.len += MAC_SEC_CONTROL_FIELD_LEN;
    922          
    923              /* store security level and key ID mode */
    924              pRxBuf->sec.securityLevel = SECURITY_LEVEL(securityControl);
    925              pRxBuf->sec.keyIdMode = keyIdMode = KEY_IDENTIFIER_MODE(securityControl);
    926          
    927              /* Corrupted RX frame, should never occur. */
    928              if ((keyIdMode > MAC_KEY_ID_MODE_8)
    929              /* Get the next RX length according to AuxLen table minus security control field.
    930               * The security control length is counted already.
    931               */
    932              || ((macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN) >= rxPayloadLen)
    933              /* Security Enabled subfield is one, but the Security Level in the header is zero:
    934               * MAC_UNSUPPORTED_SECURITY - Cancel the outgoing TX ACK.
    935               */
    936              || (pRxBuf->sec.securityLevel == MAC_SEC_LEVEL_NONE))
    937              {
    938                /* It may be too late but we have to try. */
    939                MAC_RADIO_CANCEL_TX_ACK();
    940          
    941                /* clean up after unsupported security or corrupted RX frame. */
    942                macRxHaltCleanup();
    943                return;
    944              }
    945          
    946              /* get the next RX length according to AuxLen table minus security control field.
    947               * The sceurity control length is counted already.
    948               */
    949              rxNextLen = macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN;
    950              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    951              pFuncRxState = &rxSecurityHdrIsr;
    952            }
    953            else
    954          #endif /* MAC_SECURITY */
    955            {
    956              /* clear security level */
    957              pRxBuf->sec.securityLevel = MAC_SEC_LEVEL_NONE;
   \                     ??rxAddrIsr_4:
   \   0001A4   90....       MOV     DPTR,#pRxBuf
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F8           MOV     R0,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   C8           XCH     A,R0
   \   0001AC   240F         ADD     A,#0xf
   \   0001AE   F582         MOV     DPL,A
   \   0001B0   C8           XCH     A,R0
   \   0001B1   3400         ADDC    A,#0x0
   \   0001B3   F583         MOV     DPH,A
   \   0001B5   7400         MOV     A,#0x0
   \   0001B7   F0           MOVX    @DPTR,A
    958          
    959              /*-------------------------------------------------------------------------------
    960               *  Prepare for payload interrupts.
    961               */
    962              pFuncRxState = &rxPayloadIsr;
   \   0001B8   90....       MOV     DPTR,#pFuncRxState
   \   0001BB   74..         MOV     A,#`??rxPayloadIsr::?relay` & 0xff
   \   0001BD   F0           MOVX    @DPTR,A
   \   0001BE   A3           INC     DPTR
   \   0001BF   74..         MOV     A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   0001C1   F0           MOVX    @DPTR,A
    963              rxPrepPayload();
   \   0001C2                ; Setup parameters for call to function rxPrepPayload
   \   0001C2   12....       LCALL   `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
    964            }
    965          }
   \   0001C5   7414         MOV     A,#0x14
   \   0001C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CA   7F04         MOV     R7,#0x4
   \   0001CC   02....       LJMP    ?BANKED_LEAVE_XDATA
    966          
    967          
    968          #ifdef MAC_SECURITY
    969          /*=================================================================================================
    970           * @fn          rxSecurityHdrIsr
    971           *
    972           * @brief       Receive ISR state for reading out and storing the auxiliary security header.
    973           *
    974           * @param       none
    975           *
    976           * @return      none
    977           *=================================================================================================
    978           */
    979          static void rxSecurityHdrIsr(void)
    980          {
    981            uint8 buf[MAC_FRAME_COUNTER_LEN + MAC_KEY_ID_8_LEN];
    982          
    983            /* read out frame counter and key ID */
    984            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
    985          
    986            /* Incoming frame counter */
    987            macFrameCounter = BUILD_UINT32(buf[0], buf[1], buf[2], buf[3]);
    988            if (rxNextLen - MAC_FRAME_COUNTER_LEN > 0)
    989            {
    990              /* Explicit mode */
    991              osal_memcpy(pRxBuf->sec.keySource, &buf[MAC_FRAME_COUNTER_LEN], rxNextLen - MAC_FRAME_COUNTER_LEN - 1);
    992              pRxBuf->sec.keyIndex = buf[rxNextLen - MAC_KEY_INDEX_LEN];
    993            }
    994          
    995            /* Copy security fields to RX buffer */
    996            osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    997            pRxBuf->mhr.p   += rxNextLen;
    998            pRxBuf->mhr.len += rxNextLen;
    999          
   1000            /* Update payload pointer and payload length. The rxPayloadLen includes security header length
   1001             * and SCF byte. The security header and SCF length must be deducted from the rxPayloadLen.
   1002             */
   1003            rxPayloadLen    -= (rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   1004            pRxBuf->msdu.len = rxPayloadLen;
   1005            pRxBuf->mhr.len += rxPayloadLen;
   1006          
   1007            /*-------------------------------------------------------------------------------
   1008             *  Prepare for payload interrupts.
   1009             */
   1010            pFuncRxState = &rxPayloadIsr;
   1011            rxPrepPayload();
   1012          }
   1013          #endif /* MAC_SECURITY */
   1014          
   1015          
   1016          /*=================================================================================================
   1017           * @fn          rxPrepPayload
   1018           *
   1019           * @brief       Common code to prepare for the payload ISR.
   1020           *
   1021           * @param       none
   1022           *
   1023           * @return      none
   1024           *=================================================================================================
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          static void rxPrepPayload(void)
   \                     rxPrepPayload:
   1027          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1028            if (rxPayloadLen == 0)
   \   000004   90....       MOV     DPTR,#rxPayloadLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??rxPrepPayload_0
   1029            {
   1030              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   906194       MOV     DPTR,#0x6194
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
   1031              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   74..         MOV     A,#`??rxFcsIsr::?relay` & 0xff
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   74..         MOV     A,#(`??rxFcsIsr::?relay` >> 8) & 0xff
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   8023         SJMP    ??rxPrepPayload_1
   1032            }
   1033            else
   1034            {
   1035              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001C   90....       MOV     DPTR,#rxPayloadLen
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C3           CLR     C
   \   000021   9410         SUBB    A,#0x10
   \   000023   500A         JNC     ??rxPrepPayload_2
   \   000025   90....       MOV     DPTR,#rxPayloadLen
   \   000028   E0           MOVX    A,@DPTR
   \   000029   90....       MOV     DPTR,#rxNextLen
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   8006         SJMP    ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   00002F   90....       MOV     DPTR,#rxNextLen
   \   000032   7410         MOV     A,#0x10
   \   000034   F0           MOVX    @DPTR,A
   1036              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxPrepPayload_3:
   \   000035   90....       MOV     DPTR,#rxNextLen
   \   000038   E0           MOVX    A,@DPTR
   \   000039   24FF         ADD     A,#-0x1
   \   00003B   906194       MOV     DPTR,#0x6194
   \   00003E   F0           MOVX    @DPTR,A
   1037            }
   1038          }
   \                     ??rxPrepPayload_1:
   \   00003F   D083         POP     DPH
   \   000041   D082         POP     DPL
   \   000043   02....       LJMP    ?BRET
   1039          
   1040          
   1041          /*=================================================================================================
   1042           * @fn          rxPayloadIsr
   1043           *
   1044           * @brief       Receive ISR state for reading out and storing the packet payload.
   1045           *
   1046           * @param       none
   1047           *
   1048           * @return      none
   1049           *=================================================================================================
   1050           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1051          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
   1052          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1053            MAC_RADIO_READ_RX_FIFO(pRxBuf->mhr.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV     DPTR,#rxNextLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#pRxBuf
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   C8           XCH     A,R0
   \   000011   2432         ADD     A,#0x32
   \   000013   F582         MOV     DPL,A
   \   000015   C8           XCH     A,R0
   \   000016   3400         ADDC    A,#0x0
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1054            pRxBuf->mhr.p += rxNextLen;
   \   000022   90....       MOV     DPTR,#rxNextLen
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   7900         MOV     R1,#0x0
   \   000029   90....       MOV     DPTR,#pRxBuf
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   CA           XCH     A,R2
   \   000031   2432         ADD     A,#0x32
   \   000033   F582         MOV     DPL,A
   \   000035   CA           XCH     A,R2
   \   000036   3400         ADDC    A,#0x0
   \   000038   F583         MOV     DPH,A
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   39           ADDC    A,R1
   \   000040   F9           MOV     R1,A
   \   000041   90....       MOV     DPTR,#pRxBuf
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   CA           XCH     A,R2
   \   000049   2432         ADD     A,#0x32
   \   00004B   F582         MOV     DPL,A
   \   00004D   CA           XCH     A,R2
   \   00004E   3400         ADDC    A,#0x0
   \   000050   F583         MOV     DPH,A
   \   000052   E8           MOV     A,R0
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   E9           MOV     A,R1
   \   000056   F0           MOVX    @DPTR,A
   1055          
   1056            rxPayloadLen -= rxNextLen;
   \   000057   90....       MOV     DPTR,#rxNextLen
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   90....       MOV     DPTR,#rxPayloadLen
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   C3           CLR     C
   \   000061   98           SUBB    A,R0
   \   000062   F0           MOVX    @DPTR,A
   1057          
   1058            rxPrepPayload();
   \   000063                ; Setup parameters for call to function rxPrepPayload
   \   000063   12....       LCALL   `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   1059          }
   \   000066   D083         POP     DPH
   \   000068   D082         POP     DPL
   \   00006A   02....       LJMP    ?BRET
   1060          
   1061          
   1062          /*=================================================================================================
   1063           * @fn          rxFcsIsr
   1064           *
   1065           * @brief       Receive ISR state for handling the FCS.
   1066           *
   1067           * @param       none
   1068           *
   1069           * @return      none
   1070           *=================================================================================================
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          static void rxFcsIsr(void)
   \                     rxFcsIsr:
   1073          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1074            uint8 crcOK;
   1075            uint8 ackWithPending = 0;
   \   000005   7E00         MOV     R6,#0x0
   1076          
   1077            /* read FCS, rxBuf is now available storage */
   1078            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000007                ; Setup parameters for call to function macMemReadRxFifo
   \   000007   7902         MOV     R1,#0x2
   \   000009   7A..         MOV     R2,#rxBuf & 0xff
   \   00000B   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00000D   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1079          
   1080            /*
   1081             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
   1082             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
   1083             *    1) the RSSI value
   1084             *    2) the average correlation value (used for LQI)
   1085             *    3) a CRC passed bit
   1086             */
   1087          
   1088            /* save the "CRC-is-OK" status */
   1089            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000010   90....       MOV     DPTR,#rxBuf + 1
   \   000013   E0           MOVX    A,@DPTR
   \   000014   5480         ANL     A,#0x80
   \   000016   F5..         MOV     ?V1,A
   1090          
   1091            /*
   1092             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
   1093             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
   1094             *  a special variant of promiscuous mode is active.
   1095             */
   1096            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000018   E5..         MOV     A,?V1
   \   00001A   700B         JNZ     ??rxFcsIsr_0
   \   00001C   90....       MOV     DPTR,#rxPromiscuousMode
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??rxFcsIsr_1 & 0xFFFF
   1097            {
   1098              int8 rssiDbm;
   1099              uint8 corr;
   1100          
   1101          #ifdef PACKET_FILTER_STATS
   1102              rxCrcSuccess++;
   1103          #endif /* PACKET_FILTER_STATS */
   1104          
   1105              /*
   1106               *  As power saving optimization, set state variable to indicate physical receive
   1107               *  has completed and then request turning of the receiver.  This means the receiver
   1108               *  can be off (if other conditions permit) during execution of the callback function.
   1109               *
   1110               *  The receiver will be requested to turn off once again at the end of the receive
   1111               *  logic.  There is no harm in doing this.
   1112               */
   1113              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000027   90....       MOV     DPTR,#macRxActive
   \   00002A   7402         MOV     A,#0x2
   \   00002C   F0           MOVX    @DPTR,A
   1114              macRxOffRequest();
   \   00002D                ; Setup parameters for call to function macRxOffRequest
   \   00002D   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1115          
   1116              /* decode RSSI and correlation values */
   1117              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   000030   90....       MOV     DPTR,#rxBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   24B7         ADD     A,#-0x49
   \   000036   FF           MOV     R7,A
   1118              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   1119              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000037   90....       MOV     DPTR,#rxBuf + 1
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   547F         ANL     A,#0x7f
   \   00003D   F5..         MOV     ?V0,A
   1120          
   1121              /* Read the source matching result back */
   1122              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \   00003F   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6008         JZ      ??rxFcsIsr_2
   \   000045                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   000045   12....       LCALL   `??MAC_SrcMatchCheckResult::?relay`; Banked call to: MAC_SrcMatchCheckResult
   \   000048   E9           MOV     A,R1
   \   000049   6002         JZ      ??rxFcsIsr_2
   1123              {
   1124                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
   1125                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   00004B   7E04         MOV     R6,#0x4
   1126              }
   1127          
   1128              /* record parameters that get passed up to high-level */
   1129              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_2:
   \   00004D   E5..         MOV     A,?V1
   \   00004F   4E           ORL     A,R6
   \   000050   F8           MOV     R0,A
   \   000051   90....       MOV     DPTR,#pRxBuf
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   C9           XCH     A,R1
   \   000059   2406         ADD     A,#0x6
   \   00005B   F582         MOV     DPL,A
   \   00005D   C9           XCH     A,R1
   \   00005E   3400         ADDC    A,#0x0
   \   000060   F583         MOV     DPH,A
   \   000062   E0           MOVX    A,@DPTR
   \   000063   48           ORL     A,R0
   \   000064   F0           MOVX    @DPTR,A
   1130              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   000065                ; Setup parameters for call to function macRadioComputeLQI
   \   000065   AA..         MOV     R2,?V0
   \   000067   EF           MOV     A,R7
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   00006C   E9           MOV     A,R1
   \   00006D   C0E0         PUSH    A
   \   00006F   90....       MOV     DPTR,#pRxBuf
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F8           MOV     R0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   C8           XCH     A,R0
   \   000077   242E         ADD     A,#0x2e
   \   000079   F582         MOV     DPL,A
   \   00007B   C8           XCH     A,R0
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   F583         MOV     DPH,A
   \   000080   D0E0         POP     A
   \   000082   F0           MOVX    @DPTR,A
   1131              pRxBuf->mac.rssi = rssiDbm;
   \   000083   EF           MOV     A,R7
   \   000084   C0E0         PUSH    A
   \   000086   90....       MOV     DPTR,#pRxBuf
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F8           MOV     R0,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   C8           XCH     A,R0
   \   00008E   2430         ADD     A,#0x30
   \   000090   F582         MOV     DPL,A
   \   000092   C8           XCH     A,R0
   \   000093   3400         ADDC    A,#0x0
   \   000095   F583         MOV     DPH,A
   \   000097   D0E0         POP     A
   \   000099   F0           MOVX    @DPTR,A
   1132              pRxBuf->mac.correlation = corr;
   \   00009A   E5..         MOV     A,?V0
   \   00009C   C0E0         PUSH    A
   \   00009E   90....       MOV     DPTR,#pRxBuf
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F8           MOV     R0,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C8           XCH     A,R0
   \   0000A6   242F         ADD     A,#0x2f
   \   0000A8   F582         MOV     DPL,A
   \   0000AA   C8           XCH     A,R0
   \   0000AB   3400         ADDC    A,#0x0
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
   1133          
   1134              /* set the MSDU pointer to point at start of data */
   1135              pRxBuf->mhr.p   = (uint8 *) (pRxBuf + 1);
   \   0000B2   90....       MOV     DPTR,#pRxBuf
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   2435         ADD     A,#0x35
   \   0000B8   F8           MOV     R0,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   3400         ADDC    A,#0x0
   \   0000BD   F9           MOV     R1,A
   \   0000BE   90....       MOV     DPTR,#pRxBuf
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   FA           MOV     R2,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   CA           XCH     A,R2
   \   0000C6   2432         ADD     A,#0x32
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   CA           XCH     A,R2
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   E8           MOV     A,R0
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   E9           MOV     A,R1
   \   0000D3   F0           MOVX    @DPTR,A
   1136              pRxBuf->msdu.p += (pRxBuf->mhr.len - pRxBuf->msdu.len);
   \   0000D4   90....       MOV     DPTR,#pRxBuf
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F8           MOV     R0,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   C8           XCH     A,R0
   \   0000DC   2434         ADD     A,#0x34
   \   0000DE   F582         MOV     DPL,A
   \   0000E0   C8           XCH     A,R0
   \   0000E1   3400         ADDC    A,#0x0
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   FA           MOV     R2,A
   \   0000E7   7B00         MOV     R3,#0x0
   \   0000E9   90....       MOV     DPTR,#pRxBuf
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F8           MOV     R0,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F8           MOV     R0,A
   \   0000FA   7900         MOV     R1,#0x0
   \   0000FC   EA           MOV     A,R2
   \   0000FD   C3           CLR     C
   \   0000FE   98           SUBB    A,R0
   \   0000FF   F8           MOV     R0,A
   \   000100   EB           MOV     A,R3
   \   000101   99           SUBB    A,R1
   \   000102   F9           MOV     R1,A
   \   000103   90....       MOV     DPTR,#pRxBuf
   \   000106   E0           MOVX    A,@DPTR
   \   000107   FA           MOV     R2,A
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F583         MOV     DPH,A
   \   00010C   8A82         MOV     DPL,R2
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   28           ADD     A,R0
   \   000112   F8           MOV     R0,A
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   39           ADDC    A,R1
   \   000116   F9           MOV     R1,A
   \   000117   90....       MOV     DPTR,#pRxBuf
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FA           MOV     R2,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F583         MOV     DPH,A
   \   000120   8A82         MOV     DPL,R2
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   E8           MOV     A,R0
   \   000125   F0           MOVX    @DPTR,A
   \   000126   A3           INC     DPTR
   \   000127   E9           MOV     A,R1
   \   000128   F0           MOVX    @DPTR,A
   1137          
   1138              /* finally... execute callback function */
   1139              macRxCompleteCallback(pRxBuf);
   \   000129                ; Setup parameters for call to function macRxCompleteCallback
   \   000129   90....       MOV     DPTR,#pRxBuf
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   FA           MOV     R2,A
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   FB           MOV     R3,A
   \   000131   12....       LCALL   `??macRxCompleteCallback::?relay`; Banked call to: macRxCompleteCallback
   1140              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   000134   90....       MOV     DPTR,#pRxBuf
   \   000137   7400         MOV     A,#0x0
   \   000139   F0           MOVX    @DPTR,A
   \   00013A   A3           INC     DPTR
   \   00013B   7400         MOV     A,#0x0
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   801F         SJMP    ??rxFcsIsr_3
   1141            }
   1142            else
   1143            {
   1144          #ifdef PACKET_FILTER_STATS
   1145              rxCrcFailure++;
   1146          #endif /* PACKET_FILTER_STATS */
   1147          
   1148              /*
   1149               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
   1150               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
   1151               *  slightly more efficient to do so.)
   1152               */
   1153              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   000140   9061A4       MOV     DPTR,#0x61a4
   \   000143   E0           MOVX    A,@DPTR
   \   000144   C2E0         CLR     0xE0 /* A   */.0
   \   000146   F0           MOVX    @DPTR,A
   1154              macRxOutgoingAckFlag = 0;
   \   000147   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00014A   7400         MOV     A,#0x0
   \   00014C   F0           MOVX    @DPTR,A
   1155          
   1156              /* the CRC failed so the packet must be discarded */
   1157              MEM_FREE((uint8 **)&pRxBuf);
   \   00014D                ; Setup parameters for call to function macDataRxMemFree
   \   00014D   7A..         MOV     R2,#pRxBuf & 0xff
   \   00014F   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   000151   12....       LCALL   `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   \   000154   E9           MOV     A,R1
   1158              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \   000155   90....       MOV     DPTR,#pRxBuf
   \   000158   7400         MOV     A,#0x0
   \   00015A   F0           MOVX    @DPTR,A
   \   00015B   A3           INC     DPTR
   \   00015C   7400         MOV     A,#0x0
   \   00015E   F0           MOVX    @DPTR,A
   1159            }
   1160          
   1161            /* reset threshold level, reset receive state, and complete receive logic */
   1162            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxFcsIsr_3:
   \   00015F   906194       MOV     DPTR,#0x6194
   \   000162   7405         MOV     A,#0x5
   \   000164   F0           MOVX    @DPTR,A
   1163            pFuncRxState = &rxStartIsr;
   \   000165   90....       MOV     DPTR,#pFuncRxState
   \   000168   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   00016A   F0           MOVX    @DPTR,A
   \   00016B   A3           INC     DPTR
   \   00016C   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   00016E   F0           MOVX    @DPTR,A
   1164            rxDone();
   \   00016F                ; Setup parameters for call to function rxDone
   \   00016F   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
   1165          }
   \   000172   7F02         MOV     R7,#0x2
   \   000174   02....       LJMP    ?BANKED_LEAVE_XDATA
   1166          
   1167          
   1168          /*=================================================================================================
   1169           * @fn          rxDone
   1170           *
   1171           * @brief       Common exit point for receive.
   1172           *
   1173           * @param       none
   1174           *
   1175           * @return      none
   1176           *=================================================================================================
   1177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1178          static void rxDone(void)
   \                     rxDone:
   1179          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1180            /* Make sure the peak RSSI is reset */
   1181            COMPRESSION_WORKAROUND_RESET_RSSI();
   1182            
   1183            /* if the receive FIFO has overflowed, flush it here */
   1184            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV     DPTR,#0x6193
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000A   500E         JNC     ??rxDone_0
   \   00000C   906193       MOV     DPTR,#0x6193
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E7         MOV     C,0xE0 /* A   */.7
   \   000012   4006         JC      ??rxDone_0
   1185            {
   1186              MAC_RADIO_FLUSH_RX_FIFO();
   \   000014   75E1ED       MOV     0xe1,#-0x13
   \   000017   75E1ED       MOV     0xe1,#-0x13
   1187            }
   1188          
   1189            /* mark receive as inactive */
   1190            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   00001A   90....       MOV     DPTR,#macRxActive
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
   1191          
   1192            /* if there is no outgoing ACK, run the post receive updates */
   1193            if (!macRxOutgoingAckFlag)
   \   000020   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000023   E0           MOVX    A,@DPTR
   \   000024   7003         JNZ     ??rxDone_1
   1194            {
   1195              rxPostRxUpdates();
   \   000026                ; Setup parameters for call to function rxPostRxUpdates
   \   000026   12....       LCALL   `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1196            }
   1197          }
   \                     ??rxDone_1:
   \   000029   D083         POP     DPH
   \   00002B   D082         POP     DPL
   \   00002D   02....       LJMP    ?BRET
   \   000030                REQUIRE RFST
   1198          
   1199          
   1200          /**************************************************************************************************
   1201           * @fn          macRxAckTxDoneCallback
   1202           *
   1203           * @brief       Function called when the outoing ACK has completed transmitting.
   1204           *
   1205           * @param       none
   1206           *
   1207           * @return      none
   1208           **************************************************************************************************
   1209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1210          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1211          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1212            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   1213          
   1214            /*
   1215             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1216             *  could be executed before the primary receive logic completes.  To prevent this, the
   1217             *  post updates are only executed if receive logic is no longer active.  In the case the
   1218             *  post updates are not executed here, they will execute when the main receive logic
   1219             *  completes.
   1220             */
   1221            if (!macRxActive)
   \   00000A   90....       MOV     DPTR,#macRxActive
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??macRxAckTxDoneCallback_0
   1222            {
   1223              rxPostRxUpdates();
   \   000010                ; Setup parameters for call to function rxPostRxUpdates
   \   000010   12....       LCALL   `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1224            }
   1225          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000013   D083         POP     DPH
   \   000015   D082         POP     DPL
   \   000017   02....       LJMP    ?BRET
   1226          
   1227          
   1228          /*=================================================================================================
   1229           * @fn          rxPostRxUpdates
   1230           *
   1231           * @brief       Updates that need to be performed once receive is complete.
   1232           *
   1233           *              It is not fatal to execute this function if somehow receive is active.  Under
   1234           *              certain timing/interrupt conditions a new receive may have started before this
   1235           *              function executes.  This should happen very rarely (if it happens at all) and
   1236           *              would cause no problems.
   1237           *
   1238           * @param       none
   1239           *
   1240           * @return      none
   1241           *=================================================================================================
   1242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1244          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1245            /* turn off receiver if permitted */
   1246            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1247          
   1248            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1249            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   1250          
   1251            /* initiate and transmit that was queued during receive */
   1252            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   1253          }
   \   00000D   D083         POP     DPH
   \   00000F   D082         POP     DPL
   \   000011   02....       LJMP    ?BRET
   1254          
   1255          
   1256          /*=================================================================================================
   1257           * @fn          rxDiscardFrame
   1258           *
   1259           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1260           *
   1261           * @param       none
   1262           *
   1263           * @return      none
   1264           *=================================================================================================
   1265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1266          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1267          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1268            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV     DPTR,#pFuncRxState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64..         XRL     A,#`??rxStartIsr::?relay` & 0xff
   \   00000A   7004         JNZ     ??rxDiscardFrame_0
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   64..         XRL     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ      ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1269          
   1270            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV     DPTR,#rxUnreadLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??rxDiscardFrame_2
   1271            {
   1272              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
   \   00001E   802D         SJMP    ??rxDiscardFrame_3
   1273            }
   1274            else
   1275            {
   1276              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   90....       MOV     DPTR,#rxUnreadLen
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C3           CLR     C
   \   000025   9410         SUBB    A,#0x10
   \   000027   500A         JNC     ??rxDiscardFrame_4
   \   000029   90....       MOV     DPTR,#rxUnreadLen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   90....       MOV     DPTR,#rxNextLen
   \   000030   F0           MOVX    @DPTR,A
   \   000031   8006         SJMP    ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   000033   90....       MOV     DPTR,#rxNextLen
   \   000036   7410         MOV     A,#0x10
   \   000038   F0           MOVX    @DPTR,A
   1277              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxDiscardFrame_5:
   \   000039   90....       MOV     DPTR,#rxNextLen
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   24FF         ADD     A,#-0x1
   \   00003F   906194       MOV     DPTR,#0x6194
   \   000042   F0           MOVX    @DPTR,A
   1278              pFuncRxState = &rxDiscardIsr;
   \   000043   90....       MOV     DPTR,#pFuncRxState
   \   000046   74..         MOV     A,#`??rxDiscardIsr::?relay` & 0xff
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   74..         MOV     A,#(`??rxDiscardIsr::?relay` >> 8) & 0xff
   \   00004C   F0           MOVX    @DPTR,A
   1279            }
   1280          }
   \                     ??rxDiscardFrame_3:
   \   00004D   D083         POP     DPH
   \   00004F   D082         POP     DPL
   \   000051   02....       LJMP    ?BRET
   1281          
   1282          
   1283          /*=================================================================================================
   1284           * @fn          rxDiscardIsr
   1285           *
   1286           * @brief       Receive ISR state for discarding a packet.
   1287           *
   1288           * @param       none
   1289           *
   1290           * @return      none
   1291           *=================================================================================================
   1292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1293          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1294          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV     A,#-0x10
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1295            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1296          
   1297            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   90....       MOV     DPTR,#rxNextLen
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   AA..         MOV     R2,?XSP + 0
   \   000010   AB..         MOV     R3,?XSP + 1
   \   000012   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1298            rxUnreadLen -= rxNextLen;
   \   000015   90....       MOV     DPTR,#rxNextLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   90....       MOV     DPTR,#rxUnreadLen
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   C3           CLR     C
   \   00001F   98           SUBB    A,R0
   \   000020   F0           MOVX    @DPTR,A
   1299          
   1300            /* read out and discard bytes until all bytes of packet are disposed of */
   1301            if (rxUnreadLen != 0)
   \   000021   90....       MOV     DPTR,#rxUnreadLen
   \   000024   E0           MOVX    A,@DPTR
   \   000025   601D         JZ      ??rxDiscardIsr_0
   1302            {
   1303              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   000027   90....       MOV     DPTR,#rxUnreadLen
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C3           CLR     C
   \   00002C   9410         SUBB    A,#0x10
   \   00002E   5027         JNC     ??rxDiscardIsr_1
   1304              {
   1305                rxNextLen = rxUnreadLen;
   \   000030   90....       MOV     DPTR,#rxUnreadLen
   \   000033   E0           MOVX    A,@DPTR
   \   000034   90....       MOV     DPTR,#rxNextLen
   \   000037   F0           MOVX    @DPTR,A
   1306                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000038   90....       MOV     DPTR,#rxNextLen
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   24FF         ADD     A,#-0x1
   \   00003E   906194       MOV     DPTR,#0x6194
   \   000041   F0           MOVX    @DPTR,A
   \   000042   8013         SJMP    ??rxDiscardIsr_1
   1307              }
   1308            }
   1309            else
   1310            {
   1311              /* reset threshold level, reset receive state, and complete receive logic */
   1312              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   000044   906194       MOV     DPTR,#0x6194
   \   000047   7405         MOV     A,#0x5
   \   000049   F0           MOVX    @DPTR,A
   1313              pFuncRxState = &rxStartIsr;
   \   00004A   90....       MOV     DPTR,#pFuncRxState
   \   00004D   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000053   F0           MOVX    @DPTR,A
   1314              rxDone();
   \   000054                ; Setup parameters for call to function rxDone
   \   000054   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
   1315            }
   1316          }
   \                     ??rxDiscardIsr_1:
   \   000057   7410         MOV     A,#0x10
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   D083         POP     DPH
   \   00005E   D082         POP     DPL
   \   000060   02....       LJMP    ?BRET
   1317          
   1318          
   1319          /**************************************************************************************************
   1320           * @fn          macRxFifoOverflowIsr
   1321           *
   1322           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1323           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1324           *              It simply halts and cleanup the RX.
   1325           *
   1326           * @param       none
   1327           *
   1328           * @return      none
   1329           **************************************************************************************************
   1330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1331          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1332          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1333            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX    A,@DPTR
   \   000008   2401         ADD     A,#0x1
   \   00000A   F0           MOVX    @DPTR,A
   1334            macRxHaltCleanup();
   \   00000B                ; Setup parameters for call to function macRxHaltCleanup
   \   00000B   12....       LCALL   `??macRxHaltCleanup::?relay`; Banked call to: macRxHaltCleanup
   1335          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   1336          
   1337          
   1338          /**************************************************************************************************
   1339           * @fn          macRxPromiscuousMode
   1340           *
   1341           * @brief       Sets promiscuous mode - enabling or disabling it.
   1342           *
   1343           * @param       none
   1344           *
   1345           * @return      none
   1346           **************************************************************************************************
   1347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1348          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1349          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1350            rxPromiscuousMode = mode;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000B   F0           MOVX    @DPTR,A
   1351          
   1352            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000C   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   700F         JNZ     ??macRxPromiscuousMode_0
   1353            {
   1354              MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   000012   906180       MOV     DPTR,#0x6180
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
   \   000018   906180       MOV     DPTR,#0x6180
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   4405         ORL     A,#0x5
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   8014         SJMP    ??macRxPromiscuousMode_1
   1355            }
   1356            else
   1357            {
   1358              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1359                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   6E           XRL     A,R6
   \   000024   6008         JZ      ??macRxPromiscuousMode_2
   \   000026   7401         MOV     A,#0x1
   \   000028   6E           XRL     A,R6
   \   000029   6003         JZ      ??macRxPromiscuousMode_2
   \   00002B                ; Setup parameters for call to function halAssertHandler
   \   00002B   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1360          
   1361              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   00002E   906180       MOV     DPTR,#0x6180
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C2E0         CLR     0xE0 /* A   */.0
   \   000034   F0           MOVX    @DPTR,A
   1362            }
   1363          }
   \                     ??macRxPromiscuousMode_1:
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxRadioPowerUpInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxRadioPowerUpInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxTxReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxTxReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxHaltCleanup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxHaltCleanupFinalStep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxHaltCleanupFinalStep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxThresholdIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxThresholdIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxStartIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxStartIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxAddrIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxAddrIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxPrepPayload::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPrepPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxPayloadIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPayloadIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxFcsIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxFcsIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxDone::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDone

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxAckTxDoneCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxAckTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxPostRxUpdates::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPostRxUpdates

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxDiscardFrame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxDiscardIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxFifoOverflowIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxFifoOverflowIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxPromiscuousMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxPromiscuousMode
   1364          
   1365          #ifdef CC2591_COMPRESSION_WORKAROUND
   1366          /**************************************************************************************************
   1367           * @fn          macRxResetRssi
   1368           *
   1369           * @brief       This function reset RSSI peak if the device is not actively in TX or RX.
   1370           *
   1371           * @param       none
   1372           *
   1373           * @return      none
   1374           **************************************************************************************************
   1375           */
   1376          void macRxResetRssi(void)
   1377          {
   1378            if ( !(macRxActive || macRxOutgoingAckFlag || macTxActive) )
   1379            {
   1380              COMPRESSION_WORKAROUND_RESET_RSSI();
   1381            }
   1382          }
   1383          #endif /* CC2591_COMPRESSION_WORKAROUND */
   1384          
   1385          /**************************************************************************************************
   1386           *                                  Compile Time Integrity Checks
   1387           **************************************************************************************************
   1388           */
   1389          
   1390          /* check for changes to the spec that would affect the source code */
   1391          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1392               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1393               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1394               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1395               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1396               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1397               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1398               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1399               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1400          #error "ERROR!  Change to the spec that requires modification of source code."
   1401          #endif
   1402          
   1403          /* check for changes to the internal flags format */
   1404          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1405               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1406               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1407               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1408               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1409               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1410          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1411          #endif
   1412          
   1413          /* validate CRC OK bit optimization */
   1414          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1415          #error "ERROR!  Optimization relies on these bits having the same position."
   1416          #endif
   1417          
   1418          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1419          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1420          #endif
   1421          
   1422          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1423          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1424          #endif
   1425          
   1426          
   1427          /**************************************************************************************************
   1428          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   macRxAckTxDoneCallback
        2      0   -> rxPostRxUpdates
      2      0   macRxFifoOverflowIsr
        2      0   -> macRxHaltCleanup
      2      0   macRxHaltCleanup
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxInit
      0      9   macRxPromiscuousMode
        0      9   -> halAssertHandler
      2      0   macRxRadioPowerUpInit
      2      0   macRxThresholdIsr
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxTxReset
        2      0   -> macRxHardDisable
        2      0   -> macRxPromiscuousMode
      0     32   rxAddrIsr
        0     32   -> halAssertHandler
        0     32   -> macMemReadRxFifo
        0     32   -> rxPrepPayload
        0     32   -> sAddrExtCpy
      2     19   rxDiscardFrame
        2      0   -> halAssertHandler
        2      0   -> rxDone
      2     16   rxDiscardIsr
        2     16   -> macMemReadRxFifo
        2     16   -> rxDone
      2     19   rxDone
        2      0   -> rxPostRxUpdates
      1     10   rxFcsIsr
        0     10   -> MAC_SrcMatchCheckResult
        0     10   -> macDataRxMemFree
        0     10   -> macMemReadRxFifo
        0     10   -> macRadioComputeLQI
        0     10   -> macRxCompleteCallback
        0     10   -> macRxOffRequest
        0     10   -> rxDone
      0      9   rxHaltCleanupFinalStep
        0      9   -> macDataRxMemFree
        0      9   -> rxPostRxUpdates
      2      0   rxPayloadIsr
        2      0   -> macMemReadRxFifo
        2      0   -> rxPrepPayload
      2     19   rxPostRxUpdates
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2     32   rxPrepPayload
      1     22   rxStartIsr
        0     19   -> MAC_SrcMatchCheckAllPending
        0     19   -> halAssertHandler
        0     19   -> macCspForceTxDoneIfPending
        0     19   -> macDataRxMemAlloc
        0     19   -> macMcuOverflowCapture
        0     19   -> macMcuTimerCapture
        0     19   -> macMemReadRxFifo
        0     19   -> macRadioComputeLQI
        0     19   -> macRxCheckMACPendingCallback
        0     19   -> macRxCheckPendingCallback
        0     19   -> macTxAckNotReceivedCallback
        0     19   -> macTxAckReceivedCallback
        0     22   -> osal_memcpy
        0     19   -> rxDiscardFrame
        0     19   -> rxDone
        0     19   -> rxPostRxUpdates
        0     19   -> rxPrepPayload


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  RFIRQF0
       1  RFIRQF1
       1  RFST
       1  S1CON
       1  _A_IEN0
      26  macRxAckTxDoneCallback
       6  macRxAckTxDoneCallback::?relay
       1  macRxActive
       4  macRxAddrLen
      21  macRxFifoOverflowIsr
       6  macRxFifoOverflowIsr::?relay
       1  macRxFilter
      32  macRxHaltCleanup
       6  macRxHaltCleanup::?relay
      73  macRxInit
       6  macRxInit::?relay
       1  macRxOutgoingAckFlag
      58  macRxPromiscuousMode
       6  macRxPromiscuousMode::?relay
      44  macRxRadioPowerUpInit
       6  macRxRadioPowerUpInit::?relay
      58  macRxThresholdIsr
       6  macRxThresholdIsr::?relay
      25  macRxTxReset
       6  macRxTxReset::?relay
       2  pFuncRxState
       2  pRxBuf
     463  rxAddrIsr
       6  rxAddrIsr::?relay
       4  rxBuf
      84  rxDiscardFrame
       6  rxDiscardFrame::?relay
      99  rxDiscardIsr
       6  rxDiscardIsr::?relay
      48  rxDone
       6  rxDone::?relay
     375  rxFcsIsr
       6  rxFcsIsr::?relay
       1  rxFifoOverflowCount
       1  rxFilter
     106  rxHaltCleanupFinalStep
       6  rxHaltCleanupFinalStep::?relay
       1  rxIsrActiveFlag
       1  rxNextLen
     109  rxPayloadIsr
       6  rxPayloadIsr::?relay
       1  rxPayloadLen
      20  rxPostRxUpdates
       6  rxPostRxUpdates::?relay
      70  rxPrepPayload
       6  rxPrepPayload::?relay
       1  rxPromiscuousMode
       1  rxResetFlag
    1423  rxStartIsr
       6  rxStartIsr::?relay
       1  rxUnreadLen

 
 3 134 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
 3 246 bytes of CODE  memory
     0 bytes of DATA  memory (+ 5 bytes shared)
    19 bytes of XDATA memory

Errors: none
Warnings: none
