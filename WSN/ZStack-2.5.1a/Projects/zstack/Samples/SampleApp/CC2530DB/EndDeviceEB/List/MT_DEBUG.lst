###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:22
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\design\ZStack-2.5.1a\Components\mt\MT_DEBUG.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\mt\MT_DEBUG.c -D NWK_AUTO_POLL -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\MT_DEBUG.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\MT_DEBUG.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\mt\MT_DEBUG.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2011-06-07 14:34:55 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26241 $
      5          
      6            Description:
      7          
      8            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "mac_main.h"
     49          #include "mac_data.h"
     50          #include "mac_rx.h"
     51          #include "mac_tx.h"
     52          #include "nwk_globals.h"
     53          
     54          /***************************************************************************************************
     55           * LOCAL FUNCTIONs
     56           ***************************************************************************************************/
     57          
     58          #if defined (MT_DEBUG_FUNC)
     59          static void MT_DebugSetThreshold(uint8 *pBuf);
     60          static void MT_DebugMacDataDump(void);
     61          #endif
     62          
     63          #if defined (MT_DEBUG_FUNC)
     64          /***************************************************************************************************
     65           * @fn      MT_DebugProcessing
     66           *
     67           * @brief   Process all the DEBUG commands that are issued by test tool
     68           *
     69           * @param   pBuf - pointer to received buffer
     70           *
     71           * @return  status
     72           ***************************************************************************************************/
     73          uint8 MT_DebugCommandProcessing(uint8 *pBuf)
     74          {
     75            uint8 status = MT_RPC_SUCCESS;
     76          
     77            switch (pBuf[MT_RPC_POS_CMD1])
     78            {
     79              case MT_DEBUG_SET_THRESHOLD:
     80                MT_DebugSetThreshold(pBuf);
     81                break;
     82          
     83            case MT_DEBUG_MAC_DATA_DUMP:
     84                MT_DebugMacDataDump();
     85                break;
     86          
     87              default:
     88                status = MT_RPC_ERR_COMMAND_ID;
     89                break;
     90            }
     91          
     92            return status;
     93          }
     94          
     95          /***************************************************************************************************
     96           * @fn      MT_DebugSetThreshold
     97           *
     98           * @brief   Process Debug Set Threshold
     99           *
    100           * @param   pBuf - pointer to received buffer
    101           *
    102           * @return  void
    103           ***************************************************************************************************/
    104          static void MT_DebugSetThreshold(uint8 *pBuf)
    105          {
    106            uint8 retValue = ZSuccess;
    107            uint8 cmdId;
    108          
    109            /* parse header */
    110            cmdId = pBuf[MT_RPC_POS_CMD1];
    111            pBuf += MT_RPC_FRAME_HDR_SZ;
    112          
    113            /* Populate info */
    114            debugCompId = *pBuf++;
    115            debugThreshold = *pBuf++;
    116          
    117            /* Build and send back the response */
    118            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG), cmdId, 1, &retValue);
    119          }
    120          
    121          /***************************************************************************************************
    122           * @fn      MT_DebugMacDataDump
    123           *
    124           * @brief   Process the debug MAC Data Dump request.
    125           *
    126           * @param   pBuf - pointer to received buffer
    127           *
    128           * @return  void
    129           ***************************************************************************************************/
    130          static void MT_DebugMacDataDump(void)
    131          {
    132            uint8 buf[sizeof(mtDebugMacDataDump_t)];
    133            uint8 *pBuf = buf;
    134          
    135          #ifdef PACKET_FILTER_STATS
    136            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 0);
    137            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 1);
    138            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 2);
    139            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 3);
    140            *pBuf++ = BREAK_UINT32(rxCrcFailure, 0);
    141            *pBuf++ = BREAK_UINT32(rxCrcFailure, 1);
    142            *pBuf++ = BREAK_UINT32(rxCrcFailure, 2);
    143            *pBuf++ = BREAK_UINT32(rxCrcFailure, 3);
    144            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 0);
    145            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 1);
    146            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 2);
    147            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 3);
    148          #endif
    149          #if defined HAL_MCU_CC2530
    150            *pBuf++ = FSMSTAT0;
    151            *pBuf++ = FSMSTAT1;
    152          #else
    153            *pBuf++ = macSpiReadReg(FSMSTAT0);
    154            *pBuf++ = macSpiReadReg(FSMSTAT1);
    155          #endif
    156            *pBuf++ = macData.rxCount;
    157            *pBuf++ = macData.directCount;
    158            *pBuf++ = macMain.state;
    159            *pBuf++ = macRxActive;
    160            *pBuf   = macTxActive;
    161          
    162            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG),
    163                                                 MT_DEBUG_MAC_DATA_DUMP, sizeof(buf), buf);
    164          }
    165          #endif
    166          
    167          /***************************************************************************************************
    168           * @fn      MT_ProcessDebugMsg
    169           *
    170           * @brief   Build and send a debug message.
    171           *
    172           * @param   byte *data - pointer to the data portion of the debug message
    173           *
    174           * @return  void
    175           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
   \                     MT_ProcessDebugMsg:
    177          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    178            byte *msg_ptr;
    179            byte dataLen;
    180            uint8 buf[11];
    181            uint8 *pBuf;
    182          
    183            /* Calculate the data length based */
    184            dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
   \   00000E   75F002       MOV     B,#0x2
   \   000011   85..82       MOV     DPL,?V0
   \   000014   85..83       MOV     DPH,?V1
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   A4           MUL     AB
   \   00001D   2405         ADD     A,#0x5
   \   00001F   F5..         MOV     ?V2,A
    185          
    186            /* Get a message buffer to build the debug message */
    187            msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
   \   000021                ; Setup parameters for call to function osal_msg_allocate
   \   000021   7406         MOV     A,#0x6
   \   000023   25..         ADD     A,?V2
   \   000025   FA           MOV     R2,A
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00002B   8A..         MOV     ?V4,R2
   \   00002D   8B..         MOV     ?V5,R3
   \   00002F   85....       MOV     ?V6,?V4
   \   000032   85....       MOV     ?V7,?V5
    188            if ( msg_ptr )
   \   000035   E5..         MOV     A,?V6
   \   000037   45..         ORL     A,?V7
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??MT_ProcessDebugMsg_0 & 0xFFFF
    189            {
    190              /* Build the message */
    191              pBuf = buf;
   \   00003E   A8..         MOV     R0,?XSP + 0
   \   000040   A9..         MOV     R1,?XSP + 1
   \   000042   88..         MOV     ?V4,R0
   \   000044   89..         MOV     ?V5,R1
   \   000046   AE..         MOV     R6,?V4
   \   000048   AF..         MOV     R7,?V5
    192              *pBuf++ = msg->compID;
   \   00004A   85..82       MOV     DPL,?V0
   \   00004D   85..83       MOV     DPH,?V1
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   C0E0         PUSH    A
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   A3           INC     DPTR
   \   000061   AE82         MOV     R6,DPL
   \   000063   AF83         MOV     R7,DPH
    193              *pBuf++ = msg->severity;
   \   000065   85..82       MOV     DPL,?V0
   \   000068   85..83       MOV     DPH,?V1
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C0E0         PUSH    A
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   D0E0         POP     A
   \   000077   F0           MOVX    @DPTR,A
   \   000078   8E82         MOV     DPL,R6
   \   00007A   8F83         MOV     DPH,R7
   \   00007C   A3           INC     DPTR
   \   00007D   AE82         MOV     R6,DPL
   \   00007F   AF83         MOV     R7,DPH
    194              *pBuf++ = msg->numParams;
   \   000081   85..82       MOV     DPL,?V0
   \   000084   85..83       MOV     DPH,?V1
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   C0E0         PUSH    A
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   D0E0         POP     A
   \   000094   F0           MOVX    @DPTR,A
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   AE82         MOV     R6,DPL
   \   00009C   AF83         MOV     R7,DPH
    195          
    196              if ( msg->numParams >= 1 )
   \   00009E   85..82       MOV     DPL,?V0
   \   0000A1   85..83       MOV     DPH,?V1
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6049         JZ      ??MT_ProcessDebugMsg_1
    197              {
    198                *pBuf++ = LO_UINT16( msg->param1 );
   \   0000AB   85..82       MOV     DPL,?V0
   \   0000AE   85..83       MOV     DPH,?V1
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F8           MOV     R0,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   E8           MOV     A,R0
   \   0000BC   C0E0         PUSH    A
   \   0000BE   8E82         MOV     DPL,R6
   \   0000C0   8F83         MOV     DPH,R7
   \   0000C2   D0E0         POP     A
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   A3           INC     DPTR
   \   0000CA   AE82         MOV     R6,DPL
   \   0000CC   AF83         MOV     R7,DPH
    199                *pBuf++ = HI_UINT16( msg->param1 );
   \   0000CE   85..82       MOV     DPL,?V0
   \   0000D1   85..83       MOV     DPH,?V1
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F8           MOV     R0,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F9           MOV     R1,A
   \   0000DE   E4           CLR     A
   \   0000DF   C9           XCH     A,R1
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E8           MOV     A,R0
   \   0000E2   C0E0         PUSH    A
   \   0000E4   8E82         MOV     DPL,R6
   \   0000E6   8F83         MOV     DPH,R7
   \   0000E8   D0E0         POP     A
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   8E82         MOV     DPL,R6
   \   0000ED   8F83         MOV     DPH,R7
   \   0000EF   A3           INC     DPTR
   \   0000F0   AE82         MOV     R6,DPL
   \   0000F2   AF83         MOV     R7,DPH
    200              }
    201          
    202              if ( msg->numParams >= 2 )
   \                     ??MT_ProcessDebugMsg_1:
   \   0000F4   85..82       MOV     DPL,?V0
   \   0000F7   85..83       MOV     DPH,?V1
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   C3           CLR     C
   \   000100   9402         SUBB    A,#0x2
   \   000102   404D         JC      ??MT_ProcessDebugMsg_2
    203              {
    204                *pBuf++ = LO_UINT16( msg->param2 );
   \   000104   85..82       MOV     DPL,?V0
   \   000107   85..83       MOV     DPH,?V1
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F8           MOV     R0,A
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F9           MOV     R1,A
   \   000116   E8           MOV     A,R0
   \   000117   C0E0         PUSH    A
   \   000119   8E82         MOV     DPL,R6
   \   00011B   8F83         MOV     DPH,R7
   \   00011D   D0E0         POP     A
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   8E82         MOV     DPL,R6
   \   000122   8F83         MOV     DPH,R7
   \   000124   A3           INC     DPTR
   \   000125   AE82         MOV     R6,DPL
   \   000127   AF83         MOV     R7,DPH
    205                *pBuf++ = HI_UINT16( msg->param2 );
   \   000129   85..82       MOV     DPL,?V0
   \   00012C   85..83       MOV     DPH,?V1
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F8           MOV     R0,A
   \   000138   A3           INC     DPTR
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   F9           MOV     R1,A
   \   00013B   E4           CLR     A
   \   00013C   C9           XCH     A,R1
   \   00013D   F8           MOV     R0,A
   \   00013E   E8           MOV     A,R0
   \   00013F   C0E0         PUSH    A
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   D0E0         POP     A
   \   000147   F0           MOVX    @DPTR,A
   \   000148   8E82         MOV     DPL,R6
   \   00014A   8F83         MOV     DPH,R7
   \   00014C   A3           INC     DPTR
   \   00014D   AE82         MOV     R6,DPL
   \   00014F   AF83         MOV     R7,DPH
    206              }
    207          
    208              if ( msg->numParams == 3 )
   \                     ??MT_ProcessDebugMsg_2:
   \   000151   85..82       MOV     DPL,?V0
   \   000154   85..83       MOV     DPH,?V1
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   6403         XRL     A,#0x3
   \   00015E   7051         JNZ     ??MT_ProcessDebugMsg_3
    209              {
    210                *pBuf++ = LO_UINT16( msg->param3 );
   \   000160   85..82       MOV     DPL,?V0
   \   000163   85..83       MOV     DPH,?V1
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F8           MOV     R0,A
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   F9           MOV     R1,A
   \   000174   E8           MOV     A,R0
   \   000175   C0E0         PUSH    A
   \   000177   8E82         MOV     DPL,R6
   \   000179   8F83         MOV     DPH,R7
   \   00017B   D0E0         POP     A
   \   00017D   F0           MOVX    @DPTR,A
   \   00017E   8E82         MOV     DPL,R6
   \   000180   8F83         MOV     DPH,R7
   \   000182   A3           INC     DPTR
   \   000183   AE82         MOV     R6,DPL
   \   000185   AF83         MOV     R7,DPH
    211                *pBuf++ = HI_UINT16( msg->param3 );
   \   000187   85..82       MOV     DPL,?V0
   \   00018A   85..83       MOV     DPH,?V1
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F8           MOV     R0,A
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F9           MOV     R1,A
   \   00019B   E4           CLR     A
   \   00019C   C9           XCH     A,R1
   \   00019D   F8           MOV     R0,A
   \   00019E   E8           MOV     A,R0
   \   00019F   C0E0         PUSH    A
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   D0E0         POP     A
   \   0001A7   F0           MOVX    @DPTR,A
   \   0001A8   8E82         MOV     DPL,R6
   \   0001AA   8F83         MOV     DPH,R7
   \   0001AC   A3           INC     DPTR
   \   0001AD   AE82         MOV     R6,DPL
   \   0001AF   AF83         MOV     R7,DPH
    212              }
    213          
    214              *pBuf++ = LO_UINT16( msg->timestamp );
   \                     ??MT_ProcessDebugMsg_3:
   \   0001B1   E5..         MOV     A,?V0
   \   0001B3   240B         ADD     A,#0xb
   \   0001B5   F582         MOV     DPL,A
   \   0001B7   E4           CLR     A
   \   0001B8   35..         ADDC    A,?V1
   \   0001BA   F583         MOV     DPH,A
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   F8           MOV     R0,A
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F9           MOV     R1,A
   \   0001C1   E8           MOV     A,R0
   \   0001C2   C0E0         PUSH    A
   \   0001C4   8E82         MOV     DPL,R6
   \   0001C6   8F83         MOV     DPH,R7
   \   0001C8   D0E0         POP     A
   \   0001CA   F0           MOVX    @DPTR,A
   \   0001CB   8E82         MOV     DPL,R6
   \   0001CD   8F83         MOV     DPH,R7
   \   0001CF   A3           INC     DPTR
   \   0001D0   AE82         MOV     R6,DPL
   \   0001D2   AF83         MOV     R7,DPH
    215              *pBuf++ = HI_UINT16( msg->timestamp );
   \   0001D4   E5..         MOV     A,?V0
   \   0001D6   240B         ADD     A,#0xb
   \   0001D8   F582         MOV     DPL,A
   \   0001DA   E4           CLR     A
   \   0001DB   35..         ADDC    A,?V1
   \   0001DD   F583         MOV     DPH,A
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   F8           MOV     R0,A
   \   0001E1   A3           INC     DPTR
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F9           MOV     R1,A
   \   0001E4   E4           CLR     A
   \   0001E5   C9           XCH     A,R1
   \   0001E6   F8           MOV     R0,A
   \   0001E7   E8           MOV     A,R0
   \   0001E8   C0E0         PUSH    A
   \   0001EA   8E82         MOV     DPL,R6
   \   0001EC   8F83         MOV     DPH,R7
   \   0001EE   D0E0         POP     A
   \   0001F0   F0           MOVX    @DPTR,A
   \   0001F1   8E82         MOV     DPL,R6
   \   0001F3   8F83         MOV     DPH,R7
   \   0001F5   A3           INC     DPTR
   \   0001F6   AE82         MOV     R6,DPL
   \   0001F8   AF83         MOV     R7,DPH
    216          
    217          #ifdef MT_UART_DEFAULT_PORT
    218              /* Debug message is set to AREQ CMD 0x80 for now */
    219              /* Build and send back the response */
    220              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), 0x80, dataLen, buf);
   \   0001FA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001FA   AC..         MOV     R4,?XSP + 0
   \   0001FC   AD..         MOV     R5,?XSP + 1
   \   0001FE   AB..         MOV     R3,?V2
   \   000200   7A80         MOV     R2,#-0x80
   \   000202   7948         MOV     R1,#0x48
   \   000204   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    221          #endif
    222              osal_msg_deallocate( msg_ptr );
   \   000207                ; Setup parameters for call to function osal_msg_deallocate
   \   000207   AA..         MOV     R2,?V6
   \   000209   AB..         MOV     R3,?V7
   \   00020B   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00020E   E9           MOV     A,R1
    223            }
    224          }
   \                     ??MT_ProcessDebugMsg_0:
   \   00020F   740B         MOV     A,#0xb
   \   000211   12....       LCALL   ?DEALLOC_XSTACK8
   \   000214   7F08         MOV     R7,#0x8
   \   000216   02....       LJMP    ?BANKED_LEAVE_XDATA
    225          
    226          /***************************************************************************************************
    227           * @fn      MT_ProcessDebugStr
    228           *
    229           * @brief   Build and send a debug string.
    230           *
    231           * @param   byte *dstr - pointer to the data portion of the debug message
    232           *
    233           * @return  void
    234           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          void MT_ProcessDebugStr(mtDebugStr_t *dstr)
   \                     MT_ProcessDebugStr:
    236          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    237            byte *msg_ptr;
    238          
    239            /* Get a message buffer to build the debug message */
    240            msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->strLen) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   2405         ADD     A,#0x5
   \   000012   FA           MOV     R2,A
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000018   8A..         MOV     ?V2,R2
   \   00001A   8B..         MOV     ?V3,R3
   \   00001C   85....       MOV     ?V0,?V2
   \   00001F   85....       MOV     ?V1,?V3
    241            if ( msg_ptr )
   \   000022   E5..         MOV     A,?V0
   \   000024   45..         ORL     A,?V1
   \   000026   6022         JZ      ??MT_ProcessDebugStr_0
    242            {
    243          #ifdef MT_UART_DEFAULT_PORT
    244              /* Debug message is set to AREQ CMD 0x80 for now */
    245              /* Build and send back the response */
    246              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), MT_DEBUG_MSG, dstr->strLen, dstr->pString);
   \   000028                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FC           MOV     R4,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FD           MOV     R5,A
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FB           MOV     R3,A
   \   00003C   7A80         MOV     R2,#-0x80
   \   00003E   7948         MOV     R1,#0x48
   \   000040   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    247          #endif
    248              osal_mem_free( msg_ptr );
   \   000043                ; Setup parameters for call to function osal_mem_free
   \   000043   AA..         MOV     R2,?V0
   \   000045   AB..         MOV     R3,?V1
   \   000047   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    249            }
    250          }
   \                     ??MT_ProcessDebugStr_0:
   \   00004A   7F04         MOV     R7,#0x4
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugStr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugStr
    251          
    252          /**************************************************************************************************
    253           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     27   MT_ProcessDebugMsg
        0     27   -> MT_BuildAndSendZToolResponse
        0     27   -> osal_msg_allocate
        0     27   -> osal_msg_deallocate
      0     12   MT_ProcessDebugStr
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     537  MT_ProcessDebugMsg
       6  MT_ProcessDebugMsg::?relay
      79  MT_ProcessDebugStr
       6  MT_ProcessDebugStr::?relay

 
 616 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
 628 bytes of CODE memory

Errors: none
Warnings: none
