###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:23
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\design\ZStack-2.5.1a\Components\mt\MT_TASK.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\mt\MT_TASK.c -D NWK_AUTO_POLL -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\MT_TASK.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\MT_TASK.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2011-06-07 15:36:01 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26245 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          
     51          #if !defined( NONWK )
     52          #include "MT_ZDO.h"
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          
     63          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     64          
     65          /***************************************************************************************************
     66           * GLOBALS
     67           ***************************************************************************************************/
     68          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     69          uint8 MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     70          
     71          /***************************************************************************************************
     72           * @fn      MT_TaskInit
     73           *
     74           * @brief  MonitorTest Task Initialization.  This function is put into the
     75           *         task table.
     76           *
     77           * @param   task_id - task ID of the MT Task
     78           *
     79           * @return  void
     80           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     82          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     83            MT_TaskID = task_id;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#MT_TaskID
   \   00000B   F0           MOVX    @DPTR,A
     84          
     85            /* Initialize the Serial port */
     86            MT_UartInit();
   \   00000C                ; Setup parameters for call to function MT_UartInit
   \   00000C   12....       LCALL   `??MT_UartInit::?relay`; Banked call to: MT_UartInit
     87          
     88            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     89            MT_UartRegisterTaskID(task_id);
   \   00000F                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
     90          
     91            osal_set_event(task_id, MT_SECONDARY_INIT_EVENT);
   \   000014                ; Setup parameters for call to function osal_set_event
   \   000014   7A10         MOV     R2,#0x10
   \   000016   7B00         MOV     R3,#0x0
   \   000018   EE           MOV     A,R6
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001D   E9           MOV     A,R1
     92          }
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
     93          
     94          /**************************************************************************************************
     95           * @fn      MT_ProcessEvent
     96           *
     97           * @brief   MonitorTest Task Event Processor.  This task is put into the task table.
     98           *
     99           * @param   task_id - task ID of the MT Task
    100           * @param   events - event(s) for the MT Task
    101           *
    102           * @return  Bit mask of the unprocessed MT Task events.
    103           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    105          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    106            /* Could be multiple events, so switch won't work */
    107            if ( events & SYS_EVENT_MSG )
   \   00000B   EE           MOV     A,R6
   \   00000C   5400         ANL     A,#0x0
   \   00000E   F8           MOV     R0,A
   \   00000F   EF           MOV     A,R7
   \   000010   5480         ANL     A,#0x80
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   602E         JZ      ??MT_ProcessEvent_0
    108            {
    109              uint8 *msg_ptr = osal_msg_receive(task_id);
   \   000017                ; Setup parameters for call to function osal_msg_receive
   \   000017   A9..         MOV     R1,?V2
   \   000019   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00001C   8A..         MOV     ?V4,R2
   \   00001E   8B..         MOV     ?V5,R3
   \   000020   85....       MOV     ?V0,?V4
   \   000023   85....       MOV     ?V1,?V5
    110          
    111              if (msg_ptr != NULL)
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   600F         JZ      ??MT_ProcessEvent_1
    112              {
    113                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
   \   00002C                ; Setup parameters for call to function MT_ProcessIncomingCommand
   \   00002C   AA..         MOV     R2,?V0
   \   00002E   AB..         MOV     R3,?V1
   \   000030   12....       LCALL   `??MT_ProcessIncomingCommand::?relay`; Banked call to: MT_ProcessIncomingCommand
    114          
    115                osal_msg_deallocate(msg_ptr);
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV     R2,?V0
   \   000035   AB..         MOV     R3,?V1
   \   000037   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00003A   E9           MOV     A,R1
    116              }
    117          
    118              /* Return unproccessed events */
    119              return (events ^ SYS_EVENT_MSG);
   \                     ??MT_ProcessEvent_1:
   \   00003B   EE           MOV     A,R6
   \   00003C   6400         XRL     A,#0x0
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   6480         XRL     A,#0x80
   \   000042   FB           MOV     R3,A
   \   000043   8037         SJMP    ??MT_ProcessEvent_2
    120            }
    121          
    122            if ( events & MT_SECONDARY_INIT_EVENT )
   \                     ??MT_ProcessEvent_0:
   \   000045   EE           MOV     A,R6
   \   000046   5410         ANL     A,#0x10
   \   000048   600D         JZ      ??MT_ProcessEvent_3
    123            {
    124              MT_Init();
   \   00004A                ; Setup parameters for call to function MT_Init
   \   00004A   12....       LCALL   `??MT_Init::?relay`  ; Banked call to: MT_Init
    125              /* Return unproccessed events */
    126              return (events ^ MT_SECONDARY_INIT_EVENT);
   \   00004D   EE           MOV     A,R6
   \   00004E   6410         XRL     A,#0x10
   \   000050   FA           MOV     R2,A
   \   000051   EF           MOV     A,R7
   \   000052   6400         XRL     A,#0x0
   \   000054   FB           MOV     R3,A
   \   000055   8025         SJMP    ??MT_ProcessEvent_2
    127            }
    128          
    129            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \                     ??MT_ProcessEvent_3:
   \   000057   EE           MOV     A,R6
   \   000058   5402         ANL     A,#0x2
   \   00005A   600A         JZ      ??MT_ProcessEvent_4
    130            {
    131              /* Return unproccessed events */
    132              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   00005C   EE           MOV     A,R6
   \   00005D   6402         XRL     A,#0x2
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   6400         XRL     A,#0x0
   \   000063   FB           MOV     R3,A
   \   000064   8016         SJMP    ??MT_ProcessEvent_2
    133            }
    134          
    135          #if !defined( NONWK )
    136            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_4:
   \   000066   EE           MOV     A,R6
   \   000067   5408         ANL     A,#0x8
   \   000069   600D         JZ      ??MT_ProcessEvent_5
    137            {
    138              MT_AfExec();
   \   00006B                ; Setup parameters for call to function MT_AfExec
   \   00006B   12....       LCALL   `??MT_AfExec::?relay`; Banked call to: MT_AfExec
    139              return (events ^ MT_AF_EXEC_EVT);
   \   00006E   EE           MOV     A,R6
   \   00006F   6408         XRL     A,#0x8
   \   000071   FA           MOV     R2,A
   \   000072   EF           MOV     A,R7
   \   000073   6400         XRL     A,#0x0
   \   000075   FB           MOV     R3,A
   \   000076   8004         SJMP    ??MT_ProcessEvent_2
    140            }
    141          #endif  /* NONWK */
    142          
    143            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    144          #if defined MT_SYS_FUNC
    145            if ( events & (MT_SYS_OSAL_EVENT_MASK))
    146            {
    147              if (events & MT_SYS_OSAL_EVENT_0)
    148              {
    149                MT_SysOsalTimerExpired(0x00);
    150                events ^= MT_SYS_OSAL_EVENT_0;
    151              }
    152          
    153              if (events & MT_SYS_OSAL_EVENT_1)
    154              {
    155                MT_SysOsalTimerExpired(0x01);
    156                events ^= MT_SYS_OSAL_EVENT_1;
    157              }
    158          
    159              if (events & MT_SYS_OSAL_EVENT_2)
    160              {
    161                MT_SysOsalTimerExpired(0x02);
    162                events ^= MT_SYS_OSAL_EVENT_2;
    163              }
    164          
    165              if (events & MT_SYS_OSAL_EVENT_3)
    166              {
    167                MT_SysOsalTimerExpired(0x03);
    168                events ^= MT_SYS_OSAL_EVENT_3;
    169              }
    170          
    171              return events;
    172            }
    173          #endif
    174          
    175            /* Discard or make more handlers */
    176            return 0;
   \                     ??MT_ProcessEvent_5:
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_2:
   \   00007C   7F06         MOV     R7,#0x6
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA
    177          
    178          } /* MT_ProcessEvent() */
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_ProcessIncomingCommand
    182           *
    183           * @brief
    184           *
    185           *   Process Event Messages.
    186           *
    187           * @param   *msg - pointer to event message
    188           *
    189           * @return
    190           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
   \                     MT_ProcessIncomingCommand:
    192          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    193            uint8 len, *msg_ptr = msg->msg;
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   85..83       MOV     DPH,?V3
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FF           MOV     R7,A
    194          
    195            /* Use the first byte of the message as the command ID */
    196            switch ( msg->hdr.event )
   \   000016   85..82       MOV     DPL,?V2
   \   000019   85..83       MOV     DPH,?V3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   14           DEC     A
   \   00001E   6011         JZ      ??MT_ProcessIncomingCommand_0
   \   000020   14           DEC     A
   \   000021   6017         JZ      ??MT_ProcessIncomingCommand_1
   \   000023   24FE         ADD     A,#-0x2
   \   000025   601C         JZ      ??MT_ProcessIncomingCommand_2
   \   000027   24FE         ADD     A,#-0x2
   \   000029   605E         JZ      ??MT_ProcessIncomingCommand_3
   \   00002B   24E2         ADD     A,#-0x1e
   \   00002D   6063         JZ      ??MT_ProcessIncomingCommand_4
   \   00002F   8076         SJMP    ??MT_ProcessIncomingCommand_5
    197            {
    198              case CMD_SERIAL_MSG:
    199                MT_ProcessIncoming(msg_ptr);
   \                     ??MT_ProcessIncomingCommand_0:
   \   000031                ; Setup parameters for call to function MT_ProcessIncoming
   \   000031   EE           MOV     A,R6
   \   000032   FA           MOV     R2,A
   \   000033   EF           MOV     A,R7
   \   000034   FB           MOV     R3,A
   \   000035   12....       LCALL   `??MT_ProcessIncoming::?relay`; Banked call to: MT_ProcessIncoming
    200                break;
   \   000038   806D         SJMP    ??MT_ProcessIncomingCommand_5
    201          
    202              case CMD_DEBUG_MSG:
    203                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
   \                     ??MT_ProcessIncomingCommand_1:
   \   00003A                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   00003A   AA..         MOV     R2,?V2
   \   00003C   AB..         MOV     R3,?V3
   \   00003E   12....       LCALL   `??MT_ProcessDebugMsg::?relay`; Banked call to: MT_ProcessDebugMsg
    204                break;
   \   000041   8064         SJMP    ??MT_ProcessIncomingCommand_5
    205          
    206              case CB_FUNC:
    207                /*
    208                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    209                  because we have copied data already in the allocated message
    210                */
    211          
    212                /* msg_ptr is the beginning of the intended SPI message */
    213                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessIncomingCommand_2:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   2405         ADD     A,#0x5
   \   00004D   F5..         MOV     ?V0,A
    214          
    215                /*
    216                  FCS goes to the last byte in the message and is calculated over all
    217                  the bytes except FCS and SOP
    218                */
    219                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (uint8)(len-2));
   \   00004F                ; Setup parameters for call to function MT_UartCalcFCS
   \   00004F   74FE         MOV     A,#-0x2
   \   000051   25..         ADD     A,?V0
   \   000053   F9           MOV     R1,A
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   A3           INC     DPTR
   \   000059   AA82         MOV     R2,DPL
   \   00005B   AB83         MOV     R3,DPH
   \   00005D   12....       LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   000060   E9           MOV     A,R1
   \   000061   C0E0         PUSH    A
   \   000063   A8..         MOV     R0,?V0
   \   000065   7900         MOV     R1,#0x0
   \   000067   EE           MOV     A,R6
   \   000068   28           ADD     A,R0
   \   000069   F8           MOV     R0,A
   \   00006A   EF           MOV     A,R7
   \   00006B   39           ADDC    A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   E8           MOV     A,R0
   \   00006E   24FF         ADD     A,#-0x1
   \   000070   F582         MOV     DPL,A
   \   000072   E9           MOV     A,R1
   \   000073   34FF         ADDC    A,#-0x1
   \   000075   F583         MOV     DPH,A
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
    220          
    221          #ifdef MT_UART_DEFAULT_PORT
    222                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
   \   00007A                ; Setup parameters for call to function HalUARTWrite
   \   00007A   AC..         MOV     R4,?V0
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   7900         MOV     R1,#0x0
   \   000084   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    223          #endif
    224                break;
   \   000087   801E         SJMP    ??MT_ProcessIncomingCommand_5
    225          
    226              case CMD_DEBUG_STR:
    227                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
   \                     ??MT_ProcessIncomingCommand_3:
   \   000089                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000089   AA..         MOV     R2,?V2
   \   00008B   AB..         MOV     R3,?V3
   \   00008D   12....       LCALL   `??MT_ProcessDebugStr::?relay`; Banked call to: MT_ProcessDebugStr
    228                break;
   \   000090   8015         SJMP    ??MT_ProcessIncomingCommand_5
    229          
    230          #if !defined ( NONWK )
    231              case MT_SYS_APP_RSP_MSG:
    232                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
   \                     ??MT_ProcessIncomingCommand_4:
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   2405         ADD     A,#0x5
   \   00009C   F5..         MOV     ?V0,A
    233                MTProcessAppRspMsg( msg_ptr, len );
   \   00009E                ; Setup parameters for call to function MTProcessAppRspMsg
   \   00009E   A9..         MOV     R1,?V0
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   EF           MOV     A,R7
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   `??MTProcessAppRspMsg::?relay`; Banked call to: MTProcessAppRspMsg
    234                break;
    235          #endif  // NONWK
    236          
    237          #if defined (MT_UTIL_FUNC)
    238          #if defined ZCL_KEY_ESTABLISH
    239              case ZCL_KEY_ESTABLISH_IND:
    240                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    241                break;
    242          #endif
    243          #endif
    244          #ifdef MT_ZDO_CB_FUNC
    245              case ZDO_STATE_CHANGE:
    246                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    247                break;
    248          #endif
    249          
    250              default:
    251                break;
    252            }
    253          }
   \                     ??MT_ProcessIncomingCommand_5:
   \   0000A7   7F04         MOV     R7,#0x4
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TaskInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessIncomingCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncomingCommand
    254          
    255          #ifdef MT_TASK
    256          /***************************************************************************************************
    257           * @fn      MT_TransportAlloc
    258           *
    259           * @brief   Allocate memory for transport msg
    260           *
    261           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    262           *          uint8 len - length
    263           *
    264           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    265           ***************************************************************************************************/
    266          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
    267          {
    268            uint8 *p;
    269          
    270            (void)cmd0;  // Intentionally unreferenced parameter
    271          
    272            /* Allocate a buffer of data length + SOP+CMD+FCS (5 bytes) */
    273            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
    274          
    275            if (p)
    276            {
    277              p++; /* Save space for SOP_VALUE, msg structure */
    278              return p;
    279            }
    280            else
    281            {
    282              return NULL;
    283            }
    284          }
    285          
    286          /***************************************************************************************************
    287           * @fn      MT_TransportSend
    288           *
    289           * @brief   Fill in SOP and FCS then send out the msg
    290           *
    291           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    292           *
    293           * @return  None
    294           ***************************************************************************************************/
    295          void MT_TransportSend(uint8 *pBuf)
    296          {
    297            uint8 *msgPtr;
    298            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
    299          
    300            /* Move back to the SOP */
    301            msgPtr = pBuf-1;
    302          
    303            /* Insert SOP */
    304            msgPtr[0] = MT_UART_SOF;
    305          
    306            /* Insert FCS */
    307            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
    308          
    309            /* Send to UART */
    310          #ifdef MT_UART_DEFAULT_PORT
    311            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
    312          #endif
    313          
    314            /* Deallocate */
    315            osal_msg_deallocate(msgPtr);
    316          }
    317          #endif /* MT_TASK */
    318          /***************************************************************************************************
    319           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     14   MT_ProcessEvent
        0     14   -> MT_AfExec
        0     14   -> MT_Init
        0     14   -> MT_ProcessIncomingCommand
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
      1     26   MT_ProcessIncomingCommand
        0     12   -> HalUARTWrite
        0     12   -> MTProcessAppRspMsg
        0     12   -> MT_ProcessDebugMsg
        0     12   -> MT_ProcessDebugStr
        0     12   -> MT_ProcessIncoming
        0     12   -> MT_UartCalcFCS
      0      9   MT_TaskInit
        0      9   -> MT_UartInit
        0      9   -> MT_UartRegisterTaskID
        0      9   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     129  MT_ProcessEvent
       6  MT_ProcessEvent::?relay
     172  MT_ProcessIncomingCommand
       6  MT_ProcessIncomingCommand::?relay
       1  MT_TaskID
      35  MT_TaskInit
       6  MT_TaskInit::?relay

 
 336 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_Z
 
 354 bytes of CODE  memory
   1 byte  of XDATA memory

Errors: none
Warnings: none
