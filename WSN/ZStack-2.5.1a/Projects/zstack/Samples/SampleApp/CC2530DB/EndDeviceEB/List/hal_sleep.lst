###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:16
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\design\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_sleep.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_sleep.c -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
#        -D xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\hal_sleep.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\hal_sleep.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_sleep.c
      1          /**************************************************************************************************
      2            Filename:       hal_sleep.c
      3            Revised:        $Date: 2012-03-07 11:55:12 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29664 $
      5          
      6            Description:    This module contains the HAL power management procedures for the CC2530.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "hal_types.h"
     45          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1
     46          #include "hal_board.h"
     47          #include "hal_sleep.h"
     48          #include "hal_led.h"
     49          #include "hal_key.h"
     50          #include "mac_api.h"
     51          #include "OSAL.h"
     52          #include "OSAL_Timers.h"
     53          #include "OSAL_Tasks.h"
     54          #include "OSAL_PwrMgr.h"
     55          #include "OnBoard.h"
     56          #include "hal_drivers.h"
     57          #include "hal_assert.h"
     58          #include "mac_mcu.h"
     59          
     60          #ifndef ZG_BUILD_ENDDEVICE_TYPE
     61          # define ZG_BUILD_ENDDEVICE_TYPE FALSE
     62          #endif
     63          
     64          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
     65          #include "nwk_globals.h"
     66          #include "ZGlobals.h"
     67          #endif
     68          
     69          /* ------------------------------------------------------------------------------------------------
     70           *                                           Macros
     71           * ------------------------------------------------------------------------------------------------
     72           */
     73          
     74          /* POWER CONSERVATION DEFINITIONS
     75           * Sleep mode H/W definitions (enabled with POWER_SAVING compile option)
     76           */
     77          #define CC2530_PM0            0  /* PM0, Clock oscillators on, voltage regulator on */
     78          #define CC2530_PM1            1  /* PM1, 32.768 kHz oscillators on, voltage regulator on */
     79          #define CC2530_PM2            2  /* PM2, 32.768 kHz oscillators on, voltage regulator off */
     80          #define CC2530_PM3            3  /* PM3, All clock oscillators off, voltage regulator off */
     81          
     82          /* HAL power management mode is set according to the power management state. The default
     83           * setting is HAL_SLEEP_OFF. The actual value is tailored to different HW platform. Both
     84           * HAL_SLEEP_TIMER and HAL_SLEEP_DEEP selections will:
     85           *   1. turn off the system clock, and
     86           *   2. halt the MCU.
     87           * HAL_SLEEP_TIMER can be woken up by sleep timer interrupt, I/O interrupt and reset.
     88           * HAL_SLEEP_DEEP can be woken up by I/O interrupt and reset.
     89           */
     90          #define HAL_SLEEP_OFF         CC2530_PM0
     91          #define HAL_SLEEP_TIMER       CC2530_PM2
     92          #define HAL_SLEEP_DEEP        CC2530_PM3
     93          
     94          /* MAX_SLEEP_TIME calculation:
     95           *   Sleep timer maximum duration = 0xFFFF7F / 32768 Hz = 511.996 seconds
     96           *   Round it to 510 seconds or 510000 ms
     97           */
     98          #define MAX_SLEEP_TIME                   510000             /* maximum time to sleep allowed by ST */
     99          #define TICKS_SUBTRACTED                 2
    100          
    101          /* minimum time to sleep, this macro is to:
    102           * 1. avoid thrashing in-and-out of sleep with short OSAL timer (~2ms)
    103           * 2. define minimum safe sleep period
    104           */
    105          #if !defined (PM_MIN_SLEEP_TIME)
    106          #define PM_MIN_SLEEP_TIME                14                 /* default to minimum safe sleep time minimum CAP */
    107          #endif
    108          
    109          /* The PCON instruction must be 4-byte aligned. The following code may cause excessive power
    110           * consumption if not aligned. See linker file ".xcl" for actual placement.
    111           */
    112          #pragma location = "SLEEP_CODE"
    113          void halSetSleepMode(void);
    114          
    115          /* This value is used to adjust the sleep timer compare value such that the sleep timer
    116           * compare takes into account the amount of processing time spent in function halSleep().
    117           * The first value is determined by measuring the number of sleep timer ticks it from
    118           * the beginning of the function to entering sleep mode or more precisely, when
    119           * MAC_PwrNextTimeout() is called.  The second value is determined by measuring the number
    120           * of sleep timer ticks from exit of sleep mode to the call to MAC_PwrOnReq() where the
    121           * MAC timer is restarted.
    122           */
    123          #define HAL_SLEEP_ADJ_TICKS   (11 + 12)
    124          
    125          #ifndef HAL_SLEEP_DEBUG_POWER_MODE
    126          /* set CC2530 power mode; always use PM2 */
    127          #define HAL_SLEEP_PREP_POWER_MODE(mode)     st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \
    128                                                          SLEEPCMD |= mode;   /* set mode bits   */    \
    129                                                          while (!(STLOAD & LDRDY));                   \
    130                                                          halSleepPconValue = PCON_IDLE;               \
    131                                                        )
    132          #define HAL_SLEEP_SET_POWER_MODE()          halSetSleepMode()
    133          #else
    134          /* Debug: don't set power mode, just block until sleep timer interrupt */
    135          #define HAL_SLEEP_PREP_POWER_MODE(mode)     /* nothing */
    136          #define HAL_SLEEP_SET_POWER_MODE()          st( while(halSleepInt == FALSE); \
    137                                                          halSleepInt = FALSE;         \
    138                                                          HAL_DISABLE_INTERRUPTS();    \
    139                                                        )
    140          #endif
    141          
    142          /* sleep and external interrupt port masks */
    143          #define STIE_BV                             BV(5)
    144          #define P0IE_BV                             BV(5)
    145          #define P1IE_BV                             BV(4)
    146          #define P2IE_BV                             BV(1)
    147          
    148          /* sleep timer interrupt control */
    149          #define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= STIE_BV;)     /* enable sleep timer interrupt */
    150          #define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~STIE_BV;)    /* disable sleep timer interrupt */
    151          #define HAL_SLEEP_TIMER_CLEAR_INT()         st(STIF = 0;)            /* clear sleep interrupt flag */
    152          
    153          /* backup interrupt enable registers before sleep */
    154          #define HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2) st(ien0  = IEN0;    /* backup IEN0 register */ \
    155                                                                       ien1  = IEN1;    /* backup IEN1 register */ \
    156                                                                       ien2  = IEN2;    /* backup IEN2 register */ \
    157                                                                       IEN0 &= STIE_BV; /* disable IEN0 except STIE */ \
    158                                                                       IEN1 &= P0IE_BV; /* disable IEN1 except P0IE */ \
    159                                                                       IEN2 &= (P1IE_BV|P2IE_BV);) /* disable IEN2 except P1IE, P2IE */
    160          
    161          /* restore interrupt enable registers before sleep */
    162          #define HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2) st(IEN0 = ien0;   /* restore IEN0 register */ \
    163                                                            IEN1 = ien1;   /* restore IEN1 register */ \
    164                                                            IEN2 = ien2;)  /* restore IEN2 register */
    165          
    166          /* convert msec to 320 usec units with round */
    167          #define HAL_SLEEP_MS_TO_320US(ms)           (((((uint32) (ms)) * 100) + 31) / 32)
    168          
    169          /* for optimized indexing of uint32's */
    170          #if HAL_MCU_LITTLE_ENDIAN()
    171          #define UINT32_NDX0   0
    172          #define UINT32_NDX1   1
    173          #define UINT32_NDX2   2
    174          #define UINT32_NDX3   3
    175          #else
    176          #define UINT32_NDX0   3
    177          #define UINT32_NDX1   2
    178          #define UINT32_NDX2   1
    179          #define UINT32_NDX3   0
    180          #endif
    181          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    182          static uint32 maxSleepLoopTime =  HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME);
   \                     maxSleepLoopTime:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for maxSleepLoopTime>`
   \   000004                REQUIRE __INIT_XDATA_I
    183          
    184          /* ------------------------------------------------------------------------------------------------
    185           *                                        Global Variables
    186           * ------------------------------------------------------------------------------------------------
    187           */
    188          /* PCON register value to program when setting power mode */

   \                                 In  segment DATA_I, align 1, keep-with-next
    189          volatile __data uint8 halSleepPconValue = PCON_IDLE;
   \                     halSleepPconValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for halSleepPconValue>`
   \   000001                REQUIRE __INIT_DATA_I
    190          
    191          /* ------------------------------------------------------------------------------------------------
    192           *                                        Local Variables
    193           * ------------------------------------------------------------------------------------------------
    194           */
    195          
    196          /* HAL power management mode is set according to the power management state.
    197           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          static uint8 halPwrMgtMode = HAL_SLEEP_OFF;
   \                     halPwrMgtMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    199          
    200          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    201          static bool halSleepInt = FALSE;
    202          #endif
    203          
    204          /* ------------------------------------------------------------------------------------------------
    205           *                                      Function Prototypes
    206           * ------------------------------------------------------------------------------------------------
    207           */
    208          
    209          void halSleepSetTimer(uint32 timeout);
    210          
    211          /**************************************************************************************************
    212           * @fn          halSleep
    213           *
    214           * @brief       This function put the CC2530 to sleep. The PCON instruction must be 4-byte aligned.
    215           *              The following code may cause excessive power consumption if not aligned. See linker
    216           *              file ".xcl" for actual placement.
    217           *
    218           * input parameters
    219           *
    220           * @param       None.
    221           *
    222           * output parameters
    223           *
    224           * None.
    225           *
    226           * @return      None.
    227           **************************************************************************************************
    228           */

   \                                 In  segment SLEEP_CODE, align 1, keep-with-next
    229          void halSetSleepMode(void)
   \                     halSetSleepMode:
    230          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    231            PCON = halSleepPconValue;
   \   000000   85..87       MOV     0x87,halSleepPconValue
    232            HAL_DISABLE_INTERRUPTS();
   \   000003   C2AF         CLR     0xa8.7
    233          }
   \   000005   02....       LJMP    ?BRET
   \   000008                REQUIRE PCON
   \   000008                REQUIRE _A_IEN0
    234          
    235          /**************************************************************************************************
    236           * @fn          halSetMaxSleepLoopTime
    237           *
    238           * @brief       This function is to used to setup the maximum sleep loop time. This sleep loop time 
    239           *              should be lesser than T2 rollover so that a maximum of only one rollover occurs 
    240           *              when cc2530 is in sleep. This function should be called whenever rolloverTime is 
    241           *              changed using the function macBackoffTimerSetRollover(macTimerRollover);
    242           *
    243           * input parameters
    244           *
    245           * @param       rolloverTime.
    246           *
    247           * output parameters
    248           *
    249           * None.
    250           *
    251           * @return      None.
    252           **************************************************************************************************
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          void halSetMaxSleepLoopTime(uint32 rolloverTime)
   \                     halSetMaxSleepLoopTime:
    255          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    256            if( rolloverTime > HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME) )
   \   00000D   90....       MOV     DPTR,#__Constant_185197
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?UL_GE_X
   \   000015   5016         JNC     ??halSetMaxSleepLoopTime_0
    257            {
    258              maxSleepLoopTime = HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME);
   \   000017   7C96         MOV     R4,#-0x6a
   \   000019   7D51         MOV     R5,#0x51
   \   00001B   7E18         MOV     R6,#0x18
   \   00001D   7F00         MOV     R7,#0x0
   \   00001F   90....       MOV     DPTR,#maxSleepLoopTime
   \   000022   EC           MOV     A,R4
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   ED           MOV     A,R5
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   EE           MOV     A,R6
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   EF           MOV     A,R7
   \   00002C   F0           MOVX    @DPTR,A
    259            }
    260            maxSleepLoopTime = (rolloverTime - TICKS_SUBTRACTED);
   \                     ??halSetMaxSleepLoopTime_0:
   \   00002D   85....       MOV     ?V4,?V0
   \   000030   85....       MOV     ?V5,?V1
   \   000033   85....       MOV     ?V6,?V2
   \   000036   85....       MOV     ?V7,?V3
   \   000039   90....       MOV     DPTR,#__Constant_fffffffe
   \   00003C   78..         MOV     R0,#?V4
   \   00003E   12....       LCALL   ?L_ADD_X
   \   000041   90....       MOV     DPTR,#maxSleepLoopTime
   \   000044   78..         MOV     R0,#?V4
   \   000046   12....       LCALL   ?L_MOV_TO_X
    261          }
   \   000049   7F08         MOV     R7,#0x8
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    262          
    263          /**************************************************************************************************
    264           * @fn          halSleep
    265           *
    266           * @brief       This function is called from the OSAL task loop using and existing OSAL
    267           *              interface.  It sets the low power mode of the MAC and the CC2530.
    268           *
    269           * input parameters
    270           *
    271           * @param       osal_timeout - Next OSAL timer timeout.
    272           *
    273           * output parameters
    274           *
    275           * None.
    276           *
    277           * @return      None.
    278           **************************************************************************************************
    279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          void halSleep( uint16 osal_timeout )
   \                     halSleep:
    281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
    282            uint32        timeout;
    283            uint32        macTimeout = 0;
   \   000014   7C00         MOV     R4,#0x0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
   \   00001C   7404         MOV     A,#0x4
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   EC           MOV     A,R4
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   ED           MOV     A,R5
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   EE           MOV     A,R6
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   EF           MOV     A,R7
   \   00002B   F0           MOVX    @DPTR,A
    284          
    285            /* get next OSAL timer expiration converted to 320 usec units */
    286            timeout = HAL_SLEEP_MS_TO_320US(osal_timeout);
   \   00002C   7408         MOV     A,#0x8
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V1,A
   \   000038   E4           CLR     A
   \   000039   F5..         MOV     ?V2,A
   \   00003B   F5..         MOV     ?V3,A
   \   00003D   90....       MOV     DPTR,#__Constant_64
   \   000040   78..         MOV     R0,#?V4
   \   000042   12....       LCALL   ?L_MOV_X
   \   000045   78..         MOV     R0,#?V0
   \   000047   79..         MOV     R1,#?V4
   \   000049   12....       LCALL   ?L_MUL
   \   00004C   90....       MOV     DPTR,#__Constant_1f
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?L_ADD_X
   \   000054   7405         MOV     A,#0x5
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?UL_SHR
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   78..         MOV     R0,#?V0
   \   000063   12....       LCALL   ?L_MOV_TO_X
    287            if (timeout == 0)
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   12....       LCALL   ?XLOAD_R0123
   \   00006F   E8           MOV     A,R0
   \   000070   49           ORL     A,R1
   \   000071   4A           ORL     A,R2
   \   000072   4B           ORL     A,R3
   \   000073   700E         JNZ     ??halSleep_0
    288            {
    289              timeout = MAC_PwrNextTimeout();
   \   000075                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000075   12....       LCALL   `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   12....       LCALL   ?XSTORE_R2345
   \   000081   8041         SJMP    ??halSleep_1
    290            }
    291            else
    292            {
    293              /* get next MAC timer expiration */
    294              macTimeout = MAC_PwrNextTimeout();
   \                     ??halSleep_0:
   \   000083                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000083   12....       LCALL   `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   000086   7404         MOV     A,#0x4
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   12....       LCALL   ?XSTORE_R2345
    295          
    296              /* get lesser of two timeouts */
    297              if ((macTimeout != 0) && (macTimeout < timeout))
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?XLOAD_R0123
   \   000096   E8           MOV     A,R0
   \   000097   49           ORL     A,R1
   \   000098   4A           ORL     A,R2
   \   000099   4B           ORL     A,R3
   \   00009A   6028         JZ      ??halSleep_1
   \   00009C   85..82       MOV     DPL,?XSP + 0
   \   00009F   85..83       MOV     DPH,?XSP + 1
   \   0000A2   78..         MOV     R0,#?V0
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   78..         MOV     R0,#?V0
   \   0000AE   12....       LCALL   ?UL_GT_X
   \   0000B1   5011         JNC     ??halSleep_1
    298              {
    299                timeout = macTimeout;
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL   ?XLOAD_R0123
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   12....       LCALL   ?XSTORE_R0123
    300              }
    301            }
    302          
    303            /* HAL_SLEEP_PM2 is entered only if the timeout is zero and
    304             * the device is a stimulated device.
    305             */
    306            halPwrMgtMode = (timeout == 0) ? HAL_SLEEP_DEEP : HAL_SLEEP_TIMER;
   \                     ??halSleep_1:
   \   0000C4   85..82       MOV     DPL,?XSP + 0
   \   0000C7   85..83       MOV     DPH,?XSP + 1
   \   0000CA   12....       LCALL   ?XLOAD_R0123
   \   0000CD   E8           MOV     A,R0
   \   0000CE   49           ORL     A,R1
   \   0000CF   4A           ORL     A,R2
   \   0000D0   4B           ORL     A,R3
   \   0000D1   7008         JNZ     ??halSleep_2
   \   0000D3   90....       MOV     DPTR,#halPwrMgtMode
   \   0000D6   7403         MOV     A,#0x3
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   8006         SJMP    ??halSleep_3
   \                     ??halSleep_2:
   \   0000DB   90....       MOV     DPTR,#halPwrMgtMode
   \   0000DE   7402         MOV     A,#0x2
   \   0000E0   F0           MOVX    @DPTR,A
    307          
    308            /* DEEP sleep can only be entered when zgPollRate == 0.
    309             * This is to eliminate any possibility of entering PM3 between
    310             * two network timers.
    311             */
    312          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
    313            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    314                (timeout == 0 && zgPollRate == 0))
    315          #else
    316            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    317                (timeout == 0))
   \                     ??halSleep_3:
   \   0000E1   90....       MOV     DPTR,#__Constant_2d
   \   0000E4   78..         MOV     R0,#?V0
   \   0000E6   12....       LCALL   ?L_MOV_X
   \   0000E9   85..82       MOV     DPL,?XSP + 0
   \   0000EC   85..83       MOV     DPH,?XSP + 1
   \   0000EF   78..         MOV     R0,#?V0
   \   0000F1   12....       LCALL   ?UL_GT_X
   \   0000F4   5012         JNC     ??halSleep_4
   \   0000F6   85..82       MOV     DPL,?XSP + 0
   \   0000F9   85..83       MOV     DPH,?XSP + 1
   \   0000FC   12....       LCALL   ?XLOAD_R0123
   \   0000FF   E8           MOV     A,R0
   \   000100   49           ORL     A,R1
   \   000101   4A           ORL     A,R2
   \   000102   4B           ORL     A,R3
   \   000103   6003         JZ      $+5
   \   000105   02....       LJMP    ??halSleep_5 & 0xFFFF
    318          #endif
    319            {
    320              halIntState_t ien0, ien1, ien2;
    321          
    322              HAL_ASSERT(HAL_INTERRUPTS_ARE_ENABLED());
   \                     ??halSleep_4:
   \   000108   A2AF         MOV     C,0xa8.7
   \   00010A   4003         JC      ??halSleep_6
   \   00010C                ; Setup parameters for call to function halAssertHandler
   \   00010C   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    323              HAL_DISABLE_INTERRUPTS();
   \                     ??halSleep_6:
   \   00010F   C2AF         CLR     0xa8.7
    324          
    325              /* always use "deep sleep" to turn off radio VREG on CC2530 */
    326              if (halSleepPconValue != 0 && MAC_PwrOffReq(MAC_PWR_SLEEP_DEEP) == MAC_SUCCESS)
   \   000111   E5..         MOV     A,halSleepPconValue
   \   000113   7003         JNZ     $+5
   \   000115   02....       LJMP    ??halSleep_7 & 0xFFFF
   \   000118                ; Setup parameters for call to function MAC_PwrOffReq
   \   000118   7902         MOV     R1,#0x2
   \   00011A   12....       LCALL   `??MAC_PwrOffReq::?relay`; Banked call to: MAC_PwrOffReq
   \   00011D   E9           MOV     A,R1
   \   00011E   6003         JZ      $+5
   \   000120   02....       LJMP    ??halSleep_7 & 0xFFFF
    327              {
    328                /* The PCON value is not zero. There is no interrupt overriding the 
    329                 * sleep decision. Also, the radio granted the sleep request.
    330                 */
    331          
    332          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    333                /* get peripherals ready for sleep */
    334                HalKeyEnterSleep();
   \   000123                ; Setup parameters for call to function HalKeyEnterSleep
   \   000123   12....       LCALL   `??HalKeyEnterSleep::?relay`; Banked call to: HalKeyEnterSleep
    335          #endif
    336          
    337          #ifdef HAL_SLEEP_DEBUG_LED
    338                HAL_TURN_OFF_LED3();
    339          #else
    340                /* use this to turn LEDs off during sleep */
    341                HalLedEnterSleep();
   \   000126                ; Setup parameters for call to function HalLedEnterSleep
   \   000126   12....       LCALL   `??HalLedEnterSleep::?relay`; Banked call to: HalLedEnterSleep
    342          #endif
    343          
    344                if(timeout > maxSleepLoopTime)
   \   000129   85..82       MOV     DPL,?XSP + 0
   \   00012C   85..83       MOV     DPH,?XSP + 1
   \   00012F   78..         MOV     R0,#?V0
   \   000131   12....       LCALL   ?L_MOV_X
   \   000134   90....       MOV     DPTR,#maxSleepLoopTime
   \   000137   78..         MOV     R0,#?V0
   \   000139   12....       LCALL   ?UL_GT_X
   \   00013C   500F         JNC     ??halSleep_8
    345                {
    346                  timeout = maxSleepLoopTime;
   \   00013E   90....       MOV     DPTR,#maxSleepLoopTime
   \   000141   12....       LCALL   ?XLOAD_R0123
   \   000144   85..82       MOV     DPL,?XSP + 0
   \   000147   85..83       MOV     DPH,?XSP + 1
   \   00014A   12....       LCALL   ?XSTORE_R0123
    347                }  
    348          
    349                /* enable sleep timer interrupt */
    350                if (timeout != 0)
   \                     ??halSleep_8:
   \   00014D   85..82       MOV     DPL,?XSP + 0
   \   000150   85..83       MOV     DPH,?XSP + 1
   \   000153   12....       LCALL   ?XLOAD_R0123
   \   000156   E8           MOV     A,R0
   \   000157   49           ORL     A,R1
   \   000158   4A           ORL     A,R2
   \   000159   4B           ORL     A,R3
   \   00015A   6043         JZ      ??halSleep_9
    351                {
    352                  if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
   \   00015C   90....       MOV     DPTR,#__Constant_185197
   \   00015F   78..         MOV     R0,#?V0
   \   000161   12....       LCALL   ?L_MOV_X
   \   000164   85..82       MOV     DPL,?XSP + 0
   \   000167   85..83       MOV     DPH,?XSP + 1
   \   00016A   78..         MOV     R0,#?V0
   \   00016C   12....       LCALL   ?UL_GT_X
   \   00016F   401E         JC      ??halSleep_10
    353                  {
    354                    timeout -= HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
   \   000171   90....       MOV     DPTR,#__Constant_ffe7ae6a
   \   000174   78..         MOV     R0,#?V0
   \   000176   12....       LCALL   ?L_MOV_X
   \   000179   85..82       MOV     DPL,?XSP + 0
   \   00017C   85..83       MOV     DPH,?XSP + 1
   \   00017F   78..         MOV     R0,#?V0
   \   000181   12....       LCALL   ?L_ADD_TO_X
    355                    halSleepSetTimer(HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ));
   \   000184                ; Setup parameters for call to function halSleepSetTimer
   \   000184   90....       MOV     DPTR,#__Constant_185196
   \   000187   12....       LCALL   ?XLOAD_R2345
   \   00018A   12....       LCALL   `??halSleepSetTimer::?relay`; Banked call to: halSleepSetTimer
   \   00018D   800C         SJMP    ??halSleep_11
    356                  }
    357                  else
    358                  {
    359                    /* set sleep timer */
    360                    halSleepSetTimer(timeout);
   \                     ??halSleep_10:
   \   00018F                ; Setup parameters for call to function halSleepSetTimer
   \   00018F   85..82       MOV     DPL,?XSP + 0
   \   000192   85..83       MOV     DPH,?XSP + 1
   \   000195   12....       LCALL   ?XLOAD_R2345
   \   000198   12....       LCALL   `??halSleepSetTimer::?relay`; Banked call to: halSleepSetTimer
    361                  }
    362          
    363                  /* set up sleep timer interrupt */
    364                  HAL_SLEEP_TIMER_CLEAR_INT();
   \                     ??halSleep_11:
   \   00019B   C2C7         CLR     0xc0.7
    365                  HAL_SLEEP_TIMER_ENABLE_INT();
   \   00019D   D2AD         SETB    0xa8.5
    366                }
    367          
    368          #ifdef HAL_SLEEP_DEBUG_LED
    369                if (halPwrMgtMode == CC2530_PM1)
    370                {
    371                  HAL_TURN_ON_LED1();
    372                }
    373                else
    374                {
    375                  HAL_TURN_OFF_LED1();
    376                }
    377          #endif
    378          
    379                /* Prep CC2530 power mode */
    380                HAL_SLEEP_PREP_POWER_MODE(halPwrMgtMode);
   \                     ??halSleep_9:
   \   00019F   53BEFC       ANL     0xbe,#0xfc
   \   0001A2   90....       MOV     DPTR,#halPwrMgtMode
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   42BE         ORL     0xbe,A
   \                     ??halSleep_12:
   \   0001A8   E5AD         MOV     A,0xad
   \   0001AA   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001AC   50FA         JNC     ??halSleep_12
   \   0001AE   75..01       MOV     halSleepPconValue,#0x1
    381          
    382                /* save interrupt enable registers and disable all interrupts */
    383                HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
   \   0001B1   85A8..       MOV     ?V4,0xa8+0x0
   \   0001B4   AFB8         MOV     R7,0xb8+0x0
   \   0001B6   AE9A         MOV     R6,0x9a+0x0
   \   0001B8   53A820       ANL     0xa8,#0x20
   \   0001BB   53B820       ANL     0xb8,#0x20
   \   0001BE   539A12       ANL     0x9a,#0x12
    384                HAL_ENABLE_INTERRUPTS();
   \   0001C1   D2AF         SETB    0xa8.7
    385          
    386                /* set CC2530 power mode, interrupt is disabled after this function
    387                 * Note that an ISR (that could wake up from power mode) which runs
    388                 * between the previous instruction enabling interrupts and before
    389                 * power mode is set would switch the halSleepPconValue so that
    390                 * power mode shall not be entered in such a case. 
    391                 */
    392                HAL_SLEEP_SET_POWER_MODE();
   \   0001C3                ; Setup parameters for call to function halSetSleepMode
   \   0001C3   12....       LCALL   `??halSetSleepMode::?relay`; Banked call to: halSetSleepMode
    393          
    394                /* the interrupt is disabled - see halSetSleepMode() */
    395          
    396                /* restore interrupt enable registers */
    397                HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2);
   \   0001C6   85..A8       MOV     0xa8,?V4
   \   0001C9   8FB8         MOV     0xb8,R7
   \   0001CB   8E9A         MOV     0x9a,R6
    398          
    399                /* disable sleep timer interrupt */
    400                HAL_SLEEP_TIMER_DISABLE_INT();
   \   0001CD   C2AD         CLR     0xa8.5
    401          
    402          #ifdef HAL_SLEEP_DEBUG_LED
    403                HAL_TURN_ON_LED3();
    404          #else
    405                /* use this to turn LEDs back on after sleep */
    406                HalLedExitSleep();
   \   0001CF                ; Setup parameters for call to function HalLedExitSleep
   \   0001CF   12....       LCALL   `??HalLedExitSleep::?relay`; Banked call to: HalLedExitSleep
    407          #endif
    408          
    409          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    410                /* handle peripherals */
    411                (void)HalKeyExitSleep();
   \   0001D2                ; Setup parameters for call to function HalKeyExitSleep
   \   0001D2   12....       LCALL   `??HalKeyExitSleep::?relay`; Banked call to: HalKeyExitSleep
   \   0001D5   E9           MOV     A,R1
   \   0001D6   F5..         MOV     ?V0,A
    412          #endif
    413          
    414                /* power on the MAC; blocks until completion */
    415                MAC_PwrOnReq();
   \   0001D8                ; Setup parameters for call to function MAC_PwrOnReq
   \   0001D8   12....       LCALL   `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
    416          
    417                HAL_ENABLE_INTERRUPTS();
   \   0001DB   D2AF         SETB    0xa8.7
    418          
    419                /* For CC2530, T2 interrupt won’t be generated when the current count is greater than
    420                 * the comparator. The interrupt is only generated when the current count is equal to
    421                 * the comparator. When the CC2530 is waking up from sleep, there is a small window
    422                 * that the count may be grater than the comparator, therefore, missing the interrupt.
    423                 * This workaround will call the T2 ISR when the current T2 count is greater than the
    424                 * comparator. The problem only occurs when POWER_SAVING is turned on, i.e. the 32KHz
    425                 * drives the chip in sleep and SYNC start is used.
    426                 */
    427                macMcuTimer2OverflowWorkaround();
   \   0001DD                ; Setup parameters for call to function macMcuTimer2OverflowWorkaround
   \   0001DD   12....       LCALL   `??macMcuTimer2OverflowWorkaround::?relay`; Banked call to: macMcuTimer2OverflowWorkaround
   \   0001E0   8002         SJMP    ??halSleep_5
    428              }
    429              else
    430              {
    431                /* An interrupt may have changed the sleep decision. Do not sleep at all. Turn on
    432                 * the interrupt, exit normally, and the next sleep will be allowed.
    433                 */
    434                HAL_ENABLE_INTERRUPTS();
   \                     ??halSleep_7:
   \   0001E2   D2AF         SETB    0xa8.7
    435              }
    436            }
    437          }
   \                     ??halSleep_5:
   \   0001E4   740A         MOV     A,#0xa
   \   0001E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E9   7F08         MOV     R7,#0x8
   \   0001EB   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001EE                REQUIRE _A_IEN0
   \   0001EE                REQUIRE _A_IRCON
   \   0001EE                REQUIRE SLEEPCMD
   \   0001EE                REQUIRE STLOAD
   \   0001EE                REQUIRE _A_IEN1
   \   0001EE                REQUIRE IEN2
    438          
    439          /**************************************************************************************************
    440           * @fn          halSleepSetTimer
    441           *
    442           * @brief       This function sets the CC2530 sleep timer compare value.  First it reads and
    443           *              stores the value of the sleep timer; this value is used later to update OSAL
    444           *              timers.  Then the timeout value is converted from 320 usec units to 32 kHz
    445           *              period units and the compare value is set to the timeout.
    446           *
    447           * input parameters
    448           *
    449           * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
    450           *                        this value.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void halSleepSetTimer(uint32 timeout)
   \                     halSleepSetTimer:
    460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   ED           MOV     A,R5
   \   000019   F0           MOVX    @DPTR,A
    461            uint32 ticks;
    462          
    463            /* read the sleep timer; ST0 must be read first */
    464            ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
   \   00001A   E595         MOV     A,0x95
   \   00001C   C0E0         PUSH    A
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    465            ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
   \   000027   E596         MOV     A,0x96
   \   000029   C0E0         PUSH    A
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
    466            ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
   \   000033   E597         MOV     A,0x97
   \   000035   C0E0         PUSH    A
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
    467            ((uint8 *) &ticks)[UINT32_NDX3] = 0;
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
    468          
    469            /* Compute sleep timer compare value.  The ratio of 32 kHz ticks to 320 usec ticks
    470             * is 32768/3125 = 10.48576.  This is nearly 671/64 = 10.484375.
    471             */
    472            ticks += (timeout * 671) / 64;
   \   000047   7404         MOV     A,#0x4
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?L_MOV_X
   \   000051   90....       MOV     DPTR,#__Constant_29f
   \   000054   78..         MOV     R0,#?V4
   \   000056   12....       LCALL   ?L_MOV_X
   \   000059   78..         MOV     R0,#?V0
   \   00005B   79..         MOV     R1,#?V4
   \   00005D   12....       LCALL   ?L_MUL
   \   000060   7406         MOV     A,#0x6
   \   000062   78..         MOV     R0,#?V0
   \   000064   12....       LCALL   ?UL_SHR
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   78..         MOV     R0,#?V0
   \   00006F   12....       LCALL   ?L_ADD_TO_X
    473          
    474            /* subtract the processing time spent in function halSleep() */
    475            ticks -= HAL_SLEEP_ADJ_TICKS;
   \   000072   90....       MOV     DPTR,#__Constant_ffffffe9
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?L_MOV_X
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?L_ADD_TO_X
    476          
    477            /* set sleep timer compare; ST0 must be written last */
    478            ST2 = ((uint8 *) &ticks)[UINT32_NDX2];
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F597         MOV     0x97,A
    479            ST1 = ((uint8 *) &ticks)[UINT32_NDX1];
   \   00008D   7401         MOV     A,#0x1
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F596         MOV     0x96,A
    480            ST0 = ((uint8 *) &ticks)[UINT32_NDX0];
   \   000095   85..82       MOV     DPL,?XSP + 0
   \   000098   85..83       MOV     DPH,?XSP + 1
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F595         MOV     0x95,A
    481          }
   \   00009E   7408         MOV     A,#0x8
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7F08         MOV     R7,#0x8
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A8                REQUIRE ST0
   \   0000A8                REQUIRE ST1
   \   0000A8                REQUIRE ST2
    482          
    483          /**************************************************************************************************
    484           * @fn          TimerElapsed
    485           *
    486           * @brief       Determine the number of OSAL timer ticks elapsed during sleep.
    487           *              Deprecated for CC2530 and CC2430 SoC.
    488           *
    489           * input parameters
    490           *
    491           * @param       None.
    492           *
    493           * output parameters
    494           *
    495           * None.
    496           *
    497           * @return      Number of timer ticks elapsed during sleep.
    498           **************************************************************************************************
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          uint32 TimerElapsed( void )
   \                     TimerElapsed:
    501          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    502            /* Stubs */
    503            return (0);
   \   000000   7A00         MOV     R2,#0x0
   \   000002   7B00         MOV     R3,#0x0
   \   000004   7C00         MOV     R4,#0x0
   \   000006   7D00         MOV     R5,#0x0
   \   000008   02....       LJMP    ?BRET
    504          }
    505          
    506          /**************************************************************************************************
    507           * @fn          halRestoreSleepLevel
    508           *
    509           * @brief       Restore the deepest timer sleep level.
    510           *
    511           * input parameters
    512           *
    513           * @param       None
    514           *
    515           * output parameters
    516           *
    517           *              None.
    518           *
    519           * @return      None.
    520           **************************************************************************************************
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          void halRestoreSleepLevel( void )
   \                     halRestoreSleepLevel:
    523          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    524            /* Stubs */
    525          }
   \   000000   02....       LJMP    ?BRET
    526          
    527          /**************************************************************************************************
    528           * @fn          halSleepTimerIsr
    529           *
    530           * @brief       Sleep timer ISR.
    531           *
    532           * input parameters
    533           *
    534           * None.
    535           *
    536           * output parameters
    537           *
    538           * None.
    539           *
    540           * @return      None.
    541           **************************************************************************************************
    542           */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    543          HAL_ISR_FUNCTION(halSleepTimerIsr, ST_VECTOR)
   \                     halSleepTimerIsr:
    544          {
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007   E9           MOV     A,R1
   \   000008   C0E0         PUSH    A
   \   00000A                ; Saved register size: 4
   \   00000A                ; Auto size: 0
    545            HAL_ENTER_ISR();
   \   00000A   A2AF         MOV     C,0xa8.7
   \   00000C   E4           CLR     A
   \   00000D   33           RLC     A
   \   00000E   F8           MOV     R0,A
   \   00000F   D2AF         SETB    0xa8.7
    546            HAL_SLEEP_TIMER_CLEAR_INT();
   \   000011   C2C7         CLR     0xc0.7
    547          
    548          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    549            halSleepInt = TRUE;
    550          #endif
    551            
    552            CLEAR_SLEEP_MODE();
   \   000013   75..00       MOV     halSleepPconValue,#0x0
    553            HAL_EXIT_ISR();
   \   000016   E8           MOV     A,R0
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001B   92AF         MOV     0xa8.7,C
    554          }
   \   00001D   D0E0         POP     A
   \   00001F   F9           MOV     R1,A
   \   000020   D0E0         POP     A
   \   000022   F8           MOV     R0,A
   \   000023   D0D0         POP     PSW
   \   000025   D0E0         POP     A
   \   000027   32           RETI
   \   000028                REQUIRE _A_IEN0
   \   000028                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??halSleepTimerIsr::??INTVEC 43`:
   \   00002B   02....       LJMP       (halSleepTimerIsr)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for maxSleepLoopTime>`:
   \   000000   96511800     DD 1593750

   \                                 In  segment DATA_ID, align 1, keep-with-next
   \                     `?<Initializer for halSleepPconValue>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185197:
   \   000000   97511800     DD 1593751

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffffffe:
   \   000000   FEFFFFFF     DD 4294967294

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f:
   \   000000   1F000000     DD 31

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2d:
   \   000000   2D000000     DD 45

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffe7ae6a:
   \   000000   6AAEE7FF     DD 4293373546

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185196:
   \   000000   96511800     DD 1593750

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_29f:
   \   000000   9F020000     DD 671

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffe9:
   \   000000   E9FFFFFF     DD 4294967273

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSetSleepMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetSleepMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSetMaxSleepLoopTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetMaxSleepLoopTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleepSetTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleepSetTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TimerElapsed::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TimerElapsed

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halRestoreSleepLevel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halRestoreSleepLevel
    555          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   TimerElapsed
      0      0   halRestoreSleepLevel
      0     16   halSetMaxSleepLoopTime
      0     26   halSetSleepMode
      0     26   halSleep
        0     26   -> HalKeyEnterSleep
        0     26   -> HalKeyExitSleep
        0     26   -> HalLedEnterSleep
        0     26   -> HalLedExitSleep
        0     26   -> MAC_PwrNextTimeout
        0     26   -> MAC_PwrOffReq
        0     26   -> MAC_PwrOnReq
        0     26   -> halAssertHandler
        0     26   -> halSetSleepMode
        0     26   -> halSleepSetTimer
        0     26   -> macMcuTimer2OverflowWorkaround
      1     50   halSleepSetTimer
      4      0   halSleepTimerIsr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for halSleepPconValue>
       4  ?<Initializer for maxSleepLoopTime>
       1  IEN2
       1  PCON
       1  SLEEPCMD
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
      11  TimerElapsed
       6  TimerElapsed::?relay
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       4  __Constant_185196
       4  __Constant_185197
       4  __Constant_1f
       4  __Constant_29f
       4  __Constant_2d
       4  __Constant_64
       4  __Constant_ffe7ae6a
       4  __Constant_ffffffe9
       4  __Constant_fffffffe
       1  halPwrMgtMode
       3  halRestoreSleepLevel
       6  halRestoreSleepLevel::?relay
      78  halSetMaxSleepLoopTime
       6  halSetMaxSleepLoopTime::?relay
       8  halSetSleepMode
       6  halSetSleepMode::?relay
     494  halSleep
       6  halSleep::?relay
       1  halSleepPconValue
     168  halSleepSetTimer
       6  halSleepSetTimer::?relay
      40  halSleepTimerIsr
       3  halSleepTimerIsr::??INTVEC 43
       4  maxSleepLoopTime

 
 754 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   1 byte  in segment DATA_I
   1 byte  in segment DATA_ID
   3 bytes in segment INTVEC
  40 bytes in segment NEAR_CODE
  10 bytes in segment SFR_AN
   8 bytes in segment SLEEP_CODE
   4 bytes in segment XDATA_I
   4 bytes in segment XDATA_ID
  36 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 843 bytes of CODE  memory (+  3 bytes shared)
   0 bytes of CONST memory (+ 36 bytes shared)
   1 byte  of DATA  memory (+ 10 bytes shared)
   5 bytes of XDATA memory

Errors: none
Warnings: none
