###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:13
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\design\ZStack-2.5.1a\Components\stack\af\AF.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\stack\af\AF.c -D NWK_AUTO_POLL -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\AF.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\AF.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2011-11-18 16:03:29 -0800 (Fri, 18 Nov 2011) $
      4            Revision:       $Revision: 28423 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    102                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    103                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp );
    104          
    105          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    106          
    107          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    108          
    109          /*********************************************************************
    110           * PUBLIC FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * @fn      afInit
    115           *
    116           * @brief   Initialization function for the AF.
    117           *
    118           * @param   none
    119           *
    120           * @return  none
    121          void afInit( void )
    122          {
    123          }
    124           */
    125          
    126          /*********************************************************************
    127           * @fn      afRegisterExtended
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           * @param   descFn - pointer to descriptor callback function
    133           *
    134           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    135           *
    136           * @return  Pointer to epList_t on success, NULL otherwise.
    137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    138          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    139          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    140            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A09         MOV     R2,#0x9
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV     ?V2,R2
   \   000016   8B..         MOV     ?V3,R3
   \   000018   AA..         MOV     R2,?V2
   \   00001A   AB..         MOV     R3,?V3
    141          
    142            if (ep != NULL)
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   605D         JZ      ??afRegisterExtended_0
    143            {
    144              ep->nextDesc = epList;
   \   000020   90....       MOV     DPTR,#epList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   E8           MOV     A,R0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   E9           MOV     A,R1
   \   000030   F0           MOVX    @DPTR,A
    145              epList = ep;
   \   000031   90....       MOV     DPTR,#epList
   \   000034   EA           MOV     A,R2
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   EB           MOV     A,R3
   \   000038   F0           MOVX    @DPTR,A
    146              ep->epDesc = epDesc;
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E5..         MOV     A,?V0
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E5..         MOV     A,?V1
   \   000045   F0           MOVX    @DPTR,A
    147              ep->pfnDescCB = descFn;
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   EE           MOV     A,R6
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   EF           MOV     A,R7
   \   000052   F0           MOVX    @DPTR,A
    148              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   7432         MOV     A,#0x32
   \   00005F   F0           MOVX    @DPTR,A
    149              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   7401         MOV     A,#0x1
   \   00006D   F0           MOVX    @DPTR,A
    150              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \   00006E   8A82         MOV     DPL,R2
   \   000070   8B83         MOV     DPH,R3
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   7401         MOV     A,#0x1
   \   00007C   F0           MOVX    @DPTR,A
    151            }
    152          
    153            return ep;
   \                     ??afRegisterExtended_0:
   \   00007D   7F04         MOV     R7,#0x4
   \   00007F   02....       LJMP    ?BANKED_LEAVE_XDATA
    154          }
    155          
    156          /*********************************************************************
    157           * @fn      afRegister
    158           *
    159           * @brief   Register an Application's EndPoint description.
    160           *
    161           * @param   epDesc - pointer to the Application's endpoint descriptor.
    162           *
    163           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    164           *
    165           * @return  afStatus_SUCCESS - Registered
    166           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    167           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    170          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    171            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8A..         MOV     ?V0,R2
   \   000014   8B..         MOV     ?V1,R3
   \   000016   E5..         MOV     A,?V0
   \   000018   45..         ORL     A,?V1
   \   00001A   6004         JZ      ??afRegister_0
    172            {
    173              return afStatus_INVALID_PARAMETER;
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   801B         SJMP    ??afRegister_1
    174            }
    175          
    176            return ((NULL == afRegisterExtended(epDesc, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   000020                ; Setup parameters for call to function afRegisterExtended
   \   000020   7C00         MOV     R4,#0x0
   \   000022   7D00         MOV     R5,#0x0
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   00002B   8A..         MOV     ?V0,R2
   \   00002D   8B..         MOV     ?V1,R3
   \   00002F   E5..         MOV     A,?V0
   \   000031   45..         ORL     A,?V1
   \   000033   7004         JNZ     ??afRegister_2
   \   000035   7910         MOV     R1,#0x10
   \   000037   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   000039   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   00003B   7F02         MOV     R7,#0x2
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA
    177          }
    178          
    179          /*********************************************************************
    180           * @fn      afDelete
    181           *
    182           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    183           *
    184           * @param   EndPoint - Application Endpoint to delete
    185           *
    186           * @return  afStatus_SUCCESS - endpoint deleted
    187           *          afStatus_INVALID_PARAMETER - endpoint not found
    188           *          afStatus_FAILED - endpoint list empty
    189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    190          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    191          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
    192            epList_t *epCurrent;
    193            epList_t *epPrevious;
    194          
    195            if (epList != NULL)
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??afDelete_0 & 0xFFFF
    196            {
    197              epPrevious = epCurrent = epList;
   \   000016   90....       MOV     DPTR,#epList
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   FE           MOV     R6,A
   \   000020   E9           MOV     A,R1
   \   000021   FF           MOV     R7,A
   \   000022   8E..         MOV     ?V0,R6
   \   000024   8F..         MOV     ?V1,R7
    198          
    199              // first element of the list matches
    200              if (epCurrent->epDesc->endPoint == EndPoint)
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   E0           MOVX    A,@DPTR
   \   000035   65..         XRL     A,?V2
   \   000037   701C         JNZ     ??afDelete_1
    201              {
    202                epList = epCurrent->nextDesc;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   90....       MOV     DPTR,#epList
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    203                osal_mem_free(epCurrent);
   \   00004A                ; Setup parameters for call to function osal_mem_free
   \   00004A   EE           MOV     A,R6
   \   00004B   FA           MOV     R2,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FB           MOV     R3,A
   \   00004E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    204          
    205                return (afStatus_SUCCESS);
   \   000051   7900         MOV     R1,#0x0
   \   000053   8051         SJMP    ??afDelete_2
    206              }
    207              else
    208              {
    209                // search the list
    210                for (epCurrent = epPrevious->nextDesc; epCurrent != NULL; epPrevious = epCurrent)
   \                     ??afDelete_1:
   \   000055   85..82       MOV     DPL,?V0
   \   000058   85..83       MOV     DPH,?V1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   FE           MOV     R6,A
   \   000062   E9           MOV     A,R1
   \   000063   FF           MOV     R7,A
   \                     ??afDelete_3:
   \   000064   EE           MOV     A,R6
   \   000065   4F           ORL     A,R7
   \   000066   6038         JZ      ??afDelete_4
    211                {
    212                  if (epCurrent->epDesc->endPoint == EndPoint)
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F583         MOV     DPH,A
   \   000074   8882         MOV     DPL,R0
   \   000076   E0           MOVX    A,@DPTR
   \   000077   65..         XRL     A,?V2
   \   000079   701F         JNZ     ??afDelete_5
    213                  {
    214                    epPrevious->nextDesc = epCurrent->nextDesc;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   85..82       MOV     DPL,?V0
   \   000087   85..83       MOV     DPH,?V1
   \   00008A   E8           MOV     A,R0
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E9           MOV     A,R1
   \   00008E   F0           MOVX    @DPTR,A
    215                    osal_mem_free(epCurrent);
   \   00008F                ; Setup parameters for call to function osal_mem_free
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    216          
    217                    // delete the entry and free the memory
    218                    return (afStatus_SUCCESS);
   \   000096   7900         MOV     R1,#0x0
   \   000098   800C         SJMP    ??afDelete_2
    219                  }
    220                }
   \                     ??afDelete_5:
   \   00009A   8E..         MOV     ?V0,R6
   \   00009C   8F..         MOV     ?V1,R7
   \   00009E   80C4         SJMP    ??afDelete_3
    221              }
    222          
    223              // no endpoint found
    224              return (afStatus_INVALID_PARAMETER);
   \                     ??afDelete_4:
   \   0000A0   7902         MOV     R1,#0x2
   \   0000A2   8002         SJMP    ??afDelete_2
    225            }
    226            else
    227            {
    228              // epList is empty
    229              return (afStatus_FAILED);
   \                     ??afDelete_0:
   \   0000A4   7901         MOV     R1,#0x1
   \                     ??afDelete_2:
   \   0000A6   7F03         MOV     R7,#0x3
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA
    230            }
    231          }
    232          
    233          /*********************************************************************
    234           * @fn          afDataConfirm
    235           *
    236           * @brief       This function will generate the Data Confirm back to
    237           *              the application.
    238           *
    239           * @param       endPoint - confirm end point
    240           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    241           * @param       status - status of APSDE_DATA_REQUEST
    242           *
    243           * @return      none
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    246          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V1,R3
    247            endPointDesc_t *epDesc;
    248            afDataConfirm_t *msgPtr;
    249          
    250            // Find the endpoint description
    251            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   A9..         MOV     R1,?V0
   \   00000D   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   85....       MOV     ?V6,?V2
   \   000017   85....       MOV     ?V7,?V3
    252            if ( epDesc == NULL )
   \   00001A   E5..         MOV     A,?V6
   \   00001C   45..         ORL     A,?V7
   \   00001E   605A         JZ      ??afDataConfirm_0
    253              return;
    254          
    255            // Determine the incoming command type
    256            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   7A04         MOV     R2,#0x4
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000027   8A..         MOV     ?V2,R2
   \   000029   8B..         MOV     ?V3,R3
   \   00002B   AE..         MOV     R6,?V2
   \   00002D   AF..         MOV     R7,?V3
    257            if ( msgPtr )
   \   00002F   EE           MOV     A,R6
   \   000030   4F           ORL     A,R7
   \   000031   6047         JZ      ??afDataConfirm_0
    258            {
    259              // Build the Data Confirm message
    260              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   74FD         MOV     A,#-0x3
   \   000039   F0           MOVX    @DPTR,A
    261              msgPtr->hdr.status = status;
   \   00003A   E5..         MOV     A,?V1
   \   00003C   C0E0         PUSH    A
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
    262              msgPtr->endpoint = endPoint;
   \   000046   E5..         MOV     A,?V0
   \   000048   C0E0         PUSH    A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    263              msgPtr->transID = transID;
   \   000053   E5..         MOV     A,?V4
   \   000055   C0E0         PUSH    A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
    264          
    265          #if defined ( MT_AF_CB_FUNC )
    266              /* If MT has subscribed for this callback, don't send as a message. */
    267              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    268              {
    269                /* Send callback if it's subscribed */
    270                MT_AfDataConfirm ((void *)msgPtr);
    271                /* Release the memory. */
    272                osal_msg_deallocate( (void *)msgPtr );
    273              }
    274              else
    275          #endif
    276              {
    277                /* send message through task message */
    278                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000061                ; Setup parameters for call to function osal_msg_send
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   85..82       MOV     DPL,?V6
   \   000068   85..83       MOV     DPH,?V7
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F583         MOV     DPH,A
   \   000072   8882         MOV     DPL,R0
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000079   E9           MOV     A,R1
    279              }
    280            }
    281          }
   \                     ??afDataConfirm_0:
   \   00007A   7F08         MOV     R7,#0x8
   \   00007C   02....       LJMP    ?BANKED_LEAVE_XDATA
    282          
    283          /*********************************************************************
    284           * @fn          afIncomingData
    285           *
    286           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    287           *
    288           * @param       aff  - pointer to APS frame format
    289           * @param       SrcAddress  - Source address
    290           * @param       SrcPanId  - Source PAN ID
    291           * @param       sig - incoming message's link quality
    292           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    293           * @param       SecurityUse - Security enable/disable
    294           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    295           *
    296           * @return      none
    297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    299                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp )
    300          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7409         MOV     A,#0x9
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   E9           MOV     A,R1
   \   00001F   C0E0         PUSH    A
   \   000021   7408         MOV     A,#0x8
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   D0E0         POP     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   7420         MOV     A,#0x20
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?L_MOV_X
    301            endPointDesc_t *epDesc = NULL;
   \   000033   7E00         MOV     R6,#0x0
   \   000035   7F00         MOV     R7,#0x0
    302            epList_t *pList = epList;
   \   000037   90....       MOV     DPTR,#epList
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V6,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V7,A
    303          #if !defined ( APS_NO_GROUPS )
    304            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   74FE         MOV     A,#-0x2
   \   000049   F0           MOVX    @DPTR,A
    305          #endif
    306          
    307            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F583         MOV     DPH,A
   \   000055   8882         MOV     DPL,R0
   \   000057   E0           MOVX    A,@DPTR
   \   000058   540C         ANL     A,#0xc
   \   00005A   640C         XRL     A,#0xc
   \   00005C   7064         JNZ     ??afIncomingData_0
    308            {
    309          #if !defined ( APS_NO_GROUPS )
    310              // Find the first endpoint for this group
    311              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00005E                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00005E   79FE         MOV     R1,#-0x2
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F583         MOV     DPH,A
   \   00006B   8882         MOV     DPL,R0
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000079   E9           MOV     A,R1
   \   00007A   C0E0         PUSH    A
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   D0E0         POP     A
   \   000084   F0           MOVX    @DPTR,A
    312              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   64FE         XRL     A,#0xfe
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    313                return;   // No endpoint found
    314          
    315              epDesc = afFindEndPointDesc( grpEp );
   \   000093                ; Setup parameters for call to function afFindEndPointDesc
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00009E   8A..         MOV     ?V4,R2
   \   0000A0   8B..         MOV     ?V5,R3
   \   0000A2   AE..         MOV     R6,?V4
   \   0000A4   AF..         MOV     R7,?V5
    316              if ( epDesc == NULL )
   \   0000A6   EE           MOV     A,R6
   \   0000A7   4F           ORL     A,R7
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    317                return;   // Endpoint descriptor not found
    318          
    319              pList = afFindEndPointDescList( epDesc->endPoint );
   \   0000AD                ; Setup parameters for call to function afFindEndPointDescList
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000B6   8A..         MOV     ?V4,R2
   \   0000B8   8B..         MOV     ?V5,R3
   \   0000BA   85....       MOV     ?V6,?V4
   \   0000BD   85....       MOV     ?V7,?V5
   \   0000C0   8064         SJMP    ??afIncomingData_2
    320          #else
    321              return; // Not supported
    322          #endif
    323            }
    324            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   0000C2   7401         MOV     A,#0x1
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F8           MOV     R0,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   8882         MOV     DPL,R0
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   64FF         XRL     A,#0xff
   \   0000D4   7019         JNZ     ??afIncomingData_3
    325            {
    326              // Set the list
    327              if ( pList != NULL )
   \   0000D6   E5..         MOV     A,?V6
   \   0000D8   45..         ORL     A,?V7
   \   0000DA   604A         JZ      ??afIncomingData_2
    328              {
    329                epDesc = pList->epDesc;
   \   0000DC   85..82       MOV     DPL,?V6
   \   0000DF   85..83       MOV     DPH,?V7
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F8           MOV     R0,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F9           MOV     R1,A
   \   0000E9   E8           MOV     A,R0
   \   0000EA   FE           MOV     R6,A
   \   0000EB   E9           MOV     A,R1
   \   0000EC   FF           MOV     R7,A
   \   0000ED   8037         SJMP    ??afIncomingData_2
    330              }
    331            }
    332            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   0000EF                ; Setup parameters for call to function afFindEndPointDesc
   \   0000EF   7401         MOV     A,#0x1
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F583         MOV     DPH,A
   \   0000FA   8882         MOV     DPL,R0
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000103   8A..         MOV     ?V4,R2
   \   000105   8B..         MOV     ?V5,R3
   \   000107   A8..         MOV     R0,?V4
   \   000109   A9..         MOV     R1,?V5
   \   00010B   E8           MOV     A,R0
   \   00010C   FE           MOV     R6,A
   \   00010D   E9           MOV     A,R1
   \   00010E   FF           MOV     R7,A
   \   00010F   E8           MOV     A,R0
   \   000110   49           ORL     A,R1
   \   000111   6013         JZ      ??afIncomingData_2
    333            {
    334              pList = afFindEndPointDescList( epDesc->endPoint );
   \   000113                ; Setup parameters for call to function afFindEndPointDescList
   \   000113   8E82         MOV     DPL,R6
   \   000115   8F83         MOV     DPH,R7
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F9           MOV     R1,A
   \   000119   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00011C   8A..         MOV     ?V4,R2
   \   00011E   8B..         MOV     ?V5,R3
   \   000120   85....       MOV     ?V6,?V4
   \   000123   85....       MOV     ?V7,?V5
    335            }
    336          
    337            while ( epDesc )
   \                     ??afIncomingData_2:
   \   000126   EE           MOV     A,R6
   \   000127   4F           ORL     A,R7
   \   000128   7003         JNZ     $+5
   \   00012A   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    338            {
    339              uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   00012D   7406         MOV     A,#0x6
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   74FF         MOV     A,#-0x1
   \   000134   F0           MOVX    @DPTR,A
   \   000135   A3           INC     DPTR
   \   000136   74FF         MOV     A,#-0x1
   \   000138   F0           MOVX    @DPTR,A
    340          
    341              if ( pList->pfnDescCB )
   \   000139   85..82       MOV     DPL,?V6
   \   00013C   85..83       MOV     DPH,?V7
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F8           MOV     R0,A
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   F9           MOV     R1,A
   \   000148   E8           MOV     A,R0
   \   000149   49           ORL     A,R1
   \   00014A   6060         JZ      ??afIncomingData_4
    342              {
    343                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    344                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
   \   00014C                ; Setup parameters for indirect call
   \   00014C   8E82         MOV     DPL,R6
   \   00014E   8F83         MOV     DPH,R7
   \   000150   E0           MOVX    A,@DPTR
   \   000151   FA           MOV     R2,A
   \   000152   7902         MOV     R1,#0x2
   \   000154   85..82       MOV     DPL,?V6
   \   000157   85..83       MOV     DPH,?V7
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F8           MOV     R0,A
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   F583         MOV     DPH,A
   \   000164   8882         MOV     DPL,R0
   \   000166   12....       LCALL   ?CALL_IND
   \   000169   7404         MOV     A,#0x4
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   EA           MOV     A,R2
   \   00016F   F0           MOVX    @DPTR,A
   \   000170   A3           INC     DPTR
   \   000171   EB           MOV     A,R3
   \   000172   F0           MOVX    @DPTR,A
    345                if ( pID )
   \   000173   7404         MOV     A,#0x4
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F8           MOV     R0,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F9           MOV     R1,A
   \   00017D   E8           MOV     A,R0
   \   00017E   49           ORL     A,R1
   \   00017F   605A         JZ      ??afIncomingData_5
    346                {
    347                  epProfileID = *pID;
   \   000181   7404         MOV     A,#0x4
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   E0           MOVX    A,@DPTR
   \   000187   F8           MOV     R0,A
   \   000188   A3           INC     DPTR
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F583         MOV     DPH,A
   \   00018C   8882         MOV     DPL,R0
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F8           MOV     R0,A
   \   000190   A3           INC     DPTR
   \   000191   E0           MOVX    A,@DPTR
   \   000192   F9           MOV     R1,A
   \   000193   7406         MOV     A,#0x6
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   E8           MOV     A,R0
   \   000199   F0           MOVX    @DPTR,A
   \   00019A   A3           INC     DPTR
   \   00019B   E9           MOV     A,R1
   \   00019C   F0           MOVX    @DPTR,A
    348                  osal_mem_free( pID );
   \   00019D                ; Setup parameters for call to function osal_mem_free
   \   00019D   7404         MOV     A,#0x4
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   FA           MOV     R2,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   FB           MOV     R3,A
   \   0001A7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001AA   802F         SJMP    ??afIncomingData_5
    349                }
    350              }
    351              else if ( epDesc->simpleDesc )
   \                     ??afIncomingData_4:
   \   0001AC   8E82         MOV     DPL,R6
   \   0001AE   8F83         MOV     DPH,R7
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F8           MOV     R0,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   F9           MOV     R1,A
   \   0001B8   E8           MOV     A,R0
   \   0001B9   49           ORL     A,R1
   \   0001BA   601F         JZ      ??afIncomingData_5
    352              {
    353                epProfileID = epDesc->simpleDesc->AppProfId;
   \   0001BC   8E82         MOV     DPL,R6
   \   0001BE   8F83         MOV     DPH,R7
   \   0001C0   A3           INC     DPTR
   \   0001C1   A3           INC     DPTR
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F8           MOV     R0,A
   \   0001C5   A3           INC     DPTR
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   F583         MOV     DPH,A
   \   0001C9   8882         MOV     DPL,R0
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   A3           INC     DPTR
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   F9           MOV     R1,A
   \   0001D1   7406         MOV     A,#0x6
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   E8           MOV     A,R0
   \   0001D7   F0           MOVX    @DPTR,A
   \   0001D8   A3           INC     DPTR
   \   0001D9   E9           MOV     A,R1
   \   0001DA   F0           MOVX    @DPTR,A
    354              }
    355          
    356              if ( (aff->ProfileID == epProfileID) ||
    357                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
   \                     ??afIncomingData_5:
   \   0001DB   7401         MOV     A,#0x1
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   C8           XCH     A,R0
   \   0001E5   2408         ADD     A,#0x8
   \   0001E7   F582         MOV     DPL,A
   \   0001E9   C8           XCH     A,R0
   \   0001EA   3400         ADDC    A,#0x0
   \   0001EC   F583         MOV     DPH,A
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   F8           MOV     R0,A
   \   0001F0   A3           INC     DPTR
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   F9           MOV     R1,A
   \   0001F3   7406         MOV     A,#0x6
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   68           XRL     A,R0
   \   0001FA   7003         JNZ     ??afIncomingData_6
   \   0001FC   A3           INC     DPTR
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   69           XRL     A,R1
   \                     ??afIncomingData_6:
   \   0001FF   6029         JZ      ??afIncomingData_7
   \   000201   8E82         MOV     DPL,R6
   \   000203   8F83         MOV     DPH,R7
   \   000205   E0           MOVX    A,@DPTR
   \   000206   6003         JZ      $+5
   \   000208   02....       LJMP    ??afIncomingData_8 & 0xFFFF
   \   00020B   7401         MOV     A,#0x1
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   E0           MOVX    A,@DPTR
   \   000211   F8           MOV     R0,A
   \   000212   A3           INC     DPTR
   \   000213   E0           MOVX    A,@DPTR
   \   000214   C8           XCH     A,R0
   \   000215   2408         ADD     A,#0x8
   \   000217   F582         MOV     DPL,A
   \   000219   C8           XCH     A,R0
   \   00021A   3400         ADDC    A,#0x0
   \   00021C   F583         MOV     DPH,A
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   F8           MOV     R0,A
   \   000220   A3           INC     DPTR
   \   000221   E0           MOVX    A,@DPTR
   \   000222   F9           MOV     R1,A
   \   000223   E8           MOV     A,R0
   \   000224   49           ORL     A,R1
   \   000225   6003         JZ      $+5
   \   000227   02....       LJMP    ??afIncomingData_8 & 0xFFFF
    358              {
    359                {
    360                  // Save original endpoint
    361                  uint8 endpoint = aff->DstEndPoint;
   \                     ??afIncomingData_7:
   \   00022A   7401         MOV     A,#0x1
   \   00022C   12....       LCALL   ?XSTACK_DISP0_8
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   F8           MOV     R0,A
   \   000231   A3           INC     DPTR
   \   000232   E0           MOVX    A,@DPTR
   \   000233   F583         MOV     DPH,A
   \   000235   8882         MOV     DPL,R0
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   C0E0         PUSH    A
   \   00023C   7403         MOV     A,#0x3
   \   00023E   12....       LCALL   ?XSTACK_DISP0_8
   \   000241   D0E0         POP     A
   \   000243   F0           MOVX    @DPTR,A
    362          
    363                  // overwrite with descriptor's endpoint
    364                  aff->DstEndPoint = epDesc->endPoint;
   \   000244   8E82         MOV     DPL,R6
   \   000246   8F83         MOV     DPH,R7
   \   000248   E0           MOVX    A,@DPTR
   \   000249   C0E0         PUSH    A
   \   00024B   7401         MOV     A,#0x1
   \   00024D   12....       LCALL   ?XSTACK_DISP0_8
   \   000250   E0           MOVX    A,@DPTR
   \   000251   F8           MOV     R0,A
   \   000252   A3           INC     DPTR
   \   000253   E0           MOVX    A,@DPTR
   \   000254   F583         MOV     DPH,A
   \   000256   8882         MOV     DPL,R0
   \   000258   A3           INC     DPTR
   \   000259   A3           INC     DPTR
   \   00025A   D0E0         POP     A
   \   00025C   F0           MOVX    @DPTR,A
    365          
    366                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    367                                     nwkSeqNum, SecurityUse, timestamp );
   \   00025D                ; Setup parameters for call to function afBuildMSGIncoming
   \   00025D   78..         MOV     R0,#?V0
   \   00025F   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000262   7423         MOV     A,#0x23
   \   000264   12....       LCALL   ?XSTACK_DISP0_8
   \   000267   E0           MOVX    A,@DPTR
   \   000268   F5..         MOV     ?V4,A
   \   00026A   78..         MOV     R0,#?V4
   \   00026C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00026F   7422         MOV     A,#0x22
   \   000271   12....       LCALL   ?XSTACK_DISP0_8
   \   000274   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000277   7422         MOV     A,#0x22
   \   000279   12....       LCALL   ?XSTACK_DISP0_8
   \   00027C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00027F   7412         MOV     A,#0x12
   \   000281   12....       LCALL   ?XSTACK_DISP0_8
   \   000284   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000287   7413         MOV     A,#0x13
   \   000289   12....       LCALL   ?XSTACK_DISP0_8
   \   00028C   E0           MOVX    A,@DPTR
   \   00028D   F9           MOV     R1,A
   \   00028E   EE           MOV     A,R6
   \   00028F   FC           MOV     R4,A
   \   000290   EF           MOV     A,R7
   \   000291   FD           MOV     R5,A
   \   000292   740C         MOV     A,#0xc
   \   000294   12....       LCALL   ?XSTACK_DISP0_8
   \   000297   E0           MOVX    A,@DPTR
   \   000298   FA           MOV     R2,A
   \   000299   A3           INC     DPTR
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   FB           MOV     R3,A
   \   00029C   12....       LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   00029F   740B         MOV     A,#0xb
   \   0002A1   12....       LCALL   ?DEALLOC_XSTACK8
    368          
    369                  // Restore with original endpoint
    370                  aff->DstEndPoint = endpoint;
   \   0002A4   7403         MOV     A,#0x3
   \   0002A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A9   E0           MOVX    A,@DPTR
   \   0002AA   C0E0         PUSH    A
   \   0002AC   7401         MOV     A,#0x1
   \   0002AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   F8           MOV     R0,A
   \   0002B3   A3           INC     DPTR
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   F583         MOV     DPH,A
   \   0002B7   8882         MOV     DPL,R0
   \   0002B9   A3           INC     DPTR
   \   0002BA   A3           INC     DPTR
   \   0002BB   D0E0         POP     A
   \   0002BD   F0           MOVX    @DPTR,A
    371                }
    372              }
    373          
    374              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \                     ??afIncomingData_8:
   \   0002BE   7401         MOV     A,#0x1
   \   0002C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C3   E0           MOVX    A,@DPTR
   \   0002C4   F8           MOV     R0,A
   \   0002C5   A3           INC     DPTR
   \   0002C6   E0           MOVX    A,@DPTR
   \   0002C7   F583         MOV     DPH,A
   \   0002C9   8882         MOV     DPL,R0
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   540C         ANL     A,#0xc
   \   0002CE   640C         XRL     A,#0xc
   \   0002D0   7065         JNZ     ??afIncomingData_9
    375              {
    376          #if !defined ( APS_NO_GROUPS )
    377                // Find the next endpoint for this group
    378                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
   \   0002D2                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0002D2   85..82       MOV     DPL,?XSP + 0
   \   0002D5   85..83       MOV     DPH,?XSP + 1
   \   0002D8   E0           MOVX    A,@DPTR
   \   0002D9   F9           MOV     R1,A
   \   0002DA   7401         MOV     A,#0x1
   \   0002DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   F8           MOV     R0,A
   \   0002E1   A3           INC     DPTR
   \   0002E2   E0           MOVX    A,@DPTR
   \   0002E3   F583         MOV     DPH,A
   \   0002E5   8882         MOV     DPL,R0
   \   0002E7   A3           INC     DPTR
   \   0002E8   A3           INC     DPTR
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   FA           MOV     R2,A
   \   0002ED   A3           INC     DPTR
   \   0002EE   E0           MOVX    A,@DPTR
   \   0002EF   FB           MOV     R3,A
   \   0002F0   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   0002F3   E9           MOV     A,R1
   \   0002F4   C0E0         PUSH    A
   \   0002F6   85..82       MOV     DPL,?XSP + 0
   \   0002F9   85..83       MOV     DPH,?XSP + 1
   \   0002FC   D0E0         POP     A
   \   0002FE   F0           MOVX    @DPTR,A
    379                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   0002FF   85..82       MOV     DPL,?XSP + 0
   \   000302   85..83       MOV     DPH,?XSP + 1
   \   000305   E0           MOVX    A,@DPTR
   \   000306   64FE         XRL     A,#0xfe
   \   000308   6076         JZ      ??afIncomingData_1
    380                  return;   // No endpoint found
    381          
    382                epDesc = afFindEndPointDesc( grpEp );
   \   00030A                ; Setup parameters for call to function afFindEndPointDesc
   \   00030A   85..82       MOV     DPL,?XSP + 0
   \   00030D   85..83       MOV     DPH,?XSP + 1
   \   000310   E0           MOVX    A,@DPTR
   \   000311   F9           MOV     R1,A
   \   000312   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000315   8A..         MOV     ?V4,R2
   \   000317   8B..         MOV     ?V5,R3
   \   000319   AE..         MOV     R6,?V4
   \   00031B   AF..         MOV     R7,?V5
    383                if ( epDesc == NULL )
   \   00031D   EE           MOV     A,R6
   \   00031E   4F           ORL     A,R7
   \   00031F   605F         JZ      ??afIncomingData_1
    384                  return;   // Endpoint descriptor not found
    385          
    386                pList = afFindEndPointDescList( epDesc->endPoint );
   \   000321                ; Setup parameters for call to function afFindEndPointDescList
   \   000321   8E82         MOV     DPL,R6
   \   000323   8F83         MOV     DPH,R7
   \   000325   E0           MOVX    A,@DPTR
   \   000326   F9           MOV     R1,A
   \   000327   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00032A   8A..         MOV     ?V4,R2
   \   00032C   8B..         MOV     ?V5,R3
   \   00032E   85....       MOV     ?V6,?V4
   \   000331   85....       MOV     ?V7,?V5
   \   000334   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    387          #else
    388                return;
    389          #endif
    390              }
    391              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_9:
   \   000337   7401         MOV     A,#0x1
   \   000339   12....       LCALL   ?XSTACK_DISP0_8
   \   00033C   E0           MOVX    A,@DPTR
   \   00033D   F8           MOV     R0,A
   \   00033E   A3           INC     DPTR
   \   00033F   E0           MOVX    A,@DPTR
   \   000340   F583         MOV     DPH,A
   \   000342   8882         MOV     DPL,R0
   \   000344   A3           INC     DPTR
   \   000345   A3           INC     DPTR
   \   000346   E0           MOVX    A,@DPTR
   \   000347   64FF         XRL     A,#0xff
   \   000349   702E         JNZ     ??afIncomingData_10
    392              {
    393                pList = pList->nextDesc;
   \   00034B   85..82       MOV     DPL,?V6
   \   00034E   85..83       MOV     DPH,?V7
   \   000351   E0           MOVX    A,@DPTR
   \   000352   F5..         MOV     ?V6,A
   \   000354   A3           INC     DPTR
   \   000355   E0           MOVX    A,@DPTR
   \   000356   F5..         MOV     ?V7,A
    394                if ( pList )
   \   000358   E5..         MOV     A,?V6
   \   00035A   45..         ORL     A,?V7
   \   00035C   6014         JZ      ??afIncomingData_11
    395                  epDesc = pList->epDesc;
   \   00035E   85..82       MOV     DPL,?V6
   \   000361   85..83       MOV     DPH,?V7
   \   000364   A3           INC     DPTR
   \   000365   A3           INC     DPTR
   \   000366   E0           MOVX    A,@DPTR
   \   000367   F8           MOV     R0,A
   \   000368   A3           INC     DPTR
   \   000369   E0           MOVX    A,@DPTR
   \   00036A   F9           MOV     R1,A
   \   00036B   E8           MOV     A,R0
   \   00036C   FE           MOV     R6,A
   \   00036D   E9           MOV     A,R1
   \   00036E   FF           MOV     R7,A
   \   00036F   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    396                else
    397                  epDesc = NULL;
   \                     ??afIncomingData_11:
   \   000372   7E00         MOV     R6,#0x0
   \   000374   7F00         MOV     R7,#0x0
   \   000376   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    398              }
    399              else
    400                epDesc = NULL;
   \                     ??afIncomingData_10:
   \   000379   7E00         MOV     R6,#0x0
   \   00037B   7F00         MOV     R7,#0x0
   \   00037D   02....       LJMP    ??afIncomingData_2 & 0xFFFF
    401            }
    402          }
   \                     ??afIncomingData_1:
   \   000380   740B         MOV     A,#0xb
   \   000382   12....       LCALL   ?DEALLOC_XSTACK8
   \   000385   7F08         MOV     R7,#0x8
   \   000387   02....       LJMP    ?BANKED_LEAVE_XDATA
    403          
    404          /*********************************************************************
    405           * @fn          afBuildMSGIncoming
    406           *
    407           * @brief       Build the message for the app
    408           *
    409           * @param
    410           *
    411           * @return      pointer to next in data buffer
    412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    414                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    415                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp )
    416          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7403         MOV     A,#0x3
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8A..         MOV     ?V4,R2
   \   000022   8B..         MOV     ?V5,R3
   \   000024   7419         MOV     A,#0x19
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V7,A
    417            afIncomingMSGPacket_t *MSGpkt;
    418            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
   \   000030   E5..         MOV     A,?V4
   \   000032   2410         ADD     A,#0x10
   \   000034   F582         MOV     DPL,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V5
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2424         ADD     A,#0x24
   \   00003E   F5..         MOV     ?V3,A
    419            uint8 *asdu = aff->asdu;
   \   000040   E5..         MOV     A,?V4
   \   000042   240E         ADD     A,#0xe
   \   000044   F582         MOV     DPL,A
   \   000046   E4           CLR     A
   \   000047   35..         ADDC    A,?V5
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   7401         MOV     A,#0x1
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
    420            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   00005A                ; Setup parameters for call to function osal_msg_allocate
   \   00005A   AA..         MOV     R2,?V3
   \   00005C   7B00         MOV     R3,#0x0
   \   00005E   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000061   8A..         MOV     ?V0,R2
   \   000063   8B..         MOV     ?V1,R3
   \   000065   AE..         MOV     R6,?V0
   \   000067   AF..         MOV     R7,?V1
    421          
    422            if ( MSGpkt == NULL )
   \   000069   EE           MOV     A,R6
   \   00006A   4F           ORL     A,R7
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    423            {
    424              return;
    425            }
    426          
    427            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   741A         MOV     A,#0x1a
   \   000076   F0           MOVX    @DPTR,A
    428            MSGpkt->groupId = aff->GroupID;
   \   000077   85..82       MOV     DPL,?V4
   \   00007A   85..83       MOV     DPH,?V5
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E8           MOV     A,R0
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   E9           MOV     A,R1
   \   000090   F0           MOVX    @DPTR,A
    429            MSGpkt->clusterId = aff->ClusterID;
   \   000091   85..82       MOV     DPL,?V4
   \   000094   85..83       MOV     DPH,?V5
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F8           MOV     R0,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   8E82         MOV     DPL,R6
   \   0000A4   8F83         MOV     DPH,R7
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   E8           MOV     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E9           MOV     A,R1
   \   0000AE   F0           MOVX    @DPTR,A
    430            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \   0000AF                ; Setup parameters for call to function afCopyAddress
   \   0000AF   7415         MOV     A,#0x15
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FC           MOV     R4,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   FD           MOV     R5,A
   \   0000B9   EE           MOV     A,R6
   \   0000BA   2406         ADD     A,#0x6
   \   0000BC   FA           MOV     R2,A
   \   0000BD   E4           CLR     A
   \   0000BE   3F           ADDC    A,R7
   \   0000BF   FB           MOV     R3,A
   \   0000C0   12....       LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    431            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   0000C3   85..82       MOV     DPL,?V4
   \   0000C6   85..83       MOV     DPH,?V5
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   C0E0         PUSH    A
   \   0000CF   EE           MOV     A,R6
   \   0000D0   240F         ADD     A,#0xf
   \   0000D2   F582         MOV     DPL,A
   \   0000D4   E4           CLR     A
   \   0000D5   3F           ADDC    A,R7
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
    432            MSGpkt->endPoint = epDesc->endPoint;
   \   0000DB   7403         MOV     A,#0x3
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F8           MOV     R0,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   8882         MOV     DPL,R0
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C0E0         PUSH    A
   \   0000EB   EE           MOV     A,R6
   \   0000EC   2414         ADD     A,#0x14
   \   0000EE   F582         MOV     DPL,A
   \   0000F0   E4           CLR     A
   \   0000F1   3F           ADDC    A,R7
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   D0E0         POP     A
   \   0000F6   F0           MOVX    @DPTR,A
    433            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000F7   E5..         MOV     A,?V4
   \   0000F9   240C         ADD     A,#0xc
   \   0000FB   F582         MOV     DPL,A
   \   0000FD   E4           CLR     A
   \   0000FE   35..         ADDC    A,?V5
   \   000100   F583         MOV     DPH,A
   \   000102   E0           MOVX    A,@DPTR
   \   000103   C0E0         PUSH    A
   \   000105   EE           MOV     A,R6
   \   000106   2415         ADD     A,#0x15
   \   000108   F582         MOV     DPL,A
   \   00010A   E4           CLR     A
   \   00010B   3F           ADDC    A,R7
   \   00010C   F583         MOV     DPH,A
   \   00010E   D0E0         POP     A
   \   000110   F0           MOVX    @DPTR,A
    434            MSGpkt->LinkQuality = sig->LinkQuality;
   \   000111   85..82       MOV     DPL,?V6
   \   000114   85..83       MOV     DPH,?V7
   \   000117   E0           MOVX    A,@DPTR
   \   000118   C0E0         PUSH    A
   \   00011A   EE           MOV     A,R6
   \   00011B   2416         ADD     A,#0x16
   \   00011D   F582         MOV     DPL,A
   \   00011F   E4           CLR     A
   \   000120   3F           ADDC    A,R7
   \   000121   F583         MOV     DPH,A
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
    435            MSGpkt->correlation = sig->correlation;
   \   000126   85..82       MOV     DPL,?V6
   \   000129   85..83       MOV     DPH,?V7
   \   00012C   A3           INC     DPTR
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   C0E0         PUSH    A
   \   000130   EE           MOV     A,R6
   \   000131   2417         ADD     A,#0x17
   \   000133   F582         MOV     DPL,A
   \   000135   E4           CLR     A
   \   000136   3F           ADDC    A,R7
   \   000137   F583         MOV     DPH,A
   \   000139   D0E0         POP     A
   \   00013B   F0           MOVX    @DPTR,A
    436            MSGpkt->rssi = sig->rssi;
   \   00013C   85..82       MOV     DPL,?V6
   \   00013F   85..83       MOV     DPH,?V7
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   C0E0         PUSH    A
   \   000147   EE           MOV     A,R6
   \   000148   2418         ADD     A,#0x18
   \   00014A   F582         MOV     DPL,A
   \   00014C   E4           CLR     A
   \   00014D   3F           ADDC    A,R7
   \   00014E   F583         MOV     DPH,A
   \   000150   D0E0         POP     A
   \   000152   F0           MOVX    @DPTR,A
    437            MSGpkt->SecurityUse = SecurityUse;
   \   000153   741B         MOV     A,#0x1b
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   E0           MOVX    A,@DPTR
   \   000159   C0E0         PUSH    A
   \   00015B   EE           MOV     A,R6
   \   00015C   2419         ADD     A,#0x19
   \   00015E   F582         MOV     DPL,A
   \   000160   E4           CLR     A
   \   000161   3F           ADDC    A,R7
   \   000162   F583         MOV     DPH,A
   \   000164   D0E0         POP     A
   \   000166   F0           MOVX    @DPTR,A
    438            MSGpkt->timestamp = timestamp;
   \   000167   741C         MOV     A,#0x1c
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   12....       LCALL   ?XLOAD_R0123
   \   00016F   EE           MOV     A,R6
   \   000170   241A         ADD     A,#0x1a
   \   000172   F582         MOV     DPL,A
   \   000174   E4           CLR     A
   \   000175   3F           ADDC    A,R7
   \   000176   F583         MOV     DPH,A
   \   000178   12....       LCALL   ?XSTORE_R0123
    439            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   00017B   85..82       MOV     DPL,?XSP + 0
   \   00017E   85..83       MOV     DPH,?XSP + 1
   \   000181   E0           MOVX    A,@DPTR
   \   000182   C0E0         PUSH    A
   \   000184   EE           MOV     A,R6
   \   000185   241E         ADD     A,#0x1e
   \   000187   F582         MOV     DPL,A
   \   000189   E4           CLR     A
   \   00018A   3F           ADDC    A,R7
   \   00018B   F583         MOV     DPH,A
   \   00018D   D0E0         POP     A
   \   00018F   F0           MOVX    @DPTR,A
    440            MSGpkt->macDestAddr = aff->macDestAddr;
   \   000190   85..82       MOV     DPL,?V4
   \   000193   85..83       MOV     DPH,?V5
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   F8           MOV     R0,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F9           MOV     R1,A
   \   0001A5   EE           MOV     A,R6
   \   0001A6   2412         ADD     A,#0x12
   \   0001A8   F582         MOV     DPL,A
   \   0001AA   E4           CLR     A
   \   0001AB   3F           ADDC    A,R7
   \   0001AC   F583         MOV     DPH,A
   \   0001AE   E8           MOV     A,R0
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E9           MOV     A,R1
   \   0001B2   F0           MOVX    @DPTR,A
    441            MSGpkt->srcAddr.panId = SrcPanId;
   \   0001B3   7417         MOV     A,#0x17
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   F8           MOV     R0,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   F9           MOV     R1,A
   \   0001BD   EE           MOV     A,R6
   \   0001BE   2410         ADD     A,#0x10
   \   0001C0   F582         MOV     DPL,A
   \   0001C2   E4           CLR     A
   \   0001C3   3F           ADDC    A,R7
   \   0001C4   F583         MOV     DPH,A
   \   0001C6   E8           MOV     A,R0
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   A3           INC     DPTR
   \   0001C9   E9           MOV     A,R1
   \   0001CA   F0           MOVX    @DPTR,A
    442            MSGpkt->cmd.TransSeqNumber = 0;
   \   0001CB   EE           MOV     A,R6
   \   0001CC   241F         ADD     A,#0x1f
   \   0001CE   F582         MOV     DPL,A
   \   0001D0   E4           CLR     A
   \   0001D1   3F           ADDC    A,R7
   \   0001D2   F583         MOV     DPH,A
   \   0001D4   7400         MOV     A,#0x0
   \   0001D6   F0           MOVX    @DPTR,A
    443            MSGpkt->cmd.DataLength = aff->asduLength;
   \   0001D7   E5..         MOV     A,?V4
   \   0001D9   2410         ADD     A,#0x10
   \   0001DB   F582         MOV     DPL,A
   \   0001DD   E4           CLR     A
   \   0001DE   35..         ADDC    A,?V5
   \   0001E0   F583         MOV     DPH,A
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F8           MOV     R0,A
   \   0001E4   7900         MOV     R1,#0x0
   \   0001E6   EE           MOV     A,R6
   \   0001E7   2420         ADD     A,#0x20
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   E4           CLR     A
   \   0001EC   3F           ADDC    A,R7
   \   0001ED   F583         MOV     DPH,A
   \   0001EF   E8           MOV     A,R0
   \   0001F0   F0           MOVX    @DPTR,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   E9           MOV     A,R1
   \   0001F3   F0           MOVX    @DPTR,A
    444          
    445            if ( MSGpkt->cmd.DataLength )
   \   0001F4   EE           MOV     A,R6
   \   0001F5   2420         ADD     A,#0x20
   \   0001F7   F582         MOV     DPL,A
   \   0001F9   E4           CLR     A
   \   0001FA   3F           ADDC    A,R7
   \   0001FB   F583         MOV     DPH,A
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   F8           MOV     R0,A
   \   0001FF   A3           INC     DPTR
   \   000200   E0           MOVX    A,@DPTR
   \   000201   F9           MOV     R1,A
   \   000202   E8           MOV     A,R0
   \   000203   49           ORL     A,R1
   \   000204   604F         JZ      ??afBuildMSGIncoming_1
    446            {
    447              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000206   EE           MOV     A,R6
   \   000207   2424         ADD     A,#0x24
   \   000209   F8           MOV     R0,A
   \   00020A   E4           CLR     A
   \   00020B   3F           ADDC    A,R7
   \   00020C   F9           MOV     R1,A
   \   00020D   EE           MOV     A,R6
   \   00020E   2422         ADD     A,#0x22
   \   000210   F582         MOV     DPL,A
   \   000212   E4           CLR     A
   \   000213   3F           ADDC    A,R7
   \   000214   F583         MOV     DPH,A
   \   000216   E8           MOV     A,R0
   \   000217   F0           MOVX    @DPTR,A
   \   000218   A3           INC     DPTR
   \   000219   E9           MOV     A,R1
   \   00021A   F0           MOVX    @DPTR,A
    448              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   00021B                ; Setup parameters for call to function osal_memcpy
   \   00021B   7401         MOV     A,#0x1
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   E0           MOVX    A,@DPTR
   \   000221   F5..         MOV     ?V0,A
   \   000223   A3           INC     DPTR
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F5..         MOV     ?V1,A
   \   000227   75..00       MOV     ?V2,#0x0
   \   00022A   78..         MOV     R0,#?V0
   \   00022C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00022F   EE           MOV     A,R6
   \   000230   2420         ADD     A,#0x20
   \   000232   F582         MOV     DPL,A
   \   000234   E4           CLR     A
   \   000235   3F           ADDC    A,R7
   \   000236   F583         MOV     DPH,A
   \   000238   E0           MOVX    A,@DPTR
   \   000239   FC           MOV     R4,A
   \   00023A   A3           INC     DPTR
   \   00023B   E0           MOVX    A,@DPTR
   \   00023C   FD           MOV     R5,A
   \   00023D   EE           MOV     A,R6
   \   00023E   2422         ADD     A,#0x22
   \   000240   F582         MOV     DPL,A
   \   000242   E4           CLR     A
   \   000243   3F           ADDC    A,R7
   \   000244   F583         MOV     DPH,A
   \   000246   E0           MOVX    A,@DPTR
   \   000247   FA           MOV     R2,A
   \   000248   A3           INC     DPTR
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   FB           MOV     R3,A
   \   00024B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00024E   7403         MOV     A,#0x3
   \   000250   12....       LCALL   ?DEALLOC_XSTACK8
   \   000253   8010         SJMP    ??afBuildMSGIncoming_2
    449            }
    450            else
    451            {
    452              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   000255   EE           MOV     A,R6
   \   000256   2422         ADD     A,#0x22
   \   000258   F582         MOV     DPL,A
   \   00025A   E4           CLR     A
   \   00025B   3F           ADDC    A,R7
   \   00025C   F583         MOV     DPH,A
   \   00025E   7400         MOV     A,#0x0
   \   000260   F0           MOVX    @DPTR,A
   \   000261   A3           INC     DPTR
   \   000262   7400         MOV     A,#0x0
   \   000264   F0           MOVX    @DPTR,A
    453            }
    454          
    455          #if defined ( MT_AF_CB_FUNC )
    456            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    457            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    458            {
    459              MT_AfIncomingMsg( (void *)MSGpkt );
    460              // Release the memory.
    461              osal_msg_deallocate( (void *)MSGpkt );
    462            }
    463            else
    464          #endif
    465            {
    466              // Send message through task message.
    467              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   000265                ; Setup parameters for call to function osal_msg_send
   \   000265   EE           MOV     A,R6
   \   000266   FA           MOV     R2,A
   \   000267   EF           MOV     A,R7
   \   000268   FB           MOV     R3,A
   \   000269   7403         MOV     A,#0x3
   \   00026B   12....       LCALL   ?XSTACK_DISP0_8
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   F8           MOV     R0,A
   \   000270   A3           INC     DPTR
   \   000271   E0           MOVX    A,@DPTR
   \   000272   F583         MOV     DPH,A
   \   000274   8882         MOV     DPL,R0
   \   000276   A3           INC     DPTR
   \   000277   E0           MOVX    A,@DPTR
   \   000278   F8           MOV     R0,A
   \   000279   A3           INC     DPTR
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   F583         MOV     DPH,A
   \   00027D   8882         MOV     DPL,R0
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   F9           MOV     R1,A
   \   000281   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000284   E9           MOV     A,R1
    468            }
    469          }
   \                     ??afBuildMSGIncoming_0:
   \   000285   7405         MOV     A,#0x5
   \   000287   12....       LCALL   ?DEALLOC_XSTACK8
   \   00028A   7F08         MOV     R7,#0x8
   \   00028C   02....       LJMP    ?BANKED_LEAVE_XDATA
    470          
    471          /*********************************************************************
    472           * @fn      AF_DataRequest
    473           *
    474           * @brief   Common functionality for invoking APSDE_DataReq() for both
    475           *          SendMulti and MSG-Send.
    476           *
    477           * input parameters
    478           *
    479           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    480           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    481           * @param   cID - A valid cluster ID as specified by the Profile.
    482           * @param   len - Number of bytes of data pointed to by next param.
    483           * @param  *buf - A pointer to the data bytes to send.
    484           * @param  *transID - A pointer to a byte which can be modified and which will
    485           *                    be used as the transaction sequence number of the msg.
    486           * @param   options - Valid bit mask of Tx options.
    487           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    488           *
    489           * output parameters
    490           *
    491           * @param  *transID - Incremented by one if the return value is success.
    492           *
    493           * @return  afStatus_t - See previous definition of afStatus_... types.
    494           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    495          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    497                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    498                                     uint8 options, uint8 radius )
    499          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   89..         MOV     ?V1,R1
    500            pDescCB pfnDescCB;
    501            ZStatus_t stat;
    502            APSDE_DataReq_t req;
    503            afDataReqMTU_t mtu;
    504          
    505            // Verify source end point
    506            if ( srcEP == NULL )
   \   000014   E5..         MOV     A,?V2
   \   000016   45..         ORL     A,?V3
   \   000018   7005         JNZ     ??AF_DataRequest_0
    507            {
    508              return afStatus_INVALID_PARAMETER;
   \   00001A   7902         MOV     R1,#0x2
   \   00001C   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    509            }
    510          
    511          #if !defined( REFLECTOR )
    512            if ( dstAddr->addrMode == afAddrNotPresent )
    513            {
    514              return afStatus_INVALID_PARAMETER;
    515            }
    516          #endif
    517          
    518            // Check if route is available before sending data
    519            if ( options & AF_LIMIT_CONCENTRATOR  )
   \                     ??AF_DataRequest_0:
   \   00001F   E5..         MOV     A,?V1
   \   000021   A2E3         MOV     C,0xE0 /* A   */.3
   \   000023   5046         JNC     ??AF_DataRequest_2
    520            {
    521              if ( dstAddr->addrMode != afAddr16Bit )
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6402         XRL     A,#0x2
   \   000034   6005         JZ      ??AF_DataRequest_3
    522              {
    523                return ( afStatus_INVALID_PARAMETER );
   \   000036   7902         MOV     R1,#0x2
   \   000038   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    524              }
    525          
    526              // First, make sure the destination is not its self, then check for an existing route.
    527              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    528                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \                     ??AF_DataRequest_3:
   \   00003B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00003E   8A..         MOV     ?V4,R2
   \   000040   8B..         MOV     ?V5,R3
   \   000042   A8..         MOV     R0,?V4
   \   000044   A9..         MOV     R1,?V5
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   68           XRL     A,R0
   \   00004C   7003         JNZ     ??AF_DataRequest_4
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   69           XRL     A,R1
   \                     ??AF_DataRequest_4:
   \   000051   6018         JZ      ??AF_DataRequest_2
   \   000053                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000053   7C03         MOV     R4,#0x3
   \   000055   7901         MOV     R1,#0x1
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000063   E9           MOV     A,R1
   \   000064   6005         JZ      ??AF_DataRequest_2
    529              {
    530                // A valid route to a concentrator wasn't found
    531                return ( afStatus_NO_ROUTE );
   \   000066   79CD         MOV     R1,#-0x33
   \   000068   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    532              }
    533            }
    534          
    535            // Validate broadcasting
    536            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    537                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_2:
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6402         XRL     A,#0x2
   \   00007A   6011         JZ      ??AF_DataRequest_5
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   640F         XRL     A,#0xf
   \   00008B   7036         JNZ     ??AF_DataRequest_6
    538            {
    539              // Check for valid broadcast values
    540              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_5:
   \   00008D                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FA           MOV     R2,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000099   E9           MOV     A,R1
   \   00009A   6011         JZ      ??AF_DataRequest_7
    541              {
    542                // Force mode to broadcast
    543                dstAddr->addrMode = afAddrBroadcast;
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   740F         MOV     A,#0xf
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   804C         SJMP    ??AF_DataRequest_8
    544              }
    545              else
    546              {
    547                // Address is not a valid broadcast type
    548                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_7:
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   640F         XRL     A,#0xf
   \   0000BC   703B         JNZ     ??AF_DataRequest_8
    549                {
    550                  return afStatus_INVALID_PARAMETER;
   \   0000BE   7902         MOV     R1,#0x2
   \   0000C0   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    551                }
    552              }
    553            }
    554            else if ( dstAddr->addrMode != afAddr64Bit &&
    555                      dstAddr->addrMode != afAddrGroup &&
    556                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_6:
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   6403         XRL     A,#0x3
   \   0000D2   6025         JZ      ??AF_DataRequest_8
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6401         XRL     A,#0x1
   \   0000E3   6014         JZ      ??AF_DataRequest_8
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   6005         JZ      ??AF_DataRequest_8
    557            {
    558              return afStatus_INVALID_PARAMETER;
   \   0000F4   7902         MOV     R1,#0x2
   \   0000F6   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    559            }
    560          
    561            // Set destination address
    562            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_8:
   \   0000F9   8E82         MOV     DPL,R6
   \   0000FB   8F83         MOV     DPH,R7
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C0E0         PUSH    A
   \   000108   740C         MOV     A,#0xc
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   D0E0         POP     A
   \   00010F   F0           MOVX    @DPTR,A
    563            if ( dstAddr->addrMode == afAddr64Bit )
   \   000110   8E82         MOV     DPL,R6
   \   000112   8F83         MOV     DPH,R7
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   6403         XRL     A,#0x3
   \   00011F   700E         JNZ     ??AF_DataRequest_9
    564              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   000121                ; Setup parameters for call to function sAddrExtCpy
   \   000121   EE           MOV     A,R6
   \   000122   FC           MOV     R4,A
   \   000123   EF           MOV     A,R7
   \   000124   FD           MOV     R5,A
   \   000125   7404         MOV     A,#0x4
   \   000127   12....       LCALL   ?XSTACK_DISP101_8
   \   00012A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00012D   8013         SJMP    ??AF_DataRequest_10
    565            else
    566              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_9:
   \   00012F   8E82         MOV     DPL,R6
   \   000131   8F83         MOV     DPH,R7
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F8           MOV     R0,A
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F9           MOV     R1,A
   \   000138   7404         MOV     A,#0x4
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   E8           MOV     A,R0
   \   00013E   F0           MOVX    @DPTR,A
   \   00013F   A3           INC     DPTR
   \   000140   E9           MOV     A,R1
   \   000141   F0           MOVX    @DPTR,A
    567          
    568            req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_10:
   \   000142   7413         MOV     A,#0x13
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   7400         MOV     A,#0x0
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   A3           INC     DPTR
   \   00014B   7400         MOV     A,#0x0
   \   00014D   F0           MOVX    @DPTR,A
    569          
    570            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   00014E                ; Setup parameters for call to function afGetDescCB
   \   00014E   AA..         MOV     R2,?V2
   \   000150   AB..         MOV     R3,?V3
   \   000152   12....       LCALL   `??afGetDescCB::?relay`; Banked call to: afGetDescCB
   \   000155   8A..         MOV     ?V4,R2
   \   000157   8B..         MOV     ?V5,R3
   \   000159   A8..         MOV     R0,?V4
   \   00015B   A9..         MOV     R1,?V5
   \   00015D   7402         MOV     A,#0x2
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   E8           MOV     A,R0
   \   000163   F0           MOVX    @DPTR,A
   \   000164   A3           INC     DPTR
   \   000165   E9           MOV     A,R1
   \   000166   F0           MOVX    @DPTR,A
   \   000167   E8           MOV     A,R0
   \   000168   49           ORL     A,R1
   \   000169   6048         JZ      ??AF_DataRequest_11
    571            {
    572              uint16 *pID = (uint16 *)(pfnDescCB(
    573                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   00016B                ; Setup parameters for indirect call
   \   00016B   85..82       MOV     DPL,?V2
   \   00016E   85..83       MOV     DPH,?V3
   \   000171   E0           MOVX    A,@DPTR
   \   000172   FA           MOV     R2,A
   \   000173   7902         MOV     R1,#0x2
   \   000175   7402         MOV     A,#0x2
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   F8           MOV     R0,A
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F583         MOV     DPH,A
   \   000180   8882         MOV     DPL,R0
   \   000182   12....       LCALL   ?CALL_IND
   \   000185   8A..         MOV     ?V4,R2
   \   000187   8B..         MOV     ?V5,R3
   \   000189   85....       MOV     ?V6,?V4
   \   00018C   85....       MOV     ?V7,?V5
    574              if ( pID )
   \   00018F   E5..         MOV     A,?V6
   \   000191   45..         ORL     A,?V7
   \   000193   6051         JZ      ??AF_DataRequest_12
    575              {
    576                req.profileID = *pID;
   \   000195   85..82       MOV     DPL,?V6
   \   000198   85..83       MOV     DPH,?V7
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F8           MOV     R0,A
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   F9           MOV     R1,A
   \   0001A0   7413         MOV     A,#0x13
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   E8           MOV     A,R0
   \   0001A6   F0           MOVX    @DPTR,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   E9           MOV     A,R1
   \   0001A9   F0           MOVX    @DPTR,A
    577                osal_mem_free( pID );
   \   0001AA                ; Setup parameters for call to function osal_mem_free
   \   0001AA   AA..         MOV     R2,?V6
   \   0001AC   AB..         MOV     R3,?V7
   \   0001AE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001B1   8033         SJMP    ??AF_DataRequest_12
    578              }
    579            }
    580            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_11:
   \   0001B3   85..82       MOV     DPL,?V2
   \   0001B6   85..83       MOV     DPH,?V3
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   F8           MOV     R0,A
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F9           MOV     R1,A
   \   0001C1   E8           MOV     A,R0
   \   0001C2   49           ORL     A,R1
   \   0001C3   6021         JZ      ??AF_DataRequest_12
    581            {
    582              req.profileID = srcEP->simpleDesc->AppProfId;
   \   0001C5   85..82       MOV     DPL,?V2
   \   0001C8   85..83       MOV     DPH,?V3
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   F8           MOV     R0,A
   \   0001D0   A3           INC     DPTR
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F583         MOV     DPH,A
   \   0001D4   8882         MOV     DPL,R0
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F8           MOV     R0,A
   \   0001D9   A3           INC     DPTR
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   F9           MOV     R1,A
   \   0001DC   7413         MOV     A,#0x13
   \   0001DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E1   E8           MOV     A,R0
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   A3           INC     DPTR
   \   0001E4   E9           MOV     A,R1
   \   0001E5   F0           MOVX    @DPTR,A
    583            }
    584          
    585            req.txOptions = 0;
   \                     ??AF_DataRequest_12:
   \   0001E6   7419         MOV     A,#0x19
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   7400         MOV     A,#0x0
   \   0001ED   F0           MOVX    @DPTR,A
   \   0001EE   A3           INC     DPTR
   \   0001EF   7400         MOV     A,#0x0
   \   0001F1   F0           MOVX    @DPTR,A
    586          
    587            if ( ( options & AF_ACK_REQUEST              ) &&
    588                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    589                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   0001F2   E5..         MOV     A,?V1
   \   0001F4   A2E4         MOV     C,0xE0 /* A   */.4
   \   0001F6   5022         JNC     ??AF_DataRequest_13
   \   0001F8   740C         MOV     A,#0xc
   \   0001FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   640F         XRL     A,#0xf
   \   000200   6018         JZ      ??AF_DataRequest_13
   \   000202   740C         MOV     A,#0xc
   \   000204   12....       LCALL   ?XSTACK_DISP0_8
   \   000207   E0           MOVX    A,@DPTR
   \   000208   6401         XRL     A,#0x1
   \   00020A   600E         JZ      ??AF_DataRequest_13
    590            {
    591              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00020C   7419         MOV     A,#0x19
   \   00020E   12....       LCALL   ?XSTACK_DISP0_8
   \   000211   E0           MOVX    A,@DPTR
   \   000212   4404         ORL     A,#0x4
   \   000214   F0           MOVX    @DPTR,A
   \   000215   A3           INC     DPTR
   \   000216   E0           MOVX    A,@DPTR
   \   000217   4400         ORL     A,#0x0
   \   000219   F0           MOVX    @DPTR,A
    592            }
    593          
    594            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_13:
   \   00021A   E5..         MOV     A,?V1
   \   00021C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00021E   500E         JNC     ??AF_DataRequest_14
    595            {
    596              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000220   7419         MOV     A,#0x19
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   E0           MOVX    A,@DPTR
   \   000226   4410         ORL     A,#0x10
   \   000228   F0           MOVX    @DPTR,A
   \   000229   A3           INC     DPTR
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   4400         ORL     A,#0x0
   \   00022D   F0           MOVX    @DPTR,A
    597            }
    598          
    599            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_14:
   \   00022E   E5..         MOV     A,?V1
   \   000230   A2E6         MOV     C,0xE0 /* A   */.6
   \   000232   5018         JNC     ??AF_DataRequest_15
    600            {
    601              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000234   7419         MOV     A,#0x19
   \   000236   12....       LCALL   ?XSTACK_DISP0_8
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   4401         ORL     A,#0x1
   \   00023C   F0           MOVX    @DPTR,A
   \   00023D   A3           INC     DPTR
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   4400         ORL     A,#0x0
   \   000241   F0           MOVX    @DPTR,A
    602              mtu.aps.secure = TRUE;
   \   000242   7401         MOV     A,#0x1
   \   000244   12....       LCALL   ?XSTACK_DISP0_8
   \   000247   7401         MOV     A,#0x1
   \   000249   F0           MOVX    @DPTR,A
   \   00024A   8008         SJMP    ??AF_DataRequest_16
    603            }
    604            else
    605            {
    606              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_15:
   \   00024C   7401         MOV     A,#0x1
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   7400         MOV     A,#0x0
   \   000253   F0           MOVX    @DPTR,A
    607            }
    608          
    609            if ( options & AF_PREPROCESS )
   \                     ??AF_DataRequest_16:
   \   000254   E5..         MOV     A,?V1
   \   000256   A2E2         MOV     C,0xE0 /* A   */.2
   \   000258   500E         JNC     ??AF_DataRequest_17
    610            {
    611              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   00025A   7419         MOV     A,#0x19
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   4440         ORL     A,#0x40
   \   000262   F0           MOVX    @DPTR,A
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   4400         ORL     A,#0x0
   \   000267   F0           MOVX    @DPTR,A
    612            }
    613          
    614            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_17:
   \   000268   85..82       MOV     DPL,?XSP + 0
   \   00026B   85..83       MOV     DPH,?XSP + 1
   \   00026E   7400         MOV     A,#0x0
   \   000270   F0           MOVX    @DPTR,A
    615          
    616            req.transID       = *transID;
   \   000271   7436         MOV     A,#0x36
   \   000273   12....       LCALL   ?XSTACK_DISP0_8
   \   000276   E0           MOVX    A,@DPTR
   \   000277   F8           MOV     R0,A
   \   000278   A3           INC     DPTR
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   F583         MOV     DPH,A
   \   00027C   8882         MOV     DPL,R0
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   C0E0         PUSH    A
   \   000281   741B         MOV     A,#0x1b
   \   000283   12....       LCALL   ?XSTACK_DISP0_8
   \   000286   D0E0         POP     A
   \   000288   F0           MOVX    @DPTR,A
    617            req.srcEP         = srcEP->endPoint;
   \   000289   85..82       MOV     DPL,?V2
   \   00028C   85..83       MOV     DPH,?V3
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   C0E0         PUSH    A
   \   000292   740D         MOV     A,#0xd
   \   000294   12....       LCALL   ?XSTACK_DISP0_8
   \   000297   D0E0         POP     A
   \   000299   F0           MOVX    @DPTR,A
    618            req.dstEP         = dstAddr->endPoint;
   \   00029A   8E82         MOV     DPL,R6
   \   00029C   8F83         MOV     DPH,R7
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   A3           INC     DPTR
   \   0002A2   A3           INC     DPTR
   \   0002A3   A3           INC     DPTR
   \   0002A4   A3           INC     DPTR
   \   0002A5   A3           INC     DPTR
   \   0002A6   A3           INC     DPTR
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   C0E0         PUSH    A
   \   0002AA   740E         MOV     A,#0xe
   \   0002AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AF   D0E0         POP     A
   \   0002B1   F0           MOVX    @DPTR,A
    619            req.clusterID     = cID;
   \   0002B2   7430         MOV     A,#0x30
   \   0002B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   F8           MOV     R0,A
   \   0002B9   A3           INC     DPTR
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   F9           MOV     R1,A
   \   0002BC   7411         MOV     A,#0x11
   \   0002BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C1   E8           MOV     A,R0
   \   0002C2   F0           MOVX    @DPTR,A
   \   0002C3   A3           INC     DPTR
   \   0002C4   E9           MOV     A,R1
   \   0002C5   F0           MOVX    @DPTR,A
    620            req.asduLen       = len;
   \   0002C6   7432         MOV     A,#0x32
   \   0002C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F8           MOV     R0,A
   \   0002CD   A3           INC     DPTR
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   F9           MOV     R1,A
   \   0002D0   7415         MOV     A,#0x15
   \   0002D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D5   E8           MOV     A,R0
   \   0002D6   F0           MOVX    @DPTR,A
   \   0002D7   A3           INC     DPTR
   \   0002D8   E9           MOV     A,R1
   \   0002D9   F0           MOVX    @DPTR,A
    621            req.asdu          = buf;
   \   0002DA   7434         MOV     A,#0x34
   \   0002DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   F8           MOV     R0,A
   \   0002E1   A3           INC     DPTR
   \   0002E2   E0           MOVX    A,@DPTR
   \   0002E3   F9           MOV     R1,A
   \   0002E4   7417         MOV     A,#0x17
   \   0002E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E9   E8           MOV     A,R0
   \   0002EA   F0           MOVX    @DPTR,A
   \   0002EB   A3           INC     DPTR
   \   0002EC   E9           MOV     A,R1
   \   0002ED   F0           MOVX    @DPTR,A
    622            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \   0002EE   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   0002F1   E0           MOVX    A,@DPTR
   \   0002F2   C0E0         PUSH    A
   \   0002F4   741C         MOV     A,#0x1c
   \   0002F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F9   D0E0         POP     A
   \   0002FB   F0           MOVX    @DPTR,A
    623            req.radiusCounter = radius;
   \   0002FC   7438         MOV     A,#0x38
   \   0002FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000301   E0           MOVX    A,@DPTR
   \   000302   C0E0         PUSH    A
   \   000304   741D         MOV     A,#0x1d
   \   000306   12....       LCALL   ?XSTACK_DISP0_8
   \   000309   D0E0         POP     A
   \   00030B   F0           MOVX    @DPTR,A
    624          #if defined ( INTER_PAN )
    625            req.dstPanId      = dstAddr->panId;
    626          
    627            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    628            {
    629              if ( len > INTERP_DataReqMTU() )
    630              {
    631                stat = afStatus_INVALID_PARAMETER;
    632              }
    633              else
    634              {
    635                stat = INTERP_DataReq( &req );
    636              }
    637            }
    638            else
    639          #endif // INTER_PAN
    640            {
    641              if (len > afDataReqMTU( &mtu ) )
   \   00030C                ; Setup parameters for call to function afDataReqMTU
   \   00030C   AA..         MOV     R2,?XSP + 0
   \   00030E   AB..         MOV     R3,?XSP + 1
   \   000310   12....       LCALL   `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000313   E9           MOV     A,R1
   \   000314   F8           MOV     R0,A
   \   000315   7900         MOV     R1,#0x0
   \   000317   7432         MOV     A,#0x32
   \   000319   12....       LCALL   ?XSTACK_DISP0_8
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   FA           MOV     R2,A
   \   00031E   A3           INC     DPTR
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   FB           MOV     R3,A
   \   000321   C3           CLR     C
   \   000322   E8           MOV     A,R0
   \   000323   9A           SUBB    A,R2
   \   000324   E9           MOV     A,R1
   \   000325   9B           SUBB    A,R3
   \   000326   5029         JNC     ??AF_DataRequest_18
    642              {
    643                if (apsfSendFragmented)
   \   000328   90....       MOV     DPTR,#apsfSendFragmented
   \   00032B   E0           MOVX    A,@DPTR
   \   00032C   F8           MOV     R0,A
   \   00032D   A3           INC     DPTR
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F9           MOV     R1,A
   \   000330   E8           MOV     A,R0
   \   000331   49           ORL     A,R1
   \   000332   6018         JZ      ??AF_DataRequest_19
    644                {
    645                  stat = (*apsfSendFragmented)( &req );
   \   000334                ; Setup parameters for indirect call
   \   000334   7404         MOV     A,#0x4
   \   000336   12....       LCALL   ?XSTACK_DISP101_8
   \   000339   90....       MOV     DPTR,#apsfSendFragmented
   \   00033C   E0           MOVX    A,@DPTR
   \   00033D   F8           MOV     R0,A
   \   00033E   A3           INC     DPTR
   \   00033F   E0           MOVX    A,@DPTR
   \   000340   F583         MOV     DPH,A
   \   000342   8882         MOV     DPL,R0
   \   000344   12....       LCALL   ?CALL_IND
   \   000347   E9           MOV     A,R1
   \   000348   F5..         MOV     ?V0,A
   \   00034A   8010         SJMP    ??AF_DataRequest_20
    646                }
    647                else
    648                {
    649                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_19:
   \   00034C   75..02       MOV     ?V0,#0x2
   \   00034F   800B         SJMP    ??AF_DataRequest_20
    650                }
    651              }
    652              else
    653              {
    654                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_18:
   \   000351                ; Setup parameters for call to function APSDE_DataReq
   \   000351   7404         MOV     A,#0x4
   \   000353   12....       LCALL   ?XSTACK_DISP101_8
   \   000356   12....       LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \   000359   E9           MOV     A,R1
   \   00035A   F5..         MOV     ?V0,A
    655              }
    656            }
    657          
    658            /*
    659             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    660             * get added to the NWK databufs. So it will not go OTA and it will not get
    661             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    662             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    663             * message with the first in line TransSeqNumber, even on a multi message.
    664             * Also note that a reflected msg will not have its confirmation generated
    665             * here.
    666             */
    667            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    668                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_20:
   \   00035C   740C         MOV     A,#0xc
   \   00035E   12....       LCALL   ?XSTACK_DISP0_8
   \   000361   E0           MOVX    A,@DPTR
   \   000362   6402         XRL     A,#0x2
   \   000364   7035         JNZ     ??AF_DataRequest_21
   \   000366                ; Setup parameters for call to function NLME_GetShortAddr
   \   000366   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000369   8A..         MOV     ?V4,R2
   \   00036B   8B..         MOV     ?V5,R3
   \   00036D   A8..         MOV     R0,?V4
   \   00036F   A9..         MOV     R1,?V5
   \   000371   7404         MOV     A,#0x4
   \   000373   12....       LCALL   ?XSTACK_DISP0_8
   \   000376   E0           MOVX    A,@DPTR
   \   000377   68           XRL     A,R0
   \   000378   7003         JNZ     ??AF_DataRequest_22
   \   00037A   A3           INC     DPTR
   \   00037B   E0           MOVX    A,@DPTR
   \   00037C   69           XRL     A,R1
   \                     ??AF_DataRequest_22:
   \   00037D   701C         JNZ     ??AF_DataRequest_21
    669            {
    670              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   00037F                ; Setup parameters for call to function afDataConfirm
   \   00037F   AB..         MOV     R3,?V0
   \   000381   7436         MOV     A,#0x36
   \   000383   12....       LCALL   ?XSTACK_DISP0_8
   \   000386   E0           MOVX    A,@DPTR
   \   000387   F8           MOV     R0,A
   \   000388   A3           INC     DPTR
   \   000389   E0           MOVX    A,@DPTR
   \   00038A   F583         MOV     DPH,A
   \   00038C   8882         MOV     DPL,R0
   \   00038E   E0           MOVX    A,@DPTR
   \   00038F   FA           MOV     R2,A
   \   000390   85..82       MOV     DPL,?V2
   \   000393   85..83       MOV     DPH,?V3
   \   000396   E0           MOVX    A,@DPTR
   \   000397   F9           MOV     R1,A
   \   000398   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    671            }
    672          
    673            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_21:
   \   00039B   E5..         MOV     A,?V0
   \   00039D   7011         JNZ     ??AF_DataRequest_23
    674            {
    675              (*transID)++;
   \   00039F   7436         MOV     A,#0x36
   \   0003A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A4   E0           MOVX    A,@DPTR
   \   0003A5   F8           MOV     R0,A
   \   0003A6   A3           INC     DPTR
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   F583         MOV     DPH,A
   \   0003AA   8882         MOV     DPL,R0
   \   0003AC   E0           MOVX    A,@DPTR
   \   0003AD   2401         ADD     A,#0x1
   \   0003AF   F0           MOVX    @DPTR,A
    676            }
    677          
    678            return (afStatus_t)stat;
   \                     ??AF_DataRequest_23:
   \   0003B0   A9..         MOV     R1,?V0
   \                     ??AF_DataRequest_1:
   \   0003B2   7420         MOV     A,#0x20
   \   0003B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003B7   7F08         MOV     R7,#0x8
   \   0003B9   02....       LJMP    ?BANKED_LEAVE_XDATA
    679          }
    680          
    681          #if defined ( ZIGBEE_SOURCE_ROUTING )
    682          /*********************************************************************
    683           * @fn      AF_DataRequestSrcRtg
    684           *
    685           * @brief   Common functionality for invoking APSDE_DataReq() for both
    686           *          SendMulti and MSG-Send.
    687           *
    688           * input parameters
    689           *
    690           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    691           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    692           * @param   cID - A valid cluster ID as specified by the Profile.
    693           * @param   len - Number of bytes of data pointed to by next param.
    694           * @param  *buf - A pointer to the data bytes to send.
    695           * @param  *transID - A pointer to a byte which can be modified and which will
    696           *                    be used as the transaction sequence number of the msg.
    697           * @param   options - Valid bit mask of Tx options.
    698           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    699           * @param   relayCnt - Number of devices in the relay list
    700           * @param   pRelayList - Pointer to the relay list
    701           *
    702           * output parameters
    703           *
    704           * @param  *transID - Incremented by one if the return value is success.
    705           *
    706           * @return  afStatus_t - See previous definition of afStatus_... types.
    707           */
    708          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    709          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    710                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    711                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    712          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   EC           MOV     A,R4
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   ED           MOV     A,R5
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   89..         MOV     ?V6,R1
   \   000021   7413         MOV     A,#0x13
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V2,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V3,A
   \   00002D   7415         MOV     A,#0x15
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V1,A
   \   000039   741B         MOV     A,#0x1b
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V4,A
   \   000041   741C         MOV     A,#0x1c
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FF           MOV     R7,A
    713            uint8 status;
    714          
    715            /* Add the source route to the source routing table */
    716            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    717                                                   pRelayList );
   \   000048                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   000048   741D         MOV     A,#0x1d
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FC           MOV     R4,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FD           MOV     R5,A
   \   000052   EF           MOV     A,R7
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F583         MOV     DPH,A
   \   000060   8882         MOV     DPL,R0
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   00006A   E9           MOV     A,R1
   \   00006B   FE           MOV     R6,A
    718          
    719            if( status == RTG_SUCCESS)
   \   00006C   EE           MOV     A,R6
   \   00006D   7045         JNZ     ??AF_DataRequestSrcRtg_0
    720            {
    721              /* Call AF_DataRequest to send the data */
    722              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00006F                ; Setup parameters for call to function AF_DataRequest
   \   00006F   E5..         MOV     A,?V4
   \   000071   F5..         MOV     ?V5,A
   \   000073   78..         MOV     R0,#?V5
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   741A         MOV     A,#0x1a
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000080   741A         MOV     A,#0x1a
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000088   78..         MOV     R0,#?V0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008D   78..         MOV     R0,#?V2
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   A9..         MOV     R1,?V6
   \   000094   740B         MOV     A,#0xb
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FC           MOV     R4,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   FD           MOV     R5,A
   \   00009E   7409         MOV     A,#0x9
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FA           MOV     R2,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000AB   7409         MOV     A,#0x9
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV     A,R1
   \   0000B1   FE           MOV     R6,A
   \   0000B2   800B         SJMP    ??AF_DataRequestSrcRtg_1
    723            }
    724            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   0000B4   7405         MOV     A,#0x5
   \   0000B6   6E           XRL     A,R6
   \   0000B7   7004         JNZ     ??AF_DataRequestSrcRtg_2
    725            {
    726              /* The source route relay count is exceeding the network limit */
    727              status = afStatus_INVALID_PARAMETER;
   \   0000B9   7E02         MOV     R6,#0x2
   \   0000BB   8002         SJMP    ??AF_DataRequestSrcRtg_1
    728            }
    729            else
    730            {
    731              /* The guaranteed adding entry fails due to memory failure */
    732              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   0000BD   7E10         MOV     R6,#0x10
    733            }
    734            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   0000BF   EE           MOV     A,R6
   \   0000C0   F9           MOV     R1,A
   \   0000C1   7404         MOV     A,#0x4
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C6   7F07         MOV     R7,#0x7
   \   0000C8   02....       LJMP    ?BANKED_LEAVE_XDATA
    735          }
    736          
    737          #endif
    738          
    739          /*********************************************************************
    740           * @fn      afFindEndPointDescList
    741           *
    742           * @brief   Find the endpoint description entry from the endpoint
    743           *          number.
    744           *
    745           * @param   EndPoint - Application Endpoint to look for
    746           *
    747           * @return  the address to the endpoint/interface description entry
    748           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    749          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    750          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    751            epList_t *epSearch;
    752          
    753            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FA           MOV     R2,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FB           MOV     R3,A
   \                     ??afFindEndPointDescList_0:
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   601D         JZ      ??afFindEndPointDescList_1
    754            {
    755              if (epSearch->epDesc->endPoint == EndPoint)
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F583         MOV     DPH,A
   \   000020   8882         MOV     DPL,R0
   \   000022   E0           MOVX    A,@DPTR
   \   000023   69           XRL     A,R1
   \   000024   600B         JZ      ??afFindEndPointDescList_1
    756              {
    757                break;
    758              }
    759            }
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FB           MOV     R3,A
   \   00002F   80DF         SJMP    ??afFindEndPointDescList_0
    760          
    761            return epSearch;
   \                     ??afFindEndPointDescList_1:
   \   000031   D083         POP     DPH
   \   000033   D082         POP     DPL
   \   000035   02....       LJMP    ?BRET
    762          }
    763          
    764          /*********************************************************************
    765           * @fn      afFindEndPointDesc
    766           *
    767           * @brief   Find the endpoint description entry from the endpoint
    768           *          number.
    769           *
    770           * @param   EndPoint - Application Endpoint to look for
    771           *
    772           * @return  the address to the endpoint/interface description entry
    773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    774          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    775          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    776            epList_t *epSearch;
    777          
    778            // Look for the endpoint
    779            epSearch = afFindEndPointDescList( EndPoint );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   A9..         MOV     R1,?V0
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   AE..         MOV     R6,?V2
   \   000012   AF..         MOV     R7,?V3
    780          
    781            if ( epSearch )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   600D         JZ      ??afFindEndPointDesc_0
    782              return ( epSearch->epDesc );
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FB           MOV     R3,A
   \   000023   8004         SJMP    ??afFindEndPointDesc_1
    783            else
    784              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000029   7F04         MOV     R7,#0x4
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
    785          }
    786          
    787          /*********************************************************************
    788           * @fn      afFindSimpleDesc
    789           *
    790           * @brief   Find the Simple Descriptor from the endpoint number.
    791           *
    792           * @param   EP - Application Endpoint to look for.
    793           *
    794           * @return  Non-zero to indicate that the descriptor memory must be freed.
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   89..         MOV     ?V3,R1
    798            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V3
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V4,R2
   \   000012   8B..         MOV     ?V5,R3
   \   000014   AE..         MOV     R6,?V4
   \   000016   AF..         MOV     R7,?V5
    799            uint8 rtrn = FALSE;
   \   000018   75..00       MOV     ?V2,#0x0
    800          
    801            if ( epItem )
   \   00001B   EE           MOV     A,R6
   \   00001C   4F           ORL     A,R7
   \   00001D   605B         JZ      ??afFindSimpleDesc_0
    802            {
    803              if ( epItem->pfnDescCB )
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   49           ORL     A,R1
   \   00002E   6027         JZ      ??afFindSimpleDesc_1
    804              {
    805                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000030                ; Setup parameters for indirect call
   \   000030   AA..         MOV     R2,?V3
   \   000032   7901         MOV     R1,#0x1
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F583         MOV     DPH,A
   \   000042   8882         MOV     DPL,R0
   \   000044   12....       LCALL   ?CALL_IND
   \   000047   85..82       MOV     DPL,?V0
   \   00004A   85..83       MOV     DPH,?V1
   \   00004D   EA           MOV     A,R2
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   EB           MOV     A,R3
   \   000051   F0           MOVX    @DPTR,A
    806                rtrn = TRUE;
   \   000052   75..01       MOV     ?V2,#0x1
   \   000055   8030         SJMP    ??afFindSimpleDesc_2
    807              }
    808              else
    809              {
    810                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F583         MOV     DPH,A
   \   000063   8882         MOV     DPL,R0
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F8           MOV     R0,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   E8           MOV     A,R0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
   \   000078   800D         SJMP    ??afFindSimpleDesc_2
    811              }
    812            }
    813            else
    814            {
    815              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   00007A   85..82       MOV     DPL,?V0
   \   00007D   85..83       MOV     DPH,?V1
   \   000080   7400         MOV     A,#0x0
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
    816            }
    817          
    818            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000087   A9..         MOV     R1,?V2
   \   000089   7F06         MOV     R7,#0x6
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA
    819          }
    820          
    821          /*********************************************************************
    822           * @fn      afGetDescCB
    823           *
    824           * @brief   Get the Descriptor callback function.
    825           *
    826           * @param   epDesc - pointer to the endpoint descriptor
    827           *
    828           * @return  function pointer or NULL
    829           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    830          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
   \                     afGetDescCB:
    831          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   EB           MOV     A,R3
   \   000007   F9           MOV     R1,A
    832            epList_t *epSearch;
    833          
    834            // Start at the beginning
    835            epSearch = epList;
   \   000008   90....       MOV     DPTR,#epList
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FB           MOV     R3,A
   \   000010   EA           MOV     A,R2
   \   000011   FC           MOV     R4,A
   \   000012   EB           MOV     A,R3
   \   000013   FD           MOV     R5,A
    836          
    837            // Look through the list until the end
    838            while ( epSearch )
   \                     ??afGetDescCB_0:
   \   000014   EC           MOV     A,R4
   \   000015   4D           ORL     A,R5
   \   000016   6031         JZ      ??afGetDescCB_1
    839            {
    840              // Is there a match?
    841              if ( epSearch->epDesc == epDesc )
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FB           MOV     R3,A
   \   000023   E8           MOV     A,R0
   \   000024   6A           XRL     A,R2
   \   000025   7002         JNZ     ??afGetDescCB_2
   \   000027   E9           MOV     A,R1
   \   000028   6B           XRL     A,R3
   \                     ??afGetDescCB_2:
   \   000029   700F         JNZ     ??afGetDescCB_3
    842              {
    843                return ( epSearch->pfnDescCB );
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FA           MOV     R2,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FB           MOV     R3,A
   \   000038   8013         SJMP    ??afGetDescCB_4
    844              }
    845              else
    846                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afGetDescCB_3:
   \   00003A   8C82         MOV     DPL,R4
   \   00003C   8D83         MOV     DPH,R5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FB           MOV     R3,A
   \   000043   EA           MOV     A,R2
   \   000044   FC           MOV     R4,A
   \   000045   EB           MOV     A,R3
   \   000046   FD           MOV     R5,A
   \   000047   80CB         SJMP    ??afGetDescCB_0
    847            }
    848          
    849            return ( (pDescCB)NULL );
   \                     ??afGetDescCB_1:
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   7B00         MOV     R3,#0x0
   \                     ??afGetDescCB_4:
   \   00004D   D083         POP     DPH
   \   00004F   D082         POP     DPL
   \   000051   02....       LJMP    ?BRET
    850          }
    851          
    852          /*********************************************************************
    853           * @fn      afDataReqMTU
    854           *
    855           * @brief   Get the Data Request MTU(Max Transport Unit).
    856           *
    857           * @param   fields - afDataReqMTU_t
    858           *
    859           * @return  uint8(MTU)
    860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    861          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    862          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    863            uint8 len;
    864            uint8 hdr;
    865          
    866            if ( fields->kvp == TRUE )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7005         JNZ     ??afDataReqMTU_0
    867            {
    868              hdr = AF_HDR_KVP_MAX_LEN;
   \   000012   75..08       MOV     ?V0,#0x8
   \   000015   8003         SJMP    ??afDataReqMTU_1
    869            }
    870            else
    871            {
    872              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000017   75..00       MOV     ?V0,#0x0
    873            }
    874          
    875            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   00001A                ; Setup parameters for call to function APSDE_DataReqMTU
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   000026   E9           MOV     A,R1
   \   000027   C3           CLR     C
   \   000028   95..         SUBB    A,?V0
   \   00002A   F5..         MOV     ?V1,A
    876          
    877            return len;
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   7F02         MOV     R7,#0x2
   \   000030   02....       LJMP    ?BANKED_LEAVE_XDATA
    878          }
    879          
    880          /*********************************************************************
    881           * @fn      afGetMatch
    882           *
    883           * @brief   Set the allow response flag.
    884           *
    885           * @param   ep - Application Endpoint to look for
    886           * @param   action - true - allow response, false - no response
    887           *
    888           * @return  TRUE allow responses, FALSE no response
    889           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    891          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    892            epList_t *epSearch;
    893          
    894            // Look for the endpoint
    895            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   A9..         MOV     R1,?V0
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   AE..         MOV     R6,?V2
   \   000012   AF..         MOV     R7,?V3
    896          
    897            if ( epSearch )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   6019         JZ      ??afGetMatch_0
    898            {
    899              if ( epSearch->flags & eEP_AllowMatch )
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   A2E0         MOV     C,0xE0 /* A   */.0
   \   000027   5004         JNC     ??afGetMatch_1
    900                return ( TRUE );
   \   000029   7901         MOV     R1,#0x1
   \   00002B   8006         SJMP    ??afGetMatch_2
    901              else
    902                return ( FALSE );
   \                     ??afGetMatch_1:
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   8002         SJMP    ??afGetMatch_2
    903            }
    904            else
    905              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afGetMatch_2:
   \   000033   7F04         MOV     R7,#0x4
   \   000035   02....       LJMP    ?BANKED_LEAVE_XDATA
    906          }
    907          
    908          /*********************************************************************
    909           * @fn      afSetMatch
    910           *
    911           * @brief   Set the allow response flag.
    912           *
    913           * @param   ep - Application Endpoint to look for
    914           * @param   action - true - allow response, false - no response
    915           *
    916           * @return  TRUE if success, FALSE if endpoint not found
    917           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    918          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    919          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
    920            epList_t *epSearch;
    921          
    922            // Look for the endpoint
    923            epSearch = afFindEndPointDescList( ep );
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   A9..         MOV     R1,?V0
   \   00000B   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV     ?V2,R2
   \   000010   8B..         MOV     ?V3,R3
   \   000012   AE..         MOV     R6,?V2
   \   000014   AF..         MOV     R7,?V3
    924          
    925            if ( epSearch )
   \   000016   EE           MOV     A,R6
   \   000017   4F           ORL     A,R7
   \   000018   602A         JZ      ??afSetMatch_0
    926            {
    927              if ( action )
   \   00001A   E5..         MOV     A,?V1
   \   00001C   6012         JZ      ??afSetMatch_1
    928              {
    929                epSearch->flags |= eEP_AllowMatch;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   D2E0         SETB    0xE0 /* A   */.0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   8010         SJMP    ??afSetMatch_2
    930              }
    931              else
    932              {
    933                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C2E0         CLR     0xE0 /* A   */.0
   \   00003F   F0           MOVX    @DPTR,A
    934              }
    935              return ( TRUE );
   \                     ??afSetMatch_2:
   \   000040   7901         MOV     R1,#0x1
   \   000042   8002         SJMP    ??afSetMatch_3
    936            }
    937            else
    938              return ( FALSE );
   \                     ??afSetMatch_0:
   \   000044   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   000046   7F04         MOV     R7,#0x4
   \   000048   02....       LJMP    ?BANKED_LEAVE_XDATA
    939          }
    940          
    941          /*********************************************************************
    942           * @fn      afNumEndPoints
    943           *
    944           * @brief   Returns the number of endpoints defined (including 0)
    945           *
    946           * @param   none
    947           *
    948           * @return  number of endpoints
    949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
    951          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    952            epList_t *epSearch;
    953            uint8 endpoints;
    954          
    955            // Start at the beginning
    956            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FA           MOV     R2,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FB           MOV     R3,A
    957            endpoints = 0;
   \   000010   7900         MOV     R1,#0x0
    958          
    959            while ( epSearch )
   \                     ??afNumEndPoints_0:
   \   000012   EA           MOV     A,R2
   \   000013   4B           ORL     A,R3
   \   000014   600C         JZ      ??afNumEndPoints_1
    960            {
    961              endpoints++;
   \   000016   09           INC     R1
    962              epSearch = epSearch->nextDesc;
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   80F0         SJMP    ??afNumEndPoints_0
    963            }
    964          
    965            return ( endpoints );
   \                     ??afNumEndPoints_1:
   \   000022   D083         POP     DPH
   \   000024   D082         POP     DPL
   \   000026   02....       LJMP    ?BRET
    966          }
    967          
    968          /*********************************************************************
    969           * @fn      afEndPoints
    970           *
    971           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    972           *          Use afNumEndPoints to find out how big a buffer to supply.
    973           *
    974           * @param   epBuf - pointer to mem used
    975           *
    976           * @return  void
    977           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    978          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
    979          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    980            epList_t *epSearch;
    981            uint8 endPoint;
    982          
    983            // Start at the beginning
    984            epSearch = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FC           MOV     R4,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FD           MOV     R5,A
   \   00000F   EC           MOV     A,R4
   \   000010   F8           MOV     R0,A
   \   000011   ED           MOV     A,R5
   \   000012   F9           MOV     R1,A
    985          
    986            while ( epSearch )
   \                     ??afEndPoints_0:
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   6034         JZ      ??afEndPoints_1
    987            {
    988              endPoint = epSearch->epDesc->endPoint;
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FC           MOV     R4,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F583         MOV     DPH,A
   \   000023   8C82         MOV     DPL,R4
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FF           MOV     R7,A
    989          
    990              if ( !skipZDO || endPoint != 0 )
   \   000027   EE           MOV     A,R6
   \   000028   6003         JZ      ??afEndPoints_2
   \   00002A   EF           MOV     A,R7
   \   00002B   6013         JZ      ??afEndPoints_3
    991                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   00002D   EF           MOV     A,R7
   \   00002E   C0E0         PUSH    A
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   A3           INC     DPTR
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
    992          
    993              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000040   8882         MOV     DPL,R0
   \   000042   8983         MOV     DPH,R1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   80C8         SJMP    ??afEndPoints_0
    994            }
    995          }
   \                     ??afEndPoints_1:
   \   00004B   7F01         MOV     R7,#0x1
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA
    996          
    997          /*********************************************************************
    998           * @fn      afCopyAddress
    999           *
   1000           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1001           *          from the zAddrType_t parameter.
   1002           *
   1003           * @param   epBuf - pointer to mem used
   1004           *
   1005           * @return  void
   1006           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1007          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1008          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1009            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C0E0         PUSH    A
   \   00001C   85..82       MOV     DPL,?V0
   \   00001F   85..83       MOV     DPH,?V1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
   1010            if ( zAddr->addrMode == Addr64Bit )
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6403         XRL     A,#0x3
   \   00003C   7017         JNZ     ??afCopyAddress_0
   1011            {
   1012              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00003E                ; Setup parameters for call to function sAddrExtCpy
   \   00003E   EE           MOV     A,R6
   \   00003F   FC           MOV     R4,A
   \   000040   EF           MOV     A,R7
   \   000041   FD           MOV     R5,A
   \   000042   AA..         MOV     R2,?V0
   \   000044   AB..         MOV     R3,?V1
   \   000046   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000049   8A..         MOV     ?V2,R2
   \   00004B   8B..         MOV     ?V3,R3
   \   00004D   85..82       MOV     DPL,?V2
   \   000050   85..83       MOV     DPH,?V3
   \   000053   8014         SJMP    ??afCopyAddress_1
   1013            }
   1014            else
   1015            {
   1016              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   85..82       MOV     DPL,?V0
   \   000061   85..83       MOV     DPH,?V1
   \   000064   E8           MOV     A,R0
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   E9           MOV     A,R1
   \   000068   F0           MOVX    @DPTR,A
   1017            }
   1018          
   1019            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1020            afAddr->panId = 0;
   \                     ??afCopyAddress_1:
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   7400         MOV     A,#0x0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   7400         MOV     A,#0x0
   \   00007F   F0           MOVX    @DPTR,A
   1021          }
   \   000080   7F04         MOV     R7,#0x4
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA
   1022          
   1023          /**************************************************************************************************
   1024           * @fn          afAPSF_ConfigGet
   1025           *
   1026           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1027           *              the specified EndPoint.
   1028           *
   1029           * input parameters
   1030           *
   1031           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1032           *
   1033           * output parameters
   1034           *
   1035           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1036           *
   1037           * @return      None.
   1038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1039          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1040          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1041            epList_t *pList = afFindEndPointDescList(endPoint);
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V3
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V0,R2
   \   000012   8B..         MOV     ?V1,R3
   \   000014   85....       MOV     ?V4,?V0
   \   000017   85....       MOV     ?V5,?V1
   1042          
   1043            if (pList == NULL)
   \   00001A   E5..         MOV     A,?V4
   \   00001C   45..         ORL     A,?V5
   \   00001E   7011         JNZ     ??afAPSF_ConfigGet_0
   1044            {
   1045              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   7432         MOV     A,#0x32
   \   000026   F0           MOVX    @DPTR,A
   1046              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   802D         SJMP    ??afAPSF_ConfigGet_1
   1047            }
   1048            else
   1049            {
   1050              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000031                ; Setup parameters for call to function osal_memcpy
   \   000031   E5..         MOV     A,?V4
   \   000033   2406         ADD     A,#0x6
   \   000035   F5..         MOV     ?V0,A
   \   000037   E4           CLR     A
   \   000038   35..         ADDC    A,?V5
   \   00003A   F5..         MOV     ?V1,A
   \   00003C   75..00       MOV     ?V2,#0x0
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   7C02         MOV     R4,#0x2
   \   000046   7D00         MOV     R5,#0x0
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   8A..         MOV     ?V0,R2
   \   000056   8B..         MOV     ?V1,R3
   \   000058   85..82       MOV     DPL,?V0
   \   00005B   85..83       MOV     DPH,?V1
   1051            }
   1052          }
   \                     ??afAPSF_ConfigGet_1:
   \   00005E   7F06         MOV     R7,#0x6
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA
   1053          
   1054          /**************************************************************************************************
   1055           * @fn          afAPSF_ConfigSet
   1056           *
   1057           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1058           *              the specified EndPoint.
   1059           *
   1060           * input parameters
   1061           *
   1062           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1063           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1064           *
   1065           * output parameters
   1066           *
   1067           * None.
   1068           *
   1069           * @return      afStatus_SUCCESS for success.
   1070           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1073          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
   1074            epList_t *pList = afFindEndPointDescList(endPoint);
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V3
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V0,R2
   \   000012   8B..         MOV     ?V1,R3
   \   000014   AE..         MOV     R6,?V0
   \   000016   AF..         MOV     R7,?V1
   1075          
   1076            if (pList == NULL)
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   7004         JNZ     ??afAPSF_ConfigSet_0
   1077            {
   1078              return afStatus_INVALID_PARAMETER;
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   802D         SJMP    ??afAPSF_ConfigSet_1
   1079            }
   1080          
   1081            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000020                ; Setup parameters for call to function osal_memcpy
   \   000020   85....       MOV     ?V0,?V4
   \   000023   85....       MOV     ?V1,?V5
   \   000026   75..00       MOV     ?V2,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002E   7C02         MOV     R4,#0x2
   \   000030   7D00         MOV     R5,#0x0
   \   000032   EE           MOV     A,R6
   \   000033   2406         ADD     A,#0x6
   \   000035   FA           MOV     R2,A
   \   000036   E4           CLR     A
   \   000037   3F           ADDC    A,R7
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   8A..         MOV     ?V0,R2
   \   000043   8B..         MOV     ?V1,R3
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   1082            return afStatus_SUCCESS;
   \   00004B   7900         MOV     R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   00004D   7F06         MOV     R7,#0x6
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1083          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetDescCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetDescCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet
   1084          
   1085          /**************************************************************************************************
   1086          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     76   AF_DataRequest
        0     48   -> APSDE_DataReq
        0     48   -> NLME_GetShortAddr
        0     48   -> NLME_IsAddressBroadcast
        0     48   -> RTG_CheckRtStatus
        0     48   -> afDataConfirm
        0     48   -> afDataReqMTU
        0     48   -> afGetDescCB
        0     48   -> osal_mem_free
        0     48   -> sAddrExtCpy
      0     40   AF_DataRequestSrcRtg
        0     28   -> AF_DataRequest
        0     19   -> RTG_AddSrcRtgEntry_Guaranteed
      0     17   afAPSF_ConfigGet
        0     14   -> afFindEndPointDescList
        0     17   -> osal_memcpy
      0     17   afAPSF_ConfigSet
        0     14   -> afFindEndPointDescList
        0     17   -> osal_memcpy
      1     62   afBuildMSGIncoming
        0     21   -> afCopyAddress
        0     24   -> osal_memcpy
        0     21   -> osal_msg_allocate
        0     21   -> osal_msg_send
      1     33   afCopyAddress
        0     12   -> sAddrExtCpy
      1     64   afDataConfirm
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     58   afDataReqMTU
        0     10   -> APSDE_DataReqMTU
      0     11   afDelete
        0     11   -> osal_mem_free
      1      9   afEndPoints
      0     39   afFindEndPointDesc
        0     12   -> afFindEndPointDescList
      2     27   afFindEndPointDescList
      0     14   afFindSimpleDesc
        0     14   -> afFindEndPointDescList
      2     48   afGetDescCB
      0     12   afGetMatch
        0     12   -> afFindEndPointDescList
      1     47   afIncomingData
        0     38   -> afBuildMSGIncoming
        0     27   -> afFindEndPointDesc
        0     27   -> afFindEndPointDescList
        0     27   -> aps_FindGroupForEndpoint
        0     27   -> osal_mem_free
      2      0   afNumEndPoints
      0     10   afRegister
        0     10   -> afFindEndPointDescList
        0     10   -> afRegisterExtended
      0     22   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     12   afSetMatch
        0     12   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
     956  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     203  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      99  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      82  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     655  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
     133  afCopyAddress
       6  afCopyAddress::?relay
     127  afDataConfirm
       6  afDataConfirm::?relay
      51  afDataReqMTU
       6  afDataReqMTU::?relay
     171  afDelete
       6  afDelete::?relay
      80  afEndPoints
       6  afEndPoints::?relay
      46  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      56  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
     142  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      84  afGetDescCB
       6  afGetDescCB::?relay
      56  afGetMatch
       6  afGetMatch::?relay
     906  afIncomingData
       6  afIncomingData::?relay
      41  afNumEndPoints
       6  afNumEndPoints::?relay
      64  afRegister
       6  afRegister::?relay
     130  afRegisterExtended
       6  afRegisterExtended::?relay
      75  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 4 157 bytes in segment BANKED_CODE
   120 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 4 278 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
