###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:31
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\design\ZStack-2.5.1a\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\stack\zdo\ZDObject.c -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
#        -D xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\ZDObject.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\ZDObject.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2011-07-13 10:55:53 -0700 (Wed, 13 Jul 2011) $
      4            Revision:       $Revision: 26766 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7400         MOV     A,#0x0
   \   00000D   F0           MOVX    @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000E                ; Setup parameters for call to function sAddrExtCpy
   \   00000E   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   000010   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000012   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000014   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000016   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000019                ; Setup parameters for call to function ZDODeviceSetup
   \   000019   12....       LCALL   `??ZDODeviceSetup::?relay`; Banked call to: ZDODeviceSetup
    194          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          static void ZDODeviceSetup( void )
   \                     ZDODeviceSetup:
    257          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7004         JNZ     ??ZDODeviceSetup_0
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   8002         SJMP    ??ZDODeviceSetup_1
   \                     ??ZDODeviceSetup_0:
   \   00000E   7901         MOV     R1,#0x1
   \                     ??ZDODeviceSetup_1:
   \   000010                ; Setup parameters for call to function APS_ReflectorInit
   \   000010   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
   \   000013                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000013   12....       LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    270            }
    271          }
   \   000016   D083         POP     DPH
   \   000018   D082         POP     DPL
   \   00001A   02....       LJMP    ?BRET
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
   \   00000E   8B..         MOV     ?V2,R3
   \   000010   8C..         MOV     ?V1,R4
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
   \   000012   7E12         MOV     R6,#0x12
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    298            {
    299              if ( startMode == MODE_HARD )
    300              {
    301                devState = DEV_COORD_STARTING;
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
    305              }
    306              else if ( startMode == MODE_RESUME )
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   000014   7401         MOV     A,#0x1
   \   000016   65..         XRL     A,?V0
   \   000018   6009         JZ      ??ZDO_StartDevice_0
   \   00001A   7402         MOV     A,#0x2
   \   00001C   65..         XRL     A,?V0
   \   00001E   6003         JZ      $+5
   \   000020   02....       LJMP    ??ZDO_StartDevice_1 & 0xFFFF
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   000023   EF           MOV     A,R7
   \   000024   6005         JZ      ??ZDO_StartDevice_2
   \   000026   7403         MOV     A,#0x3
   \   000028   6F           XRL     A,R7
   \   000029   7048         JNZ     ??ZDO_StartDevice_3
    323              {
    324                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   00002B   90....       MOV     DPTR,#devState
   \   00002E   7402         MOV     A,#0x2
   \   000030   F0           MOVX    @DPTR,A
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \   000031                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000031   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   90....       MOV     DPTR,#zgDefaultChannelList
   \   000039   12....       LCALL   ?XLOAD_R2345
   \   00003C   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   00003F   E9           MOV     A,R1
   \   000040   FE           MOV     R6,A
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \   000041   7403         MOV     A,#0x3
   \   000043   6F           XRL     A,R7
   \   000044   6003         JZ      $+5
   \   000046   02....       LJMP    ??ZDO_StartDevice_1 & 0xFFFF
   \   000049   90....       MOV     DPTR,#??scanCnt
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F8           MOV     R0,A
   \   00004E   7401         MOV     A,#0x1
   \   000050   28           ADD     A,R0
   \   000051   90....       MOV     DPTR,#??scanCnt
   \   000054   F0           MOVX    @DPTR,A
   \   000055   E8           MOV     A,R0
   \   000056   C3           CLR     C
   \   000057   9405         SUBB    A,#0x5
   \   000059   407A         JC      ??ZDO_StartDevice_1
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   00005B   7A00         MOV     R2,#0x0
   \   00005D   7BF8         MOV     R3,#-0x8
   \   00005F   7CFF         MOV     R4,#-0x1
   \   000061   7D07         MOV     R5,#0x7
   \   000063   90....       MOV     DPTR,#zgDefaultChannelList
   \   000066   EA           MOV     A,R2
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   EB           MOV     A,R3
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   EC           MOV     A,R4
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   ED           MOV     A,R5
   \   000070   F0           MOVX    @DPTR,A
   \   000071   8062         SJMP    ??ZDO_StartDevice_1
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   000073   7401         MOV     A,#0x1
   \   000075   6F           XRL     A,R7
   \   000076   705D         JNZ     ??ZDO_StartDevice_1
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
   \   000078   7401         MOV     A,#0x1
   \   00007A   65..         XRL     A,?V0
   \   00007C   7041         JNZ     ??ZDO_StartDevice_4
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
   \   00007E   90....       MOV     DPTR,#devState
   \   000081   740A         MOV     A,#0xa
   \   000083   F0           MOVX    @DPTR,A
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
   \   000084   7401         MOV     A,#0x1
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   7400         MOV     A,#0x0
   \   00008B   F0           MOVX    @DPTR,A
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   00008C   7402         MOV     A,#0x2
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   7403         MOV     A,#0x3
   \   000093   F0           MOVX    @DPTR,A
    368                  scanCnf.UnscannedChannels = 0;
   \   000094   7A00         MOV     R2,#0x0
   \   000096   7B00         MOV     R3,#0x0
   \   000098   7C00         MOV     R4,#0x0
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   7404         MOV     A,#0x4
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   EA           MOV     A,R2
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   EB           MOV     A,R3
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   EC           MOV     A,R4
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   ED           MOV     A,R5
   \   0000AB   F0           MOVX    @DPTR,A
    369                  scanCnf.ResultListSize = 0;
   \   0000AC   7408         MOV     A,#0x8
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   7400         MOV     A,#0x0
   \   0000B3   F0           MOVX    @DPTR,A
    370                  nwk_ScanJoiningOrphan(&scanCnf);
   \   0000B4                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   0000B4   AA..         MOV     R2,?XSP + 0
   \   0000B6   AB..         MOV     R3,?XSP + 1
   \   0000B8   12....       LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    371          
    372                  ret = ZSuccess;
   \   0000BB   7E00         MOV     R6,#0x0
   \   0000BD   8016         SJMP    ??ZDO_StartDevice_1
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_4:
   \   0000BF   90....       MOV     DPTR,#devState
   \   0000C2   740A         MOV     A,#0xa
   \   0000C4   F0           MOVX    @DPTR,A
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
   \   0000C5                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   0000C5   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   \   0000CA   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000CD   12....       LCALL   ?XLOAD_R2345
   \   0000D0   12....       LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \   0000D3   E9           MOV     A,R1
   \   0000D4   FE           MOV     R6,A
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
    388          
    389            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_1:
   \   0000D5   EE           MOV     A,R6
   \   0000D6   6011         JZ      ??ZDO_StartDevice_5
    390            {
    391              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   7CE8         MOV     R4,#-0x18
   \   0000DA   7D03         MOV     R5,#0x3
   \   0000DC   7A01         MOV     R2,#0x1
   \   0000DE   7B00         MOV     R3,#0x0
   \   0000E0   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F9           MOV     R1,A
   \   0000E5   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000E8   E9           MOV     A,R1
    392            }
    393          }
   \                     ??ZDO_StartDevice_5:
   \   0000E9   740B         MOV     A,#0xb
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EE   7F03         MOV     R7,#0x3
   \   0000F0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    394          
    395          /**************************************************************************************************
    396           * @fn          zdoSendStateChangeMsg
    397           *
    398           * @brief       Helper function for ZDO_UpdateNwkStatus.
    399           *
    400           * input parameters
    401           *
    402           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    403           * @param       state - The current device state.
    404           *
    405           * output parameters
    406           *
    407           * None.
    408           *
    409           * @return      None.
    410           **************************************************************************************************
    411           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    413          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V0,R2
    414            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   00000E                ; Setup parameters for call to function osal_msg_find
   \   00000E   7AD1         MOV     R2,#-0x2f
   \   000010   A9..         MOV     R1,?V0
   \   000012   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   000015   8A..         MOV     ?V2,R2
   \   000017   8B..         MOV     ?V3,R3
   \   000019   AE..         MOV     R6,?V2
   \   00001B   AF..         MOV     R7,?V3
    415          
    416            if (NULL == pMsg)
   \   00001D   EE           MOV     A,R6
   \   00001E   4F           ORL     A,R7
   \   00001F   704C         JNZ     ??zdoSendStateChangeMsg_0
    417            {
    418              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000021                ; Setup parameters for call to function osal_msg_allocate
   \   000021   7A02         MOV     R2,#0x2
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000028   8A..         MOV     ?V2,R2
   \   00002A   8B..         MOV     ?V3,R3
   \   00002C   AE..         MOV     R6,?V2
   \   00002E   AF..         MOV     R7,?V3
   \   000030   EE           MOV     A,R6
   \   000031   4F           ORL     A,R7
   \   000032   700F         JNZ     ??zdoSendStateChangeMsg_1
    419              {
    420                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    421                // try again later when more Heap may be available.
    422                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000034                ; Setup parameters for call to function osal_set_event
   \   000034   7A10         MOV     R2,#0x10
   \   000036   7B00         MOV     R3,#0x0
   \   000038   90....       MOV     DPTR,#ZDAppTaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000040   E9           MOV     A,R1
   \   000041   8036         SJMP    ??zdoSendStateChangeMsg_2
    423              }
    424              else
    425              {
    426                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   74D1         MOV     A,#-0x2f
   \   000049   F0           MOVX    @DPTR,A
    427                pMsg->status = state;
   \   00004A   E5..         MOV     A,?V1
   \   00004C   C0E0         PUSH    A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   A3           INC     DPTR
   \   000053   D0E0         POP     A
   \   000055   F0           MOVX    @DPTR,A
    428          
    429                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   000056                ; Setup parameters for call to function osal_msg_send
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   A9..         MOV     R1,?V0
   \   00005C   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00005F   E9           MOV     A,R1
   \   000060   C0E0         PUSH    A
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   D0E0         POP     A
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   800C         SJMP    ??zdoSendStateChangeMsg_2
    430              }
    431            }
    432            else
    433            {
    434              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    435              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   00006D   E5..         MOV     A,?V1
   \   00006F   C0E0         PUSH    A
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
    436            }
    437          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000079   7401         MOV     A,#0x1
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   7F04         MOV     R7,#0x4
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
    438          
    439          /**************************************************************************************************
    440           * @fn          ZDO_UpdateNwkStatus
    441           *
    442           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    443           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    444           *              than one registered EndPoint, it will only receive one notification per state
    445           *              change. Although the device may go through a sequence of state changes, the
    446           *              Application task may only receive notification of the final, steady-state state
    447           *              because it has the lowest priority and never even runs to receive the intermediate
    448           *              state change notifications.
    449           *
    450           * input parameters
    451           *
    452           * @param       state - The current device state.
    453           *
    454           * output parameters
    455           *
    456           * None.
    457           *
    458           * @return      None.
    459           **************************************************************************************************
    460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    462          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    463            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FF           MOV     R7,A
    464          
    465            while (pItem != NULL)
   \                     ??ZDO_UpdateNwkStatus_0:
   \   00000F   EE           MOV     A,R6
   \   000010   4F           ORL     A,R7
   \   000011   603A         JZ      ??ZDO_UpdateNwkStatus_1
    466            {
    467              if (pItem->epDesc->endPoint != ZDO_EP)
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F583         MOV     DPH,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   E0           MOVX    A,@DPTR
   \   000022   601E         JZ      ??ZDO_UpdateNwkStatus_2
    468              {
    469                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000024                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8882         MOV     DPL,R0
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8882         MOV     DPL,R0
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A9..         MOV     R1,?V0
   \   00003F   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    470              }
    471          
    472              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FE           MOV     R6,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FF           MOV     R7,A
   \   00004B   80C2         SJMP    ??ZDO_UpdateNwkStatus_0
    473            }
    474          #if defined MT_ZDO_CB_FUNC
    475            zdoSendStateChangeMsg(state, MT_TaskID);
    476          #endif
    477          
    478            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00004D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00004D   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000050   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000053   EA           MOV     A,R2
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   EB           MOV     A,R3
   \   000057   F0           MOVX    @DPTR,A
    479            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000058                ; Setup parameters for call to function NLME_GetExtAddr
   \   000058   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00005B   8A..         MOV     ?V2,R2
   \   00005D   8B..         MOV     ?V3,R3
   \   00005F   85..82       MOV     DPL,?V2
   \   000062   85..83       MOV     DPH,?V3
    480          }
   \   000065   7F04         MOV     R7,#0x4
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
    481          
    482          #if defined ( REFLECTOR )
    483          /*********************************************************************
    484           * @fn          ZDO_RemoveEndDeviceBind
    485           *
    486           * @brief       Remove the end device bind
    487           *
    488           * @param  none
    489           *
    490           * @return      none
    491           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    492          static void ZDO_RemoveEndDeviceBind( void )
   \                     ZDO_RemoveEndDeviceBind:
    493          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    494            if ( ZDO_EDBind != NULL )
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   607B         JZ      ??ZDO_RemoveEndDeviceBind_0
    495            {
    496              // Free the RAM
    497              if ( ZDO_EDBind->inClusters != NULL )
   \   000010   90....       MOV     DPTR,#ZDO_EDBind
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C8           XCH     A,R0
   \   000018   2410         ADD     A,#0x10
   \   00001A   F582         MOV     DPL,A
   \   00001C   C8           XCH     A,R0
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   6019         JZ      ??ZDO_RemoveEndDeviceBind_1
    498              {
    499                osal_mem_free( ZDO_EDBind->inClusters );
   \   00002A                ; Setup parameters for call to function osal_mem_free
   \   00002A   90....       MOV     DPTR,#ZDO_EDBind
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   C8           XCH     A,R0
   \   000032   2410         ADD     A,#0x10
   \   000034   F582         MOV     DPL,A
   \   000036   C8           XCH     A,R0
   \   000037   3400         ADDC    A,#0x0
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    500              }
    501              if ( ZDO_EDBind->outClusters != NULL )
   \                     ??ZDO_RemoveEndDeviceBind_1:
   \   000043   90....       MOV     DPTR,#ZDO_EDBind
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C8           XCH     A,R0
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   C8           XCH     A,R0
   \   000050   3400         ADDC    A,#0x0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6019         JZ      ??ZDO_RemoveEndDeviceBind_2
    502              {
    503                osal_mem_free( ZDO_EDBind->outClusters );
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   90....       MOV     DPTR,#ZDO_EDBind
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C8           XCH     A,R0
   \   000065   2413         ADD     A,#0x13
   \   000067   F582         MOV     DPL,A
   \   000069   C8           XCH     A,R0
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F583         MOV     DPH,A
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FA           MOV     R2,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    504              }
    505              osal_mem_free( ZDO_EDBind );
   \                     ??ZDO_RemoveEndDeviceBind_2:
   \   000076                ; Setup parameters for call to function osal_mem_free
   \   000076   90....       MOV     DPTR,#ZDO_EDBind
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FA           MOV     R2,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    506              ZDO_EDBind = NULL;
   \   000081   90....       MOV     DPTR,#ZDO_EDBind
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   7400         MOV     A,#0x0
   \   00008A   F0           MOVX    @DPTR,A
    507            }
    508          }
   \                     ??ZDO_RemoveEndDeviceBind_0:
   \   00008B   D083         POP     DPH
   \   00008D   D082         POP     DPL
   \   00008F   02....       LJMP    ?BRET
    509          #endif // REFLECTOR
    510          
    511          #if defined ( REFLECTOR )
    512          /*********************************************************************
    513           * @fn          ZDO_RemoveEndDeviceBind
    514           *
    515           * @brief       Remove the end device bind
    516           *
    517           * @param  none
    518           *
    519           * @return      none
    520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
   \                     ZDO_SendEDBindRsp:
    522          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7401         MOV     A,#0x1
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   C0E0         PUSH    A
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   EA           MOV     A,R2
   \   000022   FE           MOV     R6,A
   \   000023   EB           MOV     A,R3
   \   000024   FF           MOV     R7,A
   \   000025   8D..         MOV     ?V0,R5
    523            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
   \   000027                ; Setup parameters for call to function ZDP_SendData
   \   000027   E5..         MOV     A,?V0
   \   000029   F5..         MOV     ?V1,A
   \   00002B   78..         MOV     R0,#?V1
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP100_8
   \   000035   88..         MOV     ?V2,R0
   \   000037   89..         MOV     ?V3,R1
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   75..20       MOV     ?V2,#0x20
   \   000041   75..80       MOV     ?V3,#-0x80
   \   000044   78..         MOV     R0,#?V2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7901         MOV     R1,#0x1
   \   00004B   EE           MOV     A,R6
   \   00004C   FC           MOV     R4,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FD           MOV     R5,A
   \   00004F   7406         MOV     A,#0x6
   \   000051   12....       LCALL   ?XSTACK_DISP101_8
   \   000054   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000057   7405         MOV     A,#0x5
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   E9           MOV     A,R1
    524          
    525          #if defined( LCD_SUPPORTED )
    526            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    527            if ( Status == ZDP_SUCCESS )
    528            {
    529              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    530            }
    531            else
    532            {
    533              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    534            }
    535          #endif
    536          
    537          }
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   7F04         MOV     R7,#0x4
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
    538          #endif // REFLECTOR
    539          
    540          /*********************************************************************
    541           * @fn          ZDO_CompareClusterLists
    542           *
    543           * @brief       Compare one list to another list
    544           *
    545           * @param       numList1 - number of items in list 1
    546           * @param       list1 - first list of cluster IDs
    547           * @param       numList2 - number of items in list 2
    548           * @param       list2 - second list of cluster IDs
    549           * @param       pMatches - buffer to put matches
    550           *
    551           * @return      number of matches
    552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    554                                    byte numList2, uint16 *list2, uint16 *pMatches )
    555          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   8C..         MOV     ?V4,R4
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FC           MOV     R4,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FE           MOV     R6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
    556            byte x, y;
    557            uint16 z;
    558            byte numMatches = 0;
   \   000021   7A00         MOV     R2,#0x0
    559          
    560            // Check the first in against the seconds out
    561            for ( x = 0; x < numList1; x++ )
   \   000023   7B00         MOV     R3,#0x0
   \                     ??ZDO_CompareClusterLists_0:
   \   000025   EB           MOV     A,R3
   \   000026   C3           CLR     C
   \   000027   95..         SUBB    A,?V2
   \   000029   4003         JC      $+5
   \   00002B   02....       LJMP    ??ZDO_CompareClusterLists_1 & 0xFFFF
    562            {
    563              for ( y = 0; y < numList2; y++ )
   \   00002E   75..00       MOV     ?V3,#0x0
   \                     ??ZDO_CompareClusterLists_2:
   \   000031   E5..         MOV     A,?V3
   \   000033   C3           CLR     C
   \   000034   95..         SUBB    A,?V4
   \   000036   4003         JC      $+5
   \   000038   02....       LJMP    ??ZDO_CompareClusterLists_3 & 0xFFFF
    564              {
    565                z = list2[y];
   \   00003B   A8..         MOV     R0,?V3
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   E8           MOV     A,R0
   \   000040   75F002       MOV     B,#0x2
   \   000043   A4           MUL     AB
   \   000044   C8           XCH     A,R0
   \   000045   85F0..       MOV     ?V5,B
   \   000048   75F000       MOV     B,#0x0
   \   00004B   A4           MUL     AB
   \   00004C   25..         ADD     A,?V5
   \   00004E   F5..         MOV     ?V5,A
   \   000050   75F002       MOV     B,#0x2
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   25..         ADD     A,?V5
   \   000057   F9           MOV     R1,A
   \   000058   EC           MOV     A,R4
   \   000059   28           ADD     A,R0
   \   00005A   F582         MOV     DPL,A
   \   00005C   ED           MOV     A,R5
   \   00005D   39           ADDC    A,R1
   \   00005E   F583         MOV     DPH,A
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F5..         MOV     ?V0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F5..         MOV     ?V1,A
    566                if ( list1[x] == z )
   \   000067   EB           MOV     A,R3
   \   000068   F8           MOV     R0,A
   \   000069   7900         MOV     R1,#0x0
   \   00006B   E8           MOV     A,R0
   \   00006C   75F002       MOV     B,#0x2
   \   00006F   A4           MUL     AB
   \   000070   C8           XCH     A,R0
   \   000071   85F0..       MOV     ?V5,B
   \   000074   75F000       MOV     B,#0x0
   \   000077   A4           MUL     AB
   \   000078   25..         ADD     A,?V5
   \   00007A   F5..         MOV     ?V5,A
   \   00007C   75F002       MOV     B,#0x2
   \   00007F   E9           MOV     A,R1
   \   000080   A4           MUL     AB
   \   000081   25..         ADD     A,?V5
   \   000083   F9           MOV     R1,A
   \   000084   E5..         MOV     A,?V6
   \   000086   28           ADD     A,R0
   \   000087   F582         MOV     DPL,A
   \   000089   E5..         MOV     A,?V7
   \   00008B   39           ADDC    A,R1
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   65..         XRL     A,?V0
   \   000091   7004         JNZ     ??ZDO_CompareClusterLists_4
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   65..         XRL     A,?V1
   \                     ??ZDO_CompareClusterLists_4:
   \   000097   702D         JNZ     ??ZDO_CompareClusterLists_5
    567                {
    568                  pMatches[numMatches++] = z;
   \   000099   EA           MOV     A,R2
   \   00009A   F8           MOV     R0,A
   \   00009B   7900         MOV     R1,#0x0
   \   00009D   E8           MOV     A,R0
   \   00009E   75F002       MOV     B,#0x2
   \   0000A1   A4           MUL     AB
   \   0000A2   C8           XCH     A,R0
   \   0000A3   85F0..       MOV     ?V5,B
   \   0000A6   75F000       MOV     B,#0x0
   \   0000A9   A4           MUL     AB
   \   0000AA   25..         ADD     A,?V5
   \   0000AC   F5..         MOV     ?V5,A
   \   0000AE   75F002       MOV     B,#0x2
   \   0000B1   E9           MOV     A,R1
   \   0000B2   A4           MUL     AB
   \   0000B3   25..         ADD     A,?V5
   \   0000B5   F9           MOV     R1,A
   \   0000B6   EE           MOV     A,R6
   \   0000B7   28           ADD     A,R0
   \   0000B8   F582         MOV     DPL,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   39           ADDC    A,R1
   \   0000BC   F583         MOV     DPH,A
   \   0000BE   E5..         MOV     A,?V0
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E5..         MOV     A,?V1
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   0A           INC     R2
    569                }
    570              }
   \                     ??ZDO_CompareClusterLists_5:
   \   0000C6   05..         INC     ?V3
   \   0000C8   02....       LJMP    ??ZDO_CompareClusterLists_2 & 0xFFFF
    571            }
   \                     ??ZDO_CompareClusterLists_3:
   \   0000CB   0B           INC     R3
   \   0000CC   02....       LJMP    ??ZDO_CompareClusterLists_0 & 0xFFFF
    572          
    573            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_1:
   \   0000CF   EA           MOV     A,R2
   \   0000D0   F9           MOV     R1,A
   \   0000D1   7F08         MOV     R7,#0x8
   \   0000D3   02....       LJMP    ?BANKED_LEAVE_XDATA
    574          }
    575          
    576          /*********************************************************************
    577           * Utility functions
    578           */
    579          
    580          /*********************************************************************
    581           * @fn          ZDO_CompareByteLists
    582           *
    583           * @brief       Compares two lists for matches.
    584           *
    585           * @param       ACnt  - number of entries in list A
    586           * @param       AList  - List A
    587           * @param       BCnt  - number of entries in list B
    588           * @param       BList  - List B
    589           *
    590           * @return      true if a match is found
    591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8C..         MOV     ?V2,R4
   \   000009   740D         MOV     A,#0xd
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   FC           MOV     R4,A
   \   000015   E9           MOV     A,R1
   \   000016   FD           MOV     R5,A
    594            byte x, y;
    595          
    596            for ( x = 0; x < ACnt; x++ )
   \   000017   7F00         MOV     R7,#0x0
   \                     ??ZDO_AnyClusterMatches_0:
   \   000019   EF           MOV     A,R7
   \   00001A   C3           CLR     C
   \   00001B   9E           SUBB    A,R6
   \   00001C   5071         JNC     ??ZDO_AnyClusterMatches_1
    597            {
    598              for ( y = 0; y < BCnt; y++ )
   \   00001E   75..00       MOV     ?V3,#0x0
   \                     ??ZDO_AnyClusterMatches_2:
   \   000021   E5..         MOV     A,?V3
   \   000023   C3           CLR     C
   \   000024   95..         SUBB    A,?V2
   \   000026   5064         JNC     ??ZDO_AnyClusterMatches_3
    599              {
    600                if ( AList[x] == BList[y] )
   \   000028   EF           MOV     A,R7
   \   000029   F8           MOV     R0,A
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   E8           MOV     A,R0
   \   00002D   75F002       MOV     B,#0x2
   \   000030   A4           MUL     AB
   \   000031   C8           XCH     A,R0
   \   000032   85F0..       MOV     ?V0,B
   \   000035   75F000       MOV     B,#0x0
   \   000038   A4           MUL     AB
   \   000039   25..         ADD     A,?V0
   \   00003B   F5..         MOV     ?V0,A
   \   00003D   75F002       MOV     B,#0x2
   \   000040   E9           MOV     A,R1
   \   000041   A4           MUL     AB
   \   000042   25..         ADD     A,?V0
   \   000044   F9           MOV     R1,A
   \   000045   EA           MOV     A,R2
   \   000046   28           ADD     A,R0
   \   000047   F582         MOV     DPL,A
   \   000049   EB           MOV     A,R3
   \   00004A   39           ADDC    A,R1
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F5..         MOV     ?V1,A
   \   000054   A8..         MOV     R0,?V3
   \   000056   7900         MOV     R1,#0x0
   \   000058   E8           MOV     A,R0
   \   000059   75F002       MOV     B,#0x2
   \   00005C   A4           MUL     AB
   \   00005D   C8           XCH     A,R0
   \   00005E   85F0..       MOV     ?V4,B
   \   000061   75F000       MOV     B,#0x0
   \   000064   A4           MUL     AB
   \   000065   25..         ADD     A,?V4
   \   000067   F5..         MOV     ?V4,A
   \   000069   75F002       MOV     B,#0x2
   \   00006C   E9           MOV     A,R1
   \   00006D   A4           MUL     AB
   \   00006E   25..         ADD     A,?V4
   \   000070   F9           MOV     R1,A
   \   000071   EC           MOV     A,R4
   \   000072   28           ADD     A,R0
   \   000073   F582         MOV     DPL,A
   \   000075   ED           MOV     A,R5
   \   000076   39           ADDC    A,R1
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   65..         XRL     A,?V0
   \   00007C   7004         JNZ     ??ZDO_AnyClusterMatches_4
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   65..         XRL     A,?V1
   \                     ??ZDO_AnyClusterMatches_4:
   \   000082   7004         JNZ     ??ZDO_AnyClusterMatches_5
    601                {
    602                  return true;
   \   000084   7901         MOV     R1,#0x1
   \   000086   8009         SJMP    ??ZDO_AnyClusterMatches_6
    603                }
    604              }
   \                     ??ZDO_AnyClusterMatches_5:
   \   000088   05..         INC     ?V3
   \   00008A   8095         SJMP    ??ZDO_AnyClusterMatches_2
    605            }
   \                     ??ZDO_AnyClusterMatches_3:
   \   00008C   0F           INC     R7
   \   00008D   808A         SJMP    ??ZDO_AnyClusterMatches_0
    606          
    607            return false;
   \                     ??ZDO_AnyClusterMatches_1:
   \   00008F   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000091   7F05         MOV     R7,#0x5
   \   000093   02....       LJMP    ?BANKED_LEAVE_XDATA
    608          }
    609          
    610          /*********************************************************************
    611           * Callback functions from ZDProfile
    612           */
    613          
    614          /*********************************************************************
    615           * @fn          ZDO_ProcessNodeDescReq
    616           *
    617           * @brief       This function processes and responds to the
    618           *              Node_Desc_req message.
    619           *
    620           * @param       inMsg - incoming message
    621           *
    622           * @return      none
    623           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    624          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    625          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    626            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F5..         MOV     ?V0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
    627            NodeDescriptorFormat_t *desc = NULL;
   \   00003F   75..00       MOV     ?V2,#0x0
   \   000042   75..00       MOV     ?V3,#0x0
    628          
    629            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000045   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0
   \   00004B   7004         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   65..         XRL     A,?V1
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   000051   7006         JNZ     ??ZDO_ProcessNodeDescReq_1
    630            {
    631              desc = &ZDO_Config_Node_Descriptor;
   \   000053   75....       MOV     ?V2,#ZDO_Config_Node_Descriptor & 0xff
   \   000056   75....       MOV     ?V3,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
    632            }
    633          
    634            if ( desc != NULL )
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000059   E5..         MOV     A,?V2
   \   00005B   45..         ORL     A,?V3
   \   00005D   6018         JZ      ??ZDO_ProcessNodeDescReq_2
    635            {
    636              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00005F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00005F   78..         MOV     R0,#?V2
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV     R4,?V0
   \   000066   AD..         MOV     R5,?V1
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00006F   7402         MOV     A,#0x2
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   8038         SJMP    ??ZDO_ProcessNodeDescReq_3
    637            }
    638            else
    639            {
    640              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    641                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..02       MOV     ?V4,#0x2
   \   00007A   75..80       MOV     ?V5,#-0x80
   \   00007D   78..         MOV     R0,#?V4
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   EE           MOV     A,R6
   \   000088   240E         ADD     A,#0xe
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FD           MOV     R5,A
   \   000092   7C80         MOV     R4,#-0x80
   \   000094   EE           MOV     A,R6
   \   000095   2402         ADD     A,#0x2
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   EE           MOV     A,R6
   \   00009C   240F         ADD     A,#0xf
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
    642            }
    643          }
   \                     ??ZDO_ProcessNodeDescReq_3:
   \   0000AF   7F06         MOV     R7,#0x6
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    644          
    645          /*********************************************************************
    646           * @fn          ZDO_ProcessPowerDescReq
    647           *
    648           * @brief       This function processes and responds to the
    649           *              Node_Power_req message.
    650           *
    651           * @param       inMsg  - incoming request
    652           *
    653           * @return      none
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    657            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F5..         MOV     ?V0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
    658            NodePowerDescriptorFormat_t *desc = NULL;
   \   00003F   75..00       MOV     ?V2,#0x0
   \   000042   75..00       MOV     ?V3,#0x0
    659          
    660            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000045   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0
   \   00004B   7004         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   65..         XRL     A,?V1
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   000051   7006         JNZ     ??ZDO_ProcessPowerDescReq_1
    661            {
    662              desc = &ZDO_Config_Power_Descriptor;
   \   000053   75....       MOV     ?V2,#ZDO_Config_Power_Descriptor & 0xff
   \   000056   75....       MOV     ?V3,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
    663            }
    664          
    665            if ( desc != NULL )
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000059   E5..         MOV     A,?V2
   \   00005B   45..         ORL     A,?V3
   \   00005D   6018         JZ      ??ZDO_ProcessPowerDescReq_2
    666            {
    667              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00005F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00005F   78..         MOV     R0,#?V2
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV     R4,?V0
   \   000066   AD..         MOV     R5,?V1
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00006F   7402         MOV     A,#0x2
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   8038         SJMP    ??ZDO_ProcessPowerDescReq_3
    668            }
    669            else
    670            {
    671              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    672                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..03       MOV     ?V4,#0x3
   \   00007A   75..80       MOV     ?V5,#-0x80
   \   00007D   78..         MOV     R0,#?V4
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   EE           MOV     A,R6
   \   000088   240E         ADD     A,#0xe
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FD           MOV     R5,A
   \   000092   7C80         MOV     R4,#-0x80
   \   000094   EE           MOV     A,R6
   \   000095   2402         ADD     A,#0x2
   \   000097   FA           MOV     R2,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   EE           MOV     A,R6
   \   00009C   240F         ADD     A,#0xf
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
    673            }
    674          }
   \                     ??ZDO_ProcessPowerDescReq_3:
   \   0000AF   7F06         MOV     R7,#0x6
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    675          
    676          /*********************************************************************
    677           * @fn          ZDO_ProcessSimpleDescReq
    678           *
    679           * @brief       This function processes and responds to the
    680           *              Simple_Desc_req message.
    681           *
    682           * @param       inMsg - incoming message (request)
    683           *
    684           * @return      none
    685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    686          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    688            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
    689            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00001B   E5..         MOV     A,?V4
   \   00001D   2413         ADD     A,#0x13
   \   00001F   F582         MOV     DPL,A
   \   000021   E4           CLR     A
   \   000022   35..         ADDC    A,?V5
   \   000024   F583         MOV     DPH,A
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F583         MOV     DPH,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   7B00         MOV     R3,#0x0
   \   000032   E5..         MOV     A,?V4
   \   000034   2413         ADD     A,#0x13
   \   000036   F582         MOV     DPL,A
   \   000038   E4           CLR     A
   \   000039   35..         ADDC    A,?V5
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F583         MOV     DPH,A
   \   000043   8882         MOV     DPL,R0
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   7900         MOV     R1,#0x0
   \   00004A   E4           CLR     A
   \   00004B   C8           XCH     A,R0
   \   00004C   F9           MOV     R1,A
   \   00004D   EA           MOV     A,R2
   \   00004E   28           ADD     A,R0
   \   00004F   FE           MOV     R6,A
   \   000050   EB           MOV     A,R3
   \   000051   39           ADDC    A,R1
   \   000052   FF           MOV     R7,A
    690            byte endPoint = inMsg->asdu[2];
   \   000053   E5..         MOV     A,?V4
   \   000055   2413         ADD     A,#0x13
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   35..         ADDC    A,?V5
   \   00005C   F583         MOV     DPH,A
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F583         MOV     DPH,A
   \   000064   8882         MOV     DPL,R0
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F5..         MOV     ?V2,A
    691            byte free = false;
   \   00006B   75..00       MOV     ?V1,#0x0
    692            byte stat = ZDP_SUCCESS;
   \   00006E   75..00       MOV     ?V0,#0x0
    693          
    694            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   000071   E5..         MOV     A,?V2
   \   000073   6007         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000075   E5..         MOV     A,?V2
   \   000077   C3           CLR     C
   \   000078   94F1         SUBB    A,#-0xf
   \   00007A   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    695            {
    696              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   00007C   75..82       MOV     ?V0,#-0x7e
   \   00007F   802F         SJMP    ??ZDO_ProcessSimpleDescReq_2
    697            }
    698            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000081   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6E           XRL     A,R6
   \   000086   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   6F           XRL     A,R7
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   00008B   7020         JNZ     ??ZDO_ProcessSimpleDescReq_4
    699            {
    700              free = afFindSimpleDesc( &sDesc, endPoint );
   \   00008D                ; Setup parameters for call to function afFindSimpleDesc
   \   00008D   A9..         MOV     R1,?V2
   \   00008F   AA..         MOV     R2,?XSP + 0
   \   000091   AB..         MOV     R3,?XSP + 1
   \   000093   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   000096   E9           MOV     A,R1
   \   000097   F5..         MOV     ?V1,A
    701              if ( sDesc == NULL )
   \   000099   85..82       MOV     DPL,?XSP + 0
   \   00009C   85..83       MOV     DPH,?XSP + 1
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F8           MOV     R0,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   49           ORL     A,R1
   \   0000A6   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    702              {
    703                stat = ZDP_NOT_ACTIVE;
   \   0000A8   75..83       MOV     ?V0,#-0x7d
   \   0000AB   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    704              }
    705            }
    706            else
    707            {
    708              if ( ZSTACK_ROUTER_BUILD )
    709              {
    710                stat = ZDP_DEVICE_NOT_FOUND;
    711              }
    712              else if ( ZSTACK_END_DEVICE_BUILD )
    713              {
    714                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   0000AD   75..80       MOV     ?V0,#-0x80
    715              }
    716            }
    717          
    718            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   0000B0                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FC           MOV     R4,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FD           MOV     R5,A
   \   0000BB   A9..         MOV     R1,?V0
   \   0000BD   AA..         MOV     R2,?V4
   \   0000BF   AB..         MOV     R3,?V5
   \   0000C1   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
   \   0000C4   E9           MOV     A,R1
    719          
    720            if ( free && sDesc )
   \   0000C5   E5..         MOV     A,?V1
   \   0000C7   601D         JZ      ??ZDO_ProcessSimpleDescReq_5
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   F8           MOV     R0,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   E8           MOV     A,R0
   \   0000D5   49           ORL     A,R1
   \   0000D6   600E         JZ      ??ZDO_ProcessSimpleDescReq_5
    721            {
    722              osal_mem_free( sDesc );
   \   0000D8                ; Setup parameters for call to function osal_mem_free
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FA           MOV     R2,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   FB           MOV     R3,A
   \   0000E3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    723            }
    724          }
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   7F06         MOV     R7,#0x6
   \   0000ED   02....       LJMP    ?BANKED_LEAVE_XDATA
    725          
    726          /*********************************************************************
    727           * @fn          ZDO_ProcessActiveEPReq
    728           *
    729           * @brief       This function processes and responds to the
    730           *              Active_EP_req message.
    731           *
    732           * @param       inMsg  - incoming message (request)
    733           *
    734           * @return      none
    735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    736          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    737          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
    738            byte cnt = 0;
   \   000009   75..00       MOV     ?V1,#0x0
    739            uint16 aoi;
    740            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V0,#0x0
    741          
    742            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   E5..         MOV     A,?V4
   \   000011   2413         ADD     A,#0x13
   \   000013   F582         MOV     DPL,A
   \   000015   E4           CLR     A
   \   000016   35..         ADDC    A,?V5
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F583         MOV     DPH,A
   \   000020   8882         MOV     DPL,R0
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   E5..         MOV     A,?V4
   \   000028   2413         ADD     A,#0x13
   \   00002A   F582         MOV     DPL,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V5
   \   00002F   F583         MOV     DPH,A
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F8           MOV     R0,A
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   E4           CLR     A
   \   00003F   C8           XCH     A,R0
   \   000040   F9           MOV     R1,A
   \   000041   EA           MOV     A,R2
   \   000042   28           ADD     A,R0
   \   000043   F8           MOV     R0,A
   \   000044   EB           MOV     A,R3
   \   000045   39           ADDC    A,R1
   \   000046   F9           MOV     R1,A
   \   000047   E8           MOV     A,R0
   \   000048   FE           MOV     R6,A
   \   000049   E9           MOV     A,R1
   \   00004A   FF           MOV     R7,A
    743          
    744            if ( aoi == NLME_GetShortAddr() )
   \   00004B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00004B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00004E   8A..         MOV     ?V2,R2
   \   000050   8B..         MOV     ?V3,R3
   \   000052   E5..         MOV     A,?V2
   \   000054   6E           XRL     A,R6
   \   000055   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000057   E5..         MOV     A,?V3
   \   000059   6F           XRL     A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   00005A   7013         JNZ     ??ZDO_ProcessActiveEPReq_1
    745            {
    746              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   00005C                ; Setup parameters for call to function afNumEndPoints
   \   00005C   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   00005F   E9           MOV     A,R1
   \   000060   24FF         ADD     A,#-0x1
   \   000062   F5..         MOV     ?V1,A
    747              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000064                ; Setup parameters for call to function afEndPoints
   \   000064   7901         MOV     R1,#0x1
   \   000066   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000068   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   00006A   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   00006D   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    748            }
    749            else
    750            {
    751              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   00006F   75..80       MOV     ?V0,#-0x80
    752            }
    753          
    754            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    755                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000072                ; Setup parameters for call to function ZDP_EPRsp
   \   000072   E5..         MOV     A,?V4
   \   000074   240E         ADD     A,#0xe
   \   000076   F582         MOV     DPL,A
   \   000078   E4           CLR     A
   \   000079   35..         ADDC    A,?V5
   \   00007B   F583         MOV     DPH,A
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F5..         MOV     ?V2,A
   \   000080   78..         MOV     R0,#?V2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   000088   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00008B   78..         MOV     R0,#?V2
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   E5..         MOV     A,?V1
   \   000092   F5..         MOV     ?V2,A
   \   000094   78..         MOV     R0,#?V2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   8E..         MOV     ?V2,R6
   \   00009B   8F..         MOV     ?V3,R7
   \   00009D   78..         MOV     R0,#?V2
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   E5..         MOV     A,?V0
   \   0000A4   F5..         MOV     ?V2,A
   \   0000A6   78..         MOV     R0,#?V2
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AB   E5..         MOV     A,?V4
   \   0000AD   2402         ADD     A,#0x2
   \   0000AF   FC           MOV     R4,A
   \   0000B0   E4           CLR     A
   \   0000B1   35..         ADDC    A,?V5
   \   0000B3   FD           MOV     R5,A
   \   0000B4   E5..         MOV     A,?V4
   \   0000B6   240F         ADD     A,#0xf
   \   0000B8   F582         MOV     DPL,A
   \   0000BA   E4           CLR     A
   \   0000BB   35..         ADDC    A,?V5
   \   0000BD   F583         MOV     DPH,A
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F9           MOV     R1,A
   \   0000C1   7A05         MOV     R2,#0x5
   \   0000C3   7B80         MOV     R3,#-0x80
   \   0000C5   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000C8   7407         MOV     A,#0x7
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV     A,R1
    756          }
   \   0000CE   7F06         MOV     R7,#0x6
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
    757          
    758          /*********************************************************************
    759           * @fn          ZDO_ConvertOTAClusters
    760           *
    761           * @brief       This function will convert the over-the-air cluster list
    762           *              format to an internal format.
    763           *
    764           * @param       inMsg  - incoming message (request)
    765           *
    766           * @return      pointer to incremented inBuf
    767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    768          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    769          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    770            uint8 x;
    771          
    772            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000009   EF           MOV     A,R7
   \   00000A   C3           CLR     C
   \   00000B   9E           SUBB    A,R6
   \   00000C   5056         JNC     ??ZDO_ConvertOTAClusters_1
    773            {
    774              // convert ota format to internal
    775              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0,A
   \   000015   75..00       MOV     ?V1,#0x0
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   7900         MOV     R1,#0x0
   \   000021   E4           CLR     A
   \   000022   C8           XCH     A,R0
   \   000023   F9           MOV     R1,A
   \   000024   E5..         MOV     A,?V0
   \   000026   28           ADD     A,R0
   \   000027   F5..         MOV     ?V0,A
   \   000029   E5..         MOV     A,?V1
   \   00002B   39           ADDC    A,R1
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   EF           MOV     A,R7
   \   00002F   F8           MOV     R0,A
   \   000030   7900         MOV     R1,#0x0
   \   000032   E8           MOV     A,R0
   \   000033   75F002       MOV     B,#0x2
   \   000036   A4           MUL     AB
   \   000037   C8           XCH     A,R0
   \   000038   85F0..       MOV     ?V2,B
   \   00003B   75F000       MOV     B,#0x0
   \   00003E   A4           MUL     AB
   \   00003F   25..         ADD     A,?V2
   \   000041   F5..         MOV     ?V2,A
   \   000043   75F002       MOV     B,#0x2
   \   000046   E9           MOV     A,R1
   \   000047   A4           MUL     AB
   \   000048   25..         ADD     A,?V2
   \   00004A   F9           MOV     R1,A
   \   00004B   EC           MOV     A,R4
   \   00004C   28           ADD     A,R0
   \   00004D   F582         MOV     DPL,A
   \   00004F   ED           MOV     A,R5
   \   000050   39           ADDC    A,R1
   \   000051   F583         MOV     DPH,A
   \   000053   E5..         MOV     A,?V0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E5..         MOV     A,?V1
   \   000059   F0           MOVX    @DPTR,A
    776              inBuf += sizeof( uint16 );
   \   00005A   EA           MOV     A,R2
   \   00005B   2402         ADD     A,#0x2
   \   00005D   FA           MOV     R2,A
   \   00005E   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000060   0B           INC     R3
    777            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000061   0F           INC     R7
   \   000062   80A5         SJMP    ??ZDO_ConvertOTAClusters_0
    778            return ( inBuf );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   000064   7F03         MOV     R7,#0x3
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
    779          }
    780          
    781          /*********************************************************************
    782           * @fn          ZDO_ProcessMatchDescReq
    783           *
    784           * @brief       This function processes and responds to the
    785           *              Match_Desc_req message.
    786           *
    787           * @param       inMsg  - incoming message (request)
    788           *
    789           * @return      none
    790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    791          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    793            uint8 epCnt = 0;
   \   000015   75..00       MOV     ?V7,#0x0
    794            uint8 numInClusters;
    795            uint16 *inClusters = NULL;
   \   000018   7408         MOV     A,#0x8
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   7400         MOV     A,#0x0
   \   000023   F0           MOVX    @DPTR,A
    796            uint8 numOutClusters;
    797            uint16 *outClusters = NULL;
   \   000024   7406         MOV     A,#0x6
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   7400         MOV     A,#0x0
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   7400         MOV     A,#0x0
   \   00002F   F0           MOVX    @DPTR,A
    798            epList_t *epDesc;
    799            SimpleDescriptionFormat_t *sDesc = NULL;
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   7400         MOV     A,#0x0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   7400         MOV     A,#0x0
   \   00003B   F0           MOVX    @DPTR,A
    800            uint8 allocated;
    801            uint8 *msg;
    802            uint16 aoi;
    803            uint16 profileID;
    804          
    805            // Parse the incoming message
    806            msg = inMsg->asdu;
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C8           XCH     A,R0
   \   000047   2413         ADD     A,#0x13
   \   000049   F582         MOV     DPL,A
   \   00004B   C8           XCH     A,R0
   \   00004C   3400         ADDC    A,#0x0
   \   00004E   F583         MOV     DPH,A
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   E8           MOV     A,R0
   \   000056   FE           MOV     R6,A
   \   000057   E9           MOV     A,R1
   \   000058   FF           MOV     R7,A
    807            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FA           MOV     R2,A
   \   00005F   7B00         MOV     R3,#0x0
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   7900         MOV     R1,#0x0
   \   00006A   E4           CLR     A
   \   00006B   C8           XCH     A,R0
   \   00006C   F9           MOV     R1,A
   \   00006D   EA           MOV     A,R2
   \   00006E   28           ADD     A,R0
   \   00006F   F8           MOV     R0,A
   \   000070   EB           MOV     A,R3
   \   000071   39           ADDC    A,R1
   \   000072   F9           MOV     R1,A
   \   000073   740C         MOV     A,#0xc
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   E8           MOV     A,R0
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   E9           MOV     A,R1
   \   00007C   F0           MOVX    @DPTR,A
    808            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   7B00         MOV     R3,#0x0
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F8           MOV     R0,A
   \   000090   7900         MOV     R1,#0x0
   \   000092   E4           CLR     A
   \   000093   C8           XCH     A,R0
   \   000094   F9           MOV     R1,A
   \   000095   EA           MOV     A,R2
   \   000096   28           ADD     A,R0
   \   000097   F8           MOV     R0,A
   \   000098   EB           MOV     A,R3
   \   000099   39           ADDC    A,R1
   \   00009A   F9           MOV     R1,A
   \   00009B   7410         MOV     A,#0x10
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   E8           MOV     A,R0
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E9           MOV     A,R1
   \   0000A4   F0           MOVX    @DPTR,A
    809            msg += 4;
   \   0000A5   EE           MOV     A,R6
   \   0000A6   2404         ADD     A,#0x4
   \   0000A8   FE           MOV     R6,A
   \   0000A9   5001         JNC     ??ZDO_ProcessMatchDescReq_0
   \   0000AB   0F           INC     R7
    810          
    811            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   0000AC                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0000AC   740C         MOV     A,#0xc
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0000B9   E9           MOV     A,R1
   \   0000BA   6401         XRL     A,#0x1
   \   0000BC   706F         JNZ     ??ZDO_ProcessMatchDescReq_1
    812            {
    813              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    814                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \   0000BE                ; Setup parameters for call to function ZDP_EPRsp
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   C8           XCH     A,R0
   \   0000C9   240E         ADD     A,#0xe
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   C8           XCH     A,R0
   \   0000CE   3400         ADDC    A,#0x0
   \   0000D0   F583         MOV     DPH,A
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F5..         MOV     ?V0,A
   \   0000D5   78..         MOV     R0,#?V0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   E4           CLR     A
   \   0000DB   F5..         MOV     ?V0,A
   \   0000DD   F5..         MOV     ?V1,A
   \   0000DF   78..         MOV     R0,#?V0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   75..00       MOV     ?V0,#0x0
   \   0000E7   78..         MOV     R0,#?V0
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EC   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000EF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000F2   75..80       MOV     ?V0,#-0x80
   \   0000F5   78..         MOV     R0,#?V0
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FA   7407         MOV     A,#0x7
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   2402         ADD     A,#0x2
   \   000102   FC           MOV     R4,A
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   3400         ADDC    A,#0x0
   \   000107   FD           MOV     R5,A
   \   000108   7407         MOV     A,#0x7
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F8           MOV     R0,A
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   C8           XCH     A,R0
   \   000112   240F         ADD     A,#0xf
   \   000114   F582         MOV     DPL,A
   \   000116   C8           XCH     A,R0
   \   000117   3400         ADDC    A,#0x0
   \   000119   F583         MOV     DPH,A
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F9           MOV     R1,A
   \   00011D   7A06         MOV     R2,#0x6
   \   00011F   7B80         MOV     R3,#-0x80
   \   000121   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000124   7407         MOV     A,#0x7
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   E9           MOV     A,R1
    815              return;
   \   00012A   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    816            }
    817            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   00012D                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00012D   740C         MOV     A,#0xc
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   E0           MOVX    A,@DPTR
   \   000133   FA           MOV     R2,A
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   FB           MOV     R3,A
   \   000137   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00013A   E9           MOV     A,R1
   \   00013B   6003         JZ      $+5
   \   00013D   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
   \   000140   740C         MOV     A,#0xc
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F8           MOV     R0,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F9           MOV     R1,A
   \   00014A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   68           XRL     A,R0
   \   00014F   7003         JNZ     ??ZDO_ProcessMatchDescReq_4
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   69           XRL     A,R1
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   000154   606F         JZ      ??ZDO_ProcessMatchDescReq_3
    818            {
    819              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    820                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \   000156                ; Setup parameters for call to function ZDP_EPRsp
   \   000156   85..82       MOV     DPL,?XSP + 0
   \   000159   85..83       MOV     DPH,?XSP + 1
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F8           MOV     R0,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   C8           XCH     A,R0
   \   000161   240E         ADD     A,#0xe
   \   000163   F582         MOV     DPL,A
   \   000165   C8           XCH     A,R0
   \   000166   3400         ADDC    A,#0x0
   \   000168   F583         MOV     DPH,A
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F5..         MOV     ?V0,A
   \   00016D   78..         MOV     R0,#?V0
   \   00016F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000172   E4           CLR     A
   \   000173   F5..         MOV     ?V0,A
   \   000175   F5..         MOV     ?V1,A
   \   000177   78..         MOV     R0,#?V0
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   75..00       MOV     ?V0,#0x0
   \   00017F   78..         MOV     R0,#?V0
   \   000181   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000184   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000187   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00018A   75..80       MOV     ?V0,#-0x80
   \   00018D   78..         MOV     R0,#?V0
   \   00018F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000192   7407         MOV     A,#0x7
   \   000194   12....       LCALL   ?XSTACK_DISP0_8
   \   000197   E0           MOVX    A,@DPTR
   \   000198   2402         ADD     A,#0x2
   \   00019A   FC           MOV     R4,A
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   3400         ADDC    A,#0x0
   \   00019F   FD           MOV     R5,A
   \   0001A0   7407         MOV     A,#0x7
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   F8           MOV     R0,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   C8           XCH     A,R0
   \   0001AA   240F         ADD     A,#0xf
   \   0001AC   F582         MOV     DPL,A
   \   0001AE   C8           XCH     A,R0
   \   0001AF   3400         ADDC    A,#0x0
   \   0001B1   F583         MOV     DPH,A
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F9           MOV     R1,A
   \   0001B5   7A06         MOV     R2,#0x6
   \   0001B7   7B80         MOV     R3,#-0x80
   \   0001B9   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0001BC   7407         MOV     A,#0x7
   \   0001BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C1   E9           MOV     A,R1
    821              return;
   \   0001C2   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    822            }
    823          
    824            if ((numInClusters = *msg++) &&
    825                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0001C5   8E82         MOV     DPL,R6
   \   0001C7   8F83         MOV     DPH,R7
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   F5..         MOV     ?V3,A
   \   0001CC   8E82         MOV     DPL,R6
   \   0001CE   8F83         MOV     DPH,R7
   \   0001D0   A3           INC     DPTR
   \   0001D1   AE82         MOV     R6,DPL
   \   0001D3   AF83         MOV     R7,DPH
   \   0001D5   E5..         MOV     A,?V3
   \   0001D7   6051         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0001D9                ; Setup parameters for call to function osal_mem_alloc
   \   0001D9   AA..         MOV     R2,?V3
   \   0001DB   7B00         MOV     R3,#0x0
   \   0001DD   EA           MOV     A,R2
   \   0001DE   75F002       MOV     B,#0x2
   \   0001E1   A4           MUL     AB
   \   0001E2   CA           XCH     A,R2
   \   0001E3   A8F0         MOV     R0,B
   \   0001E5   75F000       MOV     B,#0x0
   \   0001E8   A4           MUL     AB
   \   0001E9   28           ADD     A,R0
   \   0001EA   F8           MOV     R0,A
   \   0001EB   75F002       MOV     B,#0x2
   \   0001EE   EB           MOV     A,R3
   \   0001EF   A4           MUL     AB
   \   0001F0   28           ADD     A,R0
   \   0001F1   FB           MOV     R3,A
   \   0001F2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001F5   7408         MOV     A,#0x8
   \   0001F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FA   EA           MOV     A,R2
   \   0001FB   F0           MOVX    @DPTR,A
   \   0001FC   A3           INC     DPTR
   \   0001FD   EB           MOV     A,R3
   \   0001FE   F0           MOVX    @DPTR,A
   \   0001FF   7408         MOV     A,#0x8
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   E0           MOVX    A,@DPTR
   \   000205   F8           MOV     R0,A
   \   000206   A3           INC     DPTR
   \   000207   E0           MOVX    A,@DPTR
   \   000208   F9           MOV     R1,A
   \   000209   E8           MOV     A,R0
   \   00020A   49           ORL     A,R1
   \   00020B   601D         JZ      ??ZDO_ProcessMatchDescReq_5
    826            {
    827              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   00020D                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00020D   7408         MOV     A,#0x8
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   E0           MOVX    A,@DPTR
   \   000213   FC           MOV     R4,A
   \   000214   A3           INC     DPTR
   \   000215   E0           MOVX    A,@DPTR
   \   000216   FD           MOV     R5,A
   \   000217   EE           MOV     A,R6
   \   000218   FA           MOV     R2,A
   \   000219   EF           MOV     A,R7
   \   00021A   FB           MOV     R3,A
   \   00021B   A9..         MOV     R1,?V3
   \   00021D   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000220   8A..         MOV     ?V0,R2
   \   000222   8B..         MOV     ?V1,R3
   \   000224   AE..         MOV     R6,?V0
   \   000226   AF..         MOV     R7,?V1
   \   000228   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    828            }
    829            else
    830            {
    831              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   00022A   75..00       MOV     ?V3,#0x0
    832            }
    833          
    834            if ((numOutClusters = *msg++) &&
    835                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   00022D   8E82         MOV     DPL,R6
   \   00022F   8F83         MOV     DPH,R7
   \   000231   E0           MOVX    A,@DPTR
   \   000232   F5..         MOV     ?V6,A
   \   000234   8E82         MOV     DPL,R6
   \   000236   8F83         MOV     DPH,R7
   \   000238   A3           INC     DPTR
   \   000239   AE82         MOV     R6,DPL
   \   00023B   AF83         MOV     R7,DPH
   \   00023D   E5..         MOV     A,?V6
   \   00023F   6051         JZ      ??ZDO_ProcessMatchDescReq_7
   \   000241                ; Setup parameters for call to function osal_mem_alloc
   \   000241   AA..         MOV     R2,?V6
   \   000243   7B00         MOV     R3,#0x0
   \   000245   EA           MOV     A,R2
   \   000246   75F002       MOV     B,#0x2
   \   000249   A4           MUL     AB
   \   00024A   CA           XCH     A,R2
   \   00024B   A8F0         MOV     R0,B
   \   00024D   75F000       MOV     B,#0x0
   \   000250   A4           MUL     AB
   \   000251   28           ADD     A,R0
   \   000252   F8           MOV     R0,A
   \   000253   75F002       MOV     B,#0x2
   \   000256   EB           MOV     A,R3
   \   000257   A4           MUL     AB
   \   000258   28           ADD     A,R0
   \   000259   FB           MOV     R3,A
   \   00025A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00025D   7406         MOV     A,#0x6
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   EA           MOV     A,R2
   \   000263   F0           MOVX    @DPTR,A
   \   000264   A3           INC     DPTR
   \   000265   EB           MOV     A,R3
   \   000266   F0           MOVX    @DPTR,A
   \   000267   7406         MOV     A,#0x6
   \   000269   12....       LCALL   ?XSTACK_DISP0_8
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   F8           MOV     R0,A
   \   00026E   A3           INC     DPTR
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   F9           MOV     R1,A
   \   000271   E8           MOV     A,R0
   \   000272   49           ORL     A,R1
   \   000273   601D         JZ      ??ZDO_ProcessMatchDescReq_7
    836            {
    837              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000275                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000275   7406         MOV     A,#0x6
   \   000277   12....       LCALL   ?XSTACK_DISP0_8
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   FC           MOV     R4,A
   \   00027C   A3           INC     DPTR
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   FD           MOV     R5,A
   \   00027F   EE           MOV     A,R6
   \   000280   FA           MOV     R2,A
   \   000281   EF           MOV     A,R7
   \   000282   FB           MOV     R3,A
   \   000283   A9..         MOV     R1,?V6
   \   000285   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000288   8A..         MOV     ?V0,R2
   \   00028A   8B..         MOV     ?V1,R3
   \   00028C   AE..         MOV     R6,?V0
   \   00028E   AF..         MOV     R7,?V1
   \   000290   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    838            }
    839            else
    840            {
    841              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000292   75..00       MOV     ?V6,#0x0
    842            }
    843          
    844            // First count the number of endpoints that match.
    845            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000295   90....       MOV     DPTR,#epList
   \   000298   E0           MOVX    A,@DPTR
   \   000299   F8           MOV     R0,A
   \   00029A   A3           INC     DPTR
   \   00029B   E0           MOVX    A,@DPTR
   \   00029C   F9           MOV     R1,A
   \   00029D   7404         MOV     A,#0x4
   \   00029F   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A2   E8           MOV     A,R0
   \   0002A3   F0           MOVX    @DPTR,A
   \   0002A4   A3           INC     DPTR
   \   0002A5   E9           MOV     A,R1
   \   0002A6   F0           MOVX    @DPTR,A
    846            while ( epDesc )
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0002A7   7404         MOV     A,#0x4
   \   0002A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   F8           MOV     R0,A
   \   0002AE   A3           INC     DPTR
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   F9           MOV     R1,A
   \   0002B1   E8           MOV     A,R0
   \   0002B2   49           ORL     A,R1
   \   0002B3   7003         JNZ     $+5
   \   0002B5   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    847            {
    848              // Don't search endpoint 0 and check if response is allowed
    849              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
   \   0002B8   7404         MOV     A,#0x4
   \   0002BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   F8           MOV     R0,A
   \   0002BF   A3           INC     DPTR
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   F583         MOV     DPH,A
   \   0002C3   8882         MOV     DPL,R0
   \   0002C5   A3           INC     DPTR
   \   0002C6   A3           INC     DPTR
   \   0002C7   E0           MOVX    A,@DPTR
   \   0002C8   F8           MOV     R0,A
   \   0002C9   A3           INC     DPTR
   \   0002CA   E0           MOVX    A,@DPTR
   \   0002CB   F583         MOV     DPH,A
   \   0002CD   8882         MOV     DPL,R0
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   7003         JNZ     $+5
   \   0002D2   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   0002D5   7404         MOV     A,#0x4
   \   0002D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DA   E0           MOVX    A,@DPTR
   \   0002DB   F8           MOV     R0,A
   \   0002DC   A3           INC     DPTR
   \   0002DD   E0           MOVX    A,@DPTR
   \   0002DE   C8           XCH     A,R0
   \   0002DF   2408         ADD     A,#0x8
   \   0002E1   F582         MOV     DPL,A
   \   0002E3   C8           XCH     A,R0
   \   0002E4   3400         ADDC    A,#0x0
   \   0002E6   F583         MOV     DPH,A
   \   0002E8   E0           MOVX    A,@DPTR
   \   0002E9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002EB   4003         JC      $+5
   \   0002ED   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    850              {
    851                if ( epDesc->pfnDescCB )
   \   0002F0   7404         MOV     A,#0x4
   \   0002F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   F8           MOV     R0,A
   \   0002F7   A3           INC     DPTR
   \   0002F8   E0           MOVX    A,@DPTR
   \   0002F9   F583         MOV     DPH,A
   \   0002FB   8882         MOV     DPL,R0
   \   0002FD   A3           INC     DPTR
   \   0002FE   A3           INC     DPTR
   \   0002FF   A3           INC     DPTR
   \   000300   A3           INC     DPTR
   \   000301   E0           MOVX    A,@DPTR
   \   000302   F8           MOV     R0,A
   \   000303   A3           INC     DPTR
   \   000304   E0           MOVX    A,@DPTR
   \   000305   F9           MOV     R1,A
   \   000306   E8           MOV     A,R0
   \   000307   49           ORL     A,R1
   \   000308   604B         JZ      ??ZDO_ProcessMatchDescReq_12
    852                {
    853                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
   \   00030A                ; Setup parameters for indirect call
   \   00030A   7404         MOV     A,#0x4
   \   00030C   12....       LCALL   ?XSTACK_DISP0_8
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   F8           MOV     R0,A
   \   000311   A3           INC     DPTR
   \   000312   E0           MOVX    A,@DPTR
   \   000313   F583         MOV     DPH,A
   \   000315   8882         MOV     DPL,R0
   \   000317   A3           INC     DPTR
   \   000318   A3           INC     DPTR
   \   000319   E0           MOVX    A,@DPTR
   \   00031A   F8           MOV     R0,A
   \   00031B   A3           INC     DPTR
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   F583         MOV     DPH,A
   \   00031F   8882         MOV     DPL,R0
   \   000321   E0           MOVX    A,@DPTR
   \   000322   FA           MOV     R2,A
   \   000323   7901         MOV     R1,#0x1
   \   000325   7404         MOV     A,#0x4
   \   000327   12....       LCALL   ?XSTACK_DISP0_8
   \   00032A   E0           MOVX    A,@DPTR
   \   00032B   F8           MOV     R0,A
   \   00032C   A3           INC     DPTR
   \   00032D   E0           MOVX    A,@DPTR
   \   00032E   F583         MOV     DPH,A
   \   000330   8882         MOV     DPL,R0
   \   000332   A3           INC     DPTR
   \   000333   A3           INC     DPTR
   \   000334   A3           INC     DPTR
   \   000335   A3           INC     DPTR
   \   000336   E0           MOVX    A,@DPTR
   \   000337   F8           MOV     R0,A
   \   000338   A3           INC     DPTR
   \   000339   E0           MOVX    A,@DPTR
   \   00033A   F583         MOV     DPH,A
   \   00033C   8882         MOV     DPL,R0
   \   00033E   12....       LCALL   ?CALL_IND
   \   000341   7402         MOV     A,#0x2
   \   000343   12....       LCALL   ?XSTACK_DISP0_8
   \   000346   EA           MOV     A,R2
   \   000347   F0           MOVX    @DPTR,A
   \   000348   A3           INC     DPTR
   \   000349   EB           MOV     A,R3
   \   00034A   F0           MOVX    @DPTR,A
    854                  allocated = TRUE;
   \   00034B   740A         MOV     A,#0xa
   \   00034D   12....       LCALL   ?XSTACK_DISP0_8
   \   000350   7401         MOV     A,#0x1
   \   000352   F0           MOVX    @DPTR,A
   \   000353   8031         SJMP    ??ZDO_ProcessMatchDescReq_13
    855                }
    856                else
    857                {
    858                  sDesc = epDesc->epDesc->simpleDesc;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000355   7404         MOV     A,#0x4
   \   000357   12....       LCALL   ?XSTACK_DISP0_8
   \   00035A   E0           MOVX    A,@DPTR
   \   00035B   F8           MOV     R0,A
   \   00035C   A3           INC     DPTR
   \   00035D   E0           MOVX    A,@DPTR
   \   00035E   F583         MOV     DPH,A
   \   000360   8882         MOV     DPL,R0
   \   000362   A3           INC     DPTR
   \   000363   A3           INC     DPTR
   \   000364   E0           MOVX    A,@DPTR
   \   000365   F8           MOV     R0,A
   \   000366   A3           INC     DPTR
   \   000367   E0           MOVX    A,@DPTR
   \   000368   F583         MOV     DPH,A
   \   00036A   8882         MOV     DPL,R0
   \   00036C   A3           INC     DPTR
   \   00036D   A3           INC     DPTR
   \   00036E   A3           INC     DPTR
   \   00036F   E0           MOVX    A,@DPTR
   \   000370   F8           MOV     R0,A
   \   000371   A3           INC     DPTR
   \   000372   E0           MOVX    A,@DPTR
   \   000373   F9           MOV     R1,A
   \   000374   7402         MOV     A,#0x2
   \   000376   12....       LCALL   ?XSTACK_DISP0_8
   \   000379   E8           MOV     A,R0
   \   00037A   F0           MOVX    @DPTR,A
   \   00037B   A3           INC     DPTR
   \   00037C   E9           MOV     A,R1
   \   00037D   F0           MOVX    @DPTR,A
    859                  allocated = FALSE;
   \   00037E   740A         MOV     A,#0xa
   \   000380   12....       LCALL   ?XSTACK_DISP0_8
   \   000383   7400         MOV     A,#0x0
   \   000385   F0           MOVX    @DPTR,A
    860                }
    861          
    862                if ( sDesc && sDesc->AppProfId == profileID )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000386   7402         MOV     A,#0x2
   \   000388   12....       LCALL   ?XSTACK_DISP0_8
   \   00038B   E0           MOVX    A,@DPTR
   \   00038C   F8           MOV     R0,A
   \   00038D   A3           INC     DPTR
   \   00038E   E0           MOVX    A,@DPTR
   \   00038F   F9           MOV     R1,A
   \   000390   E8           MOV     A,R0
   \   000391   49           ORL     A,R1
   \   000392   7003         JNZ     $+5
   \   000394   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   000397   7402         MOV     A,#0x2
   \   000399   12....       LCALL   ?XSTACK_DISP0_8
   \   00039C   E0           MOVX    A,@DPTR
   \   00039D   F8           MOV     R0,A
   \   00039E   A3           INC     DPTR
   \   00039F   E0           MOVX    A,@DPTR
   \   0003A0   F583         MOV     DPH,A
   \   0003A2   8882         MOV     DPL,R0
   \   0003A4   A3           INC     DPTR
   \   0003A5   E0           MOVX    A,@DPTR
   \   0003A6   F8           MOV     R0,A
   \   0003A7   A3           INC     DPTR
   \   0003A8   E0           MOVX    A,@DPTR
   \   0003A9   F9           MOV     R1,A
   \   0003AA   7410         MOV     A,#0x10
   \   0003AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003AF   E0           MOVX    A,@DPTR
   \   0003B0   68           XRL     A,R0
   \   0003B1   7003         JNZ     ??ZDO_ProcessMatchDescReq_15
   \   0003B3   A3           INC     DPTR
   \   0003B4   E0           MOVX    A,@DPTR
   \   0003B5   69           XRL     A,R1
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   0003B6   6003         JZ      $+5
   \   0003B8   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
    863                {
    864                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
   \   0003BB   740E         MOV     A,#0xe
   \   0003BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C0   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   0003C2   F0           MOVX    @DPTR,A
   \   0003C3   A3           INC     DPTR
   \   0003C4   74..         MOV     A,#(ZDOBuildBuf >> 8) & 0xff
   \   0003C6   F0           MOVX    @DPTR,A
    865          
    866                  // Are there matching input clusters?
    867                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    868                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    869                      // Are there matching output clusters?
    870                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    871                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
   \   0003C7                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0003C7   7402         MOV     A,#0x2
   \   0003C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CC   E0           MOVX    A,@DPTR
   \   0003CD   F8           MOV     R0,A
   \   0003CE   A3           INC     DPTR
   \   0003CF   E0           MOVX    A,@DPTR
   \   0003D0   C8           XCH     A,R0
   \   0003D1   2407         ADD     A,#0x7
   \   0003D3   F582         MOV     DPL,A
   \   0003D5   C8           XCH     A,R0
   \   0003D6   3400         ADDC    A,#0x0
   \   0003D8   F583         MOV     DPH,A
   \   0003DA   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003DD   7404         MOV     A,#0x4
   \   0003DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   F8           MOV     R0,A
   \   0003E4   A3           INC     DPTR
   \   0003E5   E0           MOVX    A,@DPTR
   \   0003E6   C8           XCH     A,R0
   \   0003E7   2406         ADD     A,#0x6
   \   0003E9   F582         MOV     DPL,A
   \   0003EB   C8           XCH     A,R0
   \   0003EC   3400         ADDC    A,#0x0
   \   0003EE   F583         MOV     DPH,A
   \   0003F0   E0           MOVX    A,@DPTR
   \   0003F1   FC           MOV     R4,A
   \   0003F2   740A         MOV     A,#0xa
   \   0003F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F7   E0           MOVX    A,@DPTR
   \   0003F8   FA           MOV     R2,A
   \   0003F9   A3           INC     DPTR
   \   0003FA   E0           MOVX    A,@DPTR
   \   0003FB   FB           MOV     R3,A
   \   0003FC   A9..         MOV     R1,?V3
   \   0003FE   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000401   7402         MOV     A,#0x2
   \   000403   12....       LCALL   ?DEALLOC_XSTACK8
   \   000406   E9           MOV     A,R1
   \   000407   7045         JNZ     ??ZDO_ProcessMatchDescReq_16
   \   000409                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000409   7402         MOV     A,#0x2
   \   00040B   12....       LCALL   ?XSTACK_DISP0_8
   \   00040E   E0           MOVX    A,@DPTR
   \   00040F   F8           MOV     R0,A
   \   000410   A3           INC     DPTR
   \   000411   E0           MOVX    A,@DPTR
   \   000412   C8           XCH     A,R0
   \   000413   240A         ADD     A,#0xa
   \   000415   F582         MOV     DPL,A
   \   000417   C8           XCH     A,R0
   \   000418   3400         ADDC    A,#0x0
   \   00041A   F583         MOV     DPH,A
   \   00041C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00041F   7404         MOV     A,#0x4
   \   000421   12....       LCALL   ?XSTACK_DISP0_8
   \   000424   E0           MOVX    A,@DPTR
   \   000425   F8           MOV     R0,A
   \   000426   A3           INC     DPTR
   \   000427   E0           MOVX    A,@DPTR
   \   000428   C8           XCH     A,R0
   \   000429   2409         ADD     A,#0x9
   \   00042B   F582         MOV     DPL,A
   \   00042D   C8           XCH     A,R0
   \   00042E   3400         ADDC    A,#0x0
   \   000430   F583         MOV     DPH,A
   \   000432   E0           MOVX    A,@DPTR
   \   000433   FC           MOV     R4,A
   \   000434   7408         MOV     A,#0x8
   \   000436   12....       LCALL   ?XSTACK_DISP0_8
   \   000439   E0           MOVX    A,@DPTR
   \   00043A   FA           MOV     R2,A
   \   00043B   A3           INC     DPTR
   \   00043C   E0           MOVX    A,@DPTR
   \   00043D   FB           MOV     R3,A
   \   00043E   A9..         MOV     R1,?V6
   \   000440   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000443   7402         MOV     A,#0x2
   \   000445   12....       LCALL   ?DEALLOC_XSTACK8
   \   000448   E9           MOV     A,R1
   \   000449   7003         JNZ     $+5
   \   00044B   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
    872                  {
    873                    // Notify the endpoint of the match.
    874                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   00044E   75F002       MOV     B,#0x2
   \   000451   AA..         MOV     R2,?V6
   \   000453   7B00         MOV     R3,#0x0
   \   000455   A8..         MOV     R0,?V3
   \   000457   7900         MOV     R1,#0x0
   \   000459   EA           MOV     A,R2
   \   00045A   28           ADD     A,R0
   \   00045B   F8           MOV     R0,A
   \   00045C   EB           MOV     A,R3
   \   00045D   39           ADDC    A,R1
   \   00045E   F9           MOV     R1,A
   \   00045F   E8           MOV     A,R0
   \   000460   A4           MUL     AB
   \   000461   240A         ADD     A,#0xa
   \   000463   C0E0         PUSH    A
   \   000465   740B         MOV     A,#0xb
   \   000467   12....       LCALL   ?XSTACK_DISP0_8
   \   00046A   D0E0         POP     A
   \   00046C   F0           MOVX    @DPTR,A
    875                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
   \   00046D                ; Setup parameters for call to function osal_msg_allocate
   \   00046D   740B         MOV     A,#0xb
   \   00046F   12....       LCALL   ?XSTACK_DISP0_8
   \   000472   E0           MOVX    A,@DPTR
   \   000473   FA           MOV     R2,A
   \   000474   7B00         MOV     R3,#0x0
   \   000476   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000479   8A..         MOV     ?V0,R2
   \   00047B   8B..         MOV     ?V1,R3
   \   00047D   85....       MOV     ?V4,?V0
   \   000480   85....       MOV     ?V5,?V1
    876          
    877                    if (pRspSent)
   \   000483   E5..         MOV     A,?V4
   \   000485   45..         ORL     A,?V5
   \   000487   7003         JNZ     $+5
   \   000489   02....       LJMP    ??ZDO_ProcessMatchDescReq_17 & 0xFFFF
    878                    {
    879                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
   \   00048C   85..82       MOV     DPL,?V4
   \   00048F   85..83       MOV     DPH,?V5
   \   000492   74D2         MOV     A,#-0x2e
   \   000494   F0           MOVX    @DPTR,A
    880                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
   \   000495   85..82       MOV     DPL,?XSP + 0
   \   000498   85..83       MOV     DPH,?XSP + 1
   \   00049B   E0           MOVX    A,@DPTR
   \   00049C   F8           MOV     R0,A
   \   00049D   A3           INC     DPTR
   \   00049E   E0           MOVX    A,@DPTR
   \   00049F   F583         MOV     DPH,A
   \   0004A1   8882         MOV     DPL,R0
   \   0004A3   A3           INC     DPTR
   \   0004A4   A3           INC     DPTR
   \   0004A5   E0           MOVX    A,@DPTR
   \   0004A6   F8           MOV     R0,A
   \   0004A7   A3           INC     DPTR
   \   0004A8   E0           MOVX    A,@DPTR
   \   0004A9   F9           MOV     R1,A
   \   0004AA   85..82       MOV     DPL,?V4
   \   0004AD   85..83       MOV     DPH,?V5
   \   0004B0   A3           INC     DPTR
   \   0004B1   A3           INC     DPTR
   \   0004B2   E8           MOV     A,R0
   \   0004B3   F0           MOVX    @DPTR,A
   \   0004B4   A3           INC     DPTR
   \   0004B5   E9           MOV     A,R1
   \   0004B6   F0           MOVX    @DPTR,A
    881                      pRspSent->numInClusters = numInClusters;
   \   0004B7   E5..         MOV     A,?V3
   \   0004B9   C0E0         PUSH    A
   \   0004BB   85..82       MOV     DPL,?V4
   \   0004BE   85..83       MOV     DPH,?V5
   \   0004C1   A3           INC     DPTR
   \   0004C2   A3           INC     DPTR
   \   0004C3   A3           INC     DPTR
   \   0004C4   A3           INC     DPTR
   \   0004C5   D0E0         POP     A
   \   0004C7   F0           MOVX    @DPTR,A
    882                      pRspSent->numOutClusters = numOutClusters;
   \   0004C8   E5..         MOV     A,?V6
   \   0004CA   C0E0         PUSH    A
   \   0004CC   85..82       MOV     DPL,?V4
   \   0004CF   85..83       MOV     DPH,?V5
   \   0004D2   A3           INC     DPTR
   \   0004D3   A3           INC     DPTR
   \   0004D4   A3           INC     DPTR
   \   0004D5   A3           INC     DPTR
   \   0004D6   A3           INC     DPTR
   \   0004D7   A3           INC     DPTR
   \   0004D8   A3           INC     DPTR
   \   0004D9   D0E0         POP     A
   \   0004DB   F0           MOVX    @DPTR,A
    883          
    884                      if (numInClusters)
   \   0004DC   E5..         MOV     A,?V3
   \   0004DE   6060         JZ      ??ZDO_ProcessMatchDescReq_18
    885                      {
    886                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
   \   0004E0   E5..         MOV     A,?V4
   \   0004E2   240A         ADD     A,#0xa
   \   0004E4   F8           MOV     R0,A
   \   0004E5   E4           CLR     A
   \   0004E6   35..         ADDC    A,?V5
   \   0004E8   F9           MOV     R1,A
   \   0004E9   85..82       MOV     DPL,?V4
   \   0004EC   85..83       MOV     DPH,?V5
   \   0004EF   A3           INC     DPTR
   \   0004F0   A3           INC     DPTR
   \   0004F1   A3           INC     DPTR
   \   0004F2   A3           INC     DPTR
   \   0004F3   A3           INC     DPTR
   \   0004F4   E8           MOV     A,R0
   \   0004F5   F0           MOVX    @DPTR,A
   \   0004F6   A3           INC     DPTR
   \   0004F7   E9           MOV     A,R1
   \   0004F8   F0           MOVX    @DPTR,A
    887                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
   \   0004F9                ; Setup parameters for call to function osal_memcpy
   \   0004F9   7408         MOV     A,#0x8
   \   0004FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0004FE   E0           MOVX    A,@DPTR
   \   0004FF   F5..         MOV     ?V0,A
   \   000501   A3           INC     DPTR
   \   000502   E0           MOVX    A,@DPTR
   \   000503   F5..         MOV     ?V1,A
   \   000505   75..00       MOV     ?V2,#0x0
   \   000508   78..         MOV     R0,#?V0
   \   00050A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00050D   AC..         MOV     R4,?V3
   \   00050F   7D00         MOV     R5,#0x0
   \   000511   EC           MOV     A,R4
   \   000512   75F002       MOV     B,#0x2
   \   000515   A4           MUL     AB
   \   000516   CC           XCH     A,R4
   \   000517   A8F0         MOV     R0,B
   \   000519   75F000       MOV     B,#0x0
   \   00051C   A4           MUL     AB
   \   00051D   28           ADD     A,R0
   \   00051E   F8           MOV     R0,A
   \   00051F   75F002       MOV     B,#0x2
   \   000522   ED           MOV     A,R5
   \   000523   A4           MUL     AB
   \   000524   28           ADD     A,R0
   \   000525   FD           MOV     R5,A
   \   000526   85..82       MOV     DPL,?V4
   \   000529   85..83       MOV     DPH,?V5
   \   00052C   A3           INC     DPTR
   \   00052D   A3           INC     DPTR
   \   00052E   A3           INC     DPTR
   \   00052F   A3           INC     DPTR
   \   000530   A3           INC     DPTR
   \   000531   E0           MOVX    A,@DPTR
   \   000532   FA           MOV     R2,A
   \   000533   A3           INC     DPTR
   \   000534   E0           MOVX    A,@DPTR
   \   000535   FB           MOV     R3,A
   \   000536   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000539   7403         MOV     A,#0x3
   \   00053B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00053E   8012         SJMP    ??ZDO_ProcessMatchDescReq_19
    888                      }
    889                      else
    890                      {
    891                        pRspSent->pInClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000540   85..82       MOV     DPL,?V4
   \   000543   85..83       MOV     DPH,?V5
   \   000546   A3           INC     DPTR
   \   000547   A3           INC     DPTR
   \   000548   A3           INC     DPTR
   \   000549   A3           INC     DPTR
   \   00054A   A3           INC     DPTR
   \   00054B   7400         MOV     A,#0x0
   \   00054D   F0           MOVX    @DPTR,A
   \   00054E   A3           INC     DPTR
   \   00054F   7400         MOV     A,#0x0
   \   000551   F0           MOVX    @DPTR,A
    892                      }
    893          
    894                      if (numOutClusters)
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000552   E5..         MOV     A,?V6
   \   000554   7003         JNZ     $+5
   \   000556   02....       LJMP    ??ZDO_ProcessMatchDescReq_20 & 0xFFFF
    895                      {
    896                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
   \   000559   A8..         MOV     R0,?V3
   \   00055B   7900         MOV     R1,#0x0
   \   00055D   E8           MOV     A,R0
   \   00055E   75F002       MOV     B,#0x2
   \   000561   A4           MUL     AB
   \   000562   C8           XCH     A,R0
   \   000563   AAF0         MOV     R2,B
   \   000565   75F000       MOV     B,#0x0
   \   000568   A4           MUL     AB
   \   000569   2A           ADD     A,R2
   \   00056A   FA           MOV     R2,A
   \   00056B   75F002       MOV     B,#0x2
   \   00056E   E9           MOV     A,R1
   \   00056F   A4           MUL     AB
   \   000570   2A           ADD     A,R2
   \   000571   F9           MOV     R1,A
   \   000572   E5..         MOV     A,?V4
   \   000574   28           ADD     A,R0
   \   000575   F8           MOV     R0,A
   \   000576   E5..         MOV     A,?V5
   \   000578   39           ADDC    A,R1
   \   000579   F9           MOV     R1,A
   \   00057A   E8           MOV     A,R0
   \   00057B   240A         ADD     A,#0xa
   \   00057D   F8           MOV     R0,A
   \   00057E   5001         JNC     ??ZDO_ProcessMatchDescReq_21
   \   000580   09           INC     R1
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000581   85..82       MOV     DPL,?V4
   \   000584   85..83       MOV     DPH,?V5
   \   000587   A3           INC     DPTR
   \   000588   A3           INC     DPTR
   \   000589   A3           INC     DPTR
   \   00058A   A3           INC     DPTR
   \   00058B   A3           INC     DPTR
   \   00058C   A3           INC     DPTR
   \   00058D   A3           INC     DPTR
   \   00058E   A3           INC     DPTR
   \   00058F   E8           MOV     A,R0
   \   000590   F0           MOVX    @DPTR,A
   \   000591   A3           INC     DPTR
   \   000592   E9           MOV     A,R1
   \   000593   F0           MOVX    @DPTR,A
    897                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
   \   000594                ; Setup parameters for call to function osal_memcpy
   \   000594   7406         MOV     A,#0x6
   \   000596   12....       LCALL   ?XSTACK_DISP0_8
   \   000599   E0           MOVX    A,@DPTR
   \   00059A   F5..         MOV     ?V0,A
   \   00059C   A3           INC     DPTR
   \   00059D   E0           MOVX    A,@DPTR
   \   00059E   F5..         MOV     ?V1,A
   \   0005A0   75..00       MOV     ?V2,#0x0
   \   0005A3   78..         MOV     R0,#?V0
   \   0005A5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0005A8   AC..         MOV     R4,?V6
   \   0005AA   7D00         MOV     R5,#0x0
   \   0005AC   EC           MOV     A,R4
   \   0005AD   75F002       MOV     B,#0x2
   \   0005B0   A4           MUL     AB
   \   0005B1   CC           XCH     A,R4
   \   0005B2   A8F0         MOV     R0,B
   \   0005B4   75F000       MOV     B,#0x0
   \   0005B7   A4           MUL     AB
   \   0005B8   28           ADD     A,R0
   \   0005B9   F8           MOV     R0,A
   \   0005BA   75F002       MOV     B,#0x2
   \   0005BD   ED           MOV     A,R5
   \   0005BE   A4           MUL     AB
   \   0005BF   28           ADD     A,R0
   \   0005C0   FD           MOV     R5,A
   \   0005C1   85..82       MOV     DPL,?V4
   \   0005C4   85..83       MOV     DPH,?V5
   \   0005C7   A3           INC     DPTR
   \   0005C8   A3           INC     DPTR
   \   0005C9   A3           INC     DPTR
   \   0005CA   A3           INC     DPTR
   \   0005CB   A3           INC     DPTR
   \   0005CC   A3           INC     DPTR
   \   0005CD   A3           INC     DPTR
   \   0005CE   A3           INC     DPTR
   \   0005CF   E0           MOVX    A,@DPTR
   \   0005D0   FA           MOV     R2,A
   \   0005D1   A3           INC     DPTR
   \   0005D2   E0           MOVX    A,@DPTR
   \   0005D3   FB           MOV     R3,A
   \   0005D4   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0005D7   7403         MOV     A,#0x3
   \   0005D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005DC   8015         SJMP    ??ZDO_ProcessMatchDescReq_22
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0005DE   85..82       MOV     DPL,?V4
   \   0005E1   85..83       MOV     DPH,?V5
   \   0005E4   A3           INC     DPTR
   \   0005E5   A3           INC     DPTR
   \   0005E6   A3           INC     DPTR
   \   0005E7   A3           INC     DPTR
   \   0005E8   A3           INC     DPTR
   \   0005E9   A3           INC     DPTR
   \   0005EA   A3           INC     DPTR
   \   0005EB   A3           INC     DPTR
   \   0005EC   7400         MOV     A,#0x0
   \   0005EE   F0           MOVX    @DPTR,A
   \   0005EF   A3           INC     DPTR
   \   0005F0   7400         MOV     A,#0x0
   \   0005F2   F0           MOVX    @DPTR,A
    902                      }
    903          
    904                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0005F3                ; Setup parameters for call to function osal_msg_send
   \   0005F3   AA..         MOV     R2,?V4
   \   0005F5   AB..         MOV     R3,?V5
   \   0005F7   7404         MOV     A,#0x4
   \   0005F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005FC   E0           MOVX    A,@DPTR
   \   0005FD   F8           MOV     R0,A
   \   0005FE   A3           INC     DPTR
   \   0005FF   E0           MOVX    A,@DPTR
   \   000600   F583         MOV     DPH,A
   \   000602   8882         MOV     DPL,R0
   \   000604   A3           INC     DPTR
   \   000605   A3           INC     DPTR
   \   000606   E0           MOVX    A,@DPTR
   \   000607   F8           MOV     R0,A
   \   000608   A3           INC     DPTR
   \   000609   E0           MOVX    A,@DPTR
   \   00060A   F583         MOV     DPH,A
   \   00060C   8882         MOV     DPL,R0
   \   00060E   A3           INC     DPTR
   \   00060F   E0           MOVX    A,@DPTR
   \   000610   F8           MOV     R0,A
   \   000611   A3           INC     DPTR
   \   000612   E0           MOVX    A,@DPTR
   \   000613   F583         MOV     DPH,A
   \   000615   8882         MOV     DPL,R0
   \   000617   E0           MOVX    A,@DPTR
   \   000618   F9           MOV     R1,A
   \   000619   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00061C   E9           MOV     A,R1
    905                    }
    906          
    907                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   00061D   7402         MOV     A,#0x2
   \   00061F   12....       LCALL   ?XSTACK_DISP0_8
   \   000622   E0           MOVX    A,@DPTR
   \   000623   F8           MOV     R0,A
   \   000624   A3           INC     DPTR
   \   000625   E0           MOVX    A,@DPTR
   \   000626   F583         MOV     DPH,A
   \   000628   8882         MOV     DPL,R0
   \   00062A   E0           MOVX    A,@DPTR
   \   00062B   C0E0         PUSH    A
   \   00062D   A8..         MOV     R0,?V7
   \   00062F   7900         MOV     R1,#0x0
   \   000631   740E         MOV     A,#0xe
   \   000633   12....       LCALL   ?XSTACK_DISP0_8
   \   000636   E0           MOVX    A,@DPTR
   \   000637   28           ADD     A,R0
   \   000638   FA           MOV     R2,A
   \   000639   A3           INC     DPTR
   \   00063A   E0           MOVX    A,@DPTR
   \   00063B   39           ADDC    A,R1
   \   00063C   8A82         MOV     DPL,R2
   \   00063E   F583         MOV     DPH,A
   \   000640   D0E0         POP     A
   \   000642   F0           MOVX    @DPTR,A
   \   000643   05..         INC     ?V7
    908                  }
    909                }
    910          
    911                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000645   740A         MOV     A,#0xa
   \   000647   12....       LCALL   ?XSTACK_DISP0_8
   \   00064A   E0           MOVX    A,@DPTR
   \   00064B   600D         JZ      ??ZDO_ProcessMatchDescReq_11
    912                {
    913                  osal_mem_free( sDesc );
   \   00064D                ; Setup parameters for call to function osal_mem_free
   \   00064D   7402         MOV     A,#0x2
   \   00064F   12....       LCALL   ?XSTACK_DISP0_8
   \   000652   E0           MOVX    A,@DPTR
   \   000653   FA           MOV     R2,A
   \   000654   A3           INC     DPTR
   \   000655   E0           MOVX    A,@DPTR
   \   000656   FB           MOV     R3,A
   \   000657   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    914                }
    915              }
    916              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00065A   7404         MOV     A,#0x4
   \   00065C   12....       LCALL   ?XSTACK_DISP0_8
   \   00065F   E0           MOVX    A,@DPTR
   \   000660   F8           MOV     R0,A
   \   000661   A3           INC     DPTR
   \   000662   E0           MOVX    A,@DPTR
   \   000663   F583         MOV     DPH,A
   \   000665   8882         MOV     DPL,R0
   \   000667   E0           MOVX    A,@DPTR
   \   000668   F8           MOV     R0,A
   \   000669   A3           INC     DPTR
   \   00066A   E0           MOVX    A,@DPTR
   \   00066B   F9           MOV     R1,A
   \   00066C   7404         MOV     A,#0x4
   \   00066E   12....       LCALL   ?XSTACK_DISP0_8
   \   000671   E8           MOV     A,R0
   \   000672   F0           MOVX    @DPTR,A
   \   000673   A3           INC     DPTR
   \   000674   E9           MOV     A,R1
   \   000675   F0           MOVX    @DPTR,A
   \   000676   02....       LJMP    ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
    917            }
    918          
    919            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000679   E5..         MOV     A,?V7
   \   00067B   6070         JZ      ??ZDO_ProcessMatchDescReq_23
    920            {
    921              // Send the message if at least one match found.
    922              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    923                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00067D                ; Setup parameters for call to function ZDP_EPRsp
   \   00067D   85..82       MOV     DPL,?XSP + 0
   \   000680   85..83       MOV     DPH,?XSP + 1
   \   000683   E0           MOVX    A,@DPTR
   \   000684   F8           MOV     R0,A
   \   000685   A3           INC     DPTR
   \   000686   E0           MOVX    A,@DPTR
   \   000687   C8           XCH     A,R0
   \   000688   240E         ADD     A,#0xe
   \   00068A   F582         MOV     DPL,A
   \   00068C   C8           XCH     A,R0
   \   00068D   3400         ADDC    A,#0x0
   \   00068F   F583         MOV     DPH,A
   \   000691   E0           MOVX    A,@DPTR
   \   000692   F5..         MOV     ?V0,A
   \   000694   78..         MOV     R0,#?V0
   \   000696   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000699   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00069C   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00069F   78..         MOV     R0,#?V0
   \   0006A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0006A4   E5..         MOV     A,?V7
   \   0006A6   F5..         MOV     ?V0,A
   \   0006A8   78..         MOV     R0,#?V0
   \   0006AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0006AD   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0006B0   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0006B3   75..00       MOV     ?V0,#0x0
   \   0006B6   78..         MOV     R0,#?V0
   \   0006B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0006BB   7407         MOV     A,#0x7
   \   0006BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0006C0   E0           MOVX    A,@DPTR
   \   0006C1   2402         ADD     A,#0x2
   \   0006C3   FC           MOV     R4,A
   \   0006C4   A3           INC     DPTR
   \   0006C5   E0           MOVX    A,@DPTR
   \   0006C6   3400         ADDC    A,#0x0
   \   0006C8   FD           MOV     R5,A
   \   0006C9   7407         MOV     A,#0x7
   \   0006CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0006CE   E0           MOVX    A,@DPTR
   \   0006CF   F8           MOV     R0,A
   \   0006D0   A3           INC     DPTR
   \   0006D1   E0           MOVX    A,@DPTR
   \   0006D2   C8           XCH     A,R0
   \   0006D3   240F         ADD     A,#0xf
   \   0006D5   F582         MOV     DPL,A
   \   0006D7   C8           XCH     A,R0
   \   0006D8   3400         ADDC    A,#0x0
   \   0006DA   F583         MOV     DPH,A
   \   0006DC   E0           MOVX    A,@DPTR
   \   0006DD   F9           MOV     R1,A
   \   0006DE   7A06         MOV     R2,#0x6
   \   0006E0   7B80         MOV     R3,#-0x80
   \   0006E2   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0006E5   7407         MOV     A,#0x7
   \   0006E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0006EA   E9           MOV     A,R1
   \   0006EB   807D         SJMP    ??ZDO_ProcessMatchDescReq_24
    924              {
    925          #if defined( LCD_SUPPORTED )
    926                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    927          #endif
    928              }
    929            }
    930            else
    931            {
    932              // No match found
    933              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0006ED                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0006ED   740C         MOV     A,#0xc
   \   0006EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0006F2   E0           MOVX    A,@DPTR
   \   0006F3   FA           MOV     R2,A
   \   0006F4   A3           INC     DPTR
   \   0006F5   E0           MOVX    A,@DPTR
   \   0006F6   FB           MOV     R3,A
   \   0006F7   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0006FA   E9           MOV     A,R1
   \   0006FB   706D         JNZ     ??ZDO_ProcessMatchDescReq_24
    934              {
    935                // send response message with match length = 0
    936                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    937                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   0006FD                ; Setup parameters for call to function ZDP_EPRsp
   \   0006FD   85..82       MOV     DPL,?XSP + 0
   \   000700   85..83       MOV     DPH,?XSP + 1
   \   000703   E0           MOVX    A,@DPTR
   \   000704   F8           MOV     R0,A
   \   000705   A3           INC     DPTR
   \   000706   E0           MOVX    A,@DPTR
   \   000707   C8           XCH     A,R0
   \   000708   240E         ADD     A,#0xe
   \   00070A   F582         MOV     DPL,A
   \   00070C   C8           XCH     A,R0
   \   00070D   3400         ADDC    A,#0x0
   \   00070F   F583         MOV     DPH,A
   \   000711   E0           MOVX    A,@DPTR
   \   000712   F5..         MOV     ?V0,A
   \   000714   78..         MOV     R0,#?V0
   \   000716   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000719   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00071C   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00071F   78..         MOV     R0,#?V0
   \   000721   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000724   75..00       MOV     ?V0,#0x0
   \   000727   78..         MOV     R0,#?V0
   \   000729   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00072C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00072F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000732   75..00       MOV     ?V0,#0x0
   \   000735   78..         MOV     R0,#?V0
   \   000737   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00073A   7407         MOV     A,#0x7
   \   00073C   12....       LCALL   ?XSTACK_DISP0_8
   \   00073F   E0           MOVX    A,@DPTR
   \   000740   2402         ADD     A,#0x2
   \   000742   FC           MOV     R4,A
   \   000743   A3           INC     DPTR
   \   000744   E0           MOVX    A,@DPTR
   \   000745   3400         ADDC    A,#0x0
   \   000747   FD           MOV     R5,A
   \   000748   7407         MOV     A,#0x7
   \   00074A   12....       LCALL   ?XSTACK_DISP0_8
   \   00074D   E0           MOVX    A,@DPTR
   \   00074E   F8           MOV     R0,A
   \   00074F   A3           INC     DPTR
   \   000750   E0           MOVX    A,@DPTR
   \   000751   C8           XCH     A,R0
   \   000752   240F         ADD     A,#0xf
   \   000754   F582         MOV     DPL,A
   \   000756   C8           XCH     A,R0
   \   000757   3400         ADDC    A,#0x0
   \   000759   F583         MOV     DPH,A
   \   00075B   E0           MOVX    A,@DPTR
   \   00075C   F9           MOV     R1,A
   \   00075D   7A06         MOV     R2,#0x6
   \   00075F   7B80         MOV     R3,#-0x80
   \   000761   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000764   7407         MOV     A,#0x7
   \   000766   12....       LCALL   ?DEALLOC_XSTACK8
   \   000769   E9           MOV     A,R1
    938          #if defined( LCD_SUPPORTED )
    939                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
    940          #endif
    941              }
    942              else
    943              {
    944                // no response mesage for broadcast message
    945          #if defined( LCD_SUPPORTED )
    946                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    947          #endif
    948              }
    949            }
    950          
    951            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   00076A   7408         MOV     A,#0x8
   \   00076C   12....       LCALL   ?XSTACK_DISP0_8
   \   00076F   E0           MOVX    A,@DPTR
   \   000770   F8           MOV     R0,A
   \   000771   A3           INC     DPTR
   \   000772   E0           MOVX    A,@DPTR
   \   000773   F9           MOV     R1,A
   \   000774   E8           MOV     A,R0
   \   000775   49           ORL     A,R1
   \   000776   600D         JZ      ??ZDO_ProcessMatchDescReq_25
    952            {
    953              osal_mem_free( inClusters );
   \   000778                ; Setup parameters for call to function osal_mem_free
   \   000778   7408         MOV     A,#0x8
   \   00077A   12....       LCALL   ?XSTACK_DISP0_8
   \   00077D   E0           MOVX    A,@DPTR
   \   00077E   FA           MOV     R2,A
   \   00077F   A3           INC     DPTR
   \   000780   E0           MOVX    A,@DPTR
   \   000781   FB           MOV     R3,A
   \   000782   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    954            }
    955          
    956            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   000785   7406         MOV     A,#0x6
   \   000787   12....       LCALL   ?XSTACK_DISP0_8
   \   00078A   E0           MOVX    A,@DPTR
   \   00078B   F8           MOV     R0,A
   \   00078C   A3           INC     DPTR
   \   00078D   E0           MOVX    A,@DPTR
   \   00078E   F9           MOV     R1,A
   \   00078F   E8           MOV     A,R0
   \   000790   49           ORL     A,R1
   \   000791   600D         JZ      ??ZDO_ProcessMatchDescReq_2
    957            {
    958              osal_mem_free( outClusters );
   \   000793                ; Setup parameters for call to function osal_mem_free
   \   000793   7406         MOV     A,#0x6
   \   000795   12....       LCALL   ?XSTACK_DISP0_8
   \   000798   E0           MOVX    A,@DPTR
   \   000799   FA           MOV     R2,A
   \   00079A   A3           INC     DPTR
   \   00079B   E0           MOVX    A,@DPTR
   \   00079C   FB           MOV     R3,A
   \   00079D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    959            }
    960          }
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   0007A0   7412         MOV     A,#0x12
   \   0007A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0007A5   7F08         MOV     R7,#0x8
   \   0007A7   02....       LJMP    ?BANKED_LEAVE_XDATA
    961          
    962          /*********************************************************************
    963           * @fn      ZDO_ProcessBindUnbindReq()
    964           *
    965           * @brief   Called to process a Bind or Unbind Request message.
    966           *
    967           * @param   inMsg  - incoming message (request)
    968           * @param   pReq - place to put parsed information
    969           *
    970           * @return  none
    971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    972          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    973          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    974            zAddrType_t SourceAddr;       // Binding Source addres
    975            byte bindStat;
    976          
    977            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    978            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    979          
    980            // If the local device is not the primary binding cache
    981            // check the src address of the bind request.
    982            // If it is not the local device's extended address
    983            // discard the request.
    984            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    985                  (pReq->dstAddress.addrMode != Addr64Bit &&
    986                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000026                ; Setup parameters for call to function NLME_GetExtAddr
   \   000026   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000029   8A..         MOV     ?V2,R2
   \   00002B   8B..         MOV     ?V3,R3
   \   00002D   AC..         MOV     R4,?V2
   \   00002F   AD..         MOV     R5,?V3
   \   000031                ; Setup parameters for call to function sAddrExtCmp
   \   000031   7403         MOV     A,#0x3
   \   000033   12....       LCALL   ?XSTACK_DISP101_8
   \   000036   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000039   E9           MOV     A,R1
   \   00003A   601C         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   00003C   EE           MOV     A,R6
   \   00003D   2413         ADD     A,#0x13
   \   00003F   F582         MOV     DPL,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   601A         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00004A   EE           MOV     A,R6
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   F583         MOV     DPH,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6401         XRL     A,#0x1
   \   000056   600C         JZ      ??ZDO_ProcessBindUnbindReq_1
    987            {
    988              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   7484         MOV     A,#-0x7c
   \   000060   F0           MOVX    @DPTR,A
   \   000061   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    989            }
    990            else
    991            {
    992              // Check source & destination endpoints
    993              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    994                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    995                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   603B         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C3           CLR     C
   \   000081   94F1         SUBB    A,#-0xf
   \   000083   5029         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   000085   EE           MOV     A,R6
   \   000086   2413         ADD     A,#0x13
   \   000088   F582         MOV     DPL,A
   \   00008A   E4           CLR     A
   \   00008B   3F           ADDC    A,R7
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   6403         XRL     A,#0x3
   \   000091   7027         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000093   EE           MOV     A,R6
   \   000094   2414         ADD     A,#0x14
   \   000096   F582         MOV     DPL,A
   \   000098   E4           CLR     A
   \   000099   3F           ADDC    A,R7
   \   00009A   F583         MOV     DPH,A
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   600F         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00009F   EE           MOV     A,R6
   \   0000A0   2414         ADD     A,#0x14
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   E4           CLR     A
   \   0000A5   3F           ADDC    A,R7
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   C3           CLR     C
   \   0000AA   94F1         SUBB    A,#-0xf
   \   0000AC   400C         JC      ??ZDO_ProcessBindUnbindReq_4
    996              {
    997                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   0000AE   85..82       MOV     DPL,?XSP + 0
   \   0000B1   85..83       MOV     DPH,?XSP + 1
   \   0000B4   7482         MOV     A,#-0x7e
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    998              }
    999              else
   1000              {
   1001                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   0000BA   E5..         MOV     A,?V0
   \   0000BC   240C         ADD     A,#0xc
   \   0000BE   F582         MOV     DPL,A
   \   0000C0   E4           CLR     A
   \   0000C1   35..         ADDC    A,?V1
   \   0000C3   F583         MOV     DPH,A
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   6421         XRL     A,#0x21
   \   0000C8   7004         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   6400         XRL     A,#0x0
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000CE   6003         JZ      $+5
   \   0000D0   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1002                {
   1003                  // Assume the table is full
   1004                  bindStat = ZDP_TABLE_FULL;
   \   0000D3   85..82       MOV     DPL,?XSP + 0
   \   0000D6   85..83       MOV     DPH,?XSP + 1
   \   0000D9   748C         MOV     A,#-0x74
   \   0000DB   F0           MOVX    @DPTR,A
   1005          
   1006          #if defined( APP_TP ) || defined( APP_TP2 )
   1007                  // For ZigBee Conformance Testing
   1008                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1009          #endif
   1010                  {
   1011                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1012                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000DC                ; Setup parameters for call to function APSME_BindRequest
   \   0000DC   EE           MOV     A,R6
   \   0000DD   2414         ADD     A,#0x14
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   E4           CLR     A
   \   0000E2   3F           ADDC    A,R7
   \   0000E3   F583         MOV     DPH,A
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F5..         MOV     ?V2,A
   \   0000E8   78..         MOV     R0,#?V2
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000ED   EE           MOV     A,R6
   \   0000EE   240B         ADD     A,#0xb
   \   0000F0   FC           MOV     R4,A
   \   0000F1   E4           CLR     A
   \   0000F2   3F           ADDC    A,R7
   \   0000F3   FD           MOV     R5,A
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   FA           MOV     R2,A
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   FB           MOV     R3,A
   \   000106   8E82         MOV     DPL,R6
   \   000108   8F83         MOV     DPH,R7
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F9           MOV     R1,A
   \   000114   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000117   7401         MOV     A,#0x1
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011C   E9           MOV     A,R1
   \   00011D   6003         JZ      $+5
   \   00011F   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1013                    {
   1014                      uint16 nwkAddr;
   1015          
   1016                      // valid entry
   1017                      bindStat = ZDP_SUCCESS;
   \   000122   85..82       MOV     DPL,?XSP + 0
   \   000125   85..83       MOV     DPH,?XSP + 1
   \   000128   7400         MOV     A,#0x0
   \   00012A   F0           MOVX    @DPTR,A
   1018          
   1019                      // Notify to save info into NV
   1020                      ZDApp_NVUpdate();
   \   00012B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00012B   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1021          
   1022                      // Check for the destination address
   1023                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   00012E   EE           MOV     A,R6
   \   00012F   2413         ADD     A,#0x13
   \   000131   F582         MOV     DPL,A
   \   000133   E4           CLR     A
   \   000134   3F           ADDC    A,R7
   \   000135   F583         MOV     DPH,A
   \   000137   E0           MOVX    A,@DPTR
   \   000138   6403         XRL     A,#0x3
   \   00013A   707F         JNZ     ??ZDO_ProcessBindUnbindReq_2
   1024                      {
   1025                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   00013C                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00013C   7401         MOV     A,#0x1
   \   00013E   12....       LCALL   ?XSTACK_DISP102_8
   \   000141   EE           MOV     A,R6
   \   000142   240B         ADD     A,#0xb
   \   000144   FA           MOV     R2,A
   \   000145   E4           CLR     A
   \   000146   3F           ADDC    A,R7
   \   000147   FB           MOV     R3,A
   \   000148   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00014B   E9           MOV     A,R1
   \   00014C   706D         JNZ     ??ZDO_ProcessBindUnbindReq_2
   1026                        {
   1027                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00014E                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00014E   7D00         MOV     R5,#0x0
   \   000150   7C00         MOV     R4,#0x0
   \   000152   7900         MOV     R1,#0x0
   \   000154   EE           MOV     A,R6
   \   000155   240B         ADD     A,#0xb
   \   000157   FA           MOV     R2,A
   \   000158   E4           CLR     A
   \   000159   3F           ADDC    A,R7
   \   00015A   FB           MOV     R3,A
   \   00015B   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   00015E   E9           MOV     A,R1
   \   00015F   805A         SJMP    ??ZDO_ProcessBindUnbindReq_2
   1028                        }
   1029                      }
   1030                    }
   1031                  }
   1032                }
   1033                else // Unbind_req
   1034                {
   1035                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1036                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000161                ; Setup parameters for call to function APSME_UnBindRequest
   \   000161   EE           MOV     A,R6
   \   000162   2414         ADD     A,#0x14
   \   000164   F582         MOV     DPL,A
   \   000166   E4           CLR     A
   \   000167   3F           ADDC    A,R7
   \   000168   F583         MOV     DPH,A
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F5..         MOV     ?V2,A
   \   00016D   78..         MOV     R0,#?V2
   \   00016F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000172   EE           MOV     A,R6
   \   000173   240B         ADD     A,#0xb
   \   000175   FC           MOV     R4,A
   \   000176   E4           CLR     A
   \   000177   3F           ADDC    A,R7
   \   000178   FD           MOV     R5,A
   \   000179   8E82         MOV     DPL,R6
   \   00017B   8F83         MOV     DPH,R7
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   E0           MOVX    A,@DPTR
   \   000187   FA           MOV     R2,A
   \   000188   A3           INC     DPTR
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   FB           MOV     R3,A
   \   00018B   8E82         MOV     DPL,R6
   \   00018D   8F83         MOV     DPH,R7
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   F9           MOV     R1,A
   \   000199   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   00019C   7401         MOV     A,#0x1
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A1   E9           MOV     A,R1
   \   0001A2   700E         JNZ     ??ZDO_ProcessBindUnbindReq_7
   1037                  {
   1038                    bindStat = ZDP_SUCCESS;
   \   0001A4   85..82       MOV     DPL,?XSP + 0
   \   0001A7   85..83       MOV     DPH,?XSP + 1
   \   0001AA   7400         MOV     A,#0x0
   \   0001AC   F0           MOVX    @DPTR,A
   1039          
   1040                    // Notify to save info into NV
   1041                    ZDApp_NVUpdate();
   \   0001AD                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0001AD   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   0001B0   8009         SJMP    ??ZDO_ProcessBindUnbindReq_2
   1042                  }
   1043                  else
   1044                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0001B2   85..82       MOV     DPL,?XSP + 0
   \   0001B5   85..83       MOV     DPH,?XSP + 1
   \   0001B8   7488         MOV     A,#-0x78
   \   0001BA   F0           MOVX    @DPTR,A
   1045                }
   1046              }
   1047            }
   1048          
   1049            // Send back a response message
   1050            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1051                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1052                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   0001BB                ; Setup parameters for call to function ZDP_SendData
   \   0001BB   E5..         MOV     A,?V0
   \   0001BD   240E         ADD     A,#0xe
   \   0001BF   F582         MOV     DPL,A
   \   0001C1   E4           CLR     A
   \   0001C2   35..         ADDC    A,?V1
   \   0001C4   F583         MOV     DPH,A
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   F5..         MOV     ?V2,A
   \   0001C9   78..         MOV     R0,#?V2
   \   0001CB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CE   7401         MOV     A,#0x1
   \   0001D0   12....       LCALL   ?XSTACK_DISP100_8
   \   0001D3   88..         MOV     ?V2,R0
   \   0001D5   89..         MOV     ?V3,R1
   \   0001D7   78..         MOV     R0,#?V2
   \   0001D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DC   E5..         MOV     A,?V0
   \   0001DE   240C         ADD     A,#0xc
   \   0001E0   F582         MOV     DPL,A
   \   0001E2   E4           CLR     A
   \   0001E3   35..         ADDC    A,?V1
   \   0001E5   F583         MOV     DPH,A
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   4400         ORL     A,#0x0
   \   0001EA   F5..         MOV     ?V2,A
   \   0001EC   A3           INC     DPTR
   \   0001ED   E0           MOVX    A,@DPTR
   \   0001EE   4480         ORL     A,#0x80
   \   0001F0   F5..         MOV     ?V3,A
   \   0001F2   78..         MOV     R0,#?V2
   \   0001F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F7   7901         MOV     R1,#0x1
   \   0001F9   E5..         MOV     A,?V0
   \   0001FB   2402         ADD     A,#0x2
   \   0001FD   FC           MOV     R4,A
   \   0001FE   E4           CLR     A
   \   0001FF   35..         ADDC    A,?V1
   \   000201   FD           MOV     R5,A
   \   000202   E5..         MOV     A,?V0
   \   000204   240F         ADD     A,#0xf
   \   000206   FA           MOV     R2,A
   \   000207   E4           CLR     A
   \   000208   35..         ADDC    A,?V1
   \   00020A   FB           MOV     R3,A
   \   00020B   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00020E   7405         MOV     A,#0x5
   \   000210   12....       LCALL   ?DEALLOC_XSTACK8
   \   000213   E9           MOV     A,R1
   1053          }
   \   000214   740C         MOV     A,#0xc
   \   000216   12....       LCALL   ?DEALLOC_XSTACK8
   \   000219   7F04         MOV     R7,#0x4
   \   00021B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1054          
   1055          /*********************************************************************
   1056           * @fn      ZDO_UpdateAddrManager
   1057           *
   1058           * @brief   Update the Address Manager.
   1059           *
   1060           * @param   nwkAddr - network address
   1061           * @param   extAddr - extended address
   1062           *
   1063           * @return  none
   1064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1065          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1066          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   1067            AddrMgrEntry_t addrEntry;
   1068          
   1069            // Update the address manager
   1070            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
   1071            addrEntry.nwkAddr = nwkAddr;
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EE           MOV     A,R6
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EF           MOV     A,R7
   \   000024   F0           MOVX    @DPTR,A
   1072            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \   000025                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000025   AC..         MOV     R4,?V0
   \   000027   AD..         MOV     R5,?V1
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   AA82         MOV     R2,DPL
   \   000030   AB83         MOV     R3,DPH
   \   000032   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1073            AddrMgrEntryUpdate( &addrEntry );
   \   000035                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000035   AA..         MOV     R2,?XSP + 0
   \   000037   AB..         MOV     R3,?XSP + 1
   \   000039   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00003C   E9           MOV     A,R1
   1074          }
   \   00003D   740D         MOV     A,#0xd
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   7F02         MOV     R7,#0x2
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   1075          
   1076          /*********************************************************************
   1077           * @fn      ZDO_ProcessServerDiscReq
   1078           *
   1079           * @brief   Process the Server_Discovery_req message.
   1080           *
   1081           * @param   inMsg  - incoming message (request)
   1082           *
   1083           * @return  none
   1084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1085          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1087            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   E5..         MOV     A,?V0
   \   00000B   2413         ADD     A,#0x13
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   35..         ADDC    A,?V1
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F583         MOV     DPH,A
   \   00001A   8882         MOV     DPL,R0
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   E5..         MOV     A,?V0
   \   000022   2413         ADD     A,#0x13
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   35..         ADDC    A,?V1
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F583         MOV     DPH,A
   \   000031   8882         MOV     DPL,R0
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   7900         MOV     R1,#0x0
   \   000038   E4           CLR     A
   \   000039   C8           XCH     A,R0
   \   00003A   F9           MOV     R1,A
   \   00003B   EA           MOV     A,R2
   \   00003C   28           ADD     A,R0
   \   00003D   FE           MOV     R6,A
   \   00003E   EB           MOV     A,R3
   \   00003F   39           ADDC    A,R1
   \   000040   FF           MOV     R7,A
   1088            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000041   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   5E           ANL     A,R6
   \   000046   F5..         MOV     ?V2,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   5F           ANL     A,R7
   \   00004B   F5..         MOV     ?V3,A
   1089          
   1090            if ( matchMask )
   \   00004D   E5..         MOV     A,?V2
   \   00004F   45..         ORL     A,?V3
   \   000051   6039         JZ      ??ZDO_ProcessServerDiscReq_0
   1091            {
   1092              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1093                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000053                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00005B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005E   E5..         MOV     A,?V0
   \   000060   240E         ADD     A,#0xe
   \   000062   F582         MOV     DPL,A
   \   000064   E4           CLR     A
   \   000065   35..         ADDC    A,?V1
   \   000067   F583         MOV     DPH,A
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FD           MOV     R5,A
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   E5..         MOV     A,?V0
   \   00006F   2402         ADD     A,#0x2
   \   000071   FA           MOV     R2,A
   \   000072   E4           CLR     A
   \   000073   35..         ADDC    A,?V1
   \   000075   FB           MOV     R3,A
   \   000076   E5..         MOV     A,?V0
   \   000078   240F         ADD     A,#0xf
   \   00007A   F582         MOV     DPL,A
   \   00007C   E4           CLR     A
   \   00007D   35..         ADDC    A,?V1
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   000086   7404         MOV     A,#0x4
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   E9           MOV     A,R1
   1094            }
   1095          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00008C   7F04         MOV     R7,#0x4
   \   00008E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1096          
   1097          /*********************************************************************
   1098           * Call Back Functions from APS  - API
   1099           */
   1100          
   1101          /*********************************************************************
   1102           * @fn          ZDO_EndDeviceTimeoutCB
   1103           *
   1104           * @brief       This function handles the binding timer for the End
   1105           *              Device Bind command.
   1106           *
   1107           * @param       none
   1108           *
   1109           * @return      none
   1110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1111          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1112          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1113          #if defined ( REFLECTOR )
   1114            byte stat;
   1115            if ( ZDO_EDBind )
   \   000005   90....       MOV     DPTR,#ZDO_EDBind
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   6047         JZ      ??ZDO_EndDeviceTimeoutCB_0
   1116            {
   1117              stat = ZDO_EDBind->status;
   \   000011   90....       MOV     DPTR,#ZDO_EDBind
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C8           XCH     A,R0
   \   000019   2416         ADD     A,#0x16
   \   00001B   F582         MOV     DPL,A
   \   00001D   C8           XCH     A,R0
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
   1118          
   1119              // Send the response message to the first sent
   1120              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1121                                  stat, ZDO_EDBind->SecurityUse );
   \   000024                ; Setup parameters for call to function ZDO_SendEDBindRsp
   \   000024   90....       MOV     DPTR,#ZDO_EDBind
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C8           XCH     A,R0
   \   00002C   2415         ADD     A,#0x15
   \   00002E   F582         MOV     DPL,A
   \   000030   C8           XCH     A,R0
   \   000031   3400         ADDC    A,#0x0
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FD           MOV     R5,A
   \   000037   EE           MOV     A,R6
   \   000038   FC           MOV     R4,A
   \   000039   90....       MOV     DPTR,#ZDO_EDBind
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   2401         ADD     A,#0x1
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   3400         ADDC    A,#0x0
   \   000044   FB           MOV     R3,A
   \   000045   90....       MOV     DPTR,#ZDO_EDBind
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F583         MOV     DPH,A
   \   00004E   8882         MOV     DPL,R0
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   `??ZDO_SendEDBindRsp::?relay`; Banked call to: ZDO_SendEDBindRsp
   1122          
   1123              ZDO_RemoveEndDeviceBind();
   \   000055                ; Setup parameters for call to function ZDO_RemoveEndDeviceBind
   \   000055   12....       LCALL   `??ZDO_RemoveEndDeviceBind::?relay`; Banked call to: ZDO_RemoveEndDeviceBind
   1124            }
   1125          #endif  // REFLECTOR
   1126          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   000058   7F01         MOV     R7,#0x1
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1127          
   1128          /*********************************************************************
   1129           * Optional Management Messages
   1130           */
   1131          
   1132          /*********************************************************************
   1133           * @fn          ZDO_ProcessMgmtLqiReq
   1134           *
   1135           * @brief       This function handles parsing the incoming Management
   1136           *              LQI request and generate the response.
   1137           *
   1138           *   Note:      This function will limit the number of items returned
   1139           *              to ZDO_MAX_LQI_ITEMS items.
   1140           *
   1141           * @param       inMsg - incoming message (request)
   1142           *
   1143           * @return      none
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1146          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV     A,#-0x2a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   1147            byte x;
   1148            byte index;
   1149            byte numItems;
   1150            byte maxItems;
   1151            ZDP_MgmtLqiItem_t* table = NULL;
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7400         MOV     A,#0x0
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
   1152            ZDP_MgmtLqiItem_t* item;
   1153            neighborEntry_t    entry;
   1154            byte aItems;
   1155            associated_devices_t *aDevice;
   1156            AddrMgrEntry_t  nwkEntry;
   1157            uint8 StartIndex = inMsg->asdu[0];
   \   000020   7404         MOV     A,#0x4
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   C8           XCH     A,R0
   \   00002A   2413         ADD     A,#0x13
   \   00002C   F582         MOV     DPL,A
   \   00002E   C8           XCH     A,R0
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8882         MOV     DPL,R0
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F5..         MOV     ?V4,A
   1158          
   1159            // Get the number of neighbor items
   1160            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   00003E                ; Setup parameters for call to function NLME_GetRequest
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP102_8
   \   000043   7A00         MOV     R2,#0x0
   \   000045   7B00         MOV     R3,#0x0
   \   000047   799C         MOV     R1,#-0x64
   \   000049   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   00004C   E9           MOV     A,R1
   1161          
   1162            // Get the number of associated items
   1163            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00004D                ; Setup parameters for call to function AssocCount
   \   00004D   7A04         MOV     R2,#0x4
   \   00004F   7900         MOV     R1,#0x0
   \   000051   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   000054   EA           MOV     A,R2
   \   000055   C0E0         PUSH    A
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   D0E0         POP     A
   \   00005F   F0           MOVX    @DPTR,A
   1164          
   1165            // Total number of items
   1166            maxItems += aItems;
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   28           ADD     A,R0
   \   00006F   F0           MOVX    @DPTR,A
   1167          
   1168            // Start with the supplied index
   1169            if ( maxItems > StartIndex )
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   E5..         MOV     A,?V4
   \   000079   C3           CLR     C
   \   00007A   98           SUBB    A,R0
   \   00007B   4003         JC      $+5
   \   00007D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1170            {
   1171              numItems = maxItems - StartIndex;
   \   000080   7401         MOV     A,#0x1
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   C3           CLR     C
   \   000087   95..         SUBB    A,?V4
   \   000089   F5..         MOV     ?V1,A
   1172          
   1173              // limit the size of the list
   1174              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   00008B   E5..         MOV     A,?V1
   \   00008D   C3           CLR     C
   \   00008E   9404         SUBB    A,#0x4
   \   000090   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1175                numItems = ZDO_MAX_LQI_ITEMS;
   \   000092   75..03       MOV     ?V1,#0x3
   1176          
   1177              // Allocate the memory to build the table
   1178              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1179                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000095                ; Setup parameters for call to function osal_mem_alloc
   \   000095   AA..         MOV     R2,?V1
   \   000097   7B00         MOV     R3,#0x0
   \   000099   EA           MOV     A,R2
   \   00009A   75F01A       MOV     B,#0x1a
   \   00009D   A4           MUL     AB
   \   00009E   CA           XCH     A,R2
   \   00009F   A8F0         MOV     R0,B
   \   0000A1   75F000       MOV     B,#0x0
   \   0000A4   A4           MUL     AB
   \   0000A5   28           ADD     A,R0
   \   0000A6   F8           MOV     R0,A
   \   0000A7   75F01A       MOV     B,#0x1a
   \   0000AA   EB           MOV     A,R3
   \   0000AB   A4           MUL     AB
   \   0000AC   28           ADD     A,R0
   \   0000AD   FB           MOV     R3,A
   \   0000AE   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   EA           MOV     A,R2
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   EB           MOV     A,R3
   \   0000BA   F0           MOVX    @DPTR,A
   1180          
   1181              if ( table != NULL )
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F8           MOV     R0,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F9           MOV     R1,A
   \   0000C5   E8           MOV     A,R0
   \   0000C6   49           ORL     A,R1
   \   0000C7   7003         JNZ     $+5
   \   0000C9   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1182              {
   1183                x = 0;
   \   0000CC   75..00       MOV     ?V5,#0x0
   1184                item = table;
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   F8           MOV     R0,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F9           MOV     R1,A
   \   0000D9   E8           MOV     A,R0
   \   0000DA   FE           MOV     R6,A
   \   0000DB   E9           MOV     A,R1
   \   0000DC   FF           MOV     R7,A
   1185                index = StartIndex;
   \   0000DD   85....       MOV     ?V0,?V4
   1186          
   1187                // Loop through associated items and build list
   1188                for ( ; x < numItems; x++ )
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0000E0   E5..         MOV     A,?V5
   \   0000E2   C3           CLR     C
   \   0000E3   95..         SUBB    A,?V1
   \   0000E5   4003         JC      $+5
   \   0000E7   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   1189                {
   1190                  if ( index < aItems )
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   E5..         MOV     A,?V0
   \   0000F4   C3           CLR     C
   \   0000F5   98           SUBB    A,R0
   \   0000F6   4003         JC      $+5
   \   0000F8   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   1191                  {
   1192                    // get next associated device
   1193                    aDevice = AssocFindDevice( index++ );
   \   0000FB                ; Setup parameters for call to function AssocFindDevice
   \   0000FB   A9..         MOV     R1,?V0
   \   0000FD   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   000100   8A..         MOV     ?V2,R2
   \   000102   8B..         MOV     ?V3,R3
   \   000104   85....       MOV     ?V6,?V2
   \   000107   85....       MOV     ?V7,?V3
   \   00010A   05..         INC     ?V0
   1194          
   1195                    // set basic fields
   1196                    item->panID   = _NIB.nwkPanId;
   \   00010C   90....       MOV     DPTR,#_NIB + 33
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F8           MOV     R0,A
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F9           MOV     R1,A
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   E8           MOV     A,R0
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   E9           MOV     A,R1
   \   00011C   F0           MOVX    @DPTR,A
   1197                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   \   00011D                ; Setup parameters for call to function sAddrExtCpy
   \   00011D   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00011F   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000121   EE           MOV     A,R6
   \   000122   2402         ADD     A,#0x2
   \   000124   FA           MOV     R2,A
   \   000125   E4           CLR     A
   \   000126   3F           ADDC    A,R7
   \   000127   FB           MOV     R3,A
   \   000128   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1198                    item->nwkAddr = aDevice->shortAddr;
   \   00012B   85..82       MOV     DPL,?V6
   \   00012E   85..83       MOV     DPH,?V7
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F8           MOV     R0,A
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F9           MOV     R1,A
   \   000136   EE           MOV     A,R6
   \   000137   2412         ADD     A,#0x12
   \   000139   F582         MOV     DPL,A
   \   00013B   E4           CLR     A
   \   00013C   3F           ADDC    A,R7
   \   00013D   F583         MOV     DPH,A
   \   00013F   E8           MOV     A,R0
   \   000140   F0           MOVX    @DPTR,A
   \   000141   A3           INC     DPTR
   \   000142   E9           MOV     A,R1
   \   000143   F0           MOVX    @DPTR,A
   1199                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   \   000144   EE           MOV     A,R6
   \   000145   2417         ADD     A,#0x17
   \   000147   F582         MOV     DPL,A
   \   000149   E4           CLR     A
   \   00014A   3F           ADDC    A,R7
   \   00014B   F583         MOV     DPH,A
   \   00014D   7402         MOV     A,#0x2
   \   00014F   F0           MOVX    @DPTR,A
   1200                    item->depth   = 0xFF;
   \   000150   EE           MOV     A,R6
   \   000151   2418         ADD     A,#0x18
   \   000153   F582         MOV     DPL,A
   \   000155   E4           CLR     A
   \   000156   3F           ADDC    A,R7
   \   000157   F583         MOV     DPH,A
   \   000159   74FF         MOV     A,#-0x1
   \   00015B   F0           MOVX    @DPTR,A
   1201                    item->lqi     = aDevice->linkInfo.rxLqi;
   \   00015C   85..82       MOV     DPL,?V6
   \   00015F   85..83       MOV     DPH,?V7
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   C0E0         PUSH    A
   \   00016F   EE           MOV     A,R6
   \   000170   2419         ADD     A,#0x19
   \   000172   F582         MOV     DPL,A
   \   000174   E4           CLR     A
   \   000175   3F           ADDC    A,R7
   \   000176   F583         MOV     DPH,A
   \   000178   D0E0         POP     A
   \   00017A   F0           MOVX    @DPTR,A
   1202          
   1203                    // set extented address
   1204                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   \   00017B   7406         MOV     A,#0x6
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   7400         MOV     A,#0x0
   \   000182   F0           MOVX    @DPTR,A
   1205                    nwkEntry.nwkAddr = aDevice->shortAddr;
   \   000183   85..82       MOV     DPL,?V6
   \   000186   85..83       MOV     DPH,?V7
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F8           MOV     R0,A
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F9           MOV     R1,A
   \   00018E   7407         MOV     A,#0x7
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   E8           MOV     A,R0
   \   000194   F0           MOVX    @DPTR,A
   \   000195   A3           INC     DPTR
   \   000196   E9           MOV     A,R1
   \   000197   F0           MOVX    @DPTR,A
   1206          
   1207                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   \   000198                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000198   7406         MOV     A,#0x6
   \   00019A   12....       LCALL   ?XSTACK_DISP101_8
   \   00019D   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0001A0   E9           MOV     A,R1
   \   0001A1   6401         XRL     A,#0x1
   \   0001A3   7015         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1208                    {
   1209                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   \   0001A5                ; Setup parameters for call to function sAddrExtCpy
   \   0001A5   7409         MOV     A,#0x9
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   AC82         MOV     R4,DPL
   \   0001AC   AD83         MOV     R5,DPH
   \   0001AE   EE           MOV     A,R6
   \   0001AF   240A         ADD     A,#0xa
   \   0001B1   FA           MOV     R2,A
   \   0001B2   E4           CLR     A
   \   0001B3   3F           ADDC    A,R7
   \   0001B4   FB           MOV     R3,A
   \   0001B5   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001B8   8010         SJMP    ??ZDO_ProcessMgmtLqiReq_7
   1210                    }
   1211                    else
   1212                    {
   1213                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0001BA                ; Setup parameters for call to function osal_memset
   \   0001BA   7C08         MOV     R4,#0x8
   \   0001BC   7D00         MOV     R5,#0x0
   \   0001BE   79FF         MOV     R1,#-0x1
   \   0001C0   EE           MOV     A,R6
   \   0001C1   240A         ADD     A,#0xa
   \   0001C3   FA           MOV     R2,A
   \   0001C4   E4           CLR     A
   \   0001C5   3F           ADDC    A,R7
   \   0001C6   FB           MOV     R3,A
   \   0001C7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1214                    }
   1215          
   1216                    // use association info to set other fields
   1217                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0001CA   85..82       MOV     DPL,?V6
   \   0001CD   85..83       MOV     DPH,?V7
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   7064         JNZ     ??ZDO_ProcessMgmtLqiReq_8
   1218                    {
   1219                      if (  aDevice->shortAddr == 0 )
   \   0001D7   85..82       MOV     DPL,?V6
   \   0001DA   85..83       MOV     DPH,?V7
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F8           MOV     R0,A
   \   0001DF   A3           INC     DPTR
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F9           MOV     R1,A
   \   0001E2   E8           MOV     A,R0
   \   0001E3   49           ORL     A,R1
   \   0001E4   701A         JNZ     ??ZDO_ProcessMgmtLqiReq_9
   1220                      {
   1221                        item->devType = ZDP_MGMT_DT_COORD;
   \   0001E6   EE           MOV     A,R6
   \   0001E7   2414         ADD     A,#0x14
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   E4           CLR     A
   \   0001EC   3F           ADDC    A,R7
   \   0001ED   F583         MOV     DPH,A
   \   0001EF   7400         MOV     A,#0x0
   \   0001F1   F0           MOVX    @DPTR,A
   1222                        item->depth = 0;
   \   0001F2   EE           MOV     A,R6
   \   0001F3   2418         ADD     A,#0x18
   \   0001F5   F582         MOV     DPL,A
   \   0001F7   E4           CLR     A
   \   0001F8   3F           ADDC    A,R7
   \   0001F9   F583         MOV     DPH,A
   \   0001FB   7400         MOV     A,#0x0
   \   0001FD   F0           MOVX    @DPTR,A
   \   0001FE   8020         SJMP    ??ZDO_ProcessMgmtLqiReq_10
   1223                      }
   1224                      else
   1225                      {
   1226                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   000200   EE           MOV     A,R6
   \   000201   2414         ADD     A,#0x14
   \   000203   F582         MOV     DPL,A
   \   000205   E4           CLR     A
   \   000206   3F           ADDC    A,R7
   \   000207   F583         MOV     DPH,A
   \   000209   7401         MOV     A,#0x1
   \   00020B   F0           MOVX    @DPTR,A
   1227                        item->depth = _NIB.nodeDepth - 1;
   \   00020C   90....       MOV     DPTR,#_NIB + 52
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   24FF         ADD     A,#-0x1
   \   000212   C0E0         PUSH    A
   \   000214   EE           MOV     A,R6
   \   000215   2418         ADD     A,#0x18
   \   000217   F582         MOV     DPL,A
   \   000219   E4           CLR     A
   \   00021A   3F           ADDC    A,R7
   \   00021B   F583         MOV     DPH,A
   \   00021D   D0E0         POP     A
   \   00021F   F0           MOVX    @DPTR,A
   1228                      }
   1229          
   1230                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   000220   EE           MOV     A,R6
   \   000221   2415         ADD     A,#0x15
   \   000223   F582         MOV     DPL,A
   \   000225   E4           CLR     A
   \   000226   3F           ADDC    A,R7
   \   000227   F583         MOV     DPH,A
   \   000229   7402         MOV     A,#0x2
   \   00022B   F0           MOVX    @DPTR,A
   1231                      item->relation = ZDP_MGMT_REL_PARENT;
   \   00022C   EE           MOV     A,R6
   \   00022D   2416         ADD     A,#0x16
   \   00022F   F582         MOV     DPL,A
   \   000231   E4           CLR     A
   \   000232   3F           ADDC    A,R7
   \   000233   F583         MOV     DPH,A
   \   000235   7400         MOV     A,#0x0
   \   000237   F0           MOVX    @DPTR,A
   \   000238   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1232                    }
   1233                    else
   1234                    {
   1235                      // If not parent, then it's a child
   1236                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   00023B   90....       MOV     DPTR,#_NIB + 52
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   2401         ADD     A,#0x1
   \   000241   C0E0         PUSH    A
   \   000243   EE           MOV     A,R6
   \   000244   2418         ADD     A,#0x18
   \   000246   F582         MOV     DPL,A
   \   000248   E4           CLR     A
   \   000249   3F           ADDC    A,R7
   \   00024A   F583         MOV     DPH,A
   \   00024C   D0E0         POP     A
   \   00024E   F0           MOVX    @DPTR,A
   1237          
   1238                      if ( aDevice->nodeRelation < CHILD_FFD )
   \   00024F   85..82       MOV     DPL,?V6
   \   000252   85..83       MOV     DPH,?V7
   \   000255   A3           INC     DPTR
   \   000256   A3           INC     DPTR
   \   000257   A3           INC     DPTR
   \   000258   A3           INC     DPTR
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   C3           CLR     C
   \   00025B   9403         SUBB    A,#0x3
   \   00025D   5037         JNC     ??ZDO_ProcessMgmtLqiReq_12
   1239                      {
   1240                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   00025F   EE           MOV     A,R6
   \   000260   2414         ADD     A,#0x14
   \   000262   F582         MOV     DPL,A
   \   000264   E4           CLR     A
   \   000265   3F           ADDC    A,R7
   \   000266   F583         MOV     DPH,A
   \   000268   7402         MOV     A,#0x2
   \   00026A   F0           MOVX    @DPTR,A
   1241          
   1242                        if ( aDevice->nodeRelation == CHILD_RFD )
   \   00026B   85..82       MOV     DPL,?V6
   \   00026E   85..83       MOV     DPH,?V7
   \   000271   A3           INC     DPTR
   \   000272   A3           INC     DPTR
   \   000273   A3           INC     DPTR
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   6401         XRL     A,#0x1
   \   000278   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_13
   1243                        {
   1244                          item->rxOnIdle = FALSE;
   \   00027A   EE           MOV     A,R6
   \   00027B   2415         ADD     A,#0x15
   \   00027D   F582         MOV     DPL,A
   \   00027F   E4           CLR     A
   \   000280   3F           ADDC    A,R7
   \   000281   F583         MOV     DPH,A
   \   000283   7400         MOV     A,#0x0
   \   000285   F0           MOVX    @DPTR,A
   \   000286   8043         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1245                        }
   1246                        else
   1247                        {
   1248                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   000288   EE           MOV     A,R6
   \   000289   2415         ADD     A,#0x15
   \   00028B   F582         MOV     DPL,A
   \   00028D   E4           CLR     A
   \   00028E   3F           ADDC    A,R7
   \   00028F   F583         MOV     DPH,A
   \   000291   7401         MOV     A,#0x1
   \   000293   F0           MOVX    @DPTR,A
   \   000294   8035         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1249                        }
   1250                      }
   1251                      else
   1252                      {
   1253                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000296   EE           MOV     A,R6
   \   000297   2414         ADD     A,#0x14
   \   000299   F582         MOV     DPL,A
   \   00029B   E4           CLR     A
   \   00029C   3F           ADDC    A,R7
   \   00029D   F583         MOV     DPH,A
   \   00029F   7401         MOV     A,#0x1
   \   0002A1   F0           MOVX    @DPTR,A
   1254          
   1255                        if ( aDevice->nodeRelation == CHILD_FFD )
   \   0002A2   85..82       MOV     DPL,?V6
   \   0002A5   85..83       MOV     DPH,?V7
   \   0002A8   A3           INC     DPTR
   \   0002A9   A3           INC     DPTR
   \   0002AA   A3           INC     DPTR
   \   0002AB   A3           INC     DPTR
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   6403         XRL     A,#0x3
   \   0002AF   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_15
   1256                        {
   1257                          item->rxOnIdle = FALSE;
   \   0002B1   EE           MOV     A,R6
   \   0002B2   2415         ADD     A,#0x15
   \   0002B4   F582         MOV     DPL,A
   \   0002B6   E4           CLR     A
   \   0002B7   3F           ADDC    A,R7
   \   0002B8   F583         MOV     DPH,A
   \   0002BA   7400         MOV     A,#0x0
   \   0002BC   F0           MOVX    @DPTR,A
   \   0002BD   800C         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   1258                        }
   1259                        else
   1260                        {
   1261                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0002BF   EE           MOV     A,R6
   \   0002C0   2415         ADD     A,#0x15
   \   0002C2   F582         MOV     DPL,A
   \   0002C4   E4           CLR     A
   \   0002C5   3F           ADDC    A,R7
   \   0002C6   F583         MOV     DPH,A
   \   0002C8   7401         MOV     A,#0x1
   \   0002CA   F0           MOVX    @DPTR,A
   1262                        }
   1263                      }
   1264          
   1265                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0002CB   EE           MOV     A,R6
   \   0002CC   2416         ADD     A,#0x16
   \   0002CE   F582         MOV     DPL,A
   \   0002D0   E4           CLR     A
   \   0002D1   3F           ADDC    A,R7
   \   0002D2   F583         MOV     DPH,A
   \   0002D4   7401         MOV     A,#0x1
   \   0002D6   F0           MOVX    @DPTR,A
   1266                    }
   1267          
   1268                    item++;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0002D7   EE           MOV     A,R6
   \   0002D8   241A         ADD     A,#0x1a
   \   0002DA   FE           MOV     R6,A
   \   0002DB   5001         JNC     ??ZDO_ProcessMgmtLqiReq_16
   \   0002DD   0F           INC     R7
   1269                  }
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0002DE   05..         INC     ?V5
   \   0002E0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1270                  else
   1271                  {
   1272                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0002E3   85..82       MOV     DPL,?XSP + 0
   \   0002E6   85..83       MOV     DPH,?XSP + 1
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   C3           CLR     C
   \   0002EB   95..         SUBB    A,?V4
   \   0002ED   4005         JC      ??ZDO_ProcessMgmtLqiReq_17
   1273                      // Start with 1st neighbor
   1274                      index = 0;
   \   0002EF   75..00       MOV     ?V0,#0x0
   \   0002F2   800E         SJMP    ??ZDO_ProcessMgmtLqiReq_4
   1275                    else
   1276                      // Start with >1st neighbor
   1277                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0002F4   85..82       MOV     DPL,?XSP + 0
   \   0002F7   85..83       MOV     DPH,?XSP + 1
   \   0002FA   E0           MOVX    A,@DPTR
   \   0002FB   F8           MOV     R0,A
   \   0002FC   E5..         MOV     A,?V4
   \   0002FE   C3           CLR     C
   \   0002FF   98           SUBB    A,R0
   \   000300   F5..         MOV     ?V0,A
   1278                    break;
   1279                  }
   1280                }
   1281          
   1282                // Loop through neighbor items and finish list
   1283                for ( ; x < numItems; x++ )
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   000302   E5..         MOV     A,?V5
   \   000304   C3           CLR     C
   \   000305   95..         SUBB    A,?V1
   \   000307   4003         JC      $+5
   \   000309   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1284                {
   1285                  // Add next neighbor table item
   1286                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   \   00030C                ; Setup parameters for call to function NLME_GetRequest
   \   00030C   7413         MOV     A,#0x13
   \   00030E   12....       LCALL   ?XSTACK_DISP102_8
   \   000311   AA..         MOV     R2,?V0
   \   000313   7B00         MOV     R3,#0x0
   \   000315   7987         MOV     R1,#-0x79
   \   000317   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   00031A   E9           MOV     A,R1
   \   00031B   05..         INC     ?V0
   1287          
   1288                  // set ZDP_MgmtLqiItem_t fields
   1289                  item->panID    = entry.panId;
   \   00031D   741D         MOV     A,#0x1d
   \   00031F   12....       LCALL   ?XSTACK_DISP0_8
   \   000322   E0           MOVX    A,@DPTR
   \   000323   F8           MOV     R0,A
   \   000324   A3           INC     DPTR
   \   000325   E0           MOVX    A,@DPTR
   \   000326   F9           MOV     R1,A
   \   000327   8E82         MOV     DPL,R6
   \   000329   8F83         MOV     DPH,R7
   \   00032B   E8           MOV     A,R0
   \   00032C   F0           MOVX    @DPTR,A
   \   00032D   A3           INC     DPTR
   \   00032E   E9           MOV     A,R1
   \   00032F   F0           MOVX    @DPTR,A
   1290                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   \   000330                ; Setup parameters for call to function sAddrExtCpy
   \   000330   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000332   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000334   EE           MOV     A,R6
   \   000335   2402         ADD     A,#0x2
   \   000337   FA           MOV     R2,A
   \   000338   E4           CLR     A
   \   000339   3F           ADDC    A,R7
   \   00033A   FB           MOV     R3,A
   \   00033B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1291                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \   00033E                ; Setup parameters for call to function osal_memset
   \   00033E   7C08         MOV     R4,#0x8
   \   000340   7D00         MOV     R5,#0x0
   \   000342   79FF         MOV     R1,#-0x1
   \   000344   EE           MOV     A,R6
   \   000345   240A         ADD     A,#0xa
   \   000347   FA           MOV     R2,A
   \   000348   E4           CLR     A
   \   000349   3F           ADDC    A,R7
   \   00034A   FB           MOV     R3,A
   \   00034B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1292                  item->nwkAddr  = entry.neighborAddress;
   \   00034E   7413         MOV     A,#0x13
   \   000350   12....       LCALL   ?XSTACK_DISP0_8
   \   000353   E0           MOVX    A,@DPTR
   \   000354   F8           MOV     R0,A
   \   000355   A3           INC     DPTR
   \   000356   E0           MOVX    A,@DPTR
   \   000357   F9           MOV     R1,A
   \   000358   EE           MOV     A,R6
   \   000359   2412         ADD     A,#0x12
   \   00035B   F582         MOV     DPL,A
   \   00035D   E4           CLR     A
   \   00035E   3F           ADDC    A,R7
   \   00035F   F583         MOV     DPH,A
   \   000361   E8           MOV     A,R0
   \   000362   F0           MOVX    @DPTR,A
   \   000363   A3           INC     DPTR
   \   000364   E9           MOV     A,R1
   \   000365   F0           MOVX    @DPTR,A
   1293                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   000366   EE           MOV     A,R6
   \   000367   2415         ADD     A,#0x15
   \   000369   F582         MOV     DPL,A
   \   00036B   E4           CLR     A
   \   00036C   3F           ADDC    A,R7
   \   00036D   F583         MOV     DPH,A
   \   00036F   7402         MOV     A,#0x2
   \   000371   F0           MOVX    @DPTR,A
   1294                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   \   000372   EE           MOV     A,R6
   \   000373   2416         ADD     A,#0x16
   \   000375   F582         MOV     DPL,A
   \   000377   E4           CLR     A
   \   000378   3F           ADDC    A,R7
   \   000379   F583         MOV     DPH,A
   \   00037B   7403         MOV     A,#0x3
   \   00037D   F0           MOVX    @DPTR,A
   1295                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   \   00037E   EE           MOV     A,R6
   \   00037F   2417         ADD     A,#0x17
   \   000381   F582         MOV     DPL,A
   \   000383   E4           CLR     A
   \   000384   3F           ADDC    A,R7
   \   000385   F583         MOV     DPH,A
   \   000387   7402         MOV     A,#0x2
   \   000389   F0           MOVX    @DPTR,A
   1296                  item->depth    = 0xFF;
   \   00038A   EE           MOV     A,R6
   \   00038B   2418         ADD     A,#0x18
   \   00038D   F582         MOV     DPL,A
   \   00038F   E4           CLR     A
   \   000390   3F           ADDC    A,R7
   \   000391   F583         MOV     DPH,A
   \   000393   74FF         MOV     A,#-0x1
   \   000395   F0           MOVX    @DPTR,A
   1297                  item->lqi      = entry.linkInfo.rxLqi;
   \   000396   7422         MOV     A,#0x22
   \   000398   12....       LCALL   ?XSTACK_DISP0_8
   \   00039B   E0           MOVX    A,@DPTR
   \   00039C   C0E0         PUSH    A
   \   00039E   EE           MOV     A,R6
   \   00039F   2419         ADD     A,#0x19
   \   0003A1   F582         MOV     DPL,A
   \   0003A3   E4           CLR     A
   \   0003A4   3F           ADDC    A,R7
   \   0003A5   F583         MOV     DPH,A
   \   0003A7   D0E0         POP     A
   \   0003A9   F0           MOVX    @DPTR,A
   1298          
   1299                  if ( item->nwkAddr == 0 )
   \   0003AA   EE           MOV     A,R6
   \   0003AB   2412         ADD     A,#0x12
   \   0003AD   F582         MOV     DPL,A
   \   0003AF   E4           CLR     A
   \   0003B0   3F           ADDC    A,R7
   \   0003B1   F583         MOV     DPH,A
   \   0003B3   E0           MOVX    A,@DPTR
   \   0003B4   F8           MOV     R0,A
   \   0003B5   A3           INC     DPTR
   \   0003B6   E0           MOVX    A,@DPTR
   \   0003B7   F9           MOV     R1,A
   \   0003B8   E8           MOV     A,R0
   \   0003B9   49           ORL     A,R1
   \   0003BA   700E         JNZ     ??ZDO_ProcessMgmtLqiReq_18
   1300                  {
   1301                    item->devType = ZDP_MGMT_DT_COORD;
   \   0003BC   EE           MOV     A,R6
   \   0003BD   2414         ADD     A,#0x14
   \   0003BF   F582         MOV     DPL,A
   \   0003C1   E4           CLR     A
   \   0003C2   3F           ADDC    A,R7
   \   0003C3   F583         MOV     DPH,A
   \   0003C5   7400         MOV     A,#0x0
   \   0003C7   F0           MOVX    @DPTR,A
   \   0003C8   800C         SJMP    ??ZDO_ProcessMgmtLqiReq_19
   1302                  }
   1303                  else
   1304                  {
   1305                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0003CA   EE           MOV     A,R6
   \   0003CB   2414         ADD     A,#0x14
   \   0003CD   F582         MOV     DPL,A
   \   0003CF   E4           CLR     A
   \   0003D0   3F           ADDC    A,R7
   \   0003D1   F583         MOV     DPH,A
   \   0003D3   7401         MOV     A,#0x1
   \   0003D5   F0           MOVX    @DPTR,A
   1306                  }
   1307          
   1308                  item++;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0003D6   EE           MOV     A,R6
   \   0003D7   241A         ADD     A,#0x1a
   \   0003D9   FE           MOV     R6,A
   \   0003DA   5001         JNC     ??ZDO_ProcessMgmtLqiReq_20
   \   0003DC   0F           INC     R7
   1309                }
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   0003DD   05..         INC     ?V5
   \   0003DF   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   1310              }
   1311            }
   1312            else
   1313            {
   1314              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   0003E2   75..00       MOV     ?V1,#0x0
   1315            }
   1316          
   1317            // Send response
   1318            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1319                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   0003E5                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   0003E5   75..00       MOV     ?V2,#0x0
   \   0003E8   78..         MOV     R0,#?V2
   \   0003EA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003ED   7403         MOV     A,#0x3
   \   0003EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003F5   E5..         MOV     A,?V1
   \   0003F7   F5..         MOV     ?V2,A
   \   0003F9   78..         MOV     R0,#?V2
   \   0003FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003FE   E5..         MOV     A,?V4
   \   000400   F5..         MOV     ?V2,A
   \   000402   78..         MOV     R0,#?V2
   \   000404   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000407   7406         MOV     A,#0x6
   \   000409   12....       LCALL   ?XSTACK_DISP0_8
   \   00040C   E0           MOVX    A,@DPTR
   \   00040D   FD           MOV     R5,A
   \   00040E   7C00         MOV     R4,#0x0
   \   000410   7409         MOV     A,#0x9
   \   000412   12....       LCALL   ?XSTACK_DISP0_8
   \   000415   E0           MOVX    A,@DPTR
   \   000416   2402         ADD     A,#0x2
   \   000418   FA           MOV     R2,A
   \   000419   A3           INC     DPTR
   \   00041A   E0           MOVX    A,@DPTR
   \   00041B   3400         ADDC    A,#0x0
   \   00041D   FB           MOV     R3,A
   \   00041E   7409         MOV     A,#0x9
   \   000420   12....       LCALL   ?XSTACK_DISP0_8
   \   000423   E0           MOVX    A,@DPTR
   \   000424   F8           MOV     R0,A
   \   000425   A3           INC     DPTR
   \   000426   E0           MOVX    A,@DPTR
   \   000427   C8           XCH     A,R0
   \   000428   240F         ADD     A,#0xf
   \   00042A   F582         MOV     DPL,A
   \   00042C   C8           XCH     A,R0
   \   00042D   3400         ADDC    A,#0x0
   \   00042F   F583         MOV     DPH,A
   \   000431   E0           MOVX    A,@DPTR
   \   000432   F9           MOV     R1,A
   \   000433   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   000436   7405         MOV     A,#0x5
   \   000438   12....       LCALL   ?DEALLOC_XSTACK8
   \   00043B   E9           MOV     A,R1
   1320          
   1321            if ( table )
   \   00043C   7402         MOV     A,#0x2
   \   00043E   12....       LCALL   ?XSTACK_DISP0_8
   \   000441   E0           MOVX    A,@DPTR
   \   000442   F8           MOV     R0,A
   \   000443   A3           INC     DPTR
   \   000444   E0           MOVX    A,@DPTR
   \   000445   F9           MOV     R1,A
   \   000446   E8           MOV     A,R0
   \   000447   49           ORL     A,R1
   \   000448   600D         JZ      ??ZDO_ProcessMgmtLqiReq_21
   1322            {
   1323              osal_mem_free( table );
   \   00044A                ; Setup parameters for call to function osal_mem_free
   \   00044A   7402         MOV     A,#0x2
   \   00044C   12....       LCALL   ?XSTACK_DISP0_8
   \   00044F   E0           MOVX    A,@DPTR
   \   000450   FA           MOV     R2,A
   \   000451   A3           INC     DPTR
   \   000452   E0           MOVX    A,@DPTR
   \   000453   FB           MOV     R3,A
   \   000454   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1324            }
   1325          }
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   000457   742A         MOV     A,#0x2a
   \   000459   12....       LCALL   ?DEALLOC_XSTACK8
   \   00045C   7F08         MOV     R7,#0x8
   \   00045E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1326          
   1327          /*********************************************************************
   1328           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1329           *
   1330           * @brief       This function handles parsing the incoming Management
   1331           *              Network Discover request and starts the request.
   1332           *
   1333           * @param       inMsg - incoming message (request)
   1334           *
   1335           * @return      none
   1336           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1337          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1339            NLME_ScanFields_t scan;
   1340            uint8             index;
   1341            uint8             *msg;
   1342          
   1343            msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V0
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   FE           MOV     R6,A
   \   000020   E9           MOV     A,R1
   \   000021   FF           MOV     R7,A
   1344            scan.channels = osal_build_uint32( msg, 4 );
   \   000022                ; Setup parameters for call to function osal_build_uint32
   \   000022   7904         MOV     R1,#0x4
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00002B   EA           MOV     A,R2
   \   00002C   F8           MOV     R0,A
   \   00002D   EB           MOV     A,R3
   \   00002E   F9           MOV     R1,A
   \   00002F   EC           MOV     A,R4
   \   000030   FA           MOV     R2,A
   \   000031   ED           MOV     A,R5
   \   000032   FB           MOV     R3,A
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   12....       LCALL   ?XSTORE_R0123
   1345            msg += 4;
   \   00003C   EE           MOV     A,R6
   \   00003D   2404         ADD     A,#0x4
   \   00003F   FE           MOV     R6,A
   \   000040   5001         JNC     ??ZDO_ProcessMgmtNwkDiscReq_0
   \   000042   0F           INC     R7
   1346            scan.duration = *msg++;
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   C0E0         PUSH    A
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   AE82         MOV     R6,DPL
   \   000059   AF83         MOV     R7,DPH
   1347            index         = *msg;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V2,A
   1348            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   7401         MOV     A,#0x1
   \   000069   F0           MOVX    @DPTR,A
   1349            scan.scanApp  = NLME_DISC_SCAN;
   \   00006A   7406         MOV     A,#0x6
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   7401         MOV     A,#0x1
   \   000071   F0           MOVX    @DPTR,A
   1350          
   1351            // Save off the information to be used for the response
   1352            zdappMgmtNwkDiscReqInProgress          = true;
   \   000072   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000075   7401         MOV     A,#0x1
   \   000077   F0           MOVX    @DPTR,A
   1353            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000078   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   00007B   7402         MOV     A,#0x2
   \   00007D   F0           MOVX    @DPTR,A
   1354            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00008E   E8           MOV     A,R0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E9           MOV     A,R1
   \   000092   F0           MOVX    @DPTR,A
   1355            zdappMgmtNwkDiscStartIndex             = index;
   \   000093   E5..         MOV     A,?V2
   \   000095   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000098   F0           MOVX    @DPTR,A
   1356            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000099   E5..         MOV     A,?V0
   \   00009B   240F         ADD     A,#0xf
   \   00009D   F582         MOV     DPL,A
   \   00009F   E4           CLR     A
   \   0000A0   35..         ADDC    A,?V1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   0000A8   F0           MOVX    @DPTR,A
   1357          
   1358            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   0000A9                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   0000A9   AA..         MOV     R2,?XSP + 0
   \   0000AB   AB..         MOV     R3,?XSP + 1
   \   0000AD   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   0000B0   E9           MOV     A,R1
   \   0000B1   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_1
   1359            {
   1360              NLME_NwkDiscTerm();
   \   0000B3                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000B3   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1361          
   1362              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1363            }
   1364          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_1:
   \   0000B6   7407         MOV     A,#0x7
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   7F03         MOV     R7,#0x3
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
   1365          
   1366          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1367          /*********************************************************************
   1368           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1369           *
   1370           * @brief       This function finishes the processing of the Management
   1371           *              Network Discover Request and generates the response.
   1372           *
   1373           *   Note:      This function will limit the number of items returned
   1374           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1375           *
   1376           * @param       ResultCountSrcAddr - source of the request
   1377           * @param       msg - pointer to incoming message
   1378           * @param       SecurityUse -
   1379           *
   1380           * @return      none
   1381           */
   1382          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1383          {
   1384            byte count, i, ResultCount = 0;
   1385            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1386          
   1387            NetworkList = nwk_getNwkDescList();
   1388          
   1389            // Count the number of nwk descriptors in the list
   1390            pList = nwk_getNwkDescList();
   1391            while (pList)
   1392            {
   1393              ResultCount++;
   1394              pList = pList->nextDesc;
   1395            }
   1396          
   1397            if ( ZSTACK_ROUTER_BUILD )
   1398            {
   1399              // Look for my PanID.
   1400              pList = nwk_getNwkDescList();
   1401              while ( pList )
   1402              {
   1403                if ( pList->panId == _NIB.nwkPanId )
   1404                {
   1405                  break;
   1406                }
   1407          
   1408          
   1409                if ( !pList->nextDesc )
   1410                {
   1411                  break;
   1412                }
   1413                pList = pList->nextDesc;
   1414              }
   1415          
   1416          
   1417              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1418              // prepend it.
   1419              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1420              {
   1421                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1422                if ( newDesc )
   1423                {
   1424                  byte pJoin;
   1425          
   1426                  newDesc->panId = _NIB.nwkPanId;
   1427                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1428                  newDesc->version = NLME_GetProtocolVersion();
   1429                  newDesc->stackProfile = zgStackProfile;
   1430          
   1431                  //Extended PanID
   1432                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1433          
   1434                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1435                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1436                                                     INVALID_NODE_ADDR);
   1437          
   1438                  newDesc->nextDesc = NetworkList;
   1439                  NetworkList = newDesc;
   1440                  ResultCount++;
   1441                }
   1442              }
   1443            }
   1444          
   1445            // Calc the count and apply a max count.
   1446            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1447            {
   1448              count = 0;
   1449            }
   1450            else
   1451            {
   1452              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1453              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1454              {
   1455                count = ZDO_MAX_NWKDISC_ITEMS;
   1456              }
   1457          
   1458              // Move the list pointer up to the start index.
   1459              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1460              {
   1461                NetworkList = NetworkList->nextDesc;
   1462              }
   1463            }
   1464          
   1465            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1466                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1467                                zdappMgmtNwkDiscStartIndex,
   1468                                count,
   1469                                NetworkList,
   1470                                false );
   1471          
   1472            if ( ZSTACK_ROUTER_BUILD )
   1473            {
   1474              if ( newDesc != NULL )
   1475              {
   1476                osal_mem_free( newDesc );
   1477              }
   1478            }
   1479          
   1480            NLME_NwkDiscTerm();
   1481          }
   1482          #endif
   1483          
   1484          /*********************************************************************
   1485           * @fn          ZDO_ProcessMgmtRtgReq
   1486           *
   1487           * @brief       This function finishes the processing of the Management
   1488           *              Routing Request and generates the response.
   1489           *
   1490           *   Note:      This function will limit the number of items returned
   1491           *              to ZDO_MAX_RTG_ITEMS items.
   1492           *
   1493           * @param       inMsg - incoming message (request)
   1494           *
   1495           * @return      none
   1496           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1497          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1498          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   1499            byte x;
   1500            byte maxNumItems;
   1501            byte numItems = 0;
   \   000014   7E00         MOV     R6,#0x0
   1502            uint8 *pBuf = NULL;
   \   000016   75..00       MOV     ?V6,#0x0
   \   000019   75..00       MOV     ?V7,#0x0
   1503            rtgItem_t *pList;
   1504            uint8 StartIndex = inMsg->asdu[0];
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C8           XCH     A,R0
   \   000026   2413         ADD     A,#0x13
   \   000028   F582         MOV     DPL,A
   \   00002A   C8           XCH     A,R0
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   F583         MOV     DPH,A
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F583         MOV     DPH,A
   \   000035   8882         MOV     DPL,R0
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FF           MOV     R7,A
   1505          
   1506            // Get the number of table items
   1507            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000039                ; Setup parameters for call to function NLME_GetRequest
   \   000039   AC..         MOV     R4,?XSP + 0
   \   00003B   AD..         MOV     R5,?XSP + 1
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   799D         MOV     R1,#-0x63
   \   000043   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000046   E9           MOV     A,R1
   1508          
   1509            if ( maxNumItems > StartIndex )
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   EF           MOV     A,R7
   \   000050   C3           CLR     C
   \   000051   98           SUBB    A,R0
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1510            {
   1511              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C3           CLR     C
   \   00005F   9F           SUBB    A,R7
   \   000060   FE           MOV     R6,A
   1512          
   1513              // limit the size of the list
   1514              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000061   EE           MOV     A,R6
   \   000062   C3           CLR     C
   \   000063   940B         SUBB    A,#0xb
   \   000065   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1515              {
   1516                numItems = ZDO_MAX_RTG_ITEMS;
   \   000067   7E0A         MOV     R6,#0xa
   1517              }
   1518          
   1519              // Allocate the memory to build the table
   1520              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000069                ; Setup parameters for call to function osal_mem_alloc
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   EA           MOV     A,R2
   \   00006E   75F007       MOV     B,#0x7
   \   000071   A4           MUL     AB
   \   000072   CA           XCH     A,R2
   \   000073   A8F0         MOV     R0,B
   \   000075   75F000       MOV     B,#0x0
   \   000078   A4           MUL     AB
   \   000079   28           ADD     A,R0
   \   00007A   F8           MOV     R0,A
   \   00007B   75F007       MOV     B,#0x7
   \   00007E   EB           MOV     A,R3
   \   00007F   A4           MUL     AB
   \   000080   28           ADD     A,R0
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000085   8A..         MOV     ?V2,R2
   \   000087   8B..         MOV     ?V3,R3
   \   000089   85....       MOV     ?V6,?V2
   \   00008C   85....       MOV     ?V7,?V3
   1521          
   1522              if ( pBuf != NULL )
   \   00008F   E5..         MOV     A,?V6
   \   000091   45..         ORL     A,?V7
   \   000093   7003         JNZ     $+5
   \   000095   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_2 & 0xFFFF
   1523              {
   1524                // Convert buffer to list
   1525                pList = (rtgItem_t *)pBuf;
   \   000098   85....       MOV     ?V0,?V6
   \   00009B   85....       MOV     ?V1,?V7
   1526          
   1527                // Loop through items and build list
   1528                for ( x = 0; x < numItems; x++ )
   \   00009E   75..00       MOV     ?V4,#0x0
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   0000A1   E5..         MOV     A,?V4
   \   0000A3   C3           CLR     C
   \   0000A4   9E           SUBB    A,R6
   \   0000A5   507E         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1529                {
   1530                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   \   0000A7                ; Setup parameters for call to function NLME_GetRequest
   \   0000A7   AC..         MOV     R4,?V0
   \   0000A9   AD..         MOV     R5,?V1
   \   0000AB   AA..         MOV     R2,?V4
   \   0000AD   7B00         MOV     R3,#0x0
   \   0000AF   EF           MOV     A,R7
   \   0000B0   F8           MOV     R0,A
   \   0000B1   7900         MOV     R1,#0x0
   \   0000B3   EA           MOV     A,R2
   \   0000B4   28           ADD     A,R0
   \   0000B5   FA           MOV     R2,A
   \   0000B6   EB           MOV     A,R3
   \   0000B7   39           ADDC    A,R1
   \   0000B8   FB           MOV     R3,A
   \   0000B9   798B         MOV     R1,#-0x75
   \   0000BB   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0000BE   E9           MOV     A,R1
   1531          
   1532                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1533                  switch( pList->status )
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   85..83       MOV     DPH,?V1
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   14           DEC     A
   \   0000CC   6008         JZ      ??ZDO_ProcessMgmtRtgReq_4
   \   0000CE   14           DEC     A
   \   0000CF   6015         JZ      ??ZDO_ProcessMgmtRtgReq_5
   \   0000D1   14           DEC     A
   \   0000D2   6022         JZ      ??ZDO_ProcessMgmtRtgReq_6
   \   0000D4   8030         SJMP    ??ZDO_ProcessMgmtRtgReq_7
   1534                  {
   1535                    case RT_ACTIVE:
   1536                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   7400         MOV     A,#0x0
   \   0000E3   F0           MOVX    @DPTR,A
   1537                      break;
   \   0000E4   802E         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1538          
   1539                    case RT_DISC:
   1540                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   0000E6   85..82       MOV     DPL,?V0
   \   0000E9   85..83       MOV     DPH,?V1
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   7401         MOV     A,#0x1
   \   0000F3   F0           MOVX    @DPTR,A
   1541                      break;
   \   0000F4   801E         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1542          
   1543                    case RT_LINK_FAIL:
   1544                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   0000F6   85..82       MOV     DPL,?V0
   \   0000F9   85..83       MOV     DPH,?V1
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   7402         MOV     A,#0x2
   \   000103   F0           MOVX    @DPTR,A
   1545                      break;
   \   000104   800E         SJMP    ??ZDO_ProcessMgmtRtgReq_8
   1546          
   1547                    case RT_INIT:
   1548                    case RT_REPAIR:
   1549                    default:
   1550                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   000106   85..82       MOV     DPL,?V0
   \   000109   85..83       MOV     DPH,?V1
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   7403         MOV     A,#0x3
   \   000113   F0           MOVX    @DPTR,A
   1551                      break;
   1552                  }
   1553          
   1554                  // Increment pointer to next record
   1555                  pList++;
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   000114   E5..         MOV     A,?V0
   \   000116   2407         ADD     A,#0x7
   \   000118   F5..         MOV     ?V0,A
   \   00011A   5002         JNC     ??ZDO_ProcessMgmtRtgReq_9
   \   00011C   05..         INC     ?V1
   1556                }
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00011E   05..         INC     ?V4
   \   000120   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_3 & 0xFFFF
   1557              }
   1558              else
   1559              {
   1560                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   000123   7E00         MOV     R6,#0x0
   1561              }
   1562            }
   1563          
   1564            // Send response
   1565            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1566                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   000125                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   000125   75..00       MOV     ?V2,#0x0
   \   000128   78..         MOV     R0,#?V2
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012D   85....       MOV     ?V2,?V6
   \   000130   85....       MOV     ?V3,?V7
   \   000133   78..         MOV     R0,#?V2
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000138   EE           MOV     A,R6
   \   000139   F5..         MOV     ?V2,A
   \   00013B   78..         MOV     R0,#?V2
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   EF           MOV     A,R7
   \   000141   F5..         MOV     ?V2,A
   \   000143   78..         MOV     R0,#?V2
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   7405         MOV     A,#0x5
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   FD           MOV     R5,A
   \   00014F   7C00         MOV     R4,#0x0
   \   000151   7406         MOV     A,#0x6
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   E0           MOVX    A,@DPTR
   \   000157   2402         ADD     A,#0x2
   \   000159   FA           MOV     R2,A
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   3400         ADDC    A,#0x0
   \   00015E   FB           MOV     R3,A
   \   00015F   7406         MOV     A,#0x6
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   E0           MOVX    A,@DPTR
   \   000165   F8           MOV     R0,A
   \   000166   A3           INC     DPTR
   \   000167   E0           MOVX    A,@DPTR
   \   000168   C8           XCH     A,R0
   \   000169   240F         ADD     A,#0xf
   \   00016B   F582         MOV     DPL,A
   \   00016D   C8           XCH     A,R0
   \   00016E   3400         ADDC    A,#0x0
   \   000170   F583         MOV     DPH,A
   \   000172   E0           MOVX    A,@DPTR
   \   000173   F9           MOV     R1,A
   \   000174   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000177   7405         MOV     A,#0x5
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017C   E9           MOV     A,R1
   1567          
   1568            if ( pBuf != NULL )
   \   00017D   E5..         MOV     A,?V6
   \   00017F   45..         ORL     A,?V7
   \   000181   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1569            {
   1570              osal_mem_free( pBuf );
   \   000183                ; Setup parameters for call to function osal_mem_free
   \   000183   AA..         MOV     R2,?V6
   \   000185   AB..         MOV     R3,?V7
   \   000187   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1571            }
   1572          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   00018A   7403         MOV     A,#0x3
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018F   7F08         MOV     R7,#0x8
   \   000191   02....       LJMP    ?BANKED_LEAVE_XDATA
   1573          
   1574          /*********************************************************************
   1575           * @fn          ZDO_ProcessMgmtBindReq
   1576           *
   1577           * @brief       This function finishes the processing of the Management
   1578           *              Bind Request and generates the response.
   1579           *
   1580           *   Note:      This function will limit the number of items returned
   1581           *              to ZDO_MAX_BIND_ITEMS items.
   1582           *
   1583           * @param       inMsg - incoming message (request)
   1584           *
   1585           * @return      none
   1586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1587          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   1589          #if defined ( REFLECTOR )
   1590            byte x;
   1591            uint16 maxNumItems;
   1592            uint16 numItems;
   1593            uint8 *pBuf = NULL;
   \   000014   75..00       MOV     ?V6,#0x0
   \   000017   75..00       MOV     ?V7,#0x0
   1594            apsBindingItem_t *pList;
   1595            uint8 StartIndex = inMsg->asdu[0];
   \   00001A   7404         MOV     A,#0x4
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   C8           XCH     A,R0
   \   000024   2413         ADD     A,#0x13
   \   000026   F582         MOV     DPL,A
   \   000028   C8           XCH     A,R0
   \   000029   3400         ADDC    A,#0x0
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F583         MOV     DPH,A
   \   000033   8882         MOV     DPL,R0
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V1,A
   1596            uint8 status;
   1597          
   1598            // Get the number of table items
   1599            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000038                ; Setup parameters for call to function APSME_GetRequest
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?XSTACK_DISP102_8
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   79A3         MOV     R1,#-0x5d
   \   000043   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   000046   E9           MOV     A,R1
   1600          
   1601            if ( maxNumItems > StartIndex )
   \   000047   A8..         MOV     R0,?V1
   \   000049   7900         MOV     R1,#0x0
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FA           MOV     R2,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FB           MOV     R3,A
   \   000055   C3           CLR     C
   \   000056   E8           MOV     A,R0
   \   000057   9A           SUBB    A,R2
   \   000058   E9           MOV     A,R1
   \   000059   9B           SUBB    A,R3
   \   00005A   5017         JNC     ??ZDO_ProcessMgmtBindReq_0
   1602            {
   1603              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   A8..         MOV     R0,?V1
   \   000063   7900         MOV     R1,#0x0
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C3           CLR     C
   \   000067   98           SUBB    A,R0
   \   000068   F8           MOV     R0,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   99           SUBB    A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   E8           MOV     A,R0
   \   00006E   FE           MOV     R6,A
   \   00006F   E9           MOV     A,R1
   \   000070   FF           MOV     R7,A
   \   000071   8004         SJMP    ??ZDO_ProcessMgmtBindReq_1
   1604            }
   1605            else
   1606            {
   1607              numItems = 0;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   000073   7E00         MOV     R6,#0x0
   \   000075   7F00         MOV     R7,#0x0
   1608            }
   1609          
   1610            // limit the size of the list
   1611            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000077   C3           CLR     C
   \   000078   EE           MOV     A,R6
   \   000079   9404         SUBB    A,#0x4
   \   00007B   EF           MOV     A,R7
   \   00007C   9400         SUBB    A,#0x0
   \   00007E   4004         JC      ??ZDO_ProcessMgmtBindReq_2
   1612            {
   1613              numItems = ZDO_MAX_BIND_ITEMS;
   \   000080   7E03         MOV     R6,#0x3
   \   000082   7F00         MOV     R7,#0x0
   1614            }
   1615          
   1616            // Allocate the memory to build the table
   1617            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000084   EE           MOV     A,R6
   \   000085   4F           ORL     A,R7
   \   000086   7003         JNZ     $+5
   \   000088   02....       LJMP    ??ZDO_ProcessMgmtBindReq_3 & 0xFFFF
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   EE           MOV     A,R6
   \   00008C   FA           MOV     R2,A
   \   00008D   EF           MOV     A,R7
   \   00008E   FB           MOV     R3,A
   \   00008F   EA           MOV     A,R2
   \   000090   75F015       MOV     B,#0x15
   \   000093   A4           MUL     AB
   \   000094   CA           XCH     A,R2
   \   000095   A8F0         MOV     R0,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   28           ADD     A,R0
   \   00009C   F8           MOV     R0,A
   \   00009D   75F015       MOV     B,#0x15
   \   0000A0   EB           MOV     A,R3
   \   0000A1   A4           MUL     AB
   \   0000A2   28           ADD     A,R0
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A7   8A..         MOV     ?V2,R2
   \   0000A9   8B..         MOV     ?V3,R3
   \   0000AB   85....       MOV     ?V6,?V2
   \   0000AE   85....       MOV     ?V7,?V3
   \   0000B1   E5..         MOV     A,?V6
   \   0000B3   45..         ORL     A,?V7
   \   0000B5   605B         JZ      ??ZDO_ProcessMgmtBindReq_3
   1618            {
   1619              status = ZSuccess;
   \   0000B7   75..00       MOV     ?V0,#0x0
   1620          
   1621              // Convert buffer to list
   1622              pList = (apsBindingItem_t *)pBuf;
   \   0000BA   85..82       MOV     DPL,?XSP + 0
   \   0000BD   85..83       MOV     DPH,?XSP + 1
   \   0000C0   E5..         MOV     A,?V6
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E5..         MOV     A,?V7
   \   0000C6   F0           MOVX    @DPTR,A
   1623          
   1624              // Loop through items and build list
   1625              for ( x = 0; x < numItems; x++ )
   \   0000C7   75..00       MOV     ?V4,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   0000CA   A8..         MOV     R0,?V4
   \   0000CC   7900         MOV     R1,#0x0
   \   0000CE   C3           CLR     C
   \   0000CF   E8           MOV     A,R0
   \   0000D0   9E           SUBB    A,R6
   \   0000D1   E9           MOV     A,R1
   \   0000D2   9F           SUBB    A,R7
   \   0000D3   5044         JNC     ??ZDO_ProcessMgmtBindReq_5
   1626              {
   1627                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   0000D5                ; Setup parameters for call to function APSME_GetRequest
   \   0000D5   85..82       MOV     DPL,?XSP + 0
   \   0000D8   85..83       MOV     DPH,?XSP + 1
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FC           MOV     R4,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FD           MOV     R5,A
   \   0000E0   AA..         MOV     R2,?V4
   \   0000E2   7B00         MOV     R3,#0x0
   \   0000E4   A8..         MOV     R0,?V1
   \   0000E6   7900         MOV     R1,#0x0
   \   0000E8   EA           MOV     A,R2
   \   0000E9   28           ADD     A,R0
   \   0000EA   FA           MOV     R2,A
   \   0000EB   EB           MOV     A,R3
   \   0000EC   39           ADDC    A,R1
   \   0000ED   FB           MOV     R3,A
   \   0000EE   79A2         MOV     R1,#-0x5e
   \   0000F0   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   0000F3   E9           MOV     A,R1
   1628                pList++;
   \   0000F4   85..82       MOV     DPL,?XSP + 0
   \   0000F7   85..83       MOV     DPH,?XSP + 1
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   2415         ADD     A,#0x15
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   3400         ADDC    A,#0x0
   \   000102   F9           MOV     R1,A
   \   000103   85..82       MOV     DPL,?XSP + 0
   \   000106   85..83       MOV     DPH,?XSP + 1
   \   000109   E8           MOV     A,R0
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
   \   00010C   E9           MOV     A,R1
   \   00010D   F0           MOVX    @DPTR,A
   1629              }
   \   00010E   05..         INC     ?V4
   \   000110   80B8         SJMP    ??ZDO_ProcessMgmtBindReq_4
   1630          
   1631            }
   1632            else
   1633            {
   1634              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   000112   75..8B       MOV     ?V0,#-0x75
   1635              numItems = 0;
   \   000115   7E00         MOV     R6,#0x0
   \   000117   7F00         MOV     R7,#0x0
   1636            }
   1637          
   1638            // Send response
   1639            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1640                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   000119                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   000119   75..00       MOV     ?V2,#0x0
   \   00011C   78..         MOV     R0,#?V2
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000121   85....       MOV     ?V2,?V6
   \   000124   85....       MOV     ?V3,?V7
   \   000127   78..         MOV     R0,#?V2
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012C   EE           MOV     A,R6
   \   00012D   F5..         MOV     ?V2,A
   \   00012F   78..         MOV     R0,#?V2
   \   000131   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000134   E5..         MOV     A,?V1
   \   000136   F5..         MOV     ?V2,A
   \   000138   78..         MOV     R0,#?V2
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013D   7407         MOV     A,#0x7
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F8           MOV     R0,A
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F9           MOV     R1,A
   \   000147   E8           MOV     A,R0
   \   000148   FD           MOV     R5,A
   \   000149   AC..         MOV     R4,?V0
   \   00014B   7409         MOV     A,#0x9
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   2402         ADD     A,#0x2
   \   000153   FA           MOV     R2,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   3400         ADDC    A,#0x0
   \   000158   FB           MOV     R3,A
   \   000159   7409         MOV     A,#0x9
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F8           MOV     R0,A
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   C8           XCH     A,R0
   \   000163   240F         ADD     A,#0xf
   \   000165   F582         MOV     DPL,A
   \   000167   C8           XCH     A,R0
   \   000168   3400         ADDC    A,#0x0
   \   00016A   F583         MOV     DPH,A
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F9           MOV     R1,A
   \   00016E   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   000171   7405         MOV     A,#0x5
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
   \   000176   E9           MOV     A,R1
   1641          
   1642            if ( pBuf )
   \   000177   E5..         MOV     A,?V6
   \   000179   45..         ORL     A,?V7
   \   00017B   6007         JZ      ??ZDO_ProcessMgmtBindReq_6
   1643            {
   1644              osal_mem_free( pBuf );
   \   00017D                ; Setup parameters for call to function osal_mem_free
   \   00017D   AA..         MOV     R2,?V6
   \   00017F   AB..         MOV     R3,?V7
   \   000181   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1645            }
   1646          #else
   1647            (void)inMsg;
   1648          #endif
   1649          }
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   000184   7406         MOV     A,#0x6
   \   000186   12....       LCALL   ?DEALLOC_XSTACK8
   \   000189   7F08         MOV     R7,#0x8
   \   00018B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1650          
   1651          /*********************************************************************
   1652           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1653           *
   1654           * @brief       This function finishes the processing of the Management
   1655           *              Direct Join Request and generates the response.
   1656           *
   1657           * @param       inMsg - incoming message (request)
   1658           *
   1659           * @return      none
   1660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1661          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1662          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1663            uint8 *deviceAddr;
   1664            uint8 capInfo;
   1665            uint8 stat;
   1666          
   1667            // Parse the message
   1668            deviceAddr = inMsg->asdu;
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   88..         MOV     ?V2,R0
   \   00001E   89..         MOV     ?V3,R1
   1669            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   \   000020   EE           MOV     A,R6
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C8           XCH     A,R0
   \   00002E   2408         ADD     A,#0x8
   \   000030   F582         MOV     DPL,A
   \   000032   C8           XCH     A,R0
   \   000033   3400         ADDC    A,#0x0
   \   000035   F583         MOV     DPH,A
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0,A
   1670          
   1671            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \   00003A                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   00003A   A9..         MOV     R1,?V0
   \   00003C   AA..         MOV     R2,?V2
   \   00003E   AB..         MOV     R3,?V3
   \   000040   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000043   E9           MOV     A,R1
   \   000044   C0E0         PUSH    A
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
   1672          
   1673            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00004F                ; Setup parameters for call to function ZDP_SendData
   \   00004F   75..00       MOV     ?V1,#0x0
   \   000052   78..         MOV     R0,#?V1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP100_8
   \   00005C   88..         MOV     ?V4,R0
   \   00005E   89..         MOV     ?V5,R1
   \   000060   78..         MOV     R0,#?V4
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   75..35       MOV     ?V4,#0x35
   \   000068   75..80       MOV     ?V5,#-0x80
   \   00006B   78..         MOV     R0,#?V4
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7901         MOV     R1,#0x1
   \   000072   EE           MOV     A,R6
   \   000073   2402         ADD     A,#0x2
   \   000075   FC           MOV     R4,A
   \   000076   E4           CLR     A
   \   000077   3F           ADDC    A,R7
   \   000078   FD           MOV     R5,A
   \   000079   EE           MOV     A,R6
   \   00007A   240F         ADD     A,#0xf
   \   00007C   FA           MOV     R2,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000083   7405         MOV     A,#0x5
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   E9           MOV     A,R1
   1674          }
   \   000089   7401         MOV     A,#0x1
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   7F06         MOV     R7,#0x6
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
   1675          
   1676          /*********************************************************************
   1677           * @fn          ZDO_ProcessMgmtLeaveReq
   1678           *
   1679           * @brief       This function processes a Management Leave Request
   1680           *              and generates the response.
   1681           *
   1682           * @param       inMsg - incoming message (request)
   1683           *
   1684           * @return      none
   1685           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1686          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1688            NLME_LeaveReq_t req;
   1689            ZStatus_t       status;
   1690            uint8           option;
   1691            uint8 *msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V2
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V3
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A
   1692          
   1693            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1694                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \   00001E                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000025   E9           MOV     A,R1
   \   000026   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   000028                ; Setup parameters for call to function NLME_GetExtAddr
   \   000028   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00002B   8A..         MOV     ?V4,R2
   \   00002D   8B..         MOV     ?V5,R3
   \   00002F   AC..         MOV     R4,?V4
   \   000031   AD..         MOV     R5,?V5
   \   000033                ; Setup parameters for call to function sAddrExtCmp
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00003A   E9           MOV     A,R1
   \   00003B   6401         XRL     A,#0x1
   \   00003D   700E         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1695            {
   1696              // Remove this device
   1697              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   800A         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1698            }
   1699            else
   1700            {
   1701              // Remove child device
   1702              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   EE           MOV     A,R6
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   EF           MOV     A,R7
   \   000056   F0           MOVX    @DPTR,A
   1703            }
   1704          
   1705            option = msg[Z_EXTADDR_LEN];
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V0,A
   1706            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000066   E5..         MOV     A,?V0
   \   000068   A2E6         MOV     C,0xE0 /* A   */.6
   \   00006A   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1707            {
   1708              req.removeChildren = TRUE;
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   7401         MOV     A,#0x1
   \   000073   F0           MOVX    @DPTR,A
   1709            }
   1710          
   1711            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000074   E5..         MOV     A,?V0
   \   000076   A2E7         MOV     C,0xE0 /* A   */.7
   \   000078   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1712            {
   1713               req.rejoin = TRUE;
   \   00007A   7404         MOV     A,#0x4
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   7401         MOV     A,#0x1
   \   000081   F0           MOVX    @DPTR,A
   1714            }
   1715          
   1716            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   7400         MOV     A,#0x0
   \   000089   F0           MOVX    @DPTR,A
   1717          
   1718            status = NLME_LeaveReq( &req );
   \   00008A                ; Setup parameters for call to function NLME_LeaveReq
   \   00008A   7401         MOV     A,#0x1
   \   00008C   12....       LCALL   ?XSTACK_DISP101_8
   \   00008F   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000092   E9           MOV     A,R1
   \   000093   C0E0         PUSH    A
   \   000095   85..82       MOV     DPL,?XSP + 0
   \   000098   85..83       MOV     DPH,?XSP + 1
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   1719          
   1720            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00009E                ; Setup parameters for call to function ZDP_SendData
   \   00009E   75..00       MOV     ?V1,#0x0
   \   0000A1   78..         MOV     R0,#?V1
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AB   88..         MOV     ?V4,R0
   \   0000AD   89..         MOV     ?V5,R1
   \   0000AF   78..         MOV     R0,#?V4
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   75..34       MOV     ?V4,#0x34
   \   0000B7   75..80       MOV     ?V5,#-0x80
   \   0000BA   78..         MOV     R0,#?V4
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   7901         MOV     R1,#0x1
   \   0000C1   E5..         MOV     A,?V2
   \   0000C3   2402         ADD     A,#0x2
   \   0000C5   FC           MOV     R4,A
   \   0000C6   E4           CLR     A
   \   0000C7   35..         ADDC    A,?V3
   \   0000C9   FD           MOV     R5,A
   \   0000CA   E5..         MOV     A,?V2
   \   0000CC   240F         ADD     A,#0xf
   \   0000CE   FA           MOV     R2,A
   \   0000CF   E4           CLR     A
   \   0000D0   35..         ADDC    A,?V3
   \   0000D2   FB           MOV     R3,A
   \   0000D3   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000D6   7405         MOV     A,#0x5
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   E9           MOV     A,R1
   1721          }
   \   0000DC   7406         MOV     A,#0x6
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   7F06         MOV     R7,#0x6
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1722          
   1723          
   1724          /*********************************************************************
   1725           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1726           *
   1727           * @brief       This function processes a Management Permit Join Request
   1728           *              and generates the response.
   1729           *
   1730           * @param       inMsg - incoming message (request)
   1731           *
   1732           * @return      none
   1733           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1734          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1735          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1736            uint8 stat;
   1737            uint8 duration;
   1738            uint8 tcsig;
   1739          
   1740            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0,A
   1741            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   \   000022   EE           MOV     A,R6
   \   000023   2413         ADD     A,#0x13
   \   000025   F582         MOV     DPL,A
   \   000027   E4           CLR     A
   \   000028   3F           ADDC    A,R7
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F583         MOV     DPH,A
   \   000031   8882         MOV     DPL,R0
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V1,A
   1742          
   1743            // Set the network layer permit join duration
   1744            stat = (byte) NLME_PermitJoiningRequest( duration );
   \   000037                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000037   A9..         MOV     R1,?V0
   \   000039   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   00003C   E9           MOV     A,R1
   \   00003D   C0E0         PUSH    A
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
   1745          
   1746            // Handle the Trust Center Significance
   1747            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1748            {
   1749              if ( tcsig == TRUE )
   1750              {
   1751                ZDSecMgrPermitJoining( duration );
   1752              }
   1753            }
   1754          
   1755            // Send a response if unicast
   1756            if ( !inMsg->wasBroadcast )
   \   000048   EE           MOV     A,R6
   \   000049   240B         ADD     A,#0xb
   \   00004B   F582         MOV     DPL,A
   \   00004D   E4           CLR     A
   \   00004E   3F           ADDC    A,R7
   \   00004F   F583         MOV     DPH,A
   \   000051   E0           MOVX    A,@DPTR
   \   000052   703A         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1757            {
   1758              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000054                ; Setup parameters for call to function ZDP_SendData
   \   000054   75..00       MOV     ?V2,#0x0
   \   000057   78..         MOV     R0,#?V2
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005C   7401         MOV     A,#0x1
   \   00005E   12....       LCALL   ?XSTACK_DISP100_8
   \   000061   88..         MOV     ?V2,R0
   \   000063   89..         MOV     ?V3,R1
   \   000065   78..         MOV     R0,#?V2
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   75..36       MOV     ?V2,#0x36
   \   00006D   75..80       MOV     ?V3,#-0x80
   \   000070   78..         MOV     R0,#?V2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   7901         MOV     R1,#0x1
   \   000077   EE           MOV     A,R6
   \   000078   2402         ADD     A,#0x2
   \   00007A   FC           MOV     R4,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   EE           MOV     A,R6
   \   00007F   240F         ADD     A,#0xf
   \   000081   FA           MOV     R2,A
   \   000082   E4           CLR     A
   \   000083   3F           ADDC    A,R7
   \   000084   FB           MOV     R3,A
   \   000085   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000088   7405         MOV     A,#0x5
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   E9           MOV     A,R1
   1759            }
   1760          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00008E   7401         MOV     A,#0x1
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   7F04         MOV     R7,#0x4
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
   1761          
   1762          /*
   1763           * This function stub allows the next higher layer to be notified of
   1764           * a permit joining timeout.
   1765           */
   1766          /*********************************************************************
   1767           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1768           *
   1769           * @brief       This function stub allows the next higher layer to be
   1770           *              notified of a permit joining timeout. Currently, this
   1771           *              directly bypasses the APS layer.
   1772           *
   1773           * @param       none
   1774           *
   1775           * @return      none
   1776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1777          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1778          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1779            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1780            // Currently, only the ZDSecMgr needs to be notified
   1781            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1782            {
   1783              ZDSecMgrPermitJoiningTimeout();
   1784            }
   1785            #endif
   1786          }
   \   000000   02....       LJMP    ?BRET
   1787          
   1788          /*********************************************************************
   1789           * @fn          ZDO_ProcessUserDescReq
   1790           *
   1791           * @brief       This function finishes the processing of the User
   1792           *              Descriptor Request and generates the response.
   1793           *
   1794           * @param       inMsg - incoming message (request)
   1795           *
   1796           * @return      none
   1797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1798          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1799          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1800            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FA           MOV     R2,A
   \   000021   7B00         MOV     R3,#0x0
   \   000023   EE           MOV     A,R6
   \   000024   2413         ADD     A,#0x13
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3F           ADDC    A,R7
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   E4           CLR     A
   \   00003A   C8           XCH     A,R0
   \   00003B   F9           MOV     R1,A
   \   00003C   EA           MOV     A,R2
   \   00003D   28           ADD     A,R0
   \   00003E   F5..         MOV     ?V0,A
   \   000040   EB           MOV     A,R3
   \   000041   39           ADDC    A,R1
   \   000042   F5..         MOV     ?V1,A
   1801            UserDescriptorFormat_t userDesc;
   1802          
   1803            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1804                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000044   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000047   E0           MOVX    A,@DPTR
   \   000048   65..         XRL     A,?V0
   \   00004A   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000050   7062         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000052                ; Setup parameters for call to function osal_nv_read
   \   000052   A8..         MOV     R0,?XSP + 0
   \   000054   A9..         MOV     R1,?XSP + 1
   \   000056   88..         MOV     ?V2,R0
   \   000058   89..         MOV     ?V3,R1
   \   00005A   78..         MOV     R0,#?V2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   75..11       MOV     ?V2,#0x11
   \   000062   75..00       MOV     ?V3,#0x0
   \   000065   78..         MOV     R0,#?V2
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C00         MOV     R4,#0x0
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A81         MOV     R2,#-0x7f
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000075   7404         MOV     A,#0x4
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   7037         JNZ     ??ZDO_ProcessUserDescReq_1
   1805            {
   1806              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00007D                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00007D   75..00       MOV     ?V2,#0x0
   \   000080   78..         MOV     R0,#?V2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   7401         MOV     A,#0x1
   \   000087   12....       LCALL   ?XSTACK_DISP100_8
   \   00008A   88..         MOV     ?V2,R0
   \   00008C   89..         MOV     ?V3,R1
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   AC..         MOV     R4,?V0
   \   000095   AD..         MOV     R5,?V1
   \   000097   EE           MOV     A,R6
   \   000098   2402         ADD     A,#0x2
   \   00009A   FA           MOV     R2,A
   \   00009B   E4           CLR     A
   \   00009C   3F           ADDC    A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   EE           MOV     A,R6
   \   00009F   240F         ADD     A,#0xf
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   3F           ADDC    A,R7
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   E9           MOV     A,R1
   \   0000B2   8038         SJMP    ??ZDO_ProcessUserDescReq_2
   1807            }
   1808            else
   1809            {
   1810              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1811                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   0000B4                ; Setup parameters for call to function ZDP_GenericRsp
   \   0000B4   75..11       MOV     ?V2,#0x11
   \   0000B7   75..80       MOV     ?V3,#-0x80
   \   0000BA   78..         MOV     R0,#?V2
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   EE           MOV     A,R6
   \   0000C5   240E         ADD     A,#0xe
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FD           MOV     R5,A
   \   0000CF   7C84         MOV     R4,#-0x7c
   \   0000D1   EE           MOV     A,R6
   \   0000D2   2402         ADD     A,#0x2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   E4           CLR     A
   \   0000D6   3F           ADDC    A,R7
   \   0000D7   FB           MOV     R3,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   240F         ADD     A,#0xf
   \   0000DB   F582         MOV     DPL,A
   \   0000DD   E4           CLR     A
   \   0000DE   3F           ADDC    A,R7
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000E6   7404         MOV     A,#0x4
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   1812            }
   1813          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000EC   7411         MOV     A,#0x11
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   7F04         MOV     R7,#0x4
   \   0000F3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1814          
   1815          /*********************************************************************
   1816           * @fn          ZDO_ProcessUserDescSet
   1817           *
   1818           * @brief       This function finishes the processing of the User
   1819           *              Descriptor Set and generates the response.
   1820           *
   1821           * @param       inMsg - incoming message (request)
   1822           *
   1823           * @return      none
   1824           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1825          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1826          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   1827            uint8 *msg;
   1828            uint16 aoi;
   1829            UserDescriptorFormat_t userDesc;
   1830            uint8 outMsg[3];
   1831            uint8 status;
   1832          
   1833            msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V6
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V7
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   88..         MOV     ?V4,R0
   \   000020   89..         MOV     ?V5,R1
   1834            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000022   85..82       MOV     DPL,?V4
   \   000025   85..83       MOV     DPH,?V5
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FA           MOV     R2,A
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   85..82       MOV     DPL,?V4
   \   00002F   85..83       MOV     DPH,?V5
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   E8           MOV     A,R0
   \   000041   FE           MOV     R6,A
   \   000042   E9           MOV     A,R1
   \   000043   FF           MOV     R7,A
   1835          
   1836            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000044   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6E           XRL     A,R6
   \   000049   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1837            {
   1838              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000053   85..82       MOV     DPL,?V4
   \   000056   85..83       MOV     DPH,?V5
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   C3           CLR     C
   \   00005D   9410         SUBB    A,#0x10
   \   00005F   5015         JNC     ??ZDO_ProcessUserDescSet_2
   \   000061   85..82       MOV     DPL,?V4
   \   000064   85..83       MOV     DPH,?V5
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   D0E0         POP     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   8008         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   7410         MOV     A,#0x10
   \   00007D   F0           MOVX    @DPTR,A
   1839              msg ++;  // increment one for the length field
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00007E   85..82       MOV     DPL,?V4
   \   000081   85..83       MOV     DPH,?V5
   \   000084   A3           INC     DPTR
   \   000085   8582..       MOV     ?V4,DPL
   \   000088   8583..       MOV     ?V5,DPH
   1840          
   1841              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   85..82       MOV     DPL,?V4
   \   00008E   85..83       MOV     DPH,?V5
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A982         MOV     R1,DPL
   \   000095   AA83         MOV     R2,DPH
   \   000097   7B00         MOV     R3,#0x0
   \   000099   89..         MOV     ?V0,R1
   \   00009B   8A..         MOV     ?V1,R2
   \   00009D   8B..         MOV     ?V2,R3
   \   00009F   78..         MOV     R0,#?V0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A4   7406         MOV     A,#0x6
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FC           MOV     R4,A
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   7407         MOV     A,#0x7
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   AA82         MOV     R2,DPL
   \   0000B4   AB83         MOV     R3,DPH
   \   0000B6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B9   7403         MOV     A,#0x3
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   1842              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   0000BE                ; Setup parameters for call to function osal_nv_write
   \   0000BE   7403         MOV     A,#0x3
   \   0000C0   12....       LCALL   ?XSTACK_DISP100_8
   \   0000C3   88..         MOV     ?V0,R0
   \   0000C5   89..         MOV     ?V1,R1
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   75..11       MOV     ?V0,#0x11
   \   0000CF   75..00       MOV     ?V1,#0x0
   \   0000D2   78..         MOV     R0,#?V0
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   7C00         MOV     R4,#0x0
   \   0000D9   7D00         MOV     R5,#0x0
   \   0000DB   7A81         MOV     R2,#-0x7f
   \   0000DD   7B00         MOV     R3,#0x0
   \   0000DF   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000E2   7404         MOV     A,#0x4
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   E9           MOV     A,R1
   1843              if ( userDesc.len != 0 )
   \   0000E8   7403         MOV     A,#0x3
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   6009         JZ      ??ZDO_ProcessUserDescSet_4
   1844              {
   1845                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000F0   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   D2E4         SETB    0xE0 /* A   */.4
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   8007         SJMP    ??ZDO_ProcessUserDescSet_5
   1846              }
   1847              else
   1848              {
   1849                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000F9   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   C2E4         CLR     0xE0 /* A   */.4
   \   0000FF   F0           MOVX    @DPTR,A
   1850              }
   1851          
   1852              status = ZDP_SUCCESS;
   \                     ??ZDO_ProcessUserDescSet_5:
   \   000100   85..82       MOV     DPL,?XSP + 0
   \   000103   85..83       MOV     DPH,?XSP + 1
   \   000106   7400         MOV     A,#0x0
   \   000108   F0           MOVX    @DPTR,A
   \   000109   8009         SJMP    ??ZDO_ProcessUserDescSet_6
   1853            }
   1854            else
   1855            {
   1856              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   00010B   85..82       MOV     DPL,?XSP + 0
   \   00010E   85..83       MOV     DPH,?XSP + 1
   \   000111   7484         MOV     A,#-0x7c
   \   000113   F0           MOVX    @DPTR,A
   1857            }
   1858          
   1859            outMsg[0] = status;
   1860            outMsg[1] = LO_UINT16( aoi );
   \                     ??ZDO_ProcessUserDescSet_6:
   \   000114   EE           MOV     A,R6
   \   000115   C0E0         PUSH    A
   \   000117   7401         MOV     A,#0x1
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   D0E0         POP     A
   \   00011E   F0           MOVX    @DPTR,A
   1861            outMsg[2] = LO_UINT16( aoi );
   \   00011F   EE           MOV     A,R6
   \   000120   C0E0         PUSH    A
   \   000122   7402         MOV     A,#0x2
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   D0E0         POP     A
   \   000129   F0           MOVX    @DPTR,A
   1862          
   1863            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1864                         inMsg->SecurityUse );
   \   00012A                ; Setup parameters for call to function ZDP_SendData
   \   00012A   E5..         MOV     A,?V6
   \   00012C   240E         ADD     A,#0xe
   \   00012E   F582         MOV     DPL,A
   \   000130   E4           CLR     A
   \   000131   35..         ADDC    A,?V7
   \   000133   F583         MOV     DPH,A
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F5..         MOV     ?V0,A
   \   000138   78..         MOV     R0,#?V0
   \   00013A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013D   7401         MOV     A,#0x1
   \   00013F   12....       LCALL   ?XSTACK_DISP100_8
   \   000142   88..         MOV     ?V0,R0
   \   000144   89..         MOV     ?V1,R1
   \   000146   78..         MOV     R0,#?V0
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014B   75..14       MOV     ?V0,#0x14
   \   00014E   75..80       MOV     ?V1,#-0x80
   \   000151   78..         MOV     R0,#?V0
   \   000153   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000156   7903         MOV     R1,#0x3
   \   000158   E5..         MOV     A,?V6
   \   00015A   2402         ADD     A,#0x2
   \   00015C   FC           MOV     R4,A
   \   00015D   E4           CLR     A
   \   00015E   35..         ADDC    A,?V7
   \   000160   FD           MOV     R5,A
   \   000161   E5..         MOV     A,?V6
   \   000163   240F         ADD     A,#0xf
   \   000165   FA           MOV     R2,A
   \   000166   E4           CLR     A
   \   000167   35..         ADDC    A,?V7
   \   000169   FB           MOV     R3,A
   \   00016A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00016D   7405         MOV     A,#0x5
   \   00016F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000172   E9           MOV     A,R1
   1865          }
   \   000173   7414         MOV     A,#0x14
   \   000175   12....       LCALL   ?DEALLOC_XSTACK8
   \   000178   7F08         MOV     R7,#0x8
   \   00017A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1866          
   1867          /*********************************************************************
   1868           * @fn          ZDO_ProcessDeviceAnnce
   1869           *
   1870           * @brief       This function processes a device annouce message.
   1871           *
   1872           * @param       inMsg - incoming message
   1873           *
   1874           * @return      none
   1875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1876          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1878            ZDO_DeviceAnnce_t Annce;
   1879            AddrMgrEntry_t addrEntry;
   1880            uint8 parentExt[Z_EXTADDR_LEN];
   1881          
   1882            // Parse incoming message
   1883            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1884          
   1885            if ( ZSTACK_END_DEVICE_BUILD )
   1886            {
   1887              // Make sure the message didn't come from myself - end device only
   1888              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001C   8A..         MOV     ?V0,R2
   \   00001E   8B..         MOV     ?V1,R3
   \   000020   AA..         MOV     R2,?V0
   \   000022   AB..         MOV     R3,?V1
   \   000024                ; Setup parameters for call to function sAddrExtCmp
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
   \   00002D   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000030   E9           MOV     A,R1
   \   000031   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   000033                ; Setup parameters for call to function NLME_GetShortAddr
   \   000033   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000036   8A..         MOV     ?V0,R2
   \   000038   8B..         MOV     ?V1,R3
   \   00003A   A8..         MOV     R0,?V0
   \   00003C   A9..         MOV     R1,?V1
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   68           XRL     A,R0
   \   000046   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1889              {
   1890                return;
   1891              }
   1892            }
   1893          
   1894          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1895            // Clean up the neighbor table
   1896            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000050                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000050   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   1897          
   1898            // If address conflict is detected, no need to update the address manager
   1899            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000053                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000053   7402         MOV     A,#0x2
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AC82         MOV     R4,DPL
   \   00005A   AD83         MOV     R5,DPH
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   00006A   E9           MOV     A,R1
   \   00006B   6401         XRL     A,#0x1
   \   00006D   7003         JNZ     $+5
   \   00006F   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1900            {
   1901              return;
   1902            }
   1903          #endif
   1904          
   1905          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1906            // Check for parent's address
   1907            NLME_GetCoordExtAddr( parentExt );
   \   000072                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000072   7418         MOV     A,#0x18
   \   000074   12....       LCALL   ?XSTACK_DISP101_8
   \   000077   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1908            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   00007A                ; Setup parameters for call to function sAddrExtCmp
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   AC82         MOV     R4,DPL
   \   000081   AD83         MOV     R5,DPH
   \   000083   7418         MOV     A,#0x18
   \   000085   12....       LCALL   ?XSTACK_DISP101_8
   \   000088   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00008B   E9           MOV     A,R1
   \   00008C   6037         JZ      ??ZDO_ProcessDeviceAnnce_3
   1909            {
   1910              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   00008E                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00008E   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000091   8A..         MOV     ?V0,R2
   \   000093   8B..         MOV     ?V1,R3
   \   000095   A8..         MOV     R0,?V0
   \   000097   A9..         MOV     R1,?V1
   \   000099   85..82       MOV     DPL,?XSP + 0
   \   00009C   85..83       MOV     DPH,?XSP + 1
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   68           XRL     A,R0
   \   0000A1   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000A6   601D         JZ      ??ZDO_ProcessDeviceAnnce_3
   1911              {
   1912                // Set the Parent's MAC's new short address
   1913                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   90....       MOV     DPTR,#_NIB + 23
   \   0000B6   E8           MOV     A,R0
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E9           MOV     A,R1
   \   0000BA   F0           MOVX    @DPTR,A
   1914                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \   0000BB                ; Setup parameters for call to function ZMacSetReq
   \   0000BB   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   0000BD   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   0000BF   794B         MOV     R1,#0x4b
   \   0000C1   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000C4   E9           MOV     A,R1
   1915              }
   1916            }
   1917          
   1918            if ( ZSTACK_ROUTER_BUILD )
   1919            {
   1920              // If the device annce comes from a end device child that has moved
   1921              // to another parent, remove it from associated device list
   1922          
   1923              // If the dev annce is coming from other device's children,
   1924              // (The dev annce from its own children shall be unicast to itself,
   1925              // So check the mac destination address)
   1926              // Remove it from the associated device list. If it is not
   1927              // a child, no action will be taken in AssocRemove() anyway.
   1928              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1929              {
   1930                associated_devices_t *dev_ptr;
   1931          
   1932                // If it's an end device child
   1933                dev_ptr = AssocGetWithExt( Annce.extAddr );
   1934                if ( dev_ptr )
   1935                {
   1936                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1937                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   1938                  {
   1939                    AssocRemove( Annce.extAddr );
   1940                  }
   1941                }
   1942              }
   1943          
   1944              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   1945              {
   1946                // If an associated device is found with matched extended Address,
   1947                // update its short address
   1948                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   1949                {
   1950                  // Set event to save NV
   1951                  ZDApp_NVUpdate();
   1952                }
   1953              }
   1954            }
   1955          
   1956            // Update the neighbor table
   1957            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000C5                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   0000C5   7402         MOV     A,#0x2
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   AC82         MOV     R4,DPL
   \   0000CC   AD83         MOV     R5,DPH
   \   0000CE   85..82       MOV     DPL,?XSP + 0
   \   0000D1   85..83       MOV     DPH,?XSP + 1
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FA           MOV     R2,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FB           MOV     R3,A
   \   0000D9   12....       LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   1958          
   1959            // Assume that the device has moved, remove existing routing entries
   1960            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   0000DC                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000DC   7900         MOV     R1,#0x0
   \   0000DE   85..82       MOV     DPL,?XSP + 0
   \   0000E1   85..83       MOV     DPH,?XSP + 1
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   FA           MOV     R2,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   FB           MOV     R3,A
   \   0000E9   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   \   0000EC   E9           MOV     A,R1
   1961          
   1962          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1963          
   1964            // Fill in the extended address in address manager if we don't have it already.
   1965            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000ED   740B         MOV     A,#0xb
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   7400         MOV     A,#0x0
   \   0000F4   F0           MOVX    @DPTR,A
   1966            addrEntry.nwkAddr = Annce.nwkAddr;
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   740C         MOV     A,#0xc
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E8           MOV     A,R0
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   E9           MOV     A,R1
   \   000109   F0           MOVX    @DPTR,A
   1967            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \   00010A                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00010A   740B         MOV     A,#0xb
   \   00010C   12....       LCALL   ?XSTACK_DISP101_8
   \   00010F   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000112   E9           MOV     A,R1
   \   000113   6040         JZ      ??ZDO_ProcessDeviceAnnce_5
   1968            {
   1969              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000115                ; Setup parameters for call to function osal_memset
   \   000115   7C08         MOV     R4,#0x8
   \   000117   7D00         MOV     R5,#0x0
   \   000119   7900         MOV     R1,#0x0
   \   00011B   7418         MOV     A,#0x18
   \   00011D   12....       LCALL   ?XSTACK_DISP101_8
   \   000120   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1970              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000123                ; Setup parameters for call to function sAddrExtCmp
   \   000123   740E         MOV     A,#0xe
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   AC82         MOV     R4,DPL
   \   00012A   AD83         MOV     R5,DPH
   \   00012C   7418         MOV     A,#0x18
   \   00012E   12....       LCALL   ?XSTACK_DISP101_8
   \   000131   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000134   E9           MOV     A,R1
   \   000135   601E         JZ      ??ZDO_ProcessDeviceAnnce_5
   1971              {
   1972                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000137                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000137   7402         MOV     A,#0x2
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   AC82         MOV     R4,DPL
   \   00013E   AD83         MOV     R5,DPH
   \   000140   740E         MOV     A,#0xe
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   AA82         MOV     R2,DPL
   \   000147   AB83         MOV     R3,DPH
   \   000149   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1973                AddrMgrEntryUpdate( &addrEntry );
   \   00014C                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00014C   740B         MOV     A,#0xb
   \   00014E   12....       LCALL   ?XSTACK_DISP101_8
   \   000151   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000154   E9           MOV     A,R1
   1974              }
   1975            }
   1976          
   1977            // Update the short address in address manager if it's been changed
   1978            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   000155                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000155   7402         MOV     A,#0x2
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   AC82         MOV     R4,DPL
   \   00015C   AD83         MOV     R5,DPH
   \   00015E   740E         MOV     A,#0xe
   \   000160   12....       LCALL   ?XSTACK_DISP0_8
   \   000163   AA82         MOV     R2,DPL
   \   000165   AB83         MOV     R3,DPH
   \   000167   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1979            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   00016A                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00016A   740B         MOV     A,#0xb
   \   00016C   12....       LCALL   ?XSTACK_DISP101_8
   \   00016F   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000172   E9           MOV     A,R1
   \   000173   6037         JZ      ??ZDO_ProcessDeviceAnnce_2
   1980            {
   1981              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   000175   740C         MOV     A,#0xc
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   F8           MOV     R0,A
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F9           MOV     R1,A
   \   00017F   85..82       MOV     DPL,?XSP + 0
   \   000182   85..83       MOV     DPH,?XSP + 1
   \   000185   E0           MOVX    A,@DPTR
   \   000186   68           XRL     A,R0
   \   000187   7003         JNZ     ??ZDO_ProcessDeviceAnnce_6
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   00018C   601E         JZ      ??ZDO_ProcessDeviceAnnce_2
   1982              {
   1983                addrEntry.nwkAddr = Annce.nwkAddr;
   \   00018E   85..82       MOV     DPL,?XSP + 0
   \   000191   85..83       MOV     DPH,?XSP + 1
   \   000194   E0           MOVX    A,@DPTR
   \   000195   F8           MOV     R0,A
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   F9           MOV     R1,A
   \   000199   740C         MOV     A,#0xc
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   E8           MOV     A,R0
   \   00019F   F0           MOVX    @DPTR,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E9           MOV     A,R1
   \   0001A2   F0           MOVX    @DPTR,A
   1984                AddrMgrEntryUpdate( &addrEntry );
   \   0001A3                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0001A3   740B         MOV     A,#0xb
   \   0001A5   12....       LCALL   ?XSTACK_DISP101_8
   \   0001A8   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   0001AB   E9           MOV     A,R1
   1985              }
   1986            }
   1987          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   0001AC   7420         MOV     A,#0x20
   \   0001AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B1   7F02         MOV     R7,#0x2
   \   0001B3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1988          
   1989          /*********************************************************************
   1990           * @fn          ZDO_BuildSimpleDescBuf
   1991           *
   1992           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1993           *
   1994           * @param       buf  - pointer to a byte array big enough for data.
   1995           * @param       desc - SimpleDescriptionFormat_t *
   1996           *
   1997           * @return      none
   1998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1999          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2000          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2001            byte cnt;
   2002            uint16 *ptr;
   2003          
   2004            *buf++ = desc->EndPoint;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   C0E0         PUSH    A
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   D0E0         POP     A
   \   000016   F0           MOVX    @DPTR,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   AA82         MOV     R2,DPL
   \   00001E   AB83         MOV     R3,DPH
   2005            *buf++ = HI_UINT16( desc->AppProfId );
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V1,A
   \   00002C   E4           CLR     A
   \   00002D   C5..         XCH     A,?V1
   \   00002F   F5..         MOV     ?V0,A
   \   000031   E5..         MOV     A,?V0
   \   000033   C0E0         PUSH    A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   2006            *buf++ = LO_UINT16( desc->AppProfId );
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V1,A
   \   000051   E5..         MOV     A,?V0
   \   000053   C0E0         PUSH    A
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   D0E0         POP     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   A3           INC     DPTR
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   2007            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F5..         MOV     ?V0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F5..         MOV     ?V1,A
   \   000073   E4           CLR     A
   \   000074   C5..         XCH     A,?V1
   \   000076   F5..         MOV     ?V0,A
   \   000078   E5..         MOV     A,?V0
   \   00007A   C0E0         PUSH    A
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   D0E0         POP     A
   \   000082   F0           MOVX    @DPTR,A
   \   000083   8A82         MOV     DPL,R2
   \   000085   8B83         MOV     DPH,R3
   \   000087   A3           INC     DPTR
   \   000088   AA82         MOV     R2,DPL
   \   00008A   AB83         MOV     R3,DPH
   2008            *buf++ = LO_UINT16( desc->AppDeviceId );
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F5..         MOV     ?V0,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F5..         MOV     ?V1,A
   \   00009A   E5..         MOV     A,?V0
   \   00009C   C0E0         PUSH    A
   \   00009E   8A82         MOV     DPL,R2
   \   0000A0   8B83         MOV     DPH,R3
   \   0000A2   D0E0         POP     A
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   8A82         MOV     DPL,R2
   \   0000A7   8B83         MOV     DPH,R3
   \   0000A9   A3           INC     DPTR
   \   0000AA   AA82         MOV     R2,DPL
   \   0000AC   AB83         MOV     R3,DPH
   2009          
   2010            *buf++ = (byte)(desc->AppDevVer << 4);
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   C4           SWAP    A
   \   0000B9   54F0         ANL     A,#0xf0
   \   0000BB   C0E0         PUSH    A
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   8A82         MOV     DPL,R2
   \   0000C6   8B83         MOV     DPH,R3
   \   0000C8   A3           INC     DPTR
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   2011          
   2012            *buf++ = desc->AppNumInClusters;
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   C0E0         PUSH    A
   \   0000DA   8A82         MOV     DPL,R2
   \   0000DC   8B83         MOV     DPH,R3
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   8A82         MOV     DPL,R2
   \   0000E3   8B83         MOV     DPH,R3
   \   0000E5   A3           INC     DPTR
   \   0000E6   AA82         MOV     R2,DPL
   \   0000E8   AB83         MOV     R3,DPH
   2013            ptr = desc->pAppInClusterList;
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F5..         MOV     ?V0,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V1,A
   \   0000FC   AC..         MOV     R4,?V0
   \   0000FE   AD..         MOV     R5,?V1
   2014            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \   000100   7800         MOV     R0,#0x0
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F9           MOV     R1,A
   \   00010E   E8           MOV     A,R0
   \   00010F   C3           CLR     C
   \   000110   99           SUBB    A,R1
   \   000111   504D         JNC     ??ZDO_BuildSimpleDescBuf_1
   2015            {
   2016              *buf++ = HI_UINT16( *ptr );
   \   000113   8C82         MOV     DPL,R4
   \   000115   8D83         MOV     DPH,R5
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F5..         MOV     ?V0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F5..         MOV     ?V1,A
   \   00011E   E4           CLR     A
   \   00011F   C5..         XCH     A,?V1
   \   000121   F5..         MOV     ?V0,A
   \   000123   E5..         MOV     A,?V0
   \   000125   C0E0         PUSH    A
   \   000127   8A82         MOV     DPL,R2
   \   000129   8B83         MOV     DPH,R3
   \   00012B   D0E0         POP     A
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   8A82         MOV     DPL,R2
   \   000130   8B83         MOV     DPH,R3
   \   000132   A3           INC     DPTR
   \   000133   AA82         MOV     R2,DPL
   \   000135   AB83         MOV     R3,DPH
   2017              *buf++ = LO_UINT16( *ptr );
   \   000137   8C82         MOV     DPL,R4
   \   000139   8D83         MOV     DPH,R5
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F5..         MOV     ?V0,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F5..         MOV     ?V1,A
   \   000142   E5..         MOV     A,?V0
   \   000144   C0E0         PUSH    A
   \   000146   8A82         MOV     DPL,R2
   \   000148   8B83         MOV     DPH,R3
   \   00014A   D0E0         POP     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   8A82         MOV     DPL,R2
   \   00014F   8B83         MOV     DPH,R3
   \   000151   A3           INC     DPTR
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   2018            }
   \   000156   EC           MOV     A,R4
   \   000157   2402         ADD     A,#0x2
   \   000159   FC           MOV     R4,A
   \   00015A   5001         JNC     ??ZDO_BuildSimpleDescBuf_2
   \   00015C   0D           INC     R5
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00015D   08           INC     R0
   \   00015E   80A2         SJMP    ??ZDO_BuildSimpleDescBuf_0
   2019          
   2020            *buf++ = desc->AppNumOutClusters;
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000160   8E82         MOV     DPL,R6
   \   000162   8F83         MOV     DPH,R7
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C0E0         PUSH    A
   \   000170   8A82         MOV     DPL,R2
   \   000172   8B83         MOV     DPH,R3
   \   000174   D0E0         POP     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   8A82         MOV     DPL,R2
   \   000179   8B83         MOV     DPH,R3
   \   00017B   A3           INC     DPTR
   \   00017C   AA82         MOV     R2,DPL
   \   00017E   AB83         MOV     R3,DPH
   2021            ptr = desc->pAppOutClusterList;
   \   000180   8E82         MOV     DPL,R6
   \   000182   8F83         MOV     DPH,R7
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F5..         MOV     ?V0,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F5..         MOV     ?V1,A
   \   000195   AC..         MOV     R4,?V0
   \   000197   AD..         MOV     R5,?V1
   2022            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \   000199   7800         MOV     R0,#0x0
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00019B   8E82         MOV     DPL,R6
   \   00019D   8F83         MOV     DPH,R7
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   F9           MOV     R1,A
   \   0001AA   E8           MOV     A,R0
   \   0001AB   C3           CLR     C
   \   0001AC   99           SUBB    A,R1
   \   0001AD   504D         JNC     ??ZDO_BuildSimpleDescBuf_4
   2023            {
   2024              *buf++ = HI_UINT16( *ptr );
   \   0001AF   8C82         MOV     DPL,R4
   \   0001B1   8D83         MOV     DPH,R5
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F5..         MOV     ?V0,A
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   F5..         MOV     ?V1,A
   \   0001BA   E4           CLR     A
   \   0001BB   C5..         XCH     A,?V1
   \   0001BD   F5..         MOV     ?V0,A
   \   0001BF   E5..         MOV     A,?V0
   \   0001C1   C0E0         PUSH    A
   \   0001C3   8A82         MOV     DPL,R2
   \   0001C5   8B83         MOV     DPH,R3
   \   0001C7   D0E0         POP     A
   \   0001C9   F0           MOVX    @DPTR,A
   \   0001CA   8A82         MOV     DPL,R2
   \   0001CC   8B83         MOV     DPH,R3
   \   0001CE   A3           INC     DPTR
   \   0001CF   AA82         MOV     R2,DPL
   \   0001D1   AB83         MOV     R3,DPH
   2025              *buf++ = LO_UINT16( *ptr );
   \   0001D3   8C82         MOV     DPL,R4
   \   0001D5   8D83         MOV     DPH,R5
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F5..         MOV     ?V0,A
   \   0001DA   A3           INC     DPTR
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   F5..         MOV     ?V1,A
   \   0001DE   E5..         MOV     A,?V0
   \   0001E0   C0E0         PUSH    A
   \   0001E2   8A82         MOV     DPL,R2
   \   0001E4   8B83         MOV     DPH,R3
   \   0001E6   D0E0         POP     A
   \   0001E8   F0           MOVX    @DPTR,A
   \   0001E9   8A82         MOV     DPL,R2
   \   0001EB   8B83         MOV     DPH,R3
   \   0001ED   A3           INC     DPTR
   \   0001EE   AA82         MOV     R2,DPL
   \   0001F0   AB83         MOV     R3,DPH
   2026            }
   \   0001F2   EC           MOV     A,R4
   \   0001F3   2402         ADD     A,#0x2
   \   0001F5   FC           MOV     R4,A
   \   0001F6   5001         JNC     ??ZDO_BuildSimpleDescBuf_5
   \   0001F8   0D           INC     R5
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0001F9   08           INC     R0
   \   0001FA   809F         SJMP    ??ZDO_BuildSimpleDescBuf_3
   2027          }
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   0001FC   7F02         MOV     R7,#0x2
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2028          
   2029          /*********************************************************************
   2030           * @fn      ZDO_MatchEndDeviceBind()
   2031           *
   2032           * @brief
   2033           *
   2034           *   Called to match end device binding requests
   2035           *
   2036           * @param  bindReq  - binding request information
   2037           * @param  SecurityUse - Security enable/disable
   2038           *
   2039           * @return  none
   2040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2041          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   2043            zAddrType_t dstAddr;
   2044            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV     R6,#0x0
   2045            uint8 status;
   2046          
   2047            // Is this the first request?
   2048            if ( matchED == NULL )
   \   000010   90....       MOV     DPTR,#matchED
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   6003         JZ      $+5
   \   00001C   02....       LJMP    ??ZDO_MatchEndDeviceBind_0 & 0xFFFF
   2049            {
   2050              // Create match info structure
   2051              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   7A37         MOV     R2,#0x37
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000026   90....       MOV     DPTR,#matchED
   \   000029   EA           MOV     A,R2
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   EB           MOV     A,R3
   \   00002D   F0           MOVX    @DPTR,A
   2052              if ( matchED )
   \   00002E   90....       MOV     DPTR,#matchED
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   E8           MOV     A,R0
   \   000037   49           ORL     A,R1
   \   000038   6030         JZ      ??ZDO_MatchEndDeviceBind_1
   2053              {
   2054                // Clear the structure
   2055                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00003A                ; Setup parameters for call to function osal_memset
   \   00003A   7C37         MOV     R4,#0x37
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7900         MOV     R1,#0x0
   \   000040   90....       MOV     DPTR,#matchED
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FA           MOV     R2,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2056          
   2057                // Copy the first request's information
   2058                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   00004B                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00004B   AC..         MOV     R4,?V4
   \   00004D   AD..         MOV     R5,?V5
   \   00004F   90....       MOV     DPTR,#matchED
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00005A   E9           MOV     A,R1
   \   00005B   7018         JNZ     ??ZDO_MatchEndDeviceBind_2
   2059                {
   2060                  status = ZDP_NO_ENTRY;
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   7488         MOV     A,#-0x78
   \   000065   F0           MOVX    @DPTR,A
   2061                  sendRsp = TRUE;
   \   000066   7E01         MOV     R6,#0x1
   \   000068   800B         SJMP    ??ZDO_MatchEndDeviceBind_2
   2062                }
   2063              }
   2064              else
   2065              {
   2066                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   00006A   85..82       MOV     DPL,?XSP + 0
   \   00006D   85..83       MOV     DPH,?XSP + 1
   \   000070   7488         MOV     A,#-0x78
   \   000072   F0           MOVX    @DPTR,A
   2067                sendRsp = TRUE;
   \   000073   7E01         MOV     R6,#0x1
   2068              }
   2069          
   2070              if ( !sendRsp )
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000075   EE           MOV     A,R6
   \   000076   6003         JZ      $+5
   \   000078   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2071              {
   2072                // Set into the correct state
   2073                matchED->state = ZDMATCH_WAIT_REQ;
   \   00007B   90....       MOV     DPTR,#matchED
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C8           XCH     A,R0
   \   000083   242E         ADD     A,#0x2e
   \   000085   F582         MOV     DPL,A
   \   000087   C8           XCH     A,R0
   \   000088   3400         ADDC    A,#0x0
   \   00008A   F583         MOV     DPH,A
   \   00008C   7401         MOV     A,#0x1
   \   00008E   F0           MOVX    @DPTR,A
   2074          
   2075                // Setup the timeout
   2076                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   00008F                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00008F   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000091   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000093   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FA           MOV     R2,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   00009E   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2077              }
   2078            }
   2079            else
   2080            {
   2081                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   0000A1   90....       MOV     DPTR,#matchED
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F8           MOV     R0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   C8           XCH     A,R0
   \   0000A9   242E         ADD     A,#0x2e
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   C8           XCH     A,R0
   \   0000AE   3400         ADDC    A,#0x0
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   F0           MOVX    @DPTR,A
   2082          
   2083                // Copy the 2nd request's information
   2084                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   0000B5                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   0000B5   AC..         MOV     R4,?V4
   \   0000B7   AD..         MOV     R5,?V5
   \   0000B9   90....       MOV     DPTR,#matchED
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   2417         ADD     A,#0x17
   \   0000BF   FA           MOV     R2,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   3400         ADDC    A,#0x0
   \   0000C4   FB           MOV     R3,A
   \   0000C5   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   0000C8   E9           MOV     A,R1
   \   0000C9   700B         JNZ     ??ZDO_MatchEndDeviceBind_4
   2085                {
   2086                  status = ZDP_NO_ENTRY;
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   7488         MOV     A,#-0x78
   \   0000D3   F0           MOVX    @DPTR,A
   2087                  sendRsp = TRUE;
   \   0000D4   7E01         MOV     R6,#0x1
   2088                }
   2089          
   2090                // Make a source match for ed1
   2091                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2092                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2093                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   0000D6                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000D6   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   0000D9   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0000DC   78..         MOV     R0,#?V0
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E1   90....       MOV     DPTR,#matchED
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F8           MOV     R0,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   C8           XCH     A,R0
   \   0000E9   2429         ADD     A,#0x29
   \   0000EB   F582         MOV     DPL,A
   \   0000ED   C8           XCH     A,R0
   \   0000EE   3400         ADDC    A,#0x0
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000F5   90....       MOV     DPTR,#matchED
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F8           MOV     R0,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   C8           XCH     A,R0
   \   0000FD   2428         ADD     A,#0x28
   \   0000FF   F582         MOV     DPL,A
   \   000101   C8           XCH     A,R0
   \   000102   3400         ADDC    A,#0x0
   \   000104   F583         MOV     DPH,A
   \   000106   E0           MOVX    A,@DPTR
   \   000107   FC           MOV     R4,A
   \   000108   90....       MOV     DPTR,#matchED
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F8           MOV     R0,A
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   C8           XCH     A,R0
   \   000110   2415         ADD     A,#0x15
   \   000112   F582         MOV     DPL,A
   \   000114   C8           XCH     A,R0
   \   000115   3400         ADDC    A,#0x0
   \   000117   F583         MOV     DPH,A
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   FA           MOV     R2,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FB           MOV     R3,A
   \   00011E   90....       MOV     DPTR,#matchED
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F8           MOV     R0,A
   \   000123   A3           INC     DPTR
   \   000124   E0           MOVX    A,@DPTR
   \   000125   C8           XCH     A,R0
   \   000126   2414         ADD     A,#0x14
   \   000128   F582         MOV     DPL,A
   \   00012A   C8           XCH     A,R0
   \   00012B   3400         ADDC    A,#0x0
   \   00012D   F583         MOV     DPH,A
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F9           MOV     R1,A
   \   000131   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   000134   7404         MOV     A,#0x4
   \   000136   12....       LCALL   ?DEALLOC_XSTACK8
   \   000139   E9           MOV     A,R1
   \   00013A   C0E0         PUSH    A
   \   00013C   90....       MOV     DPTR,#matchED
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F8           MOV     R0,A
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   C8           XCH     A,R0
   \   000144   2431         ADD     A,#0x31
   \   000146   F582         MOV     DPL,A
   \   000148   C8           XCH     A,R0
   \   000149   3400         ADDC    A,#0x0
   \   00014B   F583         MOV     DPH,A
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
   2094                if ( matchED->ed1numMatched )
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F8           MOV     R0,A
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   C8           XCH     A,R0
   \   000158   2431         ADD     A,#0x31
   \   00015A   F582         MOV     DPL,A
   \   00015C   C8           XCH     A,R0
   \   00015D   3400         ADDC    A,#0x0
   \   00015F   F583         MOV     DPH,A
   \   000161   E0           MOVX    A,@DPTR
   \   000162   7003         JNZ     $+5
   \   000164   02....       LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
   2095                {
   2096                  // Save the match list
   2097                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   000167                ; Setup parameters for call to function osal_mem_alloc
   \   000167   90....       MOV     DPTR,#matchED
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F8           MOV     R0,A
   \   00016C   A3           INC     DPTR
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C8           XCH     A,R0
   \   00016F   2431         ADD     A,#0x31
   \   000171   F582         MOV     DPL,A
   \   000173   C8           XCH     A,R0
   \   000174   3400         ADDC    A,#0x0
   \   000176   F583         MOV     DPH,A
   \   000178   E0           MOVX    A,@DPTR
   \   000179   FA           MOV     R2,A
   \   00017A   7B00         MOV     R3,#0x0
   \   00017C   EA           MOV     A,R2
   \   00017D   75F002       MOV     B,#0x2
   \   000180   A4           MUL     AB
   \   000181   CA           XCH     A,R2
   \   000182   A8F0         MOV     R0,B
   \   000184   75F000       MOV     B,#0x0
   \   000187   A4           MUL     AB
   \   000188   28           ADD     A,R0
   \   000189   F8           MOV     R0,A
   \   00018A   75F002       MOV     B,#0x2
   \   00018D   EB           MOV     A,R3
   \   00018E   A4           MUL     AB
   \   00018F   28           ADD     A,R0
   \   000190   FB           MOV     R3,A
   \   000191   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000194   8A..         MOV     ?V0,R2
   \   000196   8B..         MOV     ?V1,R3
   \   000198   A8..         MOV     R0,?V0
   \   00019A   A9..         MOV     R1,?V1
   \   00019C   90....       MOV     DPTR,#matchED
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   FA           MOV     R2,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   CA           XCH     A,R2
   \   0001A4   2432         ADD     A,#0x32
   \   0001A6   F582         MOV     DPL,A
   \   0001A8   CA           XCH     A,R2
   \   0001A9   3400         ADDC    A,#0x0
   \   0001AB   F583         MOV     DPH,A
   \   0001AD   E8           MOV     A,R0
   \   0001AE   F0           MOVX    @DPTR,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E9           MOV     A,R1
   \   0001B1   F0           MOVX    @DPTR,A
   2098                  if ( matchED->ed1Matched )
   \   0001B2   90....       MOV     DPTR,#matchED
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   F8           MOV     R0,A
   \   0001B7   A3           INC     DPTR
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   C8           XCH     A,R0
   \   0001BA   2432         ADD     A,#0x32
   \   0001BC   F582         MOV     DPL,A
   \   0001BE   C8           XCH     A,R0
   \   0001BF   3400         ADDC    A,#0x0
   \   0001C1   F583         MOV     DPH,A
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F8           MOV     R0,A
   \   0001C5   A3           INC     DPTR
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   F9           MOV     R1,A
   \   0001C8   E8           MOV     A,R0
   \   0001C9   49           ORL     A,R1
   \   0001CA   6058         JZ      ??ZDO_MatchEndDeviceBind_6
   2099                  {
   2100                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0001CC                ; Setup parameters for call to function osal_memcpy
   \   0001CC   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   0001CF   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0001D2   75..00       MOV     ?V2,#0x0
   \   0001D5   78..         MOV     R0,#?V0
   \   0001D7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001DA   90....       MOV     DPTR,#matchED
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F8           MOV     R0,A
   \   0001DF   A3           INC     DPTR
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   C8           XCH     A,R0
   \   0001E2   2431         ADD     A,#0x31
   \   0001E4   F582         MOV     DPL,A
   \   0001E6   C8           XCH     A,R0
   \   0001E7   3400         ADDC    A,#0x0
   \   0001E9   F583         MOV     DPH,A
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   FC           MOV     R4,A
   \   0001ED   7D00         MOV     R5,#0x0
   \   0001EF   EC           MOV     A,R4
   \   0001F0   75F002       MOV     B,#0x2
   \   0001F3   A4           MUL     AB
   \   0001F4   CC           XCH     A,R4
   \   0001F5   A8F0         MOV     R0,B
   \   0001F7   75F000       MOV     B,#0x0
   \   0001FA   A4           MUL     AB
   \   0001FB   28           ADD     A,R0
   \   0001FC   F8           MOV     R0,A
   \   0001FD   75F002       MOV     B,#0x2
   \   000200   ED           MOV     A,R5
   \   000201   A4           MUL     AB
   \   000202   28           ADD     A,R0
   \   000203   FD           MOV     R5,A
   \   000204   90....       MOV     DPTR,#matchED
   \   000207   E0           MOVX    A,@DPTR
   \   000208   F8           MOV     R0,A
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   C8           XCH     A,R0
   \   00020C   2432         ADD     A,#0x32
   \   00020E   F582         MOV     DPL,A
   \   000210   C8           XCH     A,R0
   \   000211   3400         ADDC    A,#0x0
   \   000213   F583         MOV     DPH,A
   \   000215   E0           MOVX    A,@DPTR
   \   000216   FA           MOV     R2,A
   \   000217   A3           INC     DPTR
   \   000218   E0           MOVX    A,@DPTR
   \   000219   FB           MOV     R3,A
   \   00021A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00021D   7403         MOV     A,#0x3
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000222   800B         SJMP    ??ZDO_MatchEndDeviceBind_5
   2101                  }
   2102                  else
   2103                  {
   2104                    // Allocation error, stop
   2105                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000224   85..82       MOV     DPL,?XSP + 0
   \   000227   85..83       MOV     DPH,?XSP + 1
   \   00022A   7488         MOV     A,#-0x78
   \   00022C   F0           MOVX    @DPTR,A
   2106                    sendRsp = TRUE;
   \   00022D   7E01         MOV     R6,#0x1
   2107                  }
   2108                }
   2109          
   2110                // Make a source match for ed2
   2111                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2112                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2113                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   00022F                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00022F   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000232   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000235   78..         MOV     R0,#?V0
   \   000237   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023A   90....       MOV     DPTR,#matchED
   \   00023D   E0           MOVX    A,@DPTR
   \   00023E   F8           MOV     R0,A
   \   00023F   A3           INC     DPTR
   \   000240   E0           MOVX    A,@DPTR
   \   000241   C8           XCH     A,R0
   \   000242   2412         ADD     A,#0x12
   \   000244   F582         MOV     DPL,A
   \   000246   C8           XCH     A,R0
   \   000247   3400         ADDC    A,#0x0
   \   000249   F583         MOV     DPH,A
   \   00024B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00024E   90....       MOV     DPTR,#matchED
   \   000251   E0           MOVX    A,@DPTR
   \   000252   F8           MOV     R0,A
   \   000253   A3           INC     DPTR
   \   000254   E0           MOVX    A,@DPTR
   \   000255   C8           XCH     A,R0
   \   000256   2411         ADD     A,#0x11
   \   000258   F582         MOV     DPL,A
   \   00025A   C8           XCH     A,R0
   \   00025B   3400         ADDC    A,#0x0
   \   00025D   F583         MOV     DPH,A
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   FC           MOV     R4,A
   \   000261   90....       MOV     DPTR,#matchED
   \   000264   E0           MOVX    A,@DPTR
   \   000265   F8           MOV     R0,A
   \   000266   A3           INC     DPTR
   \   000267   E0           MOVX    A,@DPTR
   \   000268   C8           XCH     A,R0
   \   000269   242C         ADD     A,#0x2c
   \   00026B   F582         MOV     DPL,A
   \   00026D   C8           XCH     A,R0
   \   00026E   3400         ADDC    A,#0x0
   \   000270   F583         MOV     DPH,A
   \   000272   E0           MOVX    A,@DPTR
   \   000273   FA           MOV     R2,A
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   FB           MOV     R3,A
   \   000277   90....       MOV     DPTR,#matchED
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   F8           MOV     R0,A
   \   00027C   A3           INC     DPTR
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   C8           XCH     A,R0
   \   00027F   242B         ADD     A,#0x2b
   \   000281   F582         MOV     DPL,A
   \   000283   C8           XCH     A,R0
   \   000284   3400         ADDC    A,#0x0
   \   000286   F583         MOV     DPH,A
   \   000288   E0           MOVX    A,@DPTR
   \   000289   F9           MOV     R1,A
   \   00028A   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   00028D   7404         MOV     A,#0x4
   \   00028F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000292   E9           MOV     A,R1
   \   000293   F8           MOV     R0,A
   \   000294   E8           MOV     A,R0
   \   000295   C0E0         PUSH    A
   \   000297   90....       MOV     DPTR,#matchED
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   F8           MOV     R0,A
   \   00029C   A3           INC     DPTR
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   C8           XCH     A,R0
   \   00029F   2434         ADD     A,#0x34
   \   0002A1   F582         MOV     DPL,A
   \   0002A3   C8           XCH     A,R0
   \   0002A4   3400         ADDC    A,#0x0
   \   0002A6   F583         MOV     DPH,A
   \   0002A8   D0E0         POP     A
   \   0002AA   F0           MOVX    @DPTR,A
   2114                if ( matchED->ed2numMatched )
   \   0002AB   90....       MOV     DPTR,#matchED
   \   0002AE   E0           MOVX    A,@DPTR
   \   0002AF   F8           MOV     R0,A
   \   0002B0   A3           INC     DPTR
   \   0002B1   E0           MOVX    A,@DPTR
   \   0002B2   C8           XCH     A,R0
   \   0002B3   2434         ADD     A,#0x34
   \   0002B5   F582         MOV     DPL,A
   \   0002B7   C8           XCH     A,R0
   \   0002B8   3400         ADDC    A,#0x0
   \   0002BA   F583         MOV     DPH,A
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   7003         JNZ     $+5
   \   0002BF   02....       LJMP    ??ZDO_MatchEndDeviceBind_7 & 0xFFFF
   2115                {
   2116                  // Save the match list
   2117                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   0002C2                ; Setup parameters for call to function osal_mem_alloc
   \   0002C2   90....       MOV     DPTR,#matchED
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   F8           MOV     R0,A
   \   0002C7   A3           INC     DPTR
   \   0002C8   E0           MOVX    A,@DPTR
   \   0002C9   C8           XCH     A,R0
   \   0002CA   2434         ADD     A,#0x34
   \   0002CC   F582         MOV     DPL,A
   \   0002CE   C8           XCH     A,R0
   \   0002CF   3400         ADDC    A,#0x0
   \   0002D1   F583         MOV     DPH,A
   \   0002D3   E0           MOVX    A,@DPTR
   \   0002D4   FA           MOV     R2,A
   \   0002D5   7B00         MOV     R3,#0x0
   \   0002D7   EA           MOV     A,R2
   \   0002D8   75F002       MOV     B,#0x2
   \   0002DB   A4           MUL     AB
   \   0002DC   CA           XCH     A,R2
   \   0002DD   A8F0         MOV     R0,B
   \   0002DF   75F000       MOV     B,#0x0
   \   0002E2   A4           MUL     AB
   \   0002E3   28           ADD     A,R0
   \   0002E4   F8           MOV     R0,A
   \   0002E5   75F002       MOV     B,#0x2
   \   0002E8   EB           MOV     A,R3
   \   0002E9   A4           MUL     AB
   \   0002EA   28           ADD     A,R0
   \   0002EB   FB           MOV     R3,A
   \   0002EC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0002EF   8A..         MOV     ?V0,R2
   \   0002F1   8B..         MOV     ?V1,R3
   \   0002F3   A8..         MOV     R0,?V0
   \   0002F5   A9..         MOV     R1,?V1
   \   0002F7   90....       MOV     DPTR,#matchED
   \   0002FA   E0           MOVX    A,@DPTR
   \   0002FB   FA           MOV     R2,A
   \   0002FC   A3           INC     DPTR
   \   0002FD   E0           MOVX    A,@DPTR
   \   0002FE   CA           XCH     A,R2
   \   0002FF   2435         ADD     A,#0x35
   \   000301   F582         MOV     DPL,A
   \   000303   CA           XCH     A,R2
   \   000304   3400         ADDC    A,#0x0
   \   000306   F583         MOV     DPH,A
   \   000308   E8           MOV     A,R0
   \   000309   F0           MOVX    @DPTR,A
   \   00030A   A3           INC     DPTR
   \   00030B   E9           MOV     A,R1
   \   00030C   F0           MOVX    @DPTR,A
   2118                  if ( matchED->ed2Matched )
   \   00030D   90....       MOV     DPTR,#matchED
   \   000310   E0           MOVX    A,@DPTR
   \   000311   F8           MOV     R0,A
   \   000312   A3           INC     DPTR
   \   000313   E0           MOVX    A,@DPTR
   \   000314   C8           XCH     A,R0
   \   000315   2435         ADD     A,#0x35
   \   000317   F582         MOV     DPL,A
   \   000319   C8           XCH     A,R0
   \   00031A   3400         ADDC    A,#0x0
   \   00031C   F583         MOV     DPH,A
   \   00031E   E0           MOVX    A,@DPTR
   \   00031F   F8           MOV     R0,A
   \   000320   A3           INC     DPTR
   \   000321   E0           MOVX    A,@DPTR
   \   000322   F9           MOV     R1,A
   \   000323   E8           MOV     A,R0
   \   000324   49           ORL     A,R1
   \   000325   6058         JZ      ??ZDO_MatchEndDeviceBind_8
   2119                  {
   2120                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000327                ; Setup parameters for call to function osal_memcpy
   \   000327   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   00032A   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00032D   75..00       MOV     ?V2,#0x0
   \   000330   78..         MOV     R0,#?V0
   \   000332   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000335   90....       MOV     DPTR,#matchED
   \   000338   E0           MOVX    A,@DPTR
   \   000339   F8           MOV     R0,A
   \   00033A   A3           INC     DPTR
   \   00033B   E0           MOVX    A,@DPTR
   \   00033C   C8           XCH     A,R0
   \   00033D   2434         ADD     A,#0x34
   \   00033F   F582         MOV     DPL,A
   \   000341   C8           XCH     A,R0
   \   000342   3400         ADDC    A,#0x0
   \   000344   F583         MOV     DPH,A
   \   000346   E0           MOVX    A,@DPTR
   \   000347   FC           MOV     R4,A
   \   000348   7D00         MOV     R5,#0x0
   \   00034A   EC           MOV     A,R4
   \   00034B   75F002       MOV     B,#0x2
   \   00034E   A4           MUL     AB
   \   00034F   CC           XCH     A,R4
   \   000350   A8F0         MOV     R0,B
   \   000352   75F000       MOV     B,#0x0
   \   000355   A4           MUL     AB
   \   000356   28           ADD     A,R0
   \   000357   F8           MOV     R0,A
   \   000358   75F002       MOV     B,#0x2
   \   00035B   ED           MOV     A,R5
   \   00035C   A4           MUL     AB
   \   00035D   28           ADD     A,R0
   \   00035E   FD           MOV     R5,A
   \   00035F   90....       MOV     DPTR,#matchED
   \   000362   E0           MOVX    A,@DPTR
   \   000363   F8           MOV     R0,A
   \   000364   A3           INC     DPTR
   \   000365   E0           MOVX    A,@DPTR
   \   000366   C8           XCH     A,R0
   \   000367   2435         ADD     A,#0x35
   \   000369   F582         MOV     DPL,A
   \   00036B   C8           XCH     A,R0
   \   00036C   3400         ADDC    A,#0x0
   \   00036E   F583         MOV     DPH,A
   \   000370   E0           MOVX    A,@DPTR
   \   000371   FA           MOV     R2,A
   \   000372   A3           INC     DPTR
   \   000373   E0           MOVX    A,@DPTR
   \   000374   FB           MOV     R3,A
   \   000375   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000378   7403         MOV     A,#0x3
   \   00037A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00037D   800B         SJMP    ??ZDO_MatchEndDeviceBind_7
   2121                  }
   2122                  else
   2123                  {
   2124                    // Allocation error, stop
   2125                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   00037F   85..82       MOV     DPL,?XSP + 0
   \   000382   85..83       MOV     DPH,?XSP + 1
   \   000385   7488         MOV     A,#-0x78
   \   000387   F0           MOVX    @DPTR,A
   2126                    sendRsp = TRUE;
   \   000388   7E01         MOV     R6,#0x1
   2127                  }
   2128                }
   2129          
   2130                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   00038A   EE           MOV     A,R6
   \   00038B   7034         JNZ     ??ZDO_MatchEndDeviceBind_9
   \   00038D   90....       MOV     DPTR,#matchED
   \   000390   E0           MOVX    A,@DPTR
   \   000391   F8           MOV     R0,A
   \   000392   A3           INC     DPTR
   \   000393   E0           MOVX    A,@DPTR
   \   000394   C8           XCH     A,R0
   \   000395   2431         ADD     A,#0x31
   \   000397   F582         MOV     DPL,A
   \   000399   C8           XCH     A,R0
   \   00039A   3400         ADDC    A,#0x0
   \   00039C   F583         MOV     DPH,A
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   7014         JNZ     ??ZDO_MatchEndDeviceBind_10
   \   0003A1   90....       MOV     DPTR,#matchED
   \   0003A4   E0           MOVX    A,@DPTR
   \   0003A5   F8           MOV     R0,A
   \   0003A6   A3           INC     DPTR
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   C8           XCH     A,R0
   \   0003A9   2434         ADD     A,#0x34
   \   0003AB   F582         MOV     DPL,A
   \   0003AD   C8           XCH     A,R0
   \   0003AE   3400         ADDC    A,#0x0
   \   0003B0   F583         MOV     DPH,A
   \   0003B2   E0           MOVX    A,@DPTR
   \   0003B3   600C         JZ      ??ZDO_MatchEndDeviceBind_9
   2131                {
   2132                  // Do the first unbind/bind state
   2133                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0003B5                ; Setup parameters for call to function ZDMatchSendState
   \   0003B5   7B00         MOV     R3,#0x0
   \   0003B7   7A00         MOV     R2,#0x0
   \   0003B9   7900         MOV     R1,#0x0
   \   0003BB   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0003BE   E9           MOV     A,R1
   \   0003BF   800B         SJMP    ??ZDO_MatchEndDeviceBind_3
   2134                }
   2135                else
   2136                {
   2137                  status = ZDP_NO_MATCH;
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   0003C1   85..82       MOV     DPL,?XSP + 0
   \   0003C4   85..83       MOV     DPH,?XSP + 1
   \   0003C7   7486         MOV     A,#-0x7a
   \   0003C9   F0           MOVX    @DPTR,A
   2138                  sendRsp = TRUE;
   \   0003CA   7E01         MOV     R6,#0x1
   2139                }
   2140            }
   2141          
   2142            if ( sendRsp )
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0003CC   EE           MOV     A,R6
   \   0003CD   7003         JNZ     $+5
   \   0003CF   02....       LJMP    ??ZDO_MatchEndDeviceBind_11 & 0xFFFF
   2143            {
   2144              // send response to this requester
   2145              dstAddr.addrMode = Addr16Bit;
   \   0003D2   7409         MOV     A,#0x9
   \   0003D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D7   7402         MOV     A,#0x2
   \   0003D9   F0           MOVX    @DPTR,A
   2146              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   0003DA   85..82       MOV     DPL,?V4
   \   0003DD   85..83       MOV     DPH,?V5
   \   0003E0   A3           INC     DPTR
   \   0003E1   A3           INC     DPTR
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   F8           MOV     R0,A
   \   0003E4   A3           INC     DPTR
   \   0003E5   E0           MOVX    A,@DPTR
   \   0003E6   F9           MOV     R1,A
   \   0003E7   7401         MOV     A,#0x1
   \   0003E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EC   E8           MOV     A,R0
   \   0003ED   F0           MOVX    @DPTR,A
   \   0003EE   A3           INC     DPTR
   \   0003EF   E9           MOV     A,R1
   \   0003F0   F0           MOVX    @DPTR,A
   2147              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \   0003F1                ; Setup parameters for call to function ZDP_SendData
   \   0003F1   85..82       MOV     DPL,?V4
   \   0003F4   85..83       MOV     DPH,?V5
   \   0003F7   A3           INC     DPTR
   \   0003F8   E0           MOVX    A,@DPTR
   \   0003F9   F5..         MOV     ?V0,A
   \   0003FB   78..         MOV     R0,#?V0
   \   0003FD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000400   7401         MOV     A,#0x1
   \   000402   12....       LCALL   ?XSTACK_DISP100_8
   \   000405   88..         MOV     ?V0,R0
   \   000407   89..         MOV     ?V1,R1
   \   000409   78..         MOV     R0,#?V0
   \   00040B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040E   75..20       MOV     ?V0,#0x20
   \   000411   75..80       MOV     ?V1,#-0x80
   \   000414   78..         MOV     R0,#?V0
   \   000416   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000419   7901         MOV     R1,#0x1
   \   00041B   7406         MOV     A,#0x6
   \   00041D   12....       LCALL   ?XSTACK_DISP102_8
   \   000420   AA..         MOV     R2,?V4
   \   000422   AB..         MOV     R3,?V5
   \   000424   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000427   7405         MOV     A,#0x5
   \   000429   12....       LCALL   ?DEALLOC_XSTACK8
   \   00042C   E9           MOV     A,R1
   2148          
   2149              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   00042D   90....       MOV     DPTR,#matchED
   \   000430   E0           MOVX    A,@DPTR
   \   000431   F8           MOV     R0,A
   \   000432   A3           INC     DPTR
   \   000433   E0           MOVX    A,@DPTR
   \   000434   C8           XCH     A,R0
   \   000435   242E         ADD     A,#0x2e
   \   000437   F582         MOV     DPL,A
   \   000439   C8           XCH     A,R0
   \   00043A   3400         ADDC    A,#0x0
   \   00043C   F583         MOV     DPH,A
   \   00043E   E0           MOVX    A,@DPTR
   \   00043F   6402         XRL     A,#0x2
   \   000441   7069         JNZ     ??ZDO_MatchEndDeviceBind_12
   2150              {
   2151                // send response to first requester
   2152                dstAddr.addrMode = Addr16Bit;
   \   000443   7409         MOV     A,#0x9
   \   000445   12....       LCALL   ?XSTACK_DISP0_8
   \   000448   7402         MOV     A,#0x2
   \   00044A   F0           MOVX    @DPTR,A
   2153                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \   00044B   90....       MOV     DPTR,#matchED
   \   00044E   E0           MOVX    A,@DPTR
   \   00044F   F8           MOV     R0,A
   \   000450   A3           INC     DPTR
   \   000451   E0           MOVX    A,@DPTR
   \   000452   F583         MOV     DPH,A
   \   000454   8882         MOV     DPL,R0
   \   000456   A3           INC     DPTR
   \   000457   A3           INC     DPTR
   \   000458   E0           MOVX    A,@DPTR
   \   000459   F8           MOV     R0,A
   \   00045A   A3           INC     DPTR
   \   00045B   E0           MOVX    A,@DPTR
   \   00045C   F9           MOV     R1,A
   \   00045D   7401         MOV     A,#0x1
   \   00045F   12....       LCALL   ?XSTACK_DISP0_8
   \   000462   E8           MOV     A,R0
   \   000463   F0           MOVX    @DPTR,A
   \   000464   A3           INC     DPTR
   \   000465   E9           MOV     A,R1
   \   000466   F0           MOVX    @DPTR,A
   2154                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   \   000467                ; Setup parameters for call to function ZDP_SendData
   \   000467   90....       MOV     DPTR,#matchED
   \   00046A   E0           MOVX    A,@DPTR
   \   00046B   F8           MOV     R0,A
   \   00046C   A3           INC     DPTR
   \   00046D   E0           MOVX    A,@DPTR
   \   00046E   F583         MOV     DPH,A
   \   000470   8882         MOV     DPL,R0
   \   000472   A3           INC     DPTR
   \   000473   E0           MOVX    A,@DPTR
   \   000474   F5..         MOV     ?V0,A
   \   000476   78..         MOV     R0,#?V0
   \   000478   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00047B   7401         MOV     A,#0x1
   \   00047D   12....       LCALL   ?XSTACK_DISP100_8
   \   000480   88..         MOV     ?V0,R0
   \   000482   89..         MOV     ?V1,R1
   \   000484   78..         MOV     R0,#?V0
   \   000486   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000489   75..20       MOV     ?V0,#0x20
   \   00048C   75..80       MOV     ?V1,#-0x80
   \   00048F   78..         MOV     R0,#?V0
   \   000491   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000494   7901         MOV     R1,#0x1
   \   000496   7406         MOV     A,#0x6
   \   000498   12....       LCALL   ?XSTACK_DISP102_8
   \   00049B   90....       MOV     DPTR,#matchED
   \   00049E   E0           MOVX    A,@DPTR
   \   00049F   FA           MOV     R2,A
   \   0004A0   A3           INC     DPTR
   \   0004A1   E0           MOVX    A,@DPTR
   \   0004A2   FB           MOV     R3,A
   \   0004A3   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0004A6   7405         MOV     A,#0x5
   \   0004A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004AB   E9           MOV     A,R1
   2155              }
   2156          
   2157              // Process ended - release memory used
   2158              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   0004AC                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   0004AC   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2159            }
   2160          }
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   0004AF   740A         MOV     A,#0xa
   \   0004B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004B4   7F06         MOV     R7,#0x6
   \   0004B6   02....       LJMP    ?BANKED_LEAVE_XDATA
   2161          
   2162          /*********************************************************************
   2163           * @fn      ZDO_RemoveMatchMemory()
   2164           *
   2165           * @brief   Called to clear the memory used for the end device bind.
   2166           *
   2167           * @param  none
   2168           *
   2169           * @return  none
   2170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2171          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2172          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2173            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??ZDO_RemoveMatchMemory_0 & 0xFFFF
   2174            {
   2175              if ( matchED->ed2Matched != NULL )
   \   000013   90....       MOV     DPTR,#matchED
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C8           XCH     A,R0
   \   00001B   2435         ADD     A,#0x35
   \   00001D   F582         MOV     DPL,A
   \   00001F   C8           XCH     A,R0
   \   000020   3400         ADDC    A,#0x0
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   49           ORL     A,R1
   \   00002B   6019         JZ      ??ZDO_RemoveMatchMemory_1
   2176              {
   2177                osal_mem_free( matchED->ed2Matched );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   90....       MOV     DPTR,#matchED
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C8           XCH     A,R0
   \   000035   2435         ADD     A,#0x35
   \   000037   F582         MOV     DPL,A
   \   000039   C8           XCH     A,R0
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2178              }
   2179              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000046   90....       MOV     DPTR,#matchED
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C8           XCH     A,R0
   \   00004E   2432         ADD     A,#0x32
   \   000050   F582         MOV     DPL,A
   \   000052   C8           XCH     A,R0
   \   000053   3400         ADDC    A,#0x0
   \   000055   F583         MOV     DPH,A
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   E8           MOV     A,R0
   \   00005D   49           ORL     A,R1
   \   00005E   6019         JZ      ??ZDO_RemoveMatchMemory_2
   2180              {
   2181                osal_mem_free( matchED->ed1Matched );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   90....       MOV     DPTR,#matchED
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   C8           XCH     A,R0
   \   000068   2432         ADD     A,#0x32
   \   00006A   F582         MOV     DPL,A
   \   00006C   C8           XCH     A,R0
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   F583         MOV     DPH,A
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2182              }
   2183              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000079   90....       MOV     DPTR,#matchED
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F8           MOV     R0,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C8           XCH     A,R0
   \   000081   2412         ADD     A,#0x12
   \   000083   F582         MOV     DPL,A
   \   000085   C8           XCH     A,R0
   \   000086   3400         ADDC    A,#0x0
   \   000088   F583         MOV     DPH,A
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   E8           MOV     A,R0
   \   000090   49           ORL     A,R1
   \   000091   6019         JZ      ??ZDO_RemoveMatchMemory_3
   2184              {
   2185                osal_mem_free( matchED->ed1.inClusters );
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   90....       MOV     DPTR,#matchED
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F8           MOV     R0,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   C8           XCH     A,R0
   \   00009B   2412         ADD     A,#0x12
   \   00009D   F582         MOV     DPL,A
   \   00009F   C8           XCH     A,R0
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2186              }
   2187              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   0000AC   90....       MOV     DPTR,#matchED
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   C8           XCH     A,R0
   \   0000B4   2415         ADD     A,#0x15
   \   0000B6   F582         MOV     DPL,A
   \   0000B8   C8           XCH     A,R0
   \   0000B9   3400         ADDC    A,#0x0
   \   0000BB   F583         MOV     DPH,A
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   E8           MOV     A,R0
   \   0000C3   49           ORL     A,R1
   \   0000C4   6019         JZ      ??ZDO_RemoveMatchMemory_4
   2188              {
   2189                osal_mem_free( matchED->ed1.outClusters );
   \   0000C6                ; Setup parameters for call to function osal_mem_free
   \   0000C6   90....       MOV     DPTR,#matchED
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F8           MOV     R0,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   C8           XCH     A,R0
   \   0000CE   2415         ADD     A,#0x15
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   C8           XCH     A,R0
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FA           MOV     R2,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2190              }
   2191              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   0000DF   90....       MOV     DPTR,#matchED
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F8           MOV     R0,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   C8           XCH     A,R0
   \   0000E7   2429         ADD     A,#0x29
   \   0000E9   F582         MOV     DPL,A
   \   0000EB   C8           XCH     A,R0
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F583         MOV     DPH,A
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   E8           MOV     A,R0
   \   0000F6   49           ORL     A,R1
   \   0000F7   6019         JZ      ??ZDO_RemoveMatchMemory_5
   2192              {
   2193                osal_mem_free( matchED->ed2.inClusters );
   \   0000F9                ; Setup parameters for call to function osal_mem_free
   \   0000F9   90....       MOV     DPTR,#matchED
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   C8           XCH     A,R0
   \   000101   2429         ADD     A,#0x29
   \   000103   F582         MOV     DPL,A
   \   000105   C8           XCH     A,R0
   \   000106   3400         ADDC    A,#0x0
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   FA           MOV     R2,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FB           MOV     R3,A
   \   00010F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2194              }
   2195              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000112   90....       MOV     DPTR,#matchED
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F8           MOV     R0,A
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   C8           XCH     A,R0
   \   00011A   242C         ADD     A,#0x2c
   \   00011C   F582         MOV     DPL,A
   \   00011E   C8           XCH     A,R0
   \   00011F   3400         ADDC    A,#0x0
   \   000121   F583         MOV     DPH,A
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F8           MOV     R0,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   E8           MOV     A,R0
   \   000129   49           ORL     A,R1
   \   00012A   6019         JZ      ??ZDO_RemoveMatchMemory_6
   2196              {
   2197                osal_mem_free( matchED->ed2.outClusters );
   \   00012C                ; Setup parameters for call to function osal_mem_free
   \   00012C   90....       MOV     DPTR,#matchED
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F8           MOV     R0,A
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   C8           XCH     A,R0
   \   000134   242C         ADD     A,#0x2c
   \   000136   F582         MOV     DPL,A
   \   000138   C8           XCH     A,R0
   \   000139   3400         ADDC    A,#0x0
   \   00013B   F583         MOV     DPH,A
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FA           MOV     R2,A
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   FB           MOV     R3,A
   \   000142   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2198              }
   2199          
   2200              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000145                ; Setup parameters for call to function osal_mem_free
   \   000145   90....       MOV     DPTR,#matchED
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FA           MOV     R2,A
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FB           MOV     R3,A
   \   00014D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2201              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   7400         MOV     A,#0x0
   \   000155   F0           MOVX    @DPTR,A
   \   000156   A3           INC     DPTR
   \   000157   7400         MOV     A,#0x0
   \   000159   F0           MOVX    @DPTR,A
   2202            }
   2203          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   00015A   D083         POP     DPH
   \   00015C   D082         POP     DPL
   \   00015E   02....       LJMP    ?BRET
   2204          
   2205          /*********************************************************************
   2206           * @fn      ZDO_CopyMatchInfo()
   2207           *
   2208           * @brief   Called to copy memory used for the end device bind.
   2209           *
   2210           * @param  srcReq - source information
   2211           * @param  dstReq - destination location
   2212           *
   2213           * @return  TRUE if copy was successful.
   2214           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2215          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2216          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   2217            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V3,#0x1
   2218          
   2219            // Copy bind information into the match info structure
   2220            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   85....       MOV     ?V0,?V4
   \   000013   85....       MOV     ?V1,?V5
   \   000016   75..00       MOV     ?V2,#0x0
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001E   7C17         MOV     R4,#0x17
   \   000020   7D00         MOV     R5,#0x0
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
   2221          
   2222            // Initialize the destination cluster pointers
   2223            destReq->inClusters = NULL;
   \   00002E   EE           MOV     A,R6
   \   00002F   2412         ADD     A,#0x12
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   F583         MOV     DPH,A
   \   000037   7400         MOV     A,#0x0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   7400         MOV     A,#0x0
   \   00003D   F0           MOVX    @DPTR,A
   2224            destReq->outClusters = NULL;
   \   00003E   EE           MOV     A,R6
   \   00003F   2415         ADD     A,#0x15
   \   000041   F582         MOV     DPL,A
   \   000043   E4           CLR     A
   \   000044   3F           ADDC    A,R7
   \   000045   F583         MOV     DPH,A
   \   000047   7400         MOV     A,#0x0
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
   2225          
   2226            // Copy input cluster IDs
   2227            if ( srcReq->numInClusters )
   \   00004E   E5..         MOV     A,?V4
   \   000050   2411         ADD     A,#0x11
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   35..         ADDC    A,?V5
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   7003         JNZ     $+5
   \   00005C   02....       LJMP    ??ZDO_CopyMatchInfo_0 & 0xFFFF
   2228            {
   2229              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   E5..         MOV     A,?V4
   \   000061   2411         ADD     A,#0x11
   \   000063   F582         MOV     DPL,A
   \   000065   E4           CLR     A
   \   000066   35..         ADDC    A,?V5
   \   000068   F583         MOV     DPH,A
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   EA           MOV     A,R2
   \   00006F   75F002       MOV     B,#0x2
   \   000072   A4           MUL     AB
   \   000073   CA           XCH     A,R2
   \   000074   A8F0         MOV     R0,B
   \   000076   75F000       MOV     B,#0x0
   \   000079   A4           MUL     AB
   \   00007A   28           ADD     A,R0
   \   00007B   F8           MOV     R0,A
   \   00007C   75F002       MOV     B,#0x2
   \   00007F   EB           MOV     A,R3
   \   000080   A4           MUL     AB
   \   000081   28           ADD     A,R0
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000086   EE           MOV     A,R6
   \   000087   2412         ADD     A,#0x12
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   3F           ADDC    A,R7
   \   00008D   F583         MOV     DPH,A
   \   00008F   EA           MOV     A,R2
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   EB           MOV     A,R3
   \   000093   F0           MOVX    @DPTR,A
   2230              if ( destReq->inClusters )
   \   000094   EE           MOV     A,R6
   \   000095   2412         ADD     A,#0x12
   \   000097   F582         MOV     DPL,A
   \   000099   E4           CLR     A
   \   00009A   3F           ADDC    A,R7
   \   00009B   F583         MOV     DPH,A
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F8           MOV     R0,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   E8           MOV     A,R0
   \   0000A3   49           ORL     A,R1
   \   0000A4   6056         JZ      ??ZDO_CopyMatchInfo_1
   2231              {
   2232                // Copy the clusters
   2233                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2234                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   0000A6                ; Setup parameters for call to function osal_memcpy
   \   0000A6   E5..         MOV     A,?V4
   \   0000A8   2412         ADD     A,#0x12
   \   0000AA   F582         MOV     DPL,A
   \   0000AC   E4           CLR     A
   \   0000AD   35..         ADDC    A,?V5
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F5..         MOV     ?V0,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F5..         MOV     ?V1,A
   \   0000B8   75..00       MOV     ?V2,#0x0
   \   0000BB   78..         MOV     R0,#?V0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C0   E5..         MOV     A,?V4
   \   0000C2   2411         ADD     A,#0x11
   \   0000C4   F582         MOV     DPL,A
   \   0000C6   E4           CLR     A
   \   0000C7   35..         ADDC    A,?V5
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FC           MOV     R4,A
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   EC           MOV     A,R4
   \   0000D0   75F002       MOV     B,#0x2
   \   0000D3   A4           MUL     AB
   \   0000D4   CC           XCH     A,R4
   \   0000D5   A8F0         MOV     R0,B
   \   0000D7   75F000       MOV     B,#0x0
   \   0000DA   A4           MUL     AB
   \   0000DB   28           ADD     A,R0
   \   0000DC   F8           MOV     R0,A
   \   0000DD   75F002       MOV     B,#0x2
   \   0000E0   ED           MOV     A,R5
   \   0000E1   A4           MUL     AB
   \   0000E2   28           ADD     A,R0
   \   0000E3   FD           MOV     R5,A
   \   0000E4   EE           MOV     A,R6
   \   0000E5   2412         ADD     A,#0x12
   \   0000E7   F582         MOV     DPL,A
   \   0000E9   E4           CLR     A
   \   0000EA   3F           ADDC    A,R7
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   FA           MOV     R2,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FB           MOV     R3,A
   \   0000F2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2235              }
   2236              else
   2237              {
   2238                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   0000FC   75..00       MOV     ?V3,#0x0
   2239              }
   2240            }
   2241          
   2242            // Copy output cluster IDs
   2243            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   0000FF   E5..         MOV     A,?V4
   \   000101   2414         ADD     A,#0x14
   \   000103   F582         MOV     DPL,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V5
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   7003         JNZ     $+5
   \   00010D   02....       LJMP    ??ZDO_CopyMatchInfo_2 & 0xFFFF
   2244            {
   2245              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000110                ; Setup parameters for call to function osal_mem_alloc
   \   000110   E5..         MOV     A,?V4
   \   000112   2414         ADD     A,#0x14
   \   000114   F582         MOV     DPL,A
   \   000116   E4           CLR     A
   \   000117   35..         ADDC    A,?V5
   \   000119   F583         MOV     DPH,A
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   FA           MOV     R2,A
   \   00011D   7B00         MOV     R3,#0x0
   \   00011F   EA           MOV     A,R2
   \   000120   75F002       MOV     B,#0x2
   \   000123   A4           MUL     AB
   \   000124   CA           XCH     A,R2
   \   000125   A8F0         MOV     R0,B
   \   000127   75F000       MOV     B,#0x0
   \   00012A   A4           MUL     AB
   \   00012B   28           ADD     A,R0
   \   00012C   F8           MOV     R0,A
   \   00012D   75F002       MOV     B,#0x2
   \   000130   EB           MOV     A,R3
   \   000131   A4           MUL     AB
   \   000132   28           ADD     A,R0
   \   000133   FB           MOV     R3,A
   \   000134   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000137   EE           MOV     A,R6
   \   000138   2415         ADD     A,#0x15
   \   00013A   F582         MOV     DPL,A
   \   00013C   E4           CLR     A
   \   00013D   3F           ADDC    A,R7
   \   00013E   F583         MOV     DPH,A
   \   000140   EA           MOV     A,R2
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   EB           MOV     A,R3
   \   000144   F0           MOVX    @DPTR,A
   2246              if ( destReq->outClusters )
   \   000145   EE           MOV     A,R6
   \   000146   2415         ADD     A,#0x15
   \   000148   F582         MOV     DPL,A
   \   00014A   E4           CLR     A
   \   00014B   3F           ADDC    A,R7
   \   00014C   F583         MOV     DPH,A
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   E8           MOV     A,R0
   \   000154   49           ORL     A,R1
   \   000155   6056         JZ      ??ZDO_CopyMatchInfo_3
   2247              {
   2248                // Copy the clusters
   2249                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2250                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000157                ; Setup parameters for call to function osal_memcpy
   \   000157   E5..         MOV     A,?V4
   \   000159   2415         ADD     A,#0x15
   \   00015B   F582         MOV     DPL,A
   \   00015D   E4           CLR     A
   \   00015E   35..         ADDC    A,?V5
   \   000160   F583         MOV     DPH,A
   \   000162   E0           MOVX    A,@DPTR
   \   000163   F5..         MOV     ?V0,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F5..         MOV     ?V1,A
   \   000169   75..00       MOV     ?V2,#0x0
   \   00016C   78..         MOV     R0,#?V0
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000171   E5..         MOV     A,?V4
   \   000173   2414         ADD     A,#0x14
   \   000175   F582         MOV     DPL,A
   \   000177   E4           CLR     A
   \   000178   35..         ADDC    A,?V5
   \   00017A   F583         MOV     DPH,A
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   FC           MOV     R4,A
   \   00017E   7D00         MOV     R5,#0x0
   \   000180   EC           MOV     A,R4
   \   000181   75F002       MOV     B,#0x2
   \   000184   A4           MUL     AB
   \   000185   CC           XCH     A,R4
   \   000186   A8F0         MOV     R0,B
   \   000188   75F000       MOV     B,#0x0
   \   00018B   A4           MUL     AB
   \   00018C   28           ADD     A,R0
   \   00018D   F8           MOV     R0,A
   \   00018E   75F002       MOV     B,#0x2
   \   000191   ED           MOV     A,R5
   \   000192   A4           MUL     AB
   \   000193   28           ADD     A,R0
   \   000194   FD           MOV     R5,A
   \   000195   EE           MOV     A,R6
   \   000196   2415         ADD     A,#0x15
   \   000198   F582         MOV     DPL,A
   \   00019A   E4           CLR     A
   \   00019B   3F           ADDC    A,R7
   \   00019C   F583         MOV     DPH,A
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   FA           MOV     R2,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   FB           MOV     R3,A
   \   0001A3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001A6   7403         MOV     A,#0x3
   \   0001A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AB   8003         SJMP    ??ZDO_CopyMatchInfo_2
   2251              }
   2252              else
   2253              {
   2254                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_3:
   \   0001AD   75..00       MOV     ?V3,#0x0
   2255              }
   2256            }
   2257          
   2258            if ( allOK == FALSE )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0001B0   E5..         MOV     A,?V3
   \   0001B2   7046         JNZ     ??ZDO_CopyMatchInfo_4
   2259            {
   2260              if ( destReq->inClusters != NULL )
   \   0001B4   EE           MOV     A,R6
   \   0001B5   2412         ADD     A,#0x12
   \   0001B7   F582         MOV     DPL,A
   \   0001B9   E4           CLR     A
   \   0001BA   3F           ADDC    A,R7
   \   0001BB   F583         MOV     DPH,A
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F8           MOV     R0,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   E8           MOV     A,R0
   \   0001C3   49           ORL     A,R1
   \   0001C4   6011         JZ      ??ZDO_CopyMatchInfo_5
   2261              {
   2262                osal_mem_free( destReq->inClusters );
   \   0001C6                ; Setup parameters for call to function osal_mem_free
   \   0001C6   EE           MOV     A,R6
   \   0001C7   2412         ADD     A,#0x12
   \   0001C9   F582         MOV     DPL,A
   \   0001CB   E4           CLR     A
   \   0001CC   3F           ADDC    A,R7
   \   0001CD   F583         MOV     DPH,A
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   FA           MOV     R2,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   FB           MOV     R3,A
   \   0001D4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2263              }
   2264              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0001D7   EE           MOV     A,R6
   \   0001D8   2415         ADD     A,#0x15
   \   0001DA   F582         MOV     DPL,A
   \   0001DC   E4           CLR     A
   \   0001DD   3F           ADDC    A,R7
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   F9           MOV     R1,A
   \   0001E5   E8           MOV     A,R0
   \   0001E6   49           ORL     A,R1
   \   0001E7   6011         JZ      ??ZDO_CopyMatchInfo_4
   2265              {
   2266                osal_mem_free( destReq->outClusters );
   \   0001E9                ; Setup parameters for call to function osal_mem_free
   \   0001E9   EE           MOV     A,R6
   \   0001EA   2415         ADD     A,#0x15
   \   0001EC   F582         MOV     DPL,A
   \   0001EE   E4           CLR     A
   \   0001EF   3F           ADDC    A,R7
   \   0001F0   F583         MOV     DPH,A
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FA           MOV     R2,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   FB           MOV     R3,A
   \   0001F7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2267              }
   2268            }
   2269          
   2270            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0001FA   A9..         MOV     R1,?V3
   \   0001FC   7F06         MOV     R7,#0x6
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2271          }
   2272          
   2273          /*********************************************************************
   2274           * @fn      ZDMatchSendState()
   2275           *
   2276           * @brief   State machine for the End device match message algorithm.
   2277           *
   2278           * @param  reason - state of algoritm
   2279           * @param  status - initial message status
   2280           * @param  TransSeq - next transaction sequence number
   2281           *
   2282           * @return  FALSE if error and we are not currently matching, TRUE
   2283           *          if success.
   2284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2285          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   C0E0         PUSH    A
   \   00000D   7401         MOV     A,#0x1
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EB           MOV     A,R3
   \   000016   C0E0         PUSH    A
   \   000018   7404         MOV     A,#0x4
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   89..         MOV     ?V2,R1
   2287            uint8 *dstIEEEAddr = NULL;
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   7400         MOV     A,#0x0
   \   00002D   F0           MOVX    @DPTR,A
   2288            uint8 dstEP = 0xFF;
   \   00002E   75..FF       MOV     ?V3,#-0x1
   2289            zAddrType_t dstAddr;
   2290            zAddrType_t destinationAddr;
   2291            uint16 msgType;
   2292            uint16 clusterID = 0xFFFF;
   \   000031   7EFF         MOV     R6,#-0x1
   \   000033   7FFF         MOV     R7,#-0x1
   2293            ZDEndDeviceBind_t *ed = NULL;
   \   000035   75..00       MOV     ?V6,#0x0
   \   000038   75..00       MOV     ?V7,#0x0
   2294            uint8 rspStatus = ZDP_SUCCESS;
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   7400         MOV     A,#0x0
   \   000043   F0           MOVX    @DPTR,A
   2295          
   2296            if ( matchED == NULL )
   \   000044   90....       MOV     DPTR,#matchED
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   E8           MOV     A,R0
   \   00004D   49           ORL     A,R1
   \   00004E   7005         JNZ     ??ZDMatchSendState_0
   2297            {
   2298              return ( FALSE );
   \   000050   7900         MOV     R1,#0x0
   \   000052   02....       LJMP    ??ZDMatchSendState_1 & 0xFFFF
   2299            }
   2300          
   2301            // Check sequence number
   2302            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_0:
   \   000055   7403         MOV     A,#0x3
   \   000057   65..         XRL     A,?V2
   \   000059   6006         JZ      ??ZDMatchSendState_2
   \   00005B   7402         MOV     A,#0x2
   \   00005D   65..         XRL     A,?V2
   \   00005F   7021         JNZ     ??ZDMatchSendState_3
   2303            {
   2304              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_2:
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   90....       MOV     DPTR,#matchED
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F8           MOV     R0,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C8           XCH     A,R0
   \   000070   2430         ADD     A,#0x30
   \   000072   F582         MOV     DPL,A
   \   000074   C8           XCH     A,R0
   \   000075   3400         ADDC    A,#0x0
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   69           XRL     A,R1
   \   00007B   6005         JZ      ??ZDMatchSendState_3
   2305              {
   2306                return( FALSE ); // ignore the message
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   02....       LJMP    ??ZDMatchSendState_1 & 0xFFFF
   2307              }
   2308            }
   2309          
   2310            // turn off timer
   2311            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_3:
   \   000082                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000082   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000084   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000086   7A00         MOV     R2,#0x0
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2312          
   2313            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00008D   7401         MOV     A,#0x1
   \   00008F   65..         XRL     A,?V2
   \   000091   7009         JNZ     ??ZDMatchSendState_4
   2314            {
   2315              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   7485         MOV     A,#-0x7b
   \   00009B   F0           MOVX    @DPTR,A
   2316            }
   2317          
   2318            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   00009C   E5..         MOV     A,?V2
   \   00009E   6006         JZ      ??ZDMatchSendState_5
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   65..         XRL     A,?V2
   \   0000A4   7035         JNZ     ??ZDMatchSendState_6
   2319            {
   2320              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_5:
   \   0000A6   90....       MOV     DPTR,#matchED
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   C8           XCH     A,R0
   \   0000AE   242F         ADD     A,#0x2f
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   C8           XCH     A,R0
   \   0000B3   3400         ADDC    A,#0x0
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   F0           MOVX    @DPTR,A
   2321          
   2322              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   0000BA   7403         MOV     A,#0x3
   \   0000BC   65..         XRL     A,?V2
   \   0000BE   7053         JNZ     ??ZDMatchSendState_7
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   604B         JZ      ??ZDMatchSendState_7
   2323              {
   2324                rspStatus = status;
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   C0E0         PUSH    A
   \   0000D0   85..82       MOV     DPL,?XSP + 0
   \   0000D3   85..83       MOV     DPH,?XSP + 1
   \   0000D6   D0E0         POP     A
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   8038         SJMP    ??ZDMatchSendState_7
   2325              }
   2326            }
   2327            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_6:
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   65..         XRL     A,?V2
   \   0000DF   7032         JNZ     ??ZDMatchSendState_7
   2328            {
   2329              if ( status == ZDP_SUCCESS )
   \   0000E1   7401         MOV     A,#0x1
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   7016         JNZ     ??ZDMatchSendState_8
   2330              {
   2331                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   0000E9   90....       MOV     DPTR,#matchED
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F8           MOV     R0,A
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   C8           XCH     A,R0
   \   0000F1   242F         ADD     A,#0x2f
   \   0000F3   F582         MOV     DPL,A
   \   0000F5   C8           XCH     A,R0
   \   0000F6   3400         ADDC    A,#0x0
   \   0000F8   F583         MOV     DPH,A
   \   0000FA   7401         MOV     A,#0x1
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   8014         SJMP    ??ZDMatchSendState_7
   2332              }
   2333              else
   2334              {
   2335                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_8:
   \   0000FF   90....       MOV     DPTR,#matchED
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F8           MOV     R0,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C8           XCH     A,R0
   \   000107   242F         ADD     A,#0x2f
   \   000109   F582         MOV     DPL,A
   \   00010B   C8           XCH     A,R0
   \   00010C   3400         ADDC    A,#0x0
   \   00010E   F583         MOV     DPH,A
   \   000110   7402         MOV     A,#0x2
   \   000112   F0           MOVX    @DPTR,A
   2336              }
   2337            }
   2338          
   2339            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_7:
   \   000113   E5..         MOV     A,?V2
   \   000115   606A         JZ      ??ZDMatchSendState_9
   \   000117   90....       MOV     DPTR,#matchED
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   F8           MOV     R0,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   C8           XCH     A,R0
   \   00011F   242F         ADD     A,#0x2f
   \   000121   F582         MOV     DPL,A
   \   000123   C8           XCH     A,R0
   \   000124   3400         ADDC    A,#0x0
   \   000126   F583         MOV     DPH,A
   \   000128   E0           MOVX    A,@DPTR
   \   000129   6401         XRL     A,#0x1
   \   00012B   7054         JNZ     ??ZDMatchSendState_9
   2340            {
   2341              // Move to the next cluster ID
   2342              if ( matchED->ed1numMatched )
   \   00012D   90....       MOV     DPTR,#matchED
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F8           MOV     R0,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   C8           XCH     A,R0
   \   000135   2431         ADD     A,#0x31
   \   000137   F582         MOV     DPL,A
   \   000139   C8           XCH     A,R0
   \   00013A   3400         ADDC    A,#0x0
   \   00013C   F583         MOV     DPH,A
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   6017         JZ      ??ZDMatchSendState_10
   2343              {
   2344                matchED->ed1numMatched--;
   \   000141   90....       MOV     DPTR,#matchED
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F8           MOV     R0,A
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C8           XCH     A,R0
   \   000149   2431         ADD     A,#0x31
   \   00014B   F582         MOV     DPL,A
   \   00014D   C8           XCH     A,R0
   \   00014E   3400         ADDC    A,#0x0
   \   000150   F583         MOV     DPH,A
   \   000152   E0           MOVX    A,@DPTR
   \   000153   24FF         ADD     A,#-0x1
   \   000155   F0           MOVX    @DPTR,A
   \   000156   8029         SJMP    ??ZDMatchSendState_9
   2345              }
   2346              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_10:
   \   000158   90....       MOV     DPTR,#matchED
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F8           MOV     R0,A
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   C8           XCH     A,R0
   \   000160   2434         ADD     A,#0x34
   \   000162   F582         MOV     DPL,A
   \   000164   C8           XCH     A,R0
   \   000165   3400         ADDC    A,#0x0
   \   000167   F583         MOV     DPH,A
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   6015         JZ      ??ZDMatchSendState_9
   2347              {
   2348                matchED->ed2numMatched--;
   \   00016C   90....       MOV     DPTR,#matchED
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F8           MOV     R0,A
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   C8           XCH     A,R0
   \   000174   2434         ADD     A,#0x34
   \   000176   F582         MOV     DPL,A
   \   000178   C8           XCH     A,R0
   \   000179   3400         ADDC    A,#0x0
   \   00017B   F583         MOV     DPH,A
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   24FF         ADD     A,#-0x1
   \   000180   F0           MOVX    @DPTR,A
   2349              }
   2350            }
   2351          
   2352            // What message do we send now
   2353            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_9:
   \   000181   90....       MOV     DPTR,#matchED
   \   000184   E0           MOVX    A,@DPTR
   \   000185   F8           MOV     R0,A
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   C8           XCH     A,R0
   \   000189   2431         ADD     A,#0x31
   \   00018B   F582         MOV     DPL,A
   \   00018D   C8           XCH     A,R0
   \   00018E   3400         ADDC    A,#0x0
   \   000190   F583         MOV     DPH,A
   \   000192   E0           MOVX    A,@DPTR
   \   000193   7003         JNZ     $+5
   \   000195   02....       LJMP    ??ZDMatchSendState_11 & 0xFFFF
   2354            {
   2355              ed = &(matchED->ed1);
   \   000198   90....       MOV     DPTR,#matchED
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   F8           MOV     R0,A
   \   00019D   A3           INC     DPTR
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   F9           MOV     R1,A
   \   0001A0   88..         MOV     ?V6,R0
   \   0001A2   89..         MOV     ?V7,R1
   2356              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   0001A4   90....       MOV     DPTR,#matchED
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F8           MOV     R0,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   C8           XCH     A,R0
   \   0001AC   2431         ADD     A,#0x31
   \   0001AE   F582         MOV     DPL,A
   \   0001B0   C8           XCH     A,R0
   \   0001B1   3400         ADDC    A,#0x0
   \   0001B3   F583         MOV     DPH,A
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   FA           MOV     R2,A
   \   0001B7   7B00         MOV     R3,#0x0
   \   0001B9   EA           MOV     A,R2
   \   0001BA   75F002       MOV     B,#0x2
   \   0001BD   A4           MUL     AB
   \   0001BE   CA           XCH     A,R2
   \   0001BF   A8F0         MOV     R0,B
   \   0001C1   75F000       MOV     B,#0x0
   \   0001C4   A4           MUL     AB
   \   0001C5   28           ADD     A,R0
   \   0001C6   F8           MOV     R0,A
   \   0001C7   75F002       MOV     B,#0x2
   \   0001CA   EB           MOV     A,R3
   \   0001CB   A4           MUL     AB
   \   0001CC   28           ADD     A,R0
   \   0001CD   FB           MOV     R3,A
   \   0001CE   90....       MOV     DPTR,#matchED
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F8           MOV     R0,A
   \   0001D3   A3           INC     DPTR
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   C8           XCH     A,R0
   \   0001D6   2432         ADD     A,#0x32
   \   0001D8   F582         MOV     DPL,A
   \   0001DA   C8           XCH     A,R0
   \   0001DB   3400         ADDC    A,#0x0
   \   0001DD   F583         MOV     DPH,A
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   2A           ADD     A,R2
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   3B           ADDC    A,R3
   \   0001E5   F9           MOV     R1,A
   \   0001E6   E8           MOV     A,R0
   \   0001E7   24FE         ADD     A,#-0x2
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   E9           MOV     A,R1
   \   0001EC   34FF         ADDC    A,#-0x1
   \   0001EE   F583         MOV     DPH,A
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   FE           MOV     R6,A
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   FF           MOV     R7,A
   2357              dstIEEEAddr = matchED->ed2.ieeeAddr;
   \   0001F5   90....       MOV     DPTR,#matchED
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   241D         ADD     A,#0x1d
   \   0001FB   F8           MOV     R0,A
   \   0001FC   A3           INC     DPTR
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   3400         ADDC    A,#0x0
   \   000200   F9           MOV     R1,A
   \   000201   7402         MOV     A,#0x2
   \   000203   12....       LCALL   ?XSTACK_DISP0_8
   \   000206   E8           MOV     A,R0
   \   000207   F0           MOVX    @DPTR,A
   \   000208   A3           INC     DPTR
   \   000209   E9           MOV     A,R1
   \   00020A   F0           MOVX    @DPTR,A
   2358              dstEP = matchED->ed2.endpoint;
   \   00020B   90....       MOV     DPTR,#matchED
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F8           MOV     R0,A
   \   000210   A3           INC     DPTR
   \   000211   E0           MOVX    A,@DPTR
   \   000212   C8           XCH     A,R0
   \   000213   2425         ADD     A,#0x25
   \   000215   F582         MOV     DPL,A
   \   000217   C8           XCH     A,R0
   \   000218   3400         ADDC    A,#0x0
   \   00021A   F583         MOV     DPH,A
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F5..         MOV     ?V3,A
   \   00021F   02....       LJMP    ??ZDMatchSendState_12 & 0xFFFF
   2359            }
   2360            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_11:
   \   000222   90....       MOV     DPTR,#matchED
   \   000225   E0           MOVX    A,@DPTR
   \   000226   F8           MOV     R0,A
   \   000227   A3           INC     DPTR
   \   000228   E0           MOVX    A,@DPTR
   \   000229   C8           XCH     A,R0
   \   00022A   2434         ADD     A,#0x34
   \   00022C   F582         MOV     DPL,A
   \   00022E   C8           XCH     A,R0
   \   00022F   3400         ADDC    A,#0x0
   \   000231   F583         MOV     DPH,A
   \   000233   E0           MOVX    A,@DPTR
   \   000234   7003         JNZ     $+5
   \   000236   02....       LJMP    ??ZDMatchSendState_12 & 0xFFFF
   2361            {
   2362              ed = &(matchED->ed2);
   \   000239   90....       MOV     DPTR,#matchED
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   2417         ADD     A,#0x17
   \   00023F   F8           MOV     R0,A
   \   000240   A3           INC     DPTR
   \   000241   E0           MOVX    A,@DPTR
   \   000242   3400         ADDC    A,#0x0
   \   000244   F9           MOV     R1,A
   \   000245   88..         MOV     ?V6,R0
   \   000247   89..         MOV     ?V7,R1
   2363              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   000249   90....       MOV     DPTR,#matchED
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   F8           MOV     R0,A
   \   00024E   A3           INC     DPTR
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   C8           XCH     A,R0
   \   000251   2434         ADD     A,#0x34
   \   000253   F582         MOV     DPL,A
   \   000255   C8           XCH     A,R0
   \   000256   3400         ADDC    A,#0x0
   \   000258   F583         MOV     DPH,A
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   FA           MOV     R2,A
   \   00025C   7B00         MOV     R3,#0x0
   \   00025E   EA           MOV     A,R2
   \   00025F   75F002       MOV     B,#0x2
   \   000262   A4           MUL     AB
   \   000263   CA           XCH     A,R2
   \   000264   A8F0         MOV     R0,B
   \   000266   75F000       MOV     B,#0x0
   \   000269   A4           MUL     AB
   \   00026A   28           ADD     A,R0
   \   00026B   F8           MOV     R0,A
   \   00026C   75F002       MOV     B,#0x2
   \   00026F   EB           MOV     A,R3
   \   000270   A4           MUL     AB
   \   000271   28           ADD     A,R0
   \   000272   FB           MOV     R3,A
   \   000273   90....       MOV     DPTR,#matchED
   \   000276   E0           MOVX    A,@DPTR
   \   000277   F8           MOV     R0,A
   \   000278   A3           INC     DPTR
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   C8           XCH     A,R0
   \   00027B   2435         ADD     A,#0x35
   \   00027D   F582         MOV     DPL,A
   \   00027F   C8           XCH     A,R0
   \   000280   3400         ADDC    A,#0x0
   \   000282   F583         MOV     DPH,A
   \   000284   E0           MOVX    A,@DPTR
   \   000285   2A           ADD     A,R2
   \   000286   F8           MOV     R0,A
   \   000287   A3           INC     DPTR
   \   000288   E0           MOVX    A,@DPTR
   \   000289   3B           ADDC    A,R3
   \   00028A   F9           MOV     R1,A
   \   00028B   E8           MOV     A,R0
   \   00028C   24FE         ADD     A,#-0x2
   \   00028E   F582         MOV     DPL,A
   \   000290   E9           MOV     A,R1
   \   000291   34FF         ADDC    A,#-0x1
   \   000293   F583         MOV     DPH,A
   \   000295   E0           MOVX    A,@DPTR
   \   000296   FE           MOV     R6,A
   \   000297   A3           INC     DPTR
   \   000298   E0           MOVX    A,@DPTR
   \   000299   FF           MOV     R7,A
   2364              dstIEEEAddr = matchED->ed1.ieeeAddr;
   \   00029A   90....       MOV     DPTR,#matchED
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   2406         ADD     A,#0x6
   \   0002A0   F8           MOV     R0,A
   \   0002A1   A3           INC     DPTR
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   3400         ADDC    A,#0x0
   \   0002A5   F9           MOV     R1,A
   \   0002A6   7402         MOV     A,#0x2
   \   0002A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AB   E8           MOV     A,R0
   \   0002AC   F0           MOVX    @DPTR,A
   \   0002AD   A3           INC     DPTR
   \   0002AE   E9           MOV     A,R1
   \   0002AF   F0           MOVX    @DPTR,A
   2365              dstEP = matchED->ed1.endpoint;
   \   0002B0   90....       MOV     DPTR,#matchED
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   F8           MOV     R0,A
   \   0002B5   A3           INC     DPTR
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   C8           XCH     A,R0
   \   0002B8   240E         ADD     A,#0xe
   \   0002BA   F582         MOV     DPL,A
   \   0002BC   C8           XCH     A,R0
   \   0002BD   3400         ADDC    A,#0x0
   \   0002BF   F583         MOV     DPH,A
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   F5..         MOV     ?V3,A
   2366            }
   2367          
   2368            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_12:
   \   0002C4   740D         MOV     A,#0xd
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   7402         MOV     A,#0x2
   \   0002CB   F0           MOVX    @DPTR,A
   2369          
   2370            // Send the next message
   2371            if ( (rspStatus == ZDP_SUCCESS) && ed )
   \   0002CC   85..82       MOV     DPL,?XSP + 0
   \   0002CF   85..83       MOV     DPH,?XSP + 1
   \   0002D2   E0           MOVX    A,@DPTR
   \   0002D3   6003         JZ      $+5
   \   0002D5   02....       LJMP    ??ZDMatchSendState_13 & 0xFFFF
   \   0002D8   E5..         MOV     A,?V6
   \   0002DA   45..         ORL     A,?V7
   \   0002DC   7003         JNZ     $+5
   \   0002DE   02....       LJMP    ??ZDMatchSendState_13 & 0xFFFF
   2372            {
   2373              // Send unbind/bind message to source
   2374              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   0002E1   90....       MOV     DPTR,#matchED
   \   0002E4   E0           MOVX    A,@DPTR
   \   0002E5   F8           MOV     R0,A
   \   0002E6   A3           INC     DPTR
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   C8           XCH     A,R0
   \   0002E9   242F         ADD     A,#0x2f
   \   0002EB   F582         MOV     DPL,A
   \   0002ED   C8           XCH     A,R0
   \   0002EE   3400         ADDC    A,#0x0
   \   0002F0   F583         MOV     DPH,A
   \   0002F2   E0           MOVX    A,@DPTR
   \   0002F3   6401         XRL     A,#0x1
   \   0002F5   7008         JNZ     ??ZDMatchSendState_14
   2375              {
   2376                msgType = Unbind_req;
   \   0002F7   75..22       MOV     ?V0,#0x22
   \   0002FA   75..00       MOV     ?V1,#0x0
   \   0002FD   8006         SJMP    ??ZDMatchSendState_15
   2377              }
   2378              else
   2379              {
   2380                msgType = Bind_req;
   \                     ??ZDMatchSendState_14:
   \   0002FF   75..21       MOV     ?V0,#0x21
   \   000302   75..00       MOV     ?V1,#0x0
   2381              }
   2382          
   2383              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_15:
   \   000305   85..82       MOV     DPL,?V6
   \   000308   85..83       MOV     DPH,?V7
   \   00030B   A3           INC     DPTR
   \   00030C   A3           INC     DPTR
   \   00030D   E0           MOVX    A,@DPTR
   \   00030E   F8           MOV     R0,A
   \   00030F   A3           INC     DPTR
   \   000310   E0           MOVX    A,@DPTR
   \   000311   F9           MOV     R1,A
   \   000312   7405         MOV     A,#0x5
   \   000314   12....       LCALL   ?XSTACK_DISP0_8
   \   000317   E8           MOV     A,R0
   \   000318   F0           MOVX    @DPTR,A
   \   000319   A3           INC     DPTR
   \   00031A   E9           MOV     A,R1
   \   00031B   F0           MOVX    @DPTR,A
   2384          
   2385              // Save off the transaction sequence number
   2386              matchED->transSeq = ZDP_TransID;
   \   00031C   90....       MOV     DPTR,#ZDP_TransID
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   C0E0         PUSH    A
   \   000322   90....       MOV     DPTR,#matchED
   \   000325   E0           MOVX    A,@DPTR
   \   000326   F8           MOV     R0,A
   \   000327   A3           INC     DPTR
   \   000328   E0           MOVX    A,@DPTR
   \   000329   C8           XCH     A,R0
   \   00032A   2430         ADD     A,#0x30
   \   00032C   F582         MOV     DPL,A
   \   00032E   C8           XCH     A,R0
   \   00032F   3400         ADDC    A,#0x0
   \   000331   F583         MOV     DPH,A
   \   000333   D0E0         POP     A
   \   000335   F0           MOVX    @DPTR,A
   2387          
   2388              destinationAddr.addrMode = Addr64Bit;
   \   000336   7416         MOV     A,#0x16
   \   000338   12....       LCALL   ?XSTACK_DISP0_8
   \   00033B   7403         MOV     A,#0x3
   \   00033D   F0           MOVX    @DPTR,A
   2389              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   00033E                ; Setup parameters for call to function sAddrExtCpy
   \   00033E   7402         MOV     A,#0x2
   \   000340   12....       LCALL   ?XSTACK_DISP0_8
   \   000343   E0           MOVX    A,@DPTR
   \   000344   FC           MOV     R4,A
   \   000345   A3           INC     DPTR
   \   000346   E0           MOVX    A,@DPTR
   \   000347   FD           MOV     R5,A
   \   000348   740E         MOV     A,#0xe
   \   00034A   12....       LCALL   ?XSTACK_DISP101_8
   \   00034D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2390          
   2391              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2392                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000350                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000350   85..82       MOV     DPL,?V6
   \   000353   85..83       MOV     DPH,?V7
   \   000356   A3           INC     DPTR
   \   000357   E0           MOVX    A,@DPTR
   \   000358   F5..         MOV     ?V4,A
   \   00035A   78..         MOV     R0,#?V4
   \   00035C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035F   E5..         MOV     A,?V3
   \   000361   F5..         MOV     ?V4,A
   \   000363   78..         MOV     R0,#?V4
   \   000365   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000368   7410         MOV     A,#0x10
   \   00036A   12....       LCALL   ?XSTACK_DISP100_8
   \   00036D   88..         MOV     ?V4,R0
   \   00036F   89..         MOV     ?V5,R1
   \   000371   78..         MOV     R0,#?V4
   \   000373   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000376   8E..         MOV     ?V4,R6
   \   000378   8F..         MOV     ?V5,R7
   \   00037A   78..         MOV     R0,#?V4
   \   00037C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00037F   E5..         MOV     A,?V6
   \   000381   2406         ADD     A,#0x6
   \   000383   F5..         MOV     ?V4,A
   \   000385   E4           CLR     A
   \   000386   35..         ADDC    A,?V7
   \   000388   F5..         MOV     ?V5,A
   \   00038A   78..         MOV     R0,#?V4
   \   00038C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00038F   E5..         MOV     A,?V6
   \   000391   240E         ADD     A,#0xe
   \   000393   F582         MOV     DPL,A
   \   000395   E4           CLR     A
   \   000396   35..         ADDC    A,?V7
   \   000398   F583         MOV     DPH,A
   \   00039A   E0           MOVX    A,@DPTR
   \   00039B   F9           MOV     R1,A
   \   00039C   740D         MOV     A,#0xd
   \   00039E   12....       LCALL   ?XSTACK_DISP102_8
   \   0003A1   AA..         MOV     R2,?V0
   \   0003A3   AB..         MOV     R3,?V1
   \   0003A5   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0003A8   7408         MOV     A,#0x8
   \   0003AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003AD   E9           MOV     A,R1
   2393          
   2394              // Set timeout for response
   2395              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0003AE                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0003AE   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   0003B0   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   0003B2   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   0003B5   E0           MOVX    A,@DPTR
   \   0003B6   FA           MOV     R2,A
   \   0003B7   A3           INC     DPTR
   \   0003B8   E0           MOVX    A,@DPTR
   \   0003B9   FB           MOV     R3,A
   \   0003BA   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0003BD   02....       LJMP    ??ZDMatchSendState_16 & 0xFFFF
   2396            }
   2397            else
   2398            {
   2399              // Send the response messages to requesting devices
   2400              // send response to first requester
   2401              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_13:
   \   0003C0   90....       MOV     DPTR,#matchED
   \   0003C3   E0           MOVX    A,@DPTR
   \   0003C4   F8           MOV     R0,A
   \   0003C5   A3           INC     DPTR
   \   0003C6   E0           MOVX    A,@DPTR
   \   0003C7   F583         MOV     DPH,A
   \   0003C9   8882         MOV     DPL,R0
   \   0003CB   A3           INC     DPTR
   \   0003CC   A3           INC     DPTR
   \   0003CD   E0           MOVX    A,@DPTR
   \   0003CE   F8           MOV     R0,A
   \   0003CF   A3           INC     DPTR
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   F9           MOV     R1,A
   \   0003D2   7405         MOV     A,#0x5
   \   0003D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D7   E8           MOV     A,R0
   \   0003D8   F0           MOVX    @DPTR,A
   \   0003D9   A3           INC     DPTR
   \   0003DA   E9           MOV     A,R1
   \   0003DB   F0           MOVX    @DPTR,A
   2402              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \   0003DC                ; Setup parameters for call to function ZDP_SendData
   \   0003DC   90....       MOV     DPTR,#matchED
   \   0003DF   E0           MOVX    A,@DPTR
   \   0003E0   F8           MOV     R0,A
   \   0003E1   A3           INC     DPTR
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   F583         MOV     DPH,A
   \   0003E5   8882         MOV     DPL,R0
   \   0003E7   A3           INC     DPTR
   \   0003E8   E0           MOVX    A,@DPTR
   \   0003E9   F5..         MOV     ?V4,A
   \   0003EB   78..         MOV     R0,#?V4
   \   0003ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003F0   7401         MOV     A,#0x1
   \   0003F2   12....       LCALL   ?XSTACK_DISP100_8
   \   0003F5   88..         MOV     ?V4,R0
   \   0003F7   89..         MOV     ?V5,R1
   \   0003F9   78..         MOV     R0,#?V4
   \   0003FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003FE   75..20       MOV     ?V4,#0x20
   \   000401   75..80       MOV     ?V5,#-0x80
   \   000404   78..         MOV     R0,#?V4
   \   000406   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000409   7901         MOV     R1,#0x1
   \   00040B   740A         MOV     A,#0xa
   \   00040D   12....       LCALL   ?XSTACK_DISP102_8
   \   000410   90....       MOV     DPTR,#matchED
   \   000413   E0           MOVX    A,@DPTR
   \   000414   FA           MOV     R2,A
   \   000415   A3           INC     DPTR
   \   000416   E0           MOVX    A,@DPTR
   \   000417   FB           MOV     R3,A
   \   000418   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00041B   7405         MOV     A,#0x5
   \   00041D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000420   E9           MOV     A,R1
   2403          
   2404              // send response to second requester
   2405              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000421   90....       MOV     DPTR,#matchED
   \   000424   E0           MOVX    A,@DPTR
   \   000425   F8           MOV     R0,A
   \   000426   A3           INC     DPTR
   \   000427   E0           MOVX    A,@DPTR
   \   000428   C8           XCH     A,R0
   \   000429   242E         ADD     A,#0x2e
   \   00042B   F582         MOV     DPL,A
   \   00042D   C8           XCH     A,R0
   \   00042E   3400         ADDC    A,#0x0
   \   000430   F583         MOV     DPH,A
   \   000432   E0           MOVX    A,@DPTR
   \   000433   6402         XRL     A,#0x2
   \   000435   706E         JNZ     ??ZDMatchSendState_17
   2406              {
   2407                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000437   90....       MOV     DPTR,#matchED
   \   00043A   E0           MOVX    A,@DPTR
   \   00043B   F8           MOV     R0,A
   \   00043C   A3           INC     DPTR
   \   00043D   E0           MOVX    A,@DPTR
   \   00043E   C8           XCH     A,R0
   \   00043F   2419         ADD     A,#0x19
   \   000441   F582         MOV     DPL,A
   \   000443   C8           XCH     A,R0
   \   000444   3400         ADDC    A,#0x0
   \   000446   F583         MOV     DPH,A
   \   000448   E0           MOVX    A,@DPTR
   \   000449   F8           MOV     R0,A
   \   00044A   A3           INC     DPTR
   \   00044B   E0           MOVX    A,@DPTR
   \   00044C   F9           MOV     R1,A
   \   00044D   7405         MOV     A,#0x5
   \   00044F   12....       LCALL   ?XSTACK_DISP0_8
   \   000452   E8           MOV     A,R0
   \   000453   F0           MOVX    @DPTR,A
   \   000454   A3           INC     DPTR
   \   000455   E9           MOV     A,R1
   \   000456   F0           MOVX    @DPTR,A
   2408                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \   000457                ; Setup parameters for call to function ZDP_SendData
   \   000457   90....       MOV     DPTR,#matchED
   \   00045A   E0           MOVX    A,@DPTR
   \   00045B   F8           MOV     R0,A
   \   00045C   A3           INC     DPTR
   \   00045D   E0           MOVX    A,@DPTR
   \   00045E   C8           XCH     A,R0
   \   00045F   2418         ADD     A,#0x18
   \   000461   F582         MOV     DPL,A
   \   000463   C8           XCH     A,R0
   \   000464   3400         ADDC    A,#0x0
   \   000466   F583         MOV     DPH,A
   \   000468   E0           MOVX    A,@DPTR
   \   000469   F5..         MOV     ?V4,A
   \   00046B   78..         MOV     R0,#?V4
   \   00046D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000470   7401         MOV     A,#0x1
   \   000472   12....       LCALL   ?XSTACK_DISP100_8
   \   000475   88..         MOV     ?V4,R0
   \   000477   89..         MOV     ?V5,R1
   \   000479   78..         MOV     R0,#?V4
   \   00047B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00047E   75..20       MOV     ?V4,#0x20
   \   000481   75..80       MOV     ?V5,#-0x80
   \   000484   78..         MOV     R0,#?V4
   \   000486   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000489   7901         MOV     R1,#0x1
   \   00048B   740A         MOV     A,#0xa
   \   00048D   12....       LCALL   ?XSTACK_DISP102_8
   \   000490   90....       MOV     DPTR,#matchED
   \   000493   E0           MOVX    A,@DPTR
   \   000494   2417         ADD     A,#0x17
   \   000496   FA           MOV     R2,A
   \   000497   A3           INC     DPTR
   \   000498   E0           MOVX    A,@DPTR
   \   000499   3400         ADDC    A,#0x0
   \   00049B   FB           MOV     R3,A
   \   00049C   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00049F   7405         MOV     A,#0x5
   \   0004A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004A4   E9           MOV     A,R1
   2409              }
   2410          
   2411              // Process ended - release memory used
   2412              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_17:
   \   0004A5                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   0004A5   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2413            }
   2414          
   2415            return ( TRUE );
   \                     ??ZDMatchSendState_16:
   \   0004A8   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_1:
   \   0004AA   7417         MOV     A,#0x17
   \   0004AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004AF   7F08         MOV     R7,#0x8
   \   0004B1   02....       LJMP    ?BANKED_LEAVE_XDATA
   2416          }
   2417          
   2418          /*********************************************************************
   2419           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2420           *
   2421           * @brief   End device bind timeout.
   2422           *
   2423           * @param  none
   2424           *
   2425           * @return  none
   2426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2427          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2428          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2429            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   00000D   E9           MOV     A,R1
   2430          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   2431          
   2432          /*********************************************************************
   2433           * ZDO MESSAGE PARSING API FUNCTIONS
   2434           */
   2435          
   2436          /*********************************************************************
   2437           * @fn          ZDO_ParseEndDeviceBindReq
   2438           *
   2439           * @brief       This function parses the End_Device_Bind_req message.
   2440           *
   2441           *     NOTE:  The clusters lists in bindReq are allocated in this
   2442           *            function and must be freed by that calling function.
   2443           *
   2444           * @param       inMsg  - incoming message (request)
   2445           * @param       bindReq - pointer to place to parse message to
   2446           *
   2447           * @return      none
   2448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2449          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2450          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2451            uint8 *msg;
   2452          
   2453            // Parse the message
   2454            bindReq->TransSeq = inMsg->TransSeq;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   240F         ADD     A,#0xf
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C0E0         PUSH    A
   \   00001B   85..82       MOV     DPL,?V0
   \   00001E   85..83       MOV     DPH,?V1
   \   000021   D0E0         POP     A
   \   000023   F0           MOVX    @DPTR,A
   2455            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \   000024   85..82       MOV     DPL,?V2
   \   000027   85..83       MOV     DPH,?V3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   85..82       MOV     DPL,?V0
   \   000034   85..83       MOV     DPH,?V1
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   2456            bindReq->SecurityUse = inMsg->SecurityUse;
   \   00003E   E5..         MOV     A,?V2
   \   000040   240E         ADD     A,#0xe
   \   000042   F582         MOV     DPL,A
   \   000044   E4           CLR     A
   \   000045   35..         ADDC    A,?V3
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C0E0         PUSH    A
   \   00004C   85..82       MOV     DPL,?V0
   \   00004F   85..83       MOV     DPH,?V1
   \   000052   A3           INC     DPTR
   \   000053   D0E0         POP     A
   \   000055   F0           MOVX    @DPTR,A
   2457            msg = inMsg->asdu;
   \   000056   E5..         MOV     A,?V2
   \   000058   2413         ADD     A,#0x13
   \   00005A   F582         MOV     DPL,A
   \   00005C   E4           CLR     A
   \   00005D   35..         ADDC    A,?V3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   FE           MOV     R6,A
   \   000068   E9           MOV     A,R1
   \   000069   FF           MOV     R7,A
   2458          
   2459            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FA           MOV     R2,A
   \   000070   7B00         MOV     R3,#0x0
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   7900         MOV     R1,#0x0
   \   00007B   E4           CLR     A
   \   00007C   C8           XCH     A,R0
   \   00007D   F9           MOV     R1,A
   \   00007E   EA           MOV     A,R2
   \   00007F   28           ADD     A,R0
   \   000080   F8           MOV     R0,A
   \   000081   EB           MOV     A,R3
   \   000082   39           ADDC    A,R1
   \   000083   F9           MOV     R1,A
   \   000084   85..82       MOV     DPL,?V0
   \   000087   85..83       MOV     DPH,?V1
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   E8           MOV     A,R0
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   E9           MOV     A,R1
   \   000092   F0           MOVX    @DPTR,A
   2460            msg += 2;
   \   000093   EE           MOV     A,R6
   \   000094   2402         ADD     A,#0x2
   \   000096   FE           MOV     R6,A
   \   000097   5001         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   000099   0F           INC     R7
   2461          
   2462            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00009A                ; Setup parameters for call to function sAddrExtCpy
   \   00009A   EE           MOV     A,R6
   \   00009B   FC           MOV     R4,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FD           MOV     R5,A
   \   00009E   E5..         MOV     A,?V0
   \   0000A0   2406         ADD     A,#0x6
   \   0000A2   FA           MOV     R2,A
   \   0000A3   E4           CLR     A
   \   0000A4   35..         ADDC    A,?V1
   \   0000A6   FB           MOV     R3,A
   \   0000A7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2463            msg += Z_EXTADDR_LEN;
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2408         ADD     A,#0x8
   \   0000AD   FE           MOV     R6,A
   \   0000AE   5001         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   0000B0   0F           INC     R7
   2464          
   2465            bindReq->endpoint = *msg++;
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   C0E0         PUSH    A
   \   0000B8   E5..         MOV     A,?V0
   \   0000BA   240E         ADD     A,#0xe
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V1
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   A3           INC     DPTR
   \   0000CB   AE82         MOV     R6,DPL
   \   0000CD   AF83         MOV     R7,DPH
   2466            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FA           MOV     R2,A
   \   0000D5   7B00         MOV     R3,#0x0
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F8           MOV     R0,A
   \   0000DE   7900         MOV     R1,#0x0
   \   0000E0   E4           CLR     A
   \   0000E1   C8           XCH     A,R0
   \   0000E2   F9           MOV     R1,A
   \   0000E3   EA           MOV     A,R2
   \   0000E4   28           ADD     A,R0
   \   0000E5   F8           MOV     R0,A
   \   0000E6   EB           MOV     A,R3
   \   0000E7   39           ADDC    A,R1
   \   0000E8   F9           MOV     R1,A
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   240F         ADD     A,#0xf
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   E8           MOV     A,R0
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E9           MOV     A,R1
   \   0000F8   F0           MOVX    @DPTR,A
   2467            msg += 2;
   \   0000F9   EE           MOV     A,R6
   \   0000FA   2402         ADD     A,#0x2
   \   0000FC   FE           MOV     R6,A
   \   0000FD   5001         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   0000FF   0F           INC     R7
   2468          
   2469            bindReq->inClusters = NULL;
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   000100   E5..         MOV     A,?V0
   \   000102   2412         ADD     A,#0x12
   \   000104   F582         MOV     DPL,A
   \   000106   E4           CLR     A
   \   000107   35..         ADDC    A,?V1
   \   000109   F583         MOV     DPH,A
   \   00010B   7400         MOV     A,#0x0
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   A3           INC     DPTR
   \   00010F   7400         MOV     A,#0x0
   \   000111   F0           MOVX    @DPTR,A
   2470            bindReq->outClusters = NULL;
   \   000112   E5..         MOV     A,?V0
   \   000114   2415         ADD     A,#0x15
   \   000116   F582         MOV     DPL,A
   \   000118   E4           CLR     A
   \   000119   35..         ADDC    A,?V1
   \   00011B   F583         MOV     DPH,A
   \   00011D   7400         MOV     A,#0x0
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   7400         MOV     A,#0x0
   \   000123   F0           MOVX    @DPTR,A
   2471          
   2472            if ((bindReq->numInClusters = *msg++) &&
   2473                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \   000124   8E82         MOV     DPL,R6
   \   000126   8F83         MOV     DPH,R7
   \   000128   E0           MOVX    A,@DPTR
   \   000129   C0E0         PUSH    A
   \   00012B   E5..         MOV     A,?V0
   \   00012D   2411         ADD     A,#0x11
   \   00012F   F582         MOV     DPL,A
   \   000131   E4           CLR     A
   \   000132   35..         ADDC    A,?V1
   \   000134   F583         MOV     DPH,A
   \   000136   D0E0         POP     A
   \   000138   F0           MOVX    @DPTR,A
   \   000139   8E82         MOV     DPL,R6
   \   00013B   8F83         MOV     DPH,R7
   \   00013D   A3           INC     DPTR
   \   00013E   AE82         MOV     R6,DPL
   \   000140   AF83         MOV     R7,DPH
   \   000142   E5..         MOV     A,?V0
   \   000144   2411         ADD     A,#0x11
   \   000146   F582         MOV     DPL,A
   \   000148   E4           CLR     A
   \   000149   35..         ADDC    A,?V1
   \   00014B   F583         MOV     DPH,A
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   6079         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   000150                ; Setup parameters for call to function osal_mem_alloc
   \   000150   E5..         MOV     A,?V0
   \   000152   2411         ADD     A,#0x11
   \   000154   F582         MOV     DPL,A
   \   000156   E4           CLR     A
   \   000157   35..         ADDC    A,?V1
   \   000159   F583         MOV     DPH,A
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   FA           MOV     R2,A
   \   00015D   7B00         MOV     R3,#0x0
   \   00015F   EA           MOV     A,R2
   \   000160   75F002       MOV     B,#0x2
   \   000163   A4           MUL     AB
   \   000164   CA           XCH     A,R2
   \   000165   A8F0         MOV     R0,B
   \   000167   75F000       MOV     B,#0x0
   \   00016A   A4           MUL     AB
   \   00016B   28           ADD     A,R0
   \   00016C   F8           MOV     R0,A
   \   00016D   75F002       MOV     B,#0x2
   \   000170   EB           MOV     A,R3
   \   000171   A4           MUL     AB
   \   000172   28           ADD     A,R0
   \   000173   FB           MOV     R3,A
   \   000174   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000177   E5..         MOV     A,?V0
   \   000179   2412         ADD     A,#0x12
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   35..         ADDC    A,?V1
   \   000180   F583         MOV     DPH,A
   \   000182   EA           MOV     A,R2
   \   000183   F0           MOVX    @DPTR,A
   \   000184   A3           INC     DPTR
   \   000185   EB           MOV     A,R3
   \   000186   F0           MOVX    @DPTR,A
   \   000187   E5..         MOV     A,?V0
   \   000189   2412         ADD     A,#0x12
   \   00018B   F582         MOV     DPL,A
   \   00018D   E4           CLR     A
   \   00018E   35..         ADDC    A,?V1
   \   000190   F583         MOV     DPH,A
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F8           MOV     R0,A
   \   000194   A3           INC     DPTR
   \   000195   E0           MOVX    A,@DPTR
   \   000196   F9           MOV     R1,A
   \   000197   E8           MOV     A,R0
   \   000198   49           ORL     A,R1
   \   000199   602E         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2474            {
   2475              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   00019B                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00019B   E5..         MOV     A,?V0
   \   00019D   2412         ADD     A,#0x12
   \   00019F   F582         MOV     DPL,A
   \   0001A1   E4           CLR     A
   \   0001A2   35..         ADDC    A,?V1
   \   0001A4   F583         MOV     DPH,A
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FC           MOV     R4,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   FD           MOV     R5,A
   \   0001AB   EE           MOV     A,R6
   \   0001AC   FA           MOV     R2,A
   \   0001AD   EF           MOV     A,R7
   \   0001AE   FB           MOV     R3,A
   \   0001AF   E5..         MOV     A,?V0
   \   0001B1   2411         ADD     A,#0x11
   \   0001B3   F582         MOV     DPL,A
   \   0001B5   E4           CLR     A
   \   0001B6   35..         ADDC    A,?V1
   \   0001B8   F583         MOV     DPH,A
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   F9           MOV     R1,A
   \   0001BC   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0001BF   8A..         MOV     ?V4,R2
   \   0001C1   8B..         MOV     ?V5,R3
   \   0001C3   AE..         MOV     R6,?V4
   \   0001C5   AF..         MOV     R7,?V5
   \   0001C7   800E         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2476            }
   2477            else
   2478            {
   2479              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0001C9   E5..         MOV     A,?V0
   \   0001CB   2411         ADD     A,#0x11
   \   0001CD   F582         MOV     DPL,A
   \   0001CF   E4           CLR     A
   \   0001D0   35..         ADDC    A,?V1
   \   0001D2   F583         MOV     DPH,A
   \   0001D4   7400         MOV     A,#0x0
   \   0001D6   F0           MOVX    @DPTR,A
   2480            }
   2481          
   2482            if ((bindReq->numOutClusters = *msg++) &&
   2483                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0001D7   8E82         MOV     DPL,R6
   \   0001D9   8F83         MOV     DPH,R7
   \   0001DB   E0           MOVX    A,@DPTR
   \   0001DC   C0E0         PUSH    A
   \   0001DE   E5..         MOV     A,?V0
   \   0001E0   2414         ADD     A,#0x14
   \   0001E2   F582         MOV     DPL,A
   \   0001E4   E4           CLR     A
   \   0001E5   35..         ADDC    A,?V1
   \   0001E7   F583         MOV     DPH,A
   \   0001E9   D0E0         POP     A
   \   0001EB   F0           MOVX    @DPTR,A
   \   0001EC   8E82         MOV     DPL,R6
   \   0001EE   8F83         MOV     DPH,R7
   \   0001F0   A3           INC     DPTR
   \   0001F1   AE82         MOV     R6,DPL
   \   0001F3   AF83         MOV     R7,DPH
   \   0001F5   E5..         MOV     A,?V0
   \   0001F7   2414         ADD     A,#0x14
   \   0001F9   F582         MOV     DPL,A
   \   0001FB   E4           CLR     A
   \   0001FC   35..         ADDC    A,?V1
   \   0001FE   F583         MOV     DPH,A
   \   000200   E0           MOVX    A,@DPTR
   \   000201   6079         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   000203                ; Setup parameters for call to function osal_mem_alloc
   \   000203   E5..         MOV     A,?V0
   \   000205   2414         ADD     A,#0x14
   \   000207   F582         MOV     DPL,A
   \   000209   E4           CLR     A
   \   00020A   35..         ADDC    A,?V1
   \   00020C   F583         MOV     DPH,A
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   FA           MOV     R2,A
   \   000210   7B00         MOV     R3,#0x0
   \   000212   EA           MOV     A,R2
   \   000213   75F002       MOV     B,#0x2
   \   000216   A4           MUL     AB
   \   000217   CA           XCH     A,R2
   \   000218   A8F0         MOV     R0,B
   \   00021A   75F000       MOV     B,#0x0
   \   00021D   A4           MUL     AB
   \   00021E   28           ADD     A,R0
   \   00021F   F8           MOV     R0,A
   \   000220   75F002       MOV     B,#0x2
   \   000223   EB           MOV     A,R3
   \   000224   A4           MUL     AB
   \   000225   28           ADD     A,R0
   \   000226   FB           MOV     R3,A
   \   000227   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00022A   E5..         MOV     A,?V0
   \   00022C   2415         ADD     A,#0x15
   \   00022E   F582         MOV     DPL,A
   \   000230   E4           CLR     A
   \   000231   35..         ADDC    A,?V1
   \   000233   F583         MOV     DPH,A
   \   000235   EA           MOV     A,R2
   \   000236   F0           MOVX    @DPTR,A
   \   000237   A3           INC     DPTR
   \   000238   EB           MOV     A,R3
   \   000239   F0           MOVX    @DPTR,A
   \   00023A   E5..         MOV     A,?V0
   \   00023C   2415         ADD     A,#0x15
   \   00023E   F582         MOV     DPL,A
   \   000240   E4           CLR     A
   \   000241   35..         ADDC    A,?V1
   \   000243   F583         MOV     DPH,A
   \   000245   E0           MOVX    A,@DPTR
   \   000246   F8           MOV     R0,A
   \   000247   A3           INC     DPTR
   \   000248   E0           MOVX    A,@DPTR
   \   000249   F9           MOV     R1,A
   \   00024A   E8           MOV     A,R0
   \   00024B   49           ORL     A,R1
   \   00024C   602E         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2484            {
   2485              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00024E                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00024E   E5..         MOV     A,?V0
   \   000250   2415         ADD     A,#0x15
   \   000252   F582         MOV     DPL,A
   \   000254   E4           CLR     A
   \   000255   35..         ADDC    A,?V1
   \   000257   F583         MOV     DPH,A
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   FC           MOV     R4,A
   \   00025B   A3           INC     DPTR
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   FD           MOV     R5,A
   \   00025E   EE           MOV     A,R6
   \   00025F   FA           MOV     R2,A
   \   000260   EF           MOV     A,R7
   \   000261   FB           MOV     R3,A
   \   000262   E5..         MOV     A,?V0
   \   000264   2414         ADD     A,#0x14
   \   000266   F582         MOV     DPL,A
   \   000268   E4           CLR     A
   \   000269   35..         ADDC    A,?V1
   \   00026B   F583         MOV     DPH,A
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   F9           MOV     R1,A
   \   00026F   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000272   8A..         MOV     ?V4,R2
   \   000274   8B..         MOV     ?V5,R3
   \   000276   AE..         MOV     R6,?V4
   \   000278   AF..         MOV     R7,?V5
   \   00027A   800E         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2486            }
   2487            else
   2488            {
   2489              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00027C   E5..         MOV     A,?V0
   \   00027E   2414         ADD     A,#0x14
   \   000280   F582         MOV     DPL,A
   \   000282   E4           CLR     A
   \   000283   35..         ADDC    A,?V1
   \   000285   F583         MOV     DPH,A
   \   000287   7400         MOV     A,#0x0
   \   000289   F0           MOVX    @DPTR,A
   2490            }
   2491          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   00028A   7F06         MOV     R7,#0x6
   \   00028C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2492          
   2493          /*********************************************************************
   2494           * @fn          ZDO_ParseBindUnbindReq
   2495           *
   2496           * @brief       This function parses the Bind_req or Unbind_req message.
   2497           *
   2498           * @param       inMsg  - incoming message (request)
   2499           * @param       pReq - place to put parsed information
   2500           *
   2501           * @return      none
   2502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2503          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2504          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2505            uint8 *msg;
   2506          
   2507            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   2508            osal_cpyExtAddr( pReq->srcAddress, msg );
   \   000021                ; Setup parameters for call to function sAddrExtCpy
   \   000021   EE           MOV     A,R6
   \   000022   FC           MOV     R4,A
   \   000023   EF           MOV     A,R7
   \   000024   FD           MOV     R5,A
   \   000025   AA..         MOV     R2,?V0
   \   000027   AB..         MOV     R3,?V1
   \   000029   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2509            msg += Z_EXTADDR_LEN;
   \   00002C   EE           MOV     A,R6
   \   00002D   2408         ADD     A,#0x8
   \   00002F   FE           MOV     R6,A
   \   000030   5001         JNC     ??ZDO_ParseBindUnbindReq_0
   \   000032   0F           INC     R7
   2510            pReq->srcEndpoint = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   85..82       MOV     DPL,?V0
   \   00003D   85..83       MOV     DPH,?V1
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   D0E0         POP     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   AE82         MOV     R6,DPL
   \   000052   AF83         MOV     R7,DPH
   2511            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FA           MOV     R2,A
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   7900         MOV     R1,#0x0
   \   000065   E4           CLR     A
   \   000066   C8           XCH     A,R0
   \   000067   F9           MOV     R1,A
   \   000068   EA           MOV     A,R2
   \   000069   28           ADD     A,R0
   \   00006A   F8           MOV     R0,A
   \   00006B   EB           MOV     A,R3
   \   00006C   39           ADDC    A,R1
   \   00006D   F9           MOV     R1,A
   \   00006E   85..82       MOV     DPL,?V0
   \   000071   85..83       MOV     DPH,?V1
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E8           MOV     A,R0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   E9           MOV     A,R1
   \   000081   F0           MOVX    @DPTR,A
   2512            msg += 2;
   \   000082   EE           MOV     A,R6
   \   000083   2402         ADD     A,#0x2
   \   000085   FE           MOV     R6,A
   \   000086   5001         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000088   0F           INC     R7
   2513            pReq->dstAddress.addrMode = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   C0E0         PUSH    A
   \   000090   E5..         MOV     A,?V0
   \   000092   2413         ADD     A,#0x13
   \   000094   F582         MOV     DPL,A
   \   000096   E4           CLR     A
   \   000097   35..         ADDC    A,?V1
   \   000099   F583         MOV     DPH,A
   \   00009B   D0E0         POP     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   A3           INC     DPTR
   \   0000A3   AE82         MOV     R6,DPL
   \   0000A5   AF83         MOV     R7,DPH
   2514            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2413         ADD     A,#0x13
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   35..         ADDC    A,?V1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6403         XRL     A,#0x3
   \   0000B5   702E         JNZ     ??ZDO_ParseBindUnbindReq_2
   2515            {
   2516              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   0000B7                ; Setup parameters for call to function sAddrExtCpy
   \   0000B7   EE           MOV     A,R6
   \   0000B8   FC           MOV     R4,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   FD           MOV     R5,A
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   240B         ADD     A,#0xb
   \   0000BF   FA           MOV     R2,A
   \   0000C0   E4           CLR     A
   \   0000C1   35..         ADDC    A,?V1
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2517              msg += Z_EXTADDR_LEN;
   \   0000C7   EE           MOV     A,R6
   \   0000C8   2408         ADD     A,#0x8
   \   0000CA   FE           MOV     R6,A
   \   0000CB   5001         JNC     ??ZDO_ParseBindUnbindReq_3
   \   0000CD   0F           INC     R7
   2518              pReq->dstEndpoint = *msg;
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   E5..         MOV     A,?V0
   \   0000D7   2414         ADD     A,#0x14
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   E4           CLR     A
   \   0000DC   35..         ADDC    A,?V1
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   802A         SJMP    ??ZDO_ParseBindUnbindReq_4
   2519            }
   2520            else
   2521            {
   2522              // copy group address
   2523              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FA           MOV     R2,A
   \   0000EB   7B00         MOV     R3,#0x0
   \   0000ED   8E82         MOV     DPL,R6
   \   0000EF   8F83         MOV     DPH,R7
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   7900         MOV     R1,#0x0
   \   0000F6   E4           CLR     A
   \   0000F7   C8           XCH     A,R0
   \   0000F8   F9           MOV     R1,A
   \   0000F9   EA           MOV     A,R2
   \   0000FA   28           ADD     A,R0
   \   0000FB   F8           MOV     R0,A
   \   0000FC   EB           MOV     A,R3
   \   0000FD   39           ADDC    A,R1
   \   0000FE   F9           MOV     R1,A
   \   0000FF   E5..         MOV     A,?V0
   \   000101   240B         ADD     A,#0xb
   \   000103   F582         MOV     DPL,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V1
   \   000108   F583         MOV     DPH,A
   \   00010A   E8           MOV     A,R0
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   E9           MOV     A,R1
   \   00010E   F0           MOVX    @DPTR,A
   2524            }
   2525          }
   \                     ??ZDO_ParseBindUnbindReq_4:
   \   00010F   7F04         MOV     R7,#0x4
   \   000111   02....       LJMP    ?BANKED_LEAVE_XDATA
   2526          
   2527          /*********************************************************************
   2528           * @fn      ZDO_ParseAddrRsp
   2529           *
   2530           * @brief   Turns the inMsg (incoming message) into the out parsed
   2531           *          structure.
   2532           *
   2533           * @param   inMsg - incoming message
   2534           *
   2535           * @return  pointer to parsed structures.  This structure was
   2536           *          allocated using osal_mem_alloc, so it must be freed
   2537           *          by the calling function [osal_mem_free()].
   2538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2539          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2540          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   2541            ZDO_NwkIEEEAddrResp_t *rsp;
   2542            uint8 *msg;
   2543            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   2544          
   2545            // Calculate the number of items in the list
   2546            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   E5..         MOV     A,?V6
   \   00000E   2410         ADD     A,#0x10
   \   000010   F582         MOV     DPL,A
   \   000012   E4           CLR     A
   \   000013   35..         ADDC    A,?V7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C3           CLR     C
   \   000019   940C         SUBB    A,#0xc
   \   00001B   401E         JC      ??ZDO_ParseAddrRsp_0
   2547            {
   2548              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001D   E5..         MOV     A,?V6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   35..         ADDC    A,?V7
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C8           XCH     A,R0
   \   00002D   240B         ADD     A,#0xb
   \   00002F   F582         MOV     DPL,A
   \   000031   C8           XCH     A,R0
   \   000032   3400         ADDC    A,#0x0
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V2,A
   \   000039   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2549            }
   2550            else
   2551            {
   2552              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   00003B   75..00       MOV     ?V2,#0x0
   2553            }
   2554          
   2555            // Make buffer
   2556            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   00003E                ; Setup parameters for call to function osal_mem_alloc
   \   00003E   A8..         MOV     R0,?V2
   \   000040   7900         MOV     R1,#0x0
   \   000042   E8           MOV     A,R0
   \   000043   75F002       MOV     B,#0x2
   \   000046   A4           MUL     AB
   \   000047   C8           XCH     A,R0
   \   000048   AAF0         MOV     R2,B
   \   00004A   75F000       MOV     B,#0x0
   \   00004D   A4           MUL     AB
   \   00004E   2A           ADD     A,R2
   \   00004F   FA           MOV     R2,A
   \   000050   75F002       MOV     B,#0x2
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   2A           ADD     A,R2
   \   000056   F9           MOV     R1,A
   \   000057   E8           MOV     A,R0
   \   000058   240D         ADD     A,#0xd
   \   00005A   FA           MOV     R2,A
   \   00005B   E4           CLR     A
   \   00005C   39           ADDC    A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000061   8A..         MOV     ?V4,R2
   \   000063   8B..         MOV     ?V5,R3
   \   000065   85....       MOV     ?V0,?V4
   \   000068   85....       MOV     ?V1,?V5
   2557          
   2558            if ( rsp )
   \   00006B   E5..         MOV     A,?V0
   \   00006D   45..         ORL     A,?V1
   \   00006F   7003         JNZ     $+5
   \   000071   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2559            {
   2560              msg = inMsg->asdu;
   \   000074   E5..         MOV     A,?V6
   \   000076   2413         ADD     A,#0x13
   \   000078   F582         MOV     DPL,A
   \   00007A   E4           CLR     A
   \   00007B   35..         ADDC    A,?V7
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   E8           MOV     A,R0
   \   000085   FE           MOV     R6,A
   \   000086   E9           MOV     A,R1
   \   000087   FF           MOV     R7,A
   2561          
   2562              rsp->status = *msg++;
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   C0E0         PUSH    A
   \   00008F   85..82       MOV     DPL,?V0
   \   000092   85..83       MOV     DPH,?V1
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   AE82         MOV     R6,DPL
   \   00009F   AF83         MOV     R7,DPH
   2563              if ( rsp->status == ZDO_SUCCESS )
   \   0000A1   85..82       MOV     DPL,?V0
   \   0000A4   85..83       MOV     DPH,?V1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   6003         JZ      $+5
   \   0000AA   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2564              {
   2565                osal_cpyExtAddr( rsp->extAddr, msg );
   \   0000AD                ; Setup parameters for call to function sAddrExtCpy
   \   0000AD   EE           MOV     A,R6
   \   0000AE   FC           MOV     R4,A
   \   0000AF   EF           MOV     A,R7
   \   0000B0   FD           MOV     R5,A
   \   0000B1   E5..         MOV     A,?V0
   \   0000B3   2403         ADD     A,#0x3
   \   0000B5   FA           MOV     R2,A
   \   0000B6   E4           CLR     A
   \   0000B7   35..         ADDC    A,?V1
   \   0000B9   FB           MOV     R3,A
   \   0000BA   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2566                msg += Z_EXTADDR_LEN;
   \   0000BD   EE           MOV     A,R6
   \   0000BE   2408         ADD     A,#0x8
   \   0000C0   FE           MOV     R6,A
   \   0000C1   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000C3   0F           INC     R7
   2567                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FA           MOV     R2,A
   \   0000CA   7B00         MOV     R3,#0x0
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F8           MOV     R0,A
   \   0000D3   7900         MOV     R1,#0x0
   \   0000D5   E4           CLR     A
   \   0000D6   C8           XCH     A,R0
   \   0000D7   F9           MOV     R1,A
   \   0000D8   EA           MOV     A,R2
   \   0000D9   28           ADD     A,R0
   \   0000DA   F8           MOV     R0,A
   \   0000DB   EB           MOV     A,R3
   \   0000DC   39           ADDC    A,R1
   \   0000DD   F9           MOV     R1,A
   \   0000DE   85..82       MOV     DPL,?V0
   \   0000E1   85..83       MOV     DPH,?V1
   \   0000E4   A3           INC     DPTR
   \   0000E5   E8           MOV     A,R0
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   E9           MOV     A,R1
   \   0000E9   F0           MOVX    @DPTR,A
   2568          
   2569                msg += 2;
   \   0000EA   EE           MOV     A,R6
   \   0000EB   2402         ADD     A,#0x2
   \   0000ED   FE           MOV     R6,A
   \   0000EE   5001         JNC     ??ZDO_ParseAddrRsp_4
   \   0000F0   0F           INC     R7
   2570                rsp->numAssocDevs = 0;
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000F1   E5..         MOV     A,?V0
   \   0000F3   240B         ADD     A,#0xb
   \   0000F5   F582         MOV     DPL,A
   \   0000F7   E4           CLR     A
   \   0000F8   35..         ADDC    A,?V1
   \   0000FA   F583         MOV     DPH,A
   \   0000FC   7400         MOV     A,#0x0
   \   0000FE   F0           MOVX    @DPTR,A
   2571          
   2572                // StartIndex field is only present if NumAssocDev field is non-zero.
   2573                if ( cnt > 0 )
   \   0000FF   E5..         MOV     A,?V2
   \   000101   7003         JNZ     $+5
   \   000103   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2574                {
   2575                  uint16 *pList = &(rsp->devList[0]);
   \   000106   E5..         MOV     A,?V0
   \   000108   240D         ADD     A,#0xd
   \   00010A   F8           MOV     R0,A
   \   00010B   E4           CLR     A
   \   00010C   35..         ADDC    A,?V1
   \   00010E   F9           MOV     R1,A
   2576                  byte n = cnt;
   \   00010F   AC..         MOV     R4,?V2
   2577          
   2578                  rsp->numAssocDevs = *msg++;
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   E0           MOVX    A,@DPTR
   \   000116   C0E0         PUSH    A
   \   000118   E5..         MOV     A,?V0
   \   00011A   240B         ADD     A,#0xb
   \   00011C   F582         MOV     DPL,A
   \   00011E   E4           CLR     A
   \   00011F   35..         ADDC    A,?V1
   \   000121   F583         MOV     DPH,A
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
   \   000126   8E82         MOV     DPL,R6
   \   000128   8F83         MOV     DPH,R7
   \   00012A   A3           INC     DPTR
   \   00012B   AE82         MOV     R6,DPL
   \   00012D   AF83         MOV     R7,DPH
   2579                  rsp->startIndex = *msg++;
   \   00012F   8E82         MOV     DPL,R6
   \   000131   8F83         MOV     DPH,R7
   \   000133   E0           MOVX    A,@DPTR
   \   000134   C0E0         PUSH    A
   \   000136   E5..         MOV     A,?V0
   \   000138   240C         ADD     A,#0xc
   \   00013A   F582         MOV     DPL,A
   \   00013C   E4           CLR     A
   \   00013D   35..         ADDC    A,?V1
   \   00013F   F583         MOV     DPH,A
   \   000141   D0E0         POP     A
   \   000143   F0           MOVX    @DPTR,A
   \   000144   8E82         MOV     DPL,R6
   \   000146   8F83         MOV     DPH,R7
   \   000148   A3           INC     DPTR
   \   000149   AE82         MOV     R6,DPL
   \   00014B   AF83         MOV     R7,DPH
   2580          
   2581                  while ( n != 0 )
   \                     ??ZDO_ParseAddrRsp_5:
   \   00014D   EC           MOV     A,R4
   \   00014E   6038         JZ      ??ZDO_ParseAddrRsp_2
   2582                  {
   2583                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \   000150   8E82         MOV     DPL,R6
   \   000152   8F83         MOV     DPH,R7
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F5..         MOV     ?V4,A
   \   000157   75..00       MOV     ?V5,#0x0
   \   00015A   8E82         MOV     DPL,R6
   \   00015C   8F83         MOV     DPH,R7
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   FA           MOV     R2,A
   \   000161   7B00         MOV     R3,#0x0
   \   000163   E4           CLR     A
   \   000164   CA           XCH     A,R2
   \   000165   FB           MOV     R3,A
   \   000166   E5..         MOV     A,?V4
   \   000168   2A           ADD     A,R2
   \   000169   FA           MOV     R2,A
   \   00016A   E5..         MOV     A,?V5
   \   00016C   3B           ADDC    A,R3
   \   00016D   FB           MOV     R3,A
   \   00016E   8882         MOV     DPL,R0
   \   000170   8983         MOV     DPH,R1
   \   000172   EA           MOV     A,R2
   \   000173   F0           MOVX    @DPTR,A
   \   000174   A3           INC     DPTR
   \   000175   EB           MOV     A,R3
   \   000176   F0           MOVX    @DPTR,A
   \   000177   E8           MOV     A,R0
   \   000178   2402         ADD     A,#0x2
   \   00017A   F8           MOV     R0,A
   \   00017B   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   00017D   09           INC     R1
   2584                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_6:
   \   00017E   EE           MOV     A,R6
   \   00017F   2402         ADD     A,#0x2
   \   000181   FE           MOV     R6,A
   \   000182   5001         JNC     ??ZDO_ParseAddrRsp_7
   \   000184   0F           INC     R7
   2585                    n--;
   \                     ??ZDO_ParseAddrRsp_7:
   \   000185   1C           DEC     R4
   \   000186   80C5         SJMP    ??ZDO_ParseAddrRsp_5
   2586                  }
   2587                }
   2588              }
   2589            }
   2590          
   2591            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_2:
   \   000188   AA..         MOV     R2,?V0
   \   00018A   AB..         MOV     R3,?V1
   \   00018C   7F08         MOV     R7,#0x8
   \   00018E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2592          }
   2593          
   2594          /*********************************************************************
   2595           * @fn          ZDO_ParseNodeDescRsp
   2596           *
   2597           * @brief       This function parses the Node_Desc_rsp message.
   2598           *
   2599           * @param       inMsg - incoming message
   2600           * @param       pNDRsp - place to parse the message into
   2601           *
   2602           * @return      none
   2603           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2604          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2605          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2606            uint8 *msg;
   2607          
   2608            msg = inMsg->asdu;
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FE           MOV     R6,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   EE           MOV     A,R6
   \   000014   F8           MOV     R0,A
   \   000015   EF           MOV     A,R7
   \   000016   F9           MOV     R1,A
   2609          
   2610            pNDRsp->status = *msg++;
   \   000017   8882         MOV     DPL,R0
   \   000019   8983         MOV     DPH,R1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   D0E0         POP     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   A882         MOV     R0,DPL
   \   00002C   A983         MOV     R1,DPH
   2611            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0,A
   \   000035   75..00       MOV     ?V1,#0x0
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FE           MOV     R6,A
   \   00003F   7F00         MOV     R7,#0x0
   \   000041   E4           CLR     A
   \   000042   CE           XCH     A,R6
   \   000043   FF           MOV     R7,A
   \   000044   E5..         MOV     A,?V0
   \   000046   2E           ADD     A,R6
   \   000047   FE           MOV     R6,A
   \   000048   E5..         MOV     A,?V1
   \   00004A   3F           ADDC    A,R7
   \   00004B   FF           MOV     R7,A
   \   00004C   8C82         MOV     DPL,R4
   \   00004E   8D83         MOV     DPH,R5
   \   000050   A3           INC     DPTR
   \   000051   EE           MOV     A,R6
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   EF           MOV     A,R7
   \   000055   F0           MOVX    @DPTR,A
   2612          
   2613            if ( pNDRsp->status == ZDP_SUCCESS )
   \   000056   8C82         MOV     DPL,R4
   \   000058   8D83         MOV     DPH,R5
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6003         JZ      $+5
   \   00005D   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2614            {
   2615              msg += 2;
   \   000060   E8           MOV     A,R0
   \   000061   2402         ADD     A,#0x2
   \   000063   F8           MOV     R0,A
   \   000064   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   000066   09           INC     R1
   2616              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   000067   8882         MOV     DPL,R0
   \   000069   8983         MOV     DPH,R1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   5407         ANL     A,#0x7
   \   00006E   FE           MOV     R6,A
   \   00006F   8C82         MOV     DPL,R4
   \   000071   8D83         MOV     DPH,R5
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   54F8         ANL     A,#0xf8
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   7407         MOV     A,#0x7
   \   00007C   5E           ANL     A,R6
   \   00007D   FE           MOV     R6,A
   \   00007E   8C82         MOV     DPL,R4
   \   000080   8D83         MOV     DPH,R5
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   4E           ORL     A,R6
   \   000087   F0           MOVX    @DPTR,A
   2617          
   2618              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00008F   E4           CLR     A
   \   000090   33           RLC     A
   \   000091   FE           MOV     R6,A
   \   000092   8C82         MOV     DPL,R4
   \   000094   8D83         MOV     DPH,R5
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   EE           MOV     A,R6
   \   00009A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   92E3         MOV     0xE0 /* A   */.3,C
   \   00009F   F0           MOVX    @DPTR,A
   2619              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \   0000A0   8882         MOV     DPL,R0
   \   0000A2   8983         MOV     DPH,R1
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000A7   E4           CLR     A
   \   0000A8   33           RLC     A
   \   0000A9   FE           MOV     R6,A
   \   0000AA   8C82         MOV     DPL,R4
   \   0000AC   8D83         MOV     DPH,R5
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   EE           MOV     A,R6
   \   0000B2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   92E4         MOV     0xE0 /* A   */.4,C
   \   0000B7   F0           MOVX    @DPTR,A
   2620          
   2621              msg++;  // Reserved bits.
   \   0000B8   8882         MOV     DPL,R0
   \   0000BA   8983         MOV     DPH,R1
   \   0000BC   A3           INC     DPTR
   \   0000BD   A882         MOV     R0,DPL
   \   0000BF   A983         MOV     R1,DPH
   2622              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   13           RRC     A
   \   0000C7   13           RRC     A
   \   0000C8   13           RRC     A
   \   0000C9   541F         ANL     A,#0x1f
   \   0000CB   FE           MOV     R6,A
   \   0000CC   8C82         MOV     DPL,R4
   \   0000CE   8D83         MOV     DPH,R5
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   5407         ANL     A,#0x7
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   33           RLC     A
   \   0000DA   33           RLC     A
   \   0000DB   33           RLC     A
   \   0000DC   54F8         ANL     A,#0xf8
   \   0000DE   FE           MOV     R6,A
   \   0000DF   8C82         MOV     DPL,R4
   \   0000E1   8D83         MOV     DPH,R5
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   4E           ORL     A,R6
   \   0000E9   F0           MOVX    @DPTR,A
   2623              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \   0000EA   8882         MOV     DPL,R0
   \   0000EC   8983         MOV     DPH,R1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   5407         ANL     A,#0x7
   \   0000F1   FE           MOV     R6,A
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   A3           INC     DPTR
   \   0000F7   A882         MOV     R0,DPL
   \   0000F9   A983         MOV     R1,DPH
   \   0000FB   8C82         MOV     DPL,R4
   \   0000FD   8D83         MOV     DPH,R5
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   54F8         ANL     A,#0xf8
   \   000106   F0           MOVX    @DPTR,A
   \   000107   7407         MOV     A,#0x7
   \   000109   5E           ANL     A,R6
   \   00010A   FE           MOV     R6,A
   \   00010B   8C82         MOV     DPL,R4
   \   00010D   8D83         MOV     DPH,R5
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   4E           ORL     A,R6
   \   000115   F0           MOVX    @DPTR,A
   2624              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \   000116   8882         MOV     DPL,R0
   \   000118   8983         MOV     DPH,R1
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   C0E0         PUSH    A
   \   00011D   8C82         MOV     DPL,R4
   \   00011F   8D83         MOV     DPH,R5
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   D0E0         POP     A
   \   000128   F0           MOVX    @DPTR,A
   \   000129   8882         MOV     DPL,R0
   \   00012B   8983         MOV     DPH,R1
   \   00012D   A3           INC     DPTR
   \   00012E   A882         MOV     R0,DPL
   \   000130   A983         MOV     R1,DPH
   2625              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \   000132   8882         MOV     DPL,R0
   \   000134   8983         MOV     DPH,R1
   \   000136   E0           MOVX    A,@DPTR
   \   000137   C0E0         PUSH    A
   \   000139   8C82         MOV     DPL,R4
   \   00013B   8D83         MOV     DPH,R5
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   D0E0         POP     A
   \   000145   F0           MOVX    @DPTR,A
   \   000146   8882         MOV     DPL,R0
   \   000148   8983         MOV     DPH,R1
   \   00014A   A3           INC     DPTR
   \   00014B   A882         MOV     R0,DPL
   \   00014D   A983         MOV     R1,DPH
   2626              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \   00014F   8882         MOV     DPL,R0
   \   000151   8983         MOV     DPH,R1
   \   000153   E0           MOVX    A,@DPTR
   \   000154   C0E0         PUSH    A
   \   000156   8C82         MOV     DPL,R4
   \   000158   8D83         MOV     DPH,R5
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   D0E0         POP     A
   \   000163   F0           MOVX    @DPTR,A
   \   000164   8882         MOV     DPL,R0
   \   000166   8983         MOV     DPH,R1
   \   000168   A3           INC     DPTR
   \   000169   A882         MOV     R0,DPL
   \   00016B   A983         MOV     R1,DPH
   2627              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \   00016D   8882         MOV     DPL,R0
   \   00016F   8983         MOV     DPH,R1
   \   000171   E0           MOVX    A,@DPTR
   \   000172   C0E0         PUSH    A
   \   000174   8C82         MOV     DPL,R4
   \   000176   8D83         MOV     DPH,R5
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   D0E0         POP     A
   \   000182   F0           MOVX    @DPTR,A
   \   000183   8882         MOV     DPL,R0
   \   000185   8983         MOV     DPH,R1
   \   000187   A3           INC     DPTR
   \   000188   A882         MOV     R0,DPL
   \   00018A   A983         MOV     R1,DPH
   2628              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \   00018C   8882         MOV     DPL,R0
   \   00018E   8983         MOV     DPH,R1
   \   000190   E0           MOVX    A,@DPTR
   \   000191   C0E0         PUSH    A
   \   000193   8C82         MOV     DPL,R4
   \   000195   8D83         MOV     DPH,R5
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   D0E0         POP     A
   \   0001A2   F0           MOVX    @DPTR,A
   \   0001A3   8882         MOV     DPL,R0
   \   0001A5   8983         MOV     DPH,R1
   \   0001A7   A3           INC     DPTR
   \   0001A8   A882         MOV     R0,DPL
   \   0001AA   A983         MOV     R1,DPH
   2629              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \   0001AC   8882         MOV     DPL,R0
   \   0001AE   8983         MOV     DPH,R1
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   C0E0         PUSH    A
   \   0001B3   8C82         MOV     DPL,R4
   \   0001B5   8D83         MOV     DPH,R5
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   D0E0         POP     A
   \   0001C3   F0           MOVX    @DPTR,A
   \   0001C4   8882         MOV     DPL,R0
   \   0001C6   8983         MOV     DPH,R1
   \   0001C8   A3           INC     DPTR
   \   0001C9   A882         MOV     R0,DPL
   \   0001CB   A983         MOV     R1,DPH
   2630              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \   0001CD   8882         MOV     DPL,R0
   \   0001CF   8983         MOV     DPH,R1
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F5..         MOV     ?V0,A
   \   0001D4   75..00       MOV     ?V1,#0x0
   \   0001D7   8882         MOV     DPL,R0
   \   0001D9   8983         MOV     DPH,R1
   \   0001DB   A3           INC     DPTR
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   FE           MOV     R6,A
   \   0001DE   7F00         MOV     R7,#0x0
   \   0001E0   E4           CLR     A
   \   0001E1   CE           XCH     A,R6
   \   0001E2   FF           MOV     R7,A
   \   0001E3   E5..         MOV     A,?V0
   \   0001E5   2E           ADD     A,R6
   \   0001E6   FE           MOV     R6,A
   \   0001E7   E5..         MOV     A,?V1
   \   0001E9   3F           ADDC    A,R7
   \   0001EA   FF           MOV     R7,A
   \   0001EB   EC           MOV     A,R4
   \   0001EC   240B         ADD     A,#0xb
   \   0001EE   F582         MOV     DPL,A
   \   0001F0   E4           CLR     A
   \   0001F1   3D           ADDC    A,R5
   \   0001F2   F583         MOV     DPH,A
   \   0001F4   EE           MOV     A,R6
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   EF           MOV     A,R7
   \   0001F8   F0           MOVX    @DPTR,A
   2631              msg += 2;
   \   0001F9   E8           MOV     A,R0
   \   0001FA   2402         ADD     A,#0x2
   \   0001FC   F8           MOV     R0,A
   \   0001FD   5001         JNC     ??ZDO_ParseNodeDescRsp_2
   \   0001FF   09           INC     R1
   2632              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??ZDO_ParseNodeDescRsp_2:
   \   000200   8882         MOV     DPL,R0
   \   000202   8983         MOV     DPH,R1
   \   000204   E0           MOVX    A,@DPTR
   \   000205   C0E0         PUSH    A
   \   000207   EC           MOV     A,R4
   \   000208   240D         ADD     A,#0xd
   \   00020A   F582         MOV     DPL,A
   \   00020C   E4           CLR     A
   \   00020D   3D           ADDC    A,R5
   \   00020E   F583         MOV     DPH,A
   \   000210   D0E0         POP     A
   \   000212   F0           MOVX    @DPTR,A
   \   000213   8882         MOV     DPL,R0
   \   000215   8983         MOV     DPH,R1
   \   000217   A3           INC     DPTR
   \   000218   A882         MOV     R0,DPL
   \   00021A   A983         MOV     R1,DPH
   2633              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \   00021C   8882         MOV     DPL,R0
   \   00021E   8983         MOV     DPH,R1
   \   000220   E0           MOVX    A,@DPTR
   \   000221   C0E0         PUSH    A
   \   000223   EC           MOV     A,R4
   \   000224   240E         ADD     A,#0xe
   \   000226   F582         MOV     DPL,A
   \   000228   E4           CLR     A
   \   000229   3D           ADDC    A,R5
   \   00022A   F583         MOV     DPH,A
   \   00022C   D0E0         POP     A
   \   00022E   F0           MOVX    @DPTR,A
   \   00022F   8882         MOV     DPL,R0
   \   000231   8983         MOV     DPH,R1
   \   000233   A3           INC     DPTR
   \   000234   A882         MOV     R0,DPL
   \   000236   A983         MOV     R1,DPH
   2634              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \   000238   8882         MOV     DPL,R0
   \   00023A   8983         MOV     DPH,R1
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   C0E0         PUSH    A
   \   00023F   EC           MOV     A,R4
   \   000240   240F         ADD     A,#0xf
   \   000242   F582         MOV     DPL,A
   \   000244   E4           CLR     A
   \   000245   3D           ADDC    A,R5
   \   000246   F583         MOV     DPH,A
   \   000248   D0E0         POP     A
   \   00024A   F0           MOVX    @DPTR,A
   2635            }
   2636          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   00024B   7F02         MOV     R7,#0x2
   \   00024D   02....       LJMP    ?BANKED_LEAVE_XDATA
   2637          
   2638          /*********************************************************************
   2639           * @fn          ZDO_ParesPowerDescRsp
   2640           *
   2641           * @brief       This function parses the Power_Desc_rsp message.
   2642           *
   2643           * @param       inMsg  - incoming message
   2644           * @param       pNPRsp - place to parse the message into
   2645           *
   2646           * @return      none
   2647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2648          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2649          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2650            uint8 *msg;
   2651          
   2652            msg = inMsg->asdu;
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   E8           MOV     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   E9           MOV     A,R1
   \   00001A   FB           MOV     R3,A
   2653            pNPRsp->status = *msg++;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C0E0         PUSH    A
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   D0E0         POP     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   AA82         MOV     R2,DPL
   \   000030   AB83         MOV     R3,DPH
   2654            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0,A
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   7900         MOV     R1,#0x0
   \   000045   E4           CLR     A
   \   000046   C8           XCH     A,R0
   \   000047   F9           MOV     R1,A
   \   000048   E5..         MOV     A,?V0
   \   00004A   28           ADD     A,R0
   \   00004B   F8           MOV     R0,A
   \   00004C   E5..         MOV     A,?V1
   \   00004E   39           ADDC    A,R1
   \   00004F   F9           MOV     R1,A
   \   000050   8C82         MOV     DPL,R4
   \   000052   8D83         MOV     DPH,R5
   \   000054   A3           INC     DPTR
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
   2655          
   2656            if ( pNPRsp->status == ZDP_SUCCESS )
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6003         JZ      $+5
   \   000061   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2657            {
   2658              msg += 2;
   \   000064   EA           MOV     A,R2
   \   000065   2402         ADD     A,#0x2
   \   000067   FA           MOV     R2,A
   \   000068   5001         JNC     ??ZDO_ParsePowerDescRsp_1
   \   00006A   0B           INC     R3
   2659              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \                     ??ZDO_ParsePowerDescRsp_1:
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C4           SWAP    A
   \   000071   540F         ANL     A,#0xf
   \   000073   F5..         MOV     ?V0,A
   \   000075   75..00       MOV     ?V1,#0x0
   \   000078   8C82         MOV     DPL,R4
   \   00007A   8D83         MOV     DPH,R5
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   540F         ANL     A,#0xf
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   54FF         ANL     A,#0xff
   \   000087   F0           MOVX    @DPTR,A
   \   000088   7404         MOV     A,#0x4
   \   00008A   78..         MOV     R0,#?V0
   \   00008C   12....       LCALL   ?S_SHL
   \   00008F   E5..         MOV     A,?V0
   \   000091   54F0         ANL     A,#0xf0
   \   000093   F8           MOV     R0,A
   \   000094   E5..         MOV     A,?V1
   \   000096   5400         ANL     A,#0x0
   \   000098   F9           MOV     R1,A
   \   000099   8C82         MOV     DPL,R4
   \   00009B   8D83         MOV     DPH,R5
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   48           ORL     A,R0
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   49           ORL     A,R1
   \   0000A6   F0           MOVX    @DPTR,A
   2660              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \   0000A7   8A82         MOV     DPL,R2
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F8           MOV     R0,A
   \   0000AD   7900         MOV     R1,#0x0
   \   0000AF   E8           MOV     A,R0
   \   0000B0   540F         ANL     A,#0xf
   \   0000B2   F8           MOV     R0,A
   \   0000B3   E9           MOV     A,R1
   \   0000B4   5400         ANL     A,#0x0
   \   0000B6   F9           MOV     R1,A
   \   0000B7   8A82         MOV     DPL,R2
   \   0000B9   8B83         MOV     DPH,R3
   \   0000BB   A3           INC     DPTR
   \   0000BC   AA82         MOV     R2,DPL
   \   0000BE   AB83         MOV     R3,DPH
   \   0000C0   8C82         MOV     DPL,R4
   \   0000C2   8D83         MOV     DPH,R5
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   54F0         ANL     A,#0xf0
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   54FF         ANL     A,#0xff
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   E8           MOV     A,R0
   \   0000D1   540F         ANL     A,#0xf
   \   0000D3   F8           MOV     R0,A
   \   0000D4   E9           MOV     A,R1
   \   0000D5   5400         ANL     A,#0x0
   \   0000D7   F9           MOV     R1,A
   \   0000D8   8C82         MOV     DPL,R4
   \   0000DA   8D83         MOV     DPH,R5
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   48           ORL     A,R0
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   49           ORL     A,R1
   \   0000E5   F0           MOVX    @DPTR,A
   2661              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \   0000E6   8A82         MOV     DPL,R2
   \   0000E8   8B83         MOV     DPH,R3
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C4           SWAP    A
   \   0000EC   540F         ANL     A,#0xf
   \   0000EE   F5..         MOV     ?V0,A
   \   0000F0   75..00       MOV     ?V1,#0x0
   \   0000F3   8C82         MOV     DPL,R4
   \   0000F5   8D83         MOV     DPH,R5
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   54FF         ANL     A,#0xff
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   540F         ANL     A,#0xf
   \   000102   F0           MOVX    @DPTR,A
   \   000103   740C         MOV     A,#0xc
   \   000105   78..         MOV     R0,#?V0
   \   000107   12....       LCALL   ?S_SHL
   \   00010A   8C82         MOV     DPL,R4
   \   00010C   8D83         MOV     DPH,R5
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   45..         ORL     A,?V0
   \   000114   F0           MOVX    @DPTR,A
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   45..         ORL     A,?V1
   \   000119   F0           MOVX    @DPTR,A
   2662              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \   00011A   8A82         MOV     DPL,R2
   \   00011C   8B83         MOV     DPH,R3
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F8           MOV     R0,A
   \   000120   7900         MOV     R1,#0x0
   \   000122   E8           MOV     A,R0
   \   000123   540F         ANL     A,#0xf
   \   000125   F8           MOV     R0,A
   \   000126   E9           MOV     A,R1
   \   000127   5400         ANL     A,#0x0
   \   000129   F9           MOV     R1,A
   \   00012A   8A82         MOV     DPL,R2
   \   00012C   8B83         MOV     DPH,R3
   \   00012E   A3           INC     DPTR
   \   00012F   AA82         MOV     R2,DPL
   \   000131   AB83         MOV     R3,DPH
   \   000133   8C82         MOV     DPL,R4
   \   000135   8D83         MOV     DPH,R5
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   54FF         ANL     A,#0xff
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   54F0         ANL     A,#0xf0
   \   000142   F0           MOVX    @DPTR,A
   \   000143   E4           CLR     A
   \   000144   C8           XCH     A,R0
   \   000145   F9           MOV     R1,A
   \   000146   E8           MOV     A,R0
   \   000147   5400         ANL     A,#0x0
   \   000149   F8           MOV     R0,A
   \   00014A   E9           MOV     A,R1
   \   00014B   540F         ANL     A,#0xf
   \   00014D   F9           MOV     R1,A
   \   00014E   8C82         MOV     DPL,R4
   \   000150   8D83         MOV     DPH,R5
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   48           ORL     A,R0
   \   000157   F0           MOVX    @DPTR,A
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   49           ORL     A,R1
   \   00015B   F0           MOVX    @DPTR,A
   2663            }
   2664          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   00015C   7F02         MOV     R7,#0x2
   \   00015E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2665          
   2666          /*********************************************************************
   2667           * @fn          ZDO_ParseSimpleDescRsp
   2668           *
   2669           * @brief       This function parse the Simple_Desc_rsp message.
   2670           *
   2671           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2672           *         in the SimpleDescriptionFormat_t structure are allocated
   2673           *         and the calling function needs to free [osal_msg_free()]
   2674           *         these buffers.
   2675           *
   2676           * @param       inMsg  - incoming message
   2677           * @param       pSimpleDescRsp - place to parse the message into
   2678           *
   2679           * @return      none
   2680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2681          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2683            uint8 *msg;
   2684          
   2685            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   2686            pSimpleDescRsp->status = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028   85..82       MOV     DPL,?V0
   \   00002B   85..83       MOV     DPH,?V1
   \   00002E   D0E0         POP     A
   \   000030   F0           MOVX    @DPTR,A
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   AE82         MOV     R6,DPL
   \   000038   AF83         MOV     R7,DPH
   2687            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   7B00         MOV     R3,#0x0
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   7900         MOV     R1,#0x0
   \   00004B   E4           CLR     A
   \   00004C   C8           XCH     A,R0
   \   00004D   F9           MOV     R1,A
   \   00004E   EA           MOV     A,R2
   \   00004F   28           ADD     A,R0
   \   000050   F8           MOV     R0,A
   \   000051   EB           MOV     A,R3
   \   000052   39           ADDC    A,R1
   \   000053   F9           MOV     R1,A
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   2688            msg += sizeof ( uint16 );
   \   000060   EE           MOV     A,R6
   \   000061   2402         ADD     A,#0x2
   \   000063   FE           MOV     R6,A
   \   000064   5001         JNC     ??ZDO_ParseSimpleDescRsp_0
   \   000066   0F           INC     R7
   2689            msg++; // Skip past the length field.
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   A3           INC     DPTR
   \   00006C   AE82         MOV     R6,DPL
   \   00006E   AF83         MOV     R7,DPH
   2690          
   2691            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \   000070   85..82       MOV     DPL,?V0
   \   000073   85..83       MOV     DPH,?V1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   7011         JNZ     ??ZDO_ParseSimpleDescRsp_1
   2692            {
   2693              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   000079                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   000079   E5..         MOV     A,?V0
   \   00007B   2403         ADD     A,#0x3
   \   00007D   FC           MOV     R4,A
   \   00007E   E4           CLR     A
   \   00007F   35..         ADDC    A,?V1
   \   000081   FD           MOV     R5,A
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   \   000089   E9           MOV     A,R1
   2694            }
   2695          }
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   00008A   7F04         MOV     R7,#0x4
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2696          
   2697          /*********************************************************************
   2698           * @fn          ZDO_ParseEPListRsp
   2699           *
   2700           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2701           *
   2702           * @param       inMsg  - incoming message
   2703           *
   2704           * @return      none
   2705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2706          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2707          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   2708            ZDO_ActiveEndpointRsp_t *pRsp;
   2709            uint8 *msg;
   2710            uint8 Status;
   2711            uint8 cnt;
   2712          
   2713            msg = inMsg->asdu;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C8           XCH     A,R0
   \   000020   2413         ADD     A,#0x13
   \   000022   F582         MOV     DPL,A
   \   000024   C8           XCH     A,R0
   \   000025   3400         ADDC    A,#0x0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   E8           MOV     A,R0
   \   00002F   FE           MOV     R6,A
   \   000030   E9           MOV     A,R1
   \   000031   FF           MOV     R7,A
   2714            Status = *msg++;
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V6,A
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   AE82         MOV     R6,DPL
   \   000040   AF83         MOV     R7,DPH
   2715            cnt = msg[2];
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V3,A
   2716          
   2717            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00004B                ; Setup parameters for call to function osal_mem_alloc
   \   00004B   A8..         MOV     R0,?V3
   \   00004D   7900         MOV     R1,#0x0
   \   00004F   E8           MOV     A,R0
   \   000050   2404         ADD     A,#0x4
   \   000052   FA           MOV     R2,A
   \   000053   E4           CLR     A
   \   000054   39           ADDC    A,R1
   \   000055   FB           MOV     R3,A
   \   000056   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000059   8A..         MOV     ?V0,R2
   \   00005B   8B..         MOV     ?V1,R3
   \   00005D   85....       MOV     ?V4,?V0
   \   000060   85....       MOV     ?V5,?V1
   2718            if ( pRsp )
   \   000063   E5..         MOV     A,?V4
   \   000065   45..         ORL     A,?V5
   \   000067   6074         JZ      ??ZDO_ParseEPListRsp_0
   2719            {
   2720              pRsp->status = Status;
   \   000069   E5..         MOV     A,?V6
   \   00006B   C0E0         PUSH    A
   \   00006D   85..82       MOV     DPL,?V4
   \   000070   85..83       MOV     DPH,?V5
   \   000073   D0E0         POP     A
   \   000075   F0           MOVX    @DPTR,A
   2721              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FA           MOV     R2,A
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F8           MOV     R0,A
   \   000085   7900         MOV     R1,#0x0
   \   000087   E4           CLR     A
   \   000088   C8           XCH     A,R0
   \   000089   F9           MOV     R1,A
   \   00008A   EA           MOV     A,R2
   \   00008B   28           ADD     A,R0
   \   00008C   F8           MOV     R0,A
   \   00008D   EB           MOV     A,R3
   \   00008E   39           ADDC    A,R1
   \   00008F   F9           MOV     R1,A
   \   000090   85..82       MOV     DPL,?V4
   \   000093   85..83       MOV     DPH,?V5
   \   000096   A3           INC     DPTR
   \   000097   E8           MOV     A,R0
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   E9           MOV     A,R1
   \   00009B   F0           MOVX    @DPTR,A
   2722              msg += sizeof( uint16 );
   \   00009C   EE           MOV     A,R6
   \   00009D   2402         ADD     A,#0x2
   \   00009F   FE           MOV     R6,A
   \   0000A0   5001         JNC     ??ZDO_ParseEPListRsp_1
   \   0000A2   0F           INC     R7
   2723              pRsp->cnt = cnt;
   \                     ??ZDO_ParseEPListRsp_1:
   \   0000A3   E5..         MOV     A,?V3
   \   0000A5   C0E0         PUSH    A
   \   0000A7   85..82       MOV     DPL,?V4
   \   0000AA   85..83       MOV     DPH,?V5
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
   2724              msg++; // pass cnt
   \   0000B3   8E82         MOV     DPL,R6
   \   0000B5   8F83         MOV     DPH,R7
   \   0000B7   A3           INC     DPTR
   \   0000B8   AE82         MOV     R6,DPL
   \   0000BA   AF83         MOV     R7,DPH
   2725              osal_memcpy( pRsp->epList, msg, cnt );
   \   0000BC                ; Setup parameters for call to function osal_memcpy
   \   0000BC   8E..         MOV     ?V0,R6
   \   0000BE   8F..         MOV     ?V1,R7
   \   0000C0   75..00       MOV     ?V2,#0x0
   \   0000C3   78..         MOV     R0,#?V0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C8   AC..         MOV     R4,?V3
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   E5..         MOV     A,?V4
   \   0000CE   2404         ADD     A,#0x4
   \   0000D0   FA           MOV     R2,A
   \   0000D1   E4           CLR     A
   \   0000D2   35..         ADDC    A,?V5
   \   0000D4   FB           MOV     R3,A
   \   0000D5   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D8   7403         MOV     A,#0x3
   \   0000DA   12....       LCALL   ?DEALLOC_XSTACK8
   2726            }
   2727          
   2728            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   0000DD   AA..         MOV     R2,?V4
   \   0000DF   AB..         MOV     R3,?V5
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   7F07         MOV     R7,#0x7
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA
   2729          }
   2730          
   2731          /*********************************************************************
   2732           * @fn          ZDO_ParseServerDiscRsp
   2733           *
   2734           * @brief       Parse the Server_Discovery_rsp message.
   2735           *
   2736           * @param       inMsg - incoming message.
   2737           * @param       pRsp - place to put the parsed information.
   2738           *
   2739           * @return      none
   2740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2741          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2742          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2743            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F583         MOV     DPH,A
   \   000014   8882         MOV     DPL,R0
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C0E0         PUSH    A
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   2744            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \   000020   EA           MOV     A,R2
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   3B           ADDC    A,R3
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F583         MOV     DPH,A
   \   00002F   8882         MOV     DPL,R0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FE           MOV     R6,A
   \   000034   7F00         MOV     R7,#0x0
   \   000036   EA           MOV     A,R2
   \   000037   2413         ADD     A,#0x13
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   3B           ADDC    A,R3
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F583         MOV     DPH,A
   \   000045   8882         MOV     DPL,R0
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   E4           CLR     A
   \   00004E   C8           XCH     A,R0
   \   00004F   F9           MOV     R1,A
   \   000050   EE           MOV     A,R6
   \   000051   28           ADD     A,R0
   \   000052   F8           MOV     R0,A
   \   000053   EF           MOV     A,R7
   \   000054   39           ADDC    A,R1
   \   000055   F9           MOV     R1,A
   \   000056   8C82         MOV     DPL,R4
   \   000058   8D83         MOV     DPH,R5
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   2745          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
   2746          
   2747          /*********************************************************************
   2748           * @fn          ZDO_ParseMgmtLqiRsp
   2749           *
   2750           * @brief       This function parses the incoming Management
   2751           *              LQI response
   2752           *
   2753           * @param       inMsg - incoming message
   2754           *
   2755           * @return      a pointer to parsed response structure (NULL if not allocated).
   2756           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2757           *          by the calling function [osal_mem_free()].
   2758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2759          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2760          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   2761            ZDO_MgmtLqiRsp_t *pRsp;
   2762            uint8 status;
   2763            uint8 startIndex = 0;
   \   000014   75..00       MOV     ?V6,#0x0
   2764            uint8 neighborLqiCount = 0;
   \   000017   75..00       MOV     ?V4,#0x0
   2765            uint8 neighborLqiEntries = 0;
   \   00001A   75..00       MOV     ?V5,#0x0
   2766            uint8 *msg;
   2767          
   2768            msg = inMsg->asdu;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C8           XCH     A,R0
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   C8           XCH     A,R0
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F583         MOV     DPH,A
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2769          
   2770            status = *msg++;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   AE82         MOV     R6,DPL
   \   000050   AF83         MOV     R7,DPH
   2771            if ( status == ZSuccess )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   7030         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2772            {
   2773              neighborLqiEntries = *msg++;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V5,A
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   AE82         MOV     R6,DPL
   \   000069   AF83         MOV     R7,DPH
   2774              startIndex = *msg++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V6,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   AE82         MOV     R6,DPL
   \   000079   AF83         MOV     R7,DPH
   2775              neighborLqiCount = *msg++;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F5..         MOV     ?V4,A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   AE82         MOV     R6,DPL
   \   000089   AF83         MOV     R7,DPH
   2776            }
   2777          
   2778            // Allocate a buffer big enough to handle the list.
   2779            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2780                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   A8..         MOV     R0,?V4
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   E8           MOV     A,R0
   \   000090   75F00E       MOV     B,#0xe
   \   000093   A4           MUL     AB
   \   000094   C8           XCH     A,R0
   \   000095   AAF0         MOV     R2,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   2A           ADD     A,R2
   \   00009C   FA           MOV     R2,A
   \   00009D   75F00E       MOV     B,#0xe
   \   0000A0   E9           MOV     A,R1
   \   0000A1   A4           MUL     AB
   \   0000A2   2A           ADD     A,R2
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   2404         ADD     A,#0x4
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   39           ADDC    A,R1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000AE   8A..         MOV     ?V0,R2
   \   0000B0   8B..         MOV     ?V1,R3
   \   0000B2   85....       MOV     ?V2,?V0
   \   0000B5   85....       MOV     ?V3,?V1
   2781            if ( pRsp )
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   45..         ORL     A,?V3
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2782            {
   2783              uint8 x;
   2784              neighborLqiItem_t *pList = pRsp->list;
   \   0000C1   E5..         MOV     A,?V2
   \   0000C3   2404         ADD     A,#0x4
   \   0000C5   F5..         MOV     ?V0,A
   \   0000C7   E4           CLR     A
   \   0000C8   35..         ADDC    A,?V3
   \   0000CA   F5..         MOV     ?V1,A
   2785              pRsp->status = status;
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   85..82       MOV     DPL,?V2
   \   0000D8   85..83       MOV     DPH,?V3
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
   2786              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   0000DE   E5..         MOV     A,?V5
   \   0000E0   C0E0         PUSH    A
   \   0000E2   85..82       MOV     DPL,?V2
   \   0000E5   85..83       MOV     DPH,?V3
   \   0000E8   A3           INC     DPTR
   \   0000E9   D0E0         POP     A
   \   0000EB   F0           MOVX    @DPTR,A
   2787              pRsp->startIndex = startIndex;
   \   0000EC   E5..         MOV     A,?V6
   \   0000EE   C0E0         PUSH    A
   \   0000F0   85..82       MOV     DPL,?V2
   \   0000F3   85..83       MOV     DPH,?V3
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
   2788              pRsp->neighborLqiCount = neighborLqiCount;
   \   0000FB   E5..         MOV     A,?V4
   \   0000FD   C0E0         PUSH    A
   \   0000FF   85..82       MOV     DPL,?V2
   \   000102   85..83       MOV     DPH,?V3
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
   2789          
   2790              for ( x = 0; x < neighborLqiCount; x++ )
   \   00010B   75..00       MOV     ?V7,#0x0
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   00010E   E5..         MOV     A,?V7
   \   000110   C3           CLR     C
   \   000111   95..         SUBB    A,?V4
   \   000113   4003         JC      $+5
   \   000115   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2791              {
   2792                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \   000118                ; Setup parameters for call to function sAddrExtCpy
   \   000118   EE           MOV     A,R6
   \   000119   FC           MOV     R4,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FD           MOV     R5,A
   \   00011C   E5..         MOV     A,?V0
   \   00011E   2404         ADD     A,#0x4
   \   000120   FA           MOV     R2,A
   \   000121   E4           CLR     A
   \   000122   35..         ADDC    A,?V1
   \   000124   FB           MOV     R3,A
   \   000125   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2793                msg += Z_EXTADDR_LEN;
   \   000128   EE           MOV     A,R6
   \   000129   2408         ADD     A,#0x8
   \   00012B   FE           MOV     R6,A
   \   00012C   5001         JNC     ??ZDO_ParseMgmtLqiRsp_3
   \   00012E   0F           INC     R7
   2794          
   2795                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   00012F   EE           MOV     A,R6
   \   000130   2408         ADD     A,#0x8
   \   000132   FE           MOV     R6,A
   \   000133   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   000135   0F           INC     R7
   2796                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F8           MOV     R0,A
   \   00013C   7900         MOV     R1,#0x0
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   FA           MOV     R2,A
   \   000145   7B00         MOV     R3,#0x0
   \   000147   E4           CLR     A
   \   000148   CA           XCH     A,R2
   \   000149   FB           MOV     R3,A
   \   00014A   E8           MOV     A,R0
   \   00014B   2A           ADD     A,R2
   \   00014C   F8           MOV     R0,A
   \   00014D   E9           MOV     A,R1
   \   00014E   3B           ADDC    A,R3
   \   00014F   F9           MOV     R1,A
   \   000150   85..82       MOV     DPL,?V0
   \   000153   85..83       MOV     DPH,?V1
   \   000156   E8           MOV     A,R0
   \   000157   F0           MOVX    @DPTR,A
   \   000158   A3           INC     DPTR
   \   000159   E9           MOV     A,R1
   \   00015A   F0           MOVX    @DPTR,A
   2797                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   \   00015B   EE           MOV     A,R6
   \   00015C   2405         ADD     A,#0x5
   \   00015E   FE           MOV     R6,A
   \   00015F   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   000161   0F           INC     R7
   2798                pList->rxLqi = *msg++;
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000162   8E82         MOV     DPL,R6
   \   000164   8F83         MOV     DPH,R7
   \   000166   E0           MOVX    A,@DPTR
   \   000167   C0E0         PUSH    A
   \   000169   E5..         MOV     A,?V0
   \   00016B   240D         ADD     A,#0xd
   \   00016D   F582         MOV     DPL,A
   \   00016F   E4           CLR     A
   \   000170   35..         ADDC    A,?V1
   \   000172   F583         MOV     DPH,A
   \   000174   D0E0         POP     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   8E82         MOV     DPL,R6
   \   000179   8F83         MOV     DPH,R7
   \   00017B   A3           INC     DPTR
   \   00017C   AE82         MOV     R6,DPL
   \   00017E   AF83         MOV     R7,DPH
   2799                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \   000180   E5..         MOV     A,?V0
   \   000182   240C         ADD     A,#0xc
   \   000184   F582         MOV     DPL,A
   \   000186   E4           CLR     A
   \   000187   35..         ADDC    A,?V1
   \   000189   F583         MOV     DPH,A
   \   00018B   7400         MOV     A,#0x0
   \   00018D   F0           MOVX    @DPTR,A
   2800                pList++;
   \   00018E   E5..         MOV     A,?V0
   \   000190   240E         ADD     A,#0xe
   \   000192   F5..         MOV     ?V0,A
   \   000194   5002         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   000196   05..         INC     ?V1
   2801              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000198   05..         INC     ?V7
   \   00019A   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   2802            }
   2803          
   2804            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00019D   AA..         MOV     R2,?V2
   \   00019F   AB..         MOV     R3,?V3
   \   0001A1   7403         MOV     A,#0x3
   \   0001A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A6   7F08         MOV     R7,#0x8
   \   0001A8   02....       LJMP    ?BANKED_LEAVE_XDATA
   2805          }
   2806          
   2807          /*********************************************************************
   2808           * @fn          ZDO_ParseMgmNwkDiscRsp
   2809           *
   2810           * @brief       This function parses the incoming Management
   2811           *              Network Discover response.
   2812           *
   2813           * @param       inMsg - incoming message
   2814           *
   2815           * @return      pointer to parsed response.  This structure was
   2816           *          allocated using osal_mem_alloc, so it must be freed
   2817           *          by the calling function [osal_mem_free()].
   2818           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2819          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2820          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   2821            ZDO_MgmNwkDiscRsp_t *pRsp;
   2822            uint8 status;
   2823            uint8 networkCount = 0;
   \   000014   75..00       MOV     ?V6,#0x0
   2824            uint8 startIndex = 0;
   \   000017   75..00       MOV     ?V5,#0x0
   2825            uint8 networkListCount = 0;
   \   00001A   75..00       MOV     ?V4,#0x0
   2826            uint8 *msg;
   2827          
   2828            msg = inMsg->asdu;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C8           XCH     A,R0
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   C8           XCH     A,R0
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F583         MOV     DPH,A
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2829            status = *msg++;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   AE82         MOV     R6,DPL
   \   000050   AF83         MOV     R7,DPH
   2830          
   2831            if ( status == ZSuccess )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   7030         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2832            {
   2833              networkCount = *msg++;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V6,A
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   AE82         MOV     R6,DPL
   \   000069   AF83         MOV     R7,DPH
   2834              startIndex = *msg++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V5,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   AE82         MOV     R6,DPL
   \   000079   AF83         MOV     R7,DPH
   2835              networkListCount = *msg++;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F5..         MOV     ?V4,A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   AE82         MOV     R6,DPL
   \   000089   AF83         MOV     R7,DPH
   2836            }
   2837          
   2838            // Allocate a buffer big enough to handle the list.
   2839            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2840                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   A8..         MOV     R0,?V4
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   E8           MOV     A,R0
   \   000090   75F010       MOV     B,#0x10
   \   000093   A4           MUL     AB
   \   000094   C8           XCH     A,R0
   \   000095   AAF0         MOV     R2,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   2A           ADD     A,R2
   \   00009C   FA           MOV     R2,A
   \   00009D   75F010       MOV     B,#0x10
   \   0000A0   E9           MOV     A,R1
   \   0000A1   A4           MUL     AB
   \   0000A2   2A           ADD     A,R2
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   2404         ADD     A,#0x4
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   39           ADDC    A,R1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000AE   8A..         MOV     ?V0,R2
   \   0000B0   8B..         MOV     ?V1,R3
   \   0000B2   85....       MOV     ?V2,?V0
   \   0000B5   85....       MOV     ?V3,?V1
   2841            if ( pRsp )
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   45..         ORL     A,?V3
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2842            {
   2843              uint8 x;
   2844              mgmtNwkDiscItem_t *pList;
   2845          
   2846              pRsp->status = status;
   \   0000C1   85..82       MOV     DPL,?XSP + 0
   \   0000C4   85..83       MOV     DPH,?XSP + 1
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   C0E0         PUSH    A
   \   0000CA   85..82       MOV     DPL,?V2
   \   0000CD   85..83       MOV     DPH,?V3
   \   0000D0   D0E0         POP     A
   \   0000D2   F0           MOVX    @DPTR,A
   2847              pRsp->networkCount = networkCount;
   \   0000D3   E5..         MOV     A,?V6
   \   0000D5   C0E0         PUSH    A
   \   0000D7   85..82       MOV     DPL,?V2
   \   0000DA   85..83       MOV     DPH,?V3
   \   0000DD   A3           INC     DPTR
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   2848              pRsp->startIndex = startIndex;
   \   0000E1   E5..         MOV     A,?V5
   \   0000E3   C0E0         PUSH    A
   \   0000E5   85..82       MOV     DPL,?V2
   \   0000E8   85..83       MOV     DPH,?V3
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   D0E0         POP     A
   \   0000EF   F0           MOVX    @DPTR,A
   2849              pRsp->networkListCount = networkListCount;
   \   0000F0   E5..         MOV     A,?V4
   \   0000F2   C0E0         PUSH    A
   \   0000F4   85..82       MOV     DPL,?V2
   \   0000F7   85..83       MOV     DPH,?V3
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   D0E0         POP     A
   \   0000FF   F0           MOVX    @DPTR,A
   2850              pList = pRsp->list;
   \   000100   E5..         MOV     A,?V2
   \   000102   2404         ADD     A,#0x4
   \   000104   F8           MOV     R0,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V3
   \   000108   F9           MOV     R1,A
   \   000109   88..         MOV     ?V0,R0
   \   00010B   89..         MOV     ?V1,R1
   2851          
   2852              for ( x = 0; x < networkListCount; x++ )
   \   00010D   75..00       MOV     ?V7,#0x0
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   000110   E5..         MOV     A,?V7
   \   000112   C3           CLR     C
   \   000113   95..         SUBB    A,?V4
   \   000115   4003         JC      $+5
   \   000117   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2853              {
   2854                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \   00011A                ; Setup parameters for call to function sAddrExtCpy
   \   00011A   EE           MOV     A,R6
   \   00011B   FC           MOV     R4,A
   \   00011C   EF           MOV     A,R7
   \   00011D   FD           MOV     R5,A
   \   00011E   AA..         MOV     R2,?V0
   \   000120   AB..         MOV     R3,?V1
   \   000122   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2855                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000125   8E82         MOV     DPL,R6
   \   000127   8F83         MOV     DPH,R7
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F8           MOV     R0,A
   \   00012B   7900         MOV     R1,#0x0
   \   00012D   8E82         MOV     DPL,R6
   \   00012F   8F83         MOV     DPH,R7
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   FA           MOV     R2,A
   \   000134   7B00         MOV     R3,#0x0
   \   000136   E4           CLR     A
   \   000137   CA           XCH     A,R2
   \   000138   FB           MOV     R3,A
   \   000139   E8           MOV     A,R0
   \   00013A   2A           ADD     A,R2
   \   00013B   F8           MOV     R0,A
   \   00013C   E9           MOV     A,R1
   \   00013D   3B           ADDC    A,R3
   \   00013E   F9           MOV     R1,A
   \   00013F   85..82       MOV     DPL,?V0
   \   000142   85..83       MOV     DPH,?V1
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   E8           MOV     A,R0
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   E9           MOV     A,R1
   \   000151   F0           MOVX    @DPTR,A
   2856                msg += Z_EXTADDR_LEN;
   \   000152   EE           MOV     A,R6
   \   000153   2408         ADD     A,#0x8
   \   000155   FE           MOV     R6,A
   \   000156   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_3
   \   000158   0F           INC     R7
   2857          
   2858                pList->logicalChannel = *msg++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000159   8E82         MOV     DPL,R6
   \   00015B   8F83         MOV     DPH,R7
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   C0E0         PUSH    A
   \   000160   85..82       MOV     DPL,?V0
   \   000163   85..83       MOV     DPH,?V1
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   D0E0         POP     A
   \   000172   F0           MOVX    @DPTR,A
   \   000173   8E82         MOV     DPL,R6
   \   000175   8F83         MOV     DPH,R7
   \   000177   A3           INC     DPTR
   \   000178   AE82         MOV     R6,DPL
   \   00017A   AF83         MOV     R7,DPH
   2859                pList->stackProfile = (*msg) & 0x0F;
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   E0           MOVX    A,@DPTR
   \   000181   540F         ANL     A,#0xf
   \   000183   C0E0         PUSH    A
   \   000185   E5..         MOV     A,?V0
   \   000187   240B         ADD     A,#0xb
   \   000189   F582         MOV     DPL,A
   \   00018B   E4           CLR     A
   \   00018C   35..         ADDC    A,?V1
   \   00018E   F583         MOV     DPH,A
   \   000190   D0E0         POP     A
   \   000192   F0           MOVX    @DPTR,A
   2860                pList->version = (*msg++ >> 4) & 0x0F;
   \   000193   8E82         MOV     DPL,R6
   \   000195   8F83         MOV     DPH,R7
   \   000197   E0           MOVX    A,@DPTR
   \   000198   C4           SWAP    A
   \   000199   540F         ANL     A,#0xf
   \   00019B   C0E0         PUSH    A
   \   00019D   E5..         MOV     A,?V0
   \   00019F   240C         ADD     A,#0xc
   \   0001A1   F582         MOV     DPL,A
   \   0001A3   E4           CLR     A
   \   0001A4   35..         ADDC    A,?V1
   \   0001A6   F583         MOV     DPH,A
   \   0001A8   D0E0         POP     A
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   8E82         MOV     DPL,R6
   \   0001AD   8F83         MOV     DPH,R7
   \   0001AF   A3           INC     DPTR
   \   0001B0   AE82         MOV     R6,DPL
   \   0001B2   AF83         MOV     R7,DPH
   2861                pList->beaconOrder = (*msg) & 0x0F;
   \   0001B4   8E82         MOV     DPL,R6
   \   0001B6   8F83         MOV     DPH,R7
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   540F         ANL     A,#0xf
   \   0001BB   C0E0         PUSH    A
   \   0001BD   E5..         MOV     A,?V0
   \   0001BF   240D         ADD     A,#0xd
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   E4           CLR     A
   \   0001C4   35..         ADDC    A,?V1
   \   0001C6   F583         MOV     DPH,A
   \   0001C8   D0E0         POP     A
   \   0001CA   F0           MOVX    @DPTR,A
   2862                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \   0001CB   8E82         MOV     DPL,R6
   \   0001CD   8F83         MOV     DPH,R7
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   C4           SWAP    A
   \   0001D1   540F         ANL     A,#0xf
   \   0001D3   C0E0         PUSH    A
   \   0001D5   E5..         MOV     A,?V0
   \   0001D7   240E         ADD     A,#0xe
   \   0001D9   F582         MOV     DPL,A
   \   0001DB   E4           CLR     A
   \   0001DC   35..         ADDC    A,?V1
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   D0E0         POP     A
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   8E82         MOV     DPL,R6
   \   0001E5   8F83         MOV     DPH,R7
   \   0001E7   A3           INC     DPTR
   \   0001E8   AE82         MOV     R6,DPL
   \   0001EA   AF83         MOV     R7,DPH
   2863                pList->permitJoining = *msg++;
   \   0001EC   8E82         MOV     DPL,R6
   \   0001EE   8F83         MOV     DPH,R7
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   C0E0         PUSH    A
   \   0001F3   E5..         MOV     A,?V0
   \   0001F5   240F         ADD     A,#0xf
   \   0001F7   F582         MOV     DPL,A
   \   0001F9   E4           CLR     A
   \   0001FA   35..         ADDC    A,?V1
   \   0001FC   F583         MOV     DPH,A
   \   0001FE   D0E0         POP     A
   \   000200   F0           MOVX    @DPTR,A
   \   000201   8E82         MOV     DPL,R6
   \   000203   8F83         MOV     DPH,R7
   \   000205   A3           INC     DPTR
   \   000206   AE82         MOV     R6,DPL
   \   000208   AF83         MOV     R7,DPH
   2864                pList++;
   \   00020A   E5..         MOV     A,?V0
   \   00020C   2410         ADD     A,#0x10
   \   00020E   F5..         MOV     ?V0,A
   \   000210   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   000212   05..         INC     ?V1
   2865              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   000214   05..         INC     ?V7
   \   000216   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   2866            }
   2867          
   2868            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   000219   AA..         MOV     R2,?V2
   \   00021B   AB..         MOV     R3,?V3
   \   00021D   7403         MOV     A,#0x3
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000222   7F08         MOV     R7,#0x8
   \   000224   02....       LJMP    ?BANKED_LEAVE_XDATA
   2869          }
   2870          
   2871          /*********************************************************************
   2872           * @fn          ZDO_ParseMgmtRtgRsp
   2873           *
   2874           * @brief       This function parses the incoming Management
   2875           *              Routing response.
   2876           *
   2877           * @param       inMsg - incoming message
   2878           *
   2879           * @return      a pointer to parsed response structure (NULL if not allocated).
   2880           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2881           *          by the calling function [osal_mem_free()].
   2882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2883          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2884          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   2885            ZDO_MgmtRtgRsp_t *pRsp;
   2886            uint8 status;
   2887            uint8 rtgCount = 0;
   \   000015   75..00       MOV     ?V6,#0x0
   2888            uint8 startIndex = 0;
   \   000018   75..00       MOV     ?V3,#0x0
   2889            uint8 rtgListCount = 0;
   \   00001B   75..00       MOV     ?V2,#0x0
   2890            uint8 *msg;
   2891          
   2892            msg = inMsg->asdu;
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C8           XCH     A,R0
   \   000029   2413         ADD     A,#0x13
   \   00002B   F582         MOV     DPL,A
   \   00002D   C8           XCH     A,R0
   \   00002E   3400         ADDC    A,#0x0
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   FE           MOV     R6,A
   \   000039   E9           MOV     A,R1
   \   00003A   FF           MOV     R7,A
   2893          
   2894            status = *msg++;
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V7,A
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   AE82         MOV     R6,DPL
   \   000049   AF83         MOV     R7,DPH
   2895            if ( status == ZSuccess )
   \   00004B   E5..         MOV     A,?V7
   \   00004D   7030         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2896            {
   2897              rtgCount = *msg++;
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V6,A
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   AE82         MOV     R6,DPL
   \   00005D   AF83         MOV     R7,DPH
   2898              startIndex = *msg++;
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V3,A
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   AE82         MOV     R6,DPL
   \   00006D   AF83         MOV     R7,DPH
   2899              rtgListCount = *msg++;
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V2,A
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   AE82         MOV     R6,DPL
   \   00007D   AF83         MOV     R7,DPH
   2900            }
   2901          
   2902            // Allocate a buffer big enough to handle the list
   2903            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2904                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   00007F                ; Setup parameters for call to function osal_mem_alloc
   \   00007F   A8..         MOV     R0,?V2
   \   000081   7900         MOV     R1,#0x0
   \   000083   E8           MOV     A,R0
   \   000084   75F007       MOV     B,#0x7
   \   000087   A4           MUL     AB
   \   000088   C8           XCH     A,R0
   \   000089   AAF0         MOV     R2,B
   \   00008B   75F000       MOV     B,#0x0
   \   00008E   A4           MUL     AB
   \   00008F   2A           ADD     A,R2
   \   000090   FA           MOV     R2,A
   \   000091   75F007       MOV     B,#0x7
   \   000094   E9           MOV     A,R1
   \   000095   A4           MUL     AB
   \   000096   2A           ADD     A,R2
   \   000097   F9           MOV     R1,A
   \   000098   E8           MOV     A,R0
   \   000099   2404         ADD     A,#0x4
   \   00009B   FA           MOV     R2,A
   \   00009C   E4           CLR     A
   \   00009D   39           ADDC    A,R1
   \   00009E   FB           MOV     R3,A
   \   00009F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A2   8A..         MOV     ?V4,R2
   \   0000A4   8B..         MOV     ?V5,R3
   \   0000A6   85....       MOV     ?V0,?V4
   \   0000A9   85....       MOV     ?V1,?V5
   2905            if ( pRsp )
   \   0000AC   E5..         MOV     A,?V0
   \   0000AE   45..         ORL     A,?V1
   \   0000B0   7003         JNZ     $+5
   \   0000B2   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_1 & 0xFFFF
   2906            {
   2907              uint8 x;
   2908              rtgItem_t *pList = pRsp->list;
   \   0000B5   E5..         MOV     A,?V0
   \   0000B7   2404         ADD     A,#0x4
   \   0000B9   FA           MOV     R2,A
   \   0000BA   E4           CLR     A
   \   0000BB   35..         ADDC    A,?V1
   \   0000BD   FB           MOV     R3,A
   2909              pRsp->status = status;
   \   0000BE   E5..         MOV     A,?V7
   \   0000C0   C0E0         PUSH    A
   \   0000C2   85..82       MOV     DPL,?V0
   \   0000C5   85..83       MOV     DPH,?V1
   \   0000C8   D0E0         POP     A
   \   0000CA   F0           MOVX    @DPTR,A
   2910              pRsp->rtgCount = rtgCount;
   \   0000CB   E5..         MOV     A,?V6
   \   0000CD   C0E0         PUSH    A
   \   0000CF   85..82       MOV     DPL,?V0
   \   0000D2   85..83       MOV     DPH,?V1
   \   0000D5   A3           INC     DPTR
   \   0000D6   D0E0         POP     A
   \   0000D8   F0           MOVX    @DPTR,A
   2911              pRsp->startIndex = startIndex;
   \   0000D9   E5..         MOV     A,?V3
   \   0000DB   C0E0         PUSH    A
   \   0000DD   85..82       MOV     DPL,?V0
   \   0000E0   85..83       MOV     DPH,?V1
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   D0E0         POP     A
   \   0000E7   F0           MOVX    @DPTR,A
   2912              pRsp->rtgListCount = rtgListCount;
   \   0000E8   E5..         MOV     A,?V2
   \   0000EA   C0E0         PUSH    A
   \   0000EC   85..82       MOV     DPL,?V0
   \   0000EF   85..83       MOV     DPH,?V1
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   D0E0         POP     A
   \   0000F7   F0           MOVX    @DPTR,A
   2913          
   2914              for ( x = 0; x < rtgListCount; x++ )
   \   0000F8   7800         MOV     R0,#0x0
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000FA   E8           MOV     A,R0
   \   0000FB   C3           CLR     C
   \   0000FC   95..         SUBB    A,?V2
   \   0000FE   4003         JC      $+5
   \   000100   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_1 & 0xFFFF
   2915              {
   2916                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FC           MOV     R4,A
   \   000109   7D00         MOV     R5,#0x0
   \   00010B   8E82         MOV     DPL,R6
   \   00010D   8F83         MOV     DPH,R7
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F5..         MOV     ?V4,A
   \   000113   75..00       MOV     ?V5,#0x0
   \   000116   E4           CLR     A
   \   000117   C5..         XCH     A,?V4
   \   000119   F5..         MOV     ?V5,A
   \   00011B   EC           MOV     A,R4
   \   00011C   25..         ADD     A,?V4
   \   00011E   FC           MOV     R4,A
   \   00011F   ED           MOV     A,R5
   \   000120   35..         ADDC    A,?V5
   \   000122   FD           MOV     R5,A
   \   000123   8A82         MOV     DPL,R2
   \   000125   8B83         MOV     DPH,R3
   \   000127   EC           MOV     A,R4
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   ED           MOV     A,R5
   \   00012B   F0           MOVX    @DPTR,A
   2917                msg += 2;
   \   00012C   EE           MOV     A,R6
   \   00012D   2402         ADD     A,#0x2
   \   00012F   FE           MOV     R6,A
   \   000130   5001         JNC     ??ZDO_ParseMgmtRtgRsp_3
   \   000132   0F           INC     R7
   2918                pList->status = *msg++;
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   E0           MOVX    A,@DPTR
   \   000138   C0E0         PUSH    A
   \   00013A   8A82         MOV     DPL,R2
   \   00013C   8B83         MOV     DPH,R3
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   D0E0         POP     A
   \   000145   F0           MOVX    @DPTR,A
   \   000146   8E82         MOV     DPL,R6
   \   000148   8F83         MOV     DPH,R7
   \   00014A   A3           INC     DPTR
   \   00014B   AE82         MOV     R6,DPL
   \   00014D   AF83         MOV     R7,DPH
   2919                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \   00014F   8E82         MOV     DPL,R6
   \   000151   8F83         MOV     DPH,R7
   \   000153   E0           MOVX    A,@DPTR
   \   000154   FC           MOV     R4,A
   \   000155   7D00         MOV     R5,#0x0
   \   000157   8E82         MOV     DPL,R6
   \   000159   8F83         MOV     DPH,R7
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F5..         MOV     ?V4,A
   \   00015F   75..00       MOV     ?V5,#0x0
   \   000162   E4           CLR     A
   \   000163   C5..         XCH     A,?V4
   \   000165   F5..         MOV     ?V5,A
   \   000167   EC           MOV     A,R4
   \   000168   25..         ADD     A,?V4
   \   00016A   FC           MOV     R4,A
   \   00016B   ED           MOV     A,R5
   \   00016C   35..         ADDC    A,?V5
   \   00016E   FD           MOV     R5,A
   \   00016F   8A82         MOV     DPL,R2
   \   000171   8B83         MOV     DPH,R3
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   EC           MOV     A,R4
   \   000176   F0           MOVX    @DPTR,A
   \   000177   A3           INC     DPTR
   \   000178   ED           MOV     A,R5
   \   000179   F0           MOVX    @DPTR,A
   2920                msg += 2;
   \   00017A   EE           MOV     A,R6
   \   00017B   2402         ADD     A,#0x2
   \   00017D   FE           MOV     R6,A
   \   00017E   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   000180   0F           INC     R7
   2921                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000181   EA           MOV     A,R2
   \   000182   2407         ADD     A,#0x7
   \   000184   FA           MOV     R2,A
   \   000185   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   000187   0B           INC     R3
   2922              }
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   000188   08           INC     R0
   \   000189   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_2 & 0xFFFF
   2923            }
   2924          
   2925            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   00018C   AA..         MOV     R2,?V0
   \   00018E   AB..         MOV     R3,?V1
   \   000190   7402         MOV     A,#0x2
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   \   000195   7F08         MOV     R7,#0x8
   \   000197   02....       LJMP    ?BANKED_LEAVE_XDATA
   2926          }
   2927          
   2928          /*********************************************************************
   2929           * @fn          ZDO_ParseMgmtBindRsp
   2930           *
   2931           * @brief       This function parses the incoming Management
   2932           *              Binding response.
   2933           *
   2934           * @param       inMsg - pointer to message to parse
   2935           *
   2936           * @return      a pointer to parsed response structure (NULL if not allocated).
   2937           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2938           *          by the calling function [osal_mem_free()].
   2939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2940          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2941          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   2942            ZDO_MgmtBindRsp_t *pRsp;
   2943            uint8 status;
   2944            uint8 bindingCount = 0;
   \   000014   75..00       MOV     ?V6,#0x0
   2945            uint8 startIndex = 0;
   \   000017   75..00       MOV     ?V5,#0x0
   2946            uint8 bindingListCount = 0;
   \   00001A   75..00       MOV     ?V4,#0x0
   2947            uint8 *msg;
   2948          
   2949            msg = inMsg->asdu;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C8           XCH     A,R0
   \   000027   2413         ADD     A,#0x13
   \   000029   F582         MOV     DPL,A
   \   00002B   C8           XCH     A,R0
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F583         MOV     DPH,A
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   FE           MOV     R6,A
   \   000037   E9           MOV     A,R1
   \   000038   FF           MOV     R7,A
   2950          
   2951            status = *msg++;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   AE82         MOV     R6,DPL
   \   000050   AF83         MOV     R7,DPH
   2952            if ( status == ZSuccess )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   7030         JNZ     ??ZDO_ParseMgmtBindRsp_0
   2953            {
   2954              bindingCount = *msg++;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V6,A
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   AE82         MOV     R6,DPL
   \   000069   AF83         MOV     R7,DPH
   2955              startIndex = *msg++;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V5,A
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   AE82         MOV     R6,DPL
   \   000079   AF83         MOV     R7,DPH
   2956              bindingListCount = *msg++;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F5..         MOV     ?V4,A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   AE82         MOV     R6,DPL
   \   000089   AF83         MOV     R7,DPH
   2957            }
   2958          
   2959            // Allocate a buffer big enough to handle the list
   2960            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2961                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   A8..         MOV     R0,?V4
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   E8           MOV     A,R0
   \   000090   75F015       MOV     B,#0x15
   \   000093   A4           MUL     AB
   \   000094   C8           XCH     A,R0
   \   000095   AAF0         MOV     R2,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   2A           ADD     A,R2
   \   00009C   FA           MOV     R2,A
   \   00009D   75F015       MOV     B,#0x15
   \   0000A0   E9           MOV     A,R1
   \   0000A1   A4           MUL     AB
   \   0000A2   2A           ADD     A,R2
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   2404         ADD     A,#0x4
   \   0000A7   FA           MOV     R2,A
   \   0000A8   E4           CLR     A
   \   0000A9   39           ADDC    A,R1
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000AE   8A..         MOV     ?V0,R2
   \   0000B0   8B..         MOV     ?V1,R3
   \   0000B2   85....       MOV     ?V2,?V0
   \   0000B5   85....       MOV     ?V3,?V1
   2962            if ( pRsp )
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   45..         ORL     A,?V3
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   2963            {
   2964              uint8 x;
   2965              apsBindingItem_t *pList = pRsp->list;
   \   0000C1   E5..         MOV     A,?V2
   \   0000C3   2404         ADD     A,#0x4
   \   0000C5   F5..         MOV     ?V0,A
   \   0000C7   E4           CLR     A
   \   0000C8   35..         ADDC    A,?V3
   \   0000CA   F5..         MOV     ?V1,A
   2966              pRsp->status = status;
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   85..82       MOV     DPL,?V2
   \   0000D8   85..83       MOV     DPH,?V3
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
   2967              pRsp->bindingCount = bindingCount;
   \   0000DE   E5..         MOV     A,?V6
   \   0000E0   C0E0         PUSH    A
   \   0000E2   85..82       MOV     DPL,?V2
   \   0000E5   85..83       MOV     DPH,?V3
   \   0000E8   A3           INC     DPTR
   \   0000E9   D0E0         POP     A
   \   0000EB   F0           MOVX    @DPTR,A
   2968              pRsp->startIndex = startIndex;
   \   0000EC   E5..         MOV     A,?V5
   \   0000EE   C0E0         PUSH    A
   \   0000F0   85..82       MOV     DPL,?V2
   \   0000F3   85..83       MOV     DPH,?V3
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
   2969              pRsp->bindingListCount = bindingListCount;
   \   0000FB   E5..         MOV     A,?V4
   \   0000FD   C0E0         PUSH    A
   \   0000FF   85..82       MOV     DPL,?V2
   \   000102   85..83       MOV     DPH,?V3
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
   2970          
   2971              for ( x = 0; x < bindingListCount; x++ )
   \   00010B   75..00       MOV     ?V7,#0x0
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00010E   E5..         MOV     A,?V7
   \   000110   C3           CLR     C
   \   000111   95..         SUBB    A,?V4
   \   000113   4003         JC      $+5
   \   000115   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   2972              {
   2973                osal_cpyExtAddr( pList->srcAddr, msg );
   \   000118                ; Setup parameters for call to function sAddrExtCpy
   \   000118   EE           MOV     A,R6
   \   000119   FC           MOV     R4,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FD           MOV     R5,A
   \   00011C   AA..         MOV     R2,?V0
   \   00011E   AB..         MOV     R3,?V1
   \   000120   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2974                msg += Z_EXTADDR_LEN;
   \   000123   EE           MOV     A,R6
   \   000124   2408         ADD     A,#0x8
   \   000126   FE           MOV     R6,A
   \   000127   5001         JNC     ??ZDO_ParseMgmtBindRsp_3
   \   000129   0F           INC     R7
   2975                pList->srcEP = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00012A   8E82         MOV     DPL,R6
   \   00012C   8F83         MOV     DPH,R7
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   C0E0         PUSH    A
   \   000131   85..82       MOV     DPL,?V0
   \   000134   85..83       MOV     DPH,?V1
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   D0E0         POP     A
   \   000141   F0           MOVX    @DPTR,A
   \   000142   8E82         MOV     DPL,R6
   \   000144   8F83         MOV     DPH,R7
   \   000146   A3           INC     DPTR
   \   000147   AE82         MOV     R6,DPL
   \   000149   AF83         MOV     R7,DPH
   2976          
   2977                // Get the Cluster ID
   2978          
   2979                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F8           MOV     R0,A
   \   000151   7900         MOV     R1,#0x0
   \   000153   8E82         MOV     DPL,R6
   \   000155   8F83         MOV     DPH,R7
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   FA           MOV     R2,A
   \   00015A   7B00         MOV     R3,#0x0
   \   00015C   E4           CLR     A
   \   00015D   CA           XCH     A,R2
   \   00015E   FB           MOV     R3,A
   \   00015F   E8           MOV     A,R0
   \   000160   2A           ADD     A,R2
   \   000161   F8           MOV     R0,A
   \   000162   E9           MOV     A,R1
   \   000163   3B           ADDC    A,R3
   \   000164   F9           MOV     R1,A
   \   000165   85..82       MOV     DPL,?V0
   \   000168   85..83       MOV     DPH,?V1
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   E8           MOV     A,R0
   \   000175   F0           MOVX    @DPTR,A
   \   000176   A3           INC     DPTR
   \   000177   E9           MOV     A,R1
   \   000178   F0           MOVX    @DPTR,A
   2980                msg += 2;
   \   000179   EE           MOV     A,R6
   \   00017A   2402         ADD     A,#0x2
   \   00017C   FE           MOV     R6,A
   \   00017D   5001         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   00017F   0F           INC     R7
   2981                pList->dstAddr.addrMode = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000180   8E82         MOV     DPL,R6
   \   000182   8F83         MOV     DPH,R7
   \   000184   E0           MOVX    A,@DPTR
   \   000185   C0E0         PUSH    A
   \   000187   E5..         MOV     A,?V0
   \   000189   2413         ADD     A,#0x13
   \   00018B   F582         MOV     DPL,A
   \   00018D   E4           CLR     A
   \   00018E   35..         ADDC    A,?V1
   \   000190   F583         MOV     DPH,A
   \   000192   D0E0         POP     A
   \   000194   F0           MOVX    @DPTR,A
   \   000195   8E82         MOV     DPL,R6
   \   000197   8F83         MOV     DPH,R7
   \   000199   A3           INC     DPTR
   \   00019A   AE82         MOV     R6,DPL
   \   00019C   AF83         MOV     R7,DPH
   2982                if ( pList->dstAddr.addrMode == Addr64Bit )
   \   00019E   E5..         MOV     A,?V0
   \   0001A0   2413         ADD     A,#0x13
   \   0001A2   F582         MOV     DPL,A
   \   0001A4   E4           CLR     A
   \   0001A5   35..         ADDC    A,?V1
   \   0001A7   F583         MOV     DPH,A
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   6403         XRL     A,#0x3
   \   0001AC   7037         JNZ     ??ZDO_ParseMgmtBindRsp_5
   2983                {
   2984                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   \   0001AE                ; Setup parameters for call to function sAddrExtCpy
   \   0001AE   EE           MOV     A,R6
   \   0001AF   FC           MOV     R4,A
   \   0001B0   EF           MOV     A,R7
   \   0001B1   FD           MOV     R5,A
   \   0001B2   E5..         MOV     A,?V0
   \   0001B4   240B         ADD     A,#0xb
   \   0001B6   FA           MOV     R2,A
   \   0001B7   E4           CLR     A
   \   0001B8   35..         ADDC    A,?V1
   \   0001BA   FB           MOV     R3,A
   \   0001BB   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2985                  msg += Z_EXTADDR_LEN;
   \   0001BE   EE           MOV     A,R6
   \   0001BF   2408         ADD     A,#0x8
   \   0001C1   FE           MOV     R6,A
   \   0001C2   5001         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   0001C4   0F           INC     R7
   2986                  pList->dstEP = *msg++;
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   0001C5   8E82         MOV     DPL,R6
   \   0001C7   8F83         MOV     DPH,R7
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   C0E0         PUSH    A
   \   0001CC   E5..         MOV     A,?V0
   \   0001CE   2414         ADD     A,#0x14
   \   0001D0   F582         MOV     DPL,A
   \   0001D2   E4           CLR     A
   \   0001D3   35..         ADDC    A,?V1
   \   0001D5   F583         MOV     DPH,A
   \   0001D7   D0E0         POP     A
   \   0001D9   F0           MOVX    @DPTR,A
   \   0001DA   8E82         MOV     DPL,R6
   \   0001DC   8F83         MOV     DPH,R7
   \   0001DE   A3           INC     DPTR
   \   0001DF   AE82         MOV     R6,DPL
   \   0001E1   AF83         MOV     R7,DPH
   \   0001E3   8031         SJMP    ??ZDO_ParseMgmtBindRsp_7
   2987                }
   2988                else
   2989                {
   2990                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   0001E5   8E82         MOV     DPL,R6
   \   0001E7   8F83         MOV     DPH,R7
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   F8           MOV     R0,A
   \   0001EB   7900         MOV     R1,#0x0
   \   0001ED   8E82         MOV     DPL,R6
   \   0001EF   8F83         MOV     DPH,R7
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FA           MOV     R2,A
   \   0001F4   7B00         MOV     R3,#0x0
   \   0001F6   E4           CLR     A
   \   0001F7   CA           XCH     A,R2
   \   0001F8   FB           MOV     R3,A
   \   0001F9   E8           MOV     A,R0
   \   0001FA   2A           ADD     A,R2
   \   0001FB   F8           MOV     R0,A
   \   0001FC   E9           MOV     A,R1
   \   0001FD   3B           ADDC    A,R3
   \   0001FE   F9           MOV     R1,A
   \   0001FF   E5..         MOV     A,?V0
   \   000201   240B         ADD     A,#0xb
   \   000203   F582         MOV     DPL,A
   \   000205   E4           CLR     A
   \   000206   35..         ADDC    A,?V1
   \   000208   F583         MOV     DPH,A
   \   00020A   E8           MOV     A,R0
   \   00020B   F0           MOVX    @DPTR,A
   \   00020C   A3           INC     DPTR
   \   00020D   E9           MOV     A,R1
   \   00020E   F0           MOVX    @DPTR,A
   2991                  msg += 2;
   \   00020F   EE           MOV     A,R6
   \   000210   2402         ADD     A,#0x2
   \   000212   FE           MOV     R6,A
   \   000213   5001         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   000215   0F           INC     R7
   2992                }
   2993          
   2994                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   000216   E5..         MOV     A,?V0
   \   000218   2415         ADD     A,#0x15
   \   00021A   F5..         MOV     ?V0,A
   \   00021C   5002         JNC     ??ZDO_ParseMgmtBindRsp_8
   \   00021E   05..         INC     ?V1
   2995              }
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   000220   05..         INC     ?V7
   \   000222   02....       LJMP    ??ZDO_ParseMgmtBindRsp_2 & 0xFFFF
   2996            }
   2997          
   2998            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   000225   AA..         MOV     R2,?V2
   \   000227   AB..         MOV     R3,?V3
   \   000229   7403         MOV     A,#0x3
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022E   7F08         MOV     R7,#0x8
   \   000230   02....       LJMP    ?BANKED_LEAVE_XDATA
   2999          }
   3000          
   3001          /*********************************************************************
   3002           * @fn          ZDO_ParseUserDescRsp
   3003           *
   3004           * @brief       This function parses the incoming User
   3005           *              Descriptor Response.
   3006           *
   3007           * @param       inMsg - incoming response message
   3008           *
   3009           * @return      a pointer to parsed response structure (NULL if not allocated).
   3010           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3011           *          by the calling function [osal_mem_free()].
   3012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3013          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3014          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   3015            ZDO_UserDescRsp_t *pRsp;
   3016            uint8 *msg;
   3017            uint8 descLen = 0;
   \   000015   7E00         MOV     R6,#0x0
   3018          
   3019            msg = inMsg->asdu;
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C8           XCH     A,R0
   \   000022   2413         ADD     A,#0x13
   \   000024   F582         MOV     DPL,A
   \   000026   C8           XCH     A,R0
   \   000027   3400         ADDC    A,#0x0
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   88..         MOV     ?V4,R0
   \   000032   89..         MOV     ?V5,R1
   3020          
   3021            if ( msg[0] == ZSuccess )
   \   000034   85..82       MOV     DPL,?V4
   \   000037   85..83       MOV     DPH,?V5
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   700B         JNZ     ??ZDO_ParseUserDescRsp_0
   3022            {
   3023              descLen = msg[3];
   \   00003D   85..82       MOV     DPL,?V4
   \   000040   85..83       MOV     DPH,?V5
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FE           MOV     R6,A
   3024            }
   3025          
   3026            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   000048                ; Setup parameters for call to function osal_mem_alloc
   \   000048   EE           MOV     A,R6
   \   000049   F8           MOV     R0,A
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   E8           MOV     A,R0
   \   00004D   2404         ADD     A,#0x4
   \   00004F   FA           MOV     R2,A
   \   000050   E4           CLR     A
   \   000051   39           ADDC    A,R1
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000056   8A..         MOV     ?V0,R2
   \   000058   8B..         MOV     ?V1,R3
   \   00005A   85....       MOV     ?V6,?V0
   \   00005D   85....       MOV     ?V7,?V1
   3027            if ( pRsp )
   \   000060   E5..         MOV     A,?V6
   \   000062   45..         ORL     A,?V7
   \   000064   6078         JZ      ??ZDO_ParseUserDescRsp_1
   3028            {
   3029              pRsp->status = msg[0];
   \   000066   85..82       MOV     DPL,?V4
   \   000069   85..83       MOV     DPH,?V5
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   C0E0         PUSH    A
   \   00006F   85..82       MOV     DPL,?V6
   \   000072   85..83       MOV     DPH,?V7
   \   000075   D0E0         POP     A
   \   000077   F0           MOVX    @DPTR,A
   3030              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \   000078   85..82       MOV     DPL,?V4
   \   00007B   85..83       MOV     DPH,?V5
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FA           MOV     R2,A
   \   000081   7B00         MOV     R3,#0x0
   \   000083   85..82       MOV     DPL,?V4
   \   000086   85..83       MOV     DPH,?V5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   E4           CLR     A
   \   000090   C8           XCH     A,R0
   \   000091   F9           MOV     R1,A
   \   000092   EA           MOV     A,R2
   \   000093   28           ADD     A,R0
   \   000094   F8           MOV     R0,A
   \   000095   EB           MOV     A,R3
   \   000096   39           ADDC    A,R1
   \   000097   F9           MOV     R1,A
   \   000098   85..82       MOV     DPL,?V6
   \   00009B   85..83       MOV     DPH,?V7
   \   00009E   A3           INC     DPTR
   \   00009F   E8           MOV     A,R0
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E9           MOV     A,R1
   \   0000A3   F0           MOVX    @DPTR,A
   3031              pRsp->length = descLen;
   \   0000A4   EE           MOV     A,R6
   \   0000A5   C0E0         PUSH    A
   \   0000A7   85..82       MOV     DPL,?V6
   \   0000AA   85..83       MOV     DPH,?V7
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   D0E0         POP     A
   \   0000B2   F0           MOVX    @DPTR,A
   3032              if ( descLen )
   \   0000B3   EE           MOV     A,R6
   \   0000B4   6028         JZ      ??ZDO_ParseUserDescRsp_1
   3033              {
   3034                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   0000B6                ; Setup parameters for call to function osal_memcpy
   \   0000B6   E5..         MOV     A,?V4
   \   0000B8   2404         ADD     A,#0x4
   \   0000BA   F5..         MOV     ?V0,A
   \   0000BC   E4           CLR     A
   \   0000BD   35..         ADDC    A,?V5
   \   0000BF   F5..         MOV     ?V1,A
   \   0000C1   75..00       MOV     ?V2,#0x0
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FC           MOV     R4,A
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   E5..         MOV     A,?V6
   \   0000CF   2404         ADD     A,#0x4
   \   0000D1   FA           MOV     R2,A
   \   0000D2   E4           CLR     A
   \   0000D3   35..         ADDC    A,?V7
   \   0000D5   FB           MOV     R3,A
   \   0000D6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   3035              }
   3036            }
   3037          
   3038            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   0000DE   AA..         MOV     R2,?V6
   \   0000E0   AB..         MOV     R3,?V7
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   7F08         MOV     R7,#0x8
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
   3039          }
   3040          
   3041          /*********************************************************************
   3042           * @fn          ZDO_ParseSimpleDescBuf
   3043           *
   3044           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3045           *
   3046           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3047           * @param       desc - SimpleDescriptionFormat_t *
   3048           *
   3049           *              This routine allocates storage for the cluster IDs because
   3050           *              they are 16-bit and need to be aligned to be properly processed.
   3051           *              This routine returns non-zero if an allocation fails.
   3052           *
   3053           *              NOTE: This means that the caller or user of the input structure
   3054           *                    is responsible for freeing the memory
   3055           *
   3056           * @return      0: success
   3057           *              1: failure due to malloc failure.
   3058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3059          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3061            uint8 num, i;
   3062          
   3063            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   C0E0         PUSH    A
   \   000014   85..82       MOV     DPL,?V0
   \   000017   85..83       MOV     DPH,?V1
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   3064            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   85..82       MOV     DPL,?V0
   \   000043   85..83       MOV     DPH,?V1
   \   000046   A3           INC     DPTR
   \   000047   E8           MOV     A,R0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E9           MOV     A,R1
   \   00004B   F0           MOVX    @DPTR,A
   3065            buf += 2;
   \   00004C   EE           MOV     A,R6
   \   00004D   2402         ADD     A,#0x2
   \   00004F   FE           MOV     R6,A
   \   000050   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000052   0F           INC     R7
   3066            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FA           MOV     R2,A
   \   000059   7B00         MOV     R3,#0x0
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   7900         MOV     R1,#0x0
   \   000064   E4           CLR     A
   \   000065   C8           XCH     A,R0
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   28           ADD     A,R0
   \   000069   F8           MOV     R0,A
   \   00006A   EB           MOV     A,R3
   \   00006B   39           ADDC    A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E8           MOV     A,R0
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   E9           MOV     A,R1
   \   00007A   F0           MOVX    @DPTR,A
   3067            buf += 2;
   \   00007B   EE           MOV     A,R6
   \   00007C   2402         ADD     A,#0x2
   \   00007E   FE           MOV     R6,A
   \   00007F   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000081   0F           INC     R7
   3068            desc->AppDevVer = *buf >> 4;
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C4           SWAP    A
   \   000088   540F         ANL     A,#0xf
   \   00008A   F8           MOV     R0,A
   \   00008B   85..82       MOV     DPL,?V0
   \   00008E   85..83       MOV     DPH,?V1
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   54F0         ANL     A,#0xf0
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   740F         MOV     A,#0xf
   \   00009C   58           ANL     A,R0
   \   00009D   F8           MOV     R0,A
   \   00009E   85..82       MOV     DPL,?V0
   \   0000A1   85..83       MOV     DPH,?V1
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   48           ORL     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   3069          
   3070            desc->Reserved = 0;
   \   0000AC   85..82       MOV     DPL,?V0
   \   0000AF   85..83       MOV     DPH,?V1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   540F         ANL     A,#0xf
   \   0000BA   F0           MOVX    @DPTR,A
   3071            buf++;
   \   0000BB   8E82         MOV     DPL,R6
   \   0000BD   8F83         MOV     DPH,R7
   \   0000BF   A3           INC     DPTR
   \   0000C0   AE82         MOV     R6,DPL
   \   0000C2   AF83         MOV     R7,DPH
   3072          
   3073            // move in input cluster list (if any). allocate aligned memory.
   3074            num = desc->AppNumInClusters = *buf++;
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F8           MOV     R0,A
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   A3           INC     DPTR
   \   0000CF   AE82         MOV     R6,DPL
   \   0000D1   AF83         MOV     R7,DPH
   \   0000D3   E8           MOV     A,R0
   \   0000D4   C0E0         PUSH    A
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   D0E0         POP     A
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   88..         MOV     ?V3,R0
   3075            if ( num )
   \   0000E7   E5..         MOV     A,?V3
   \   0000E9   7003         JNZ     $+5
   \   0000EB   02....       LJMP    ??ZDO_ParseSimpleDescBuf_2 & 0xFFFF
   3076            {
   3077              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000EE                ; Setup parameters for call to function osal_mem_alloc
   \   0000EE   AA..         MOV     R2,?V3
   \   0000F0   7B00         MOV     R3,#0x0
   \   0000F2   EA           MOV     A,R2
   \   0000F3   75F002       MOV     B,#0x2
   \   0000F6   A4           MUL     AB
   \   0000F7   CA           XCH     A,R2
   \   0000F8   A8F0         MOV     R0,B
   \   0000FA   75F000       MOV     B,#0x0
   \   0000FD   A4           MUL     AB
   \   0000FE   28           ADD     A,R0
   \   0000FF   F8           MOV     R0,A
   \   000100   75F002       MOV     B,#0x2
   \   000103   EB           MOV     A,R3
   \   000104   A4           MUL     AB
   \   000105   28           ADD     A,R0
   \   000106   FB           MOV     R3,A
   \   000107   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00010A   85..82       MOV     DPL,?V0
   \   00010D   85..83       MOV     DPH,?V1
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   EA           MOV     A,R2
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   EB           MOV     A,R3
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   85..82       MOV     DPL,?V0
   \   00011F   85..83       MOV     DPH,?V1
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F8           MOV     R0,A
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F9           MOV     R1,A
   \   00012E   E8           MOV     A,R0
   \   00012F   49           ORL     A,R1
   \   000130   7005         JNZ     ??ZDO_ParseSimpleDescBuf_3
   3078              {
   3079                // malloc failed. we're done.
   3080                return 1;
   \   000132   7901         MOV     R1,#0x1
   \   000134   02....       LJMP    ??ZDO_ParseSimpleDescBuf_4 & 0xFFFF
   3081              }
   3082              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   000137   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00013A   E5..         MOV     A,?V2
   \   00013C   C3           CLR     C
   \   00013D   95..         SUBB    A,?V3
   \   00013F   505A         JNC     ??ZDO_ParseSimpleDescBuf_2
   3083              {
   3084                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \   000141   8E82         MOV     DPL,R6
   \   000143   8F83         MOV     DPH,R7
   \   000145   E0           MOVX    A,@DPTR
   \   000146   FA           MOV     R2,A
   \   000147   7B00         MOV     R3,#0x0
   \   000149   8E82         MOV     DPL,R6
   \   00014B   8F83         MOV     DPH,R7
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   7900         MOV     R1,#0x0
   \   000152   E4           CLR     A
   \   000153   C8           XCH     A,R0
   \   000154   F9           MOV     R1,A
   \   000155   EA           MOV     A,R2
   \   000156   28           ADD     A,R0
   \   000157   FA           MOV     R2,A
   \   000158   EB           MOV     A,R3
   \   000159   39           ADDC    A,R1
   \   00015A   FB           MOV     R3,A
   \   00015B   A8..         MOV     R0,?V2
   \   00015D   7900         MOV     R1,#0x0
   \   00015F   E8           MOV     A,R0
   \   000160   75F002       MOV     B,#0x2
   \   000163   A4           MUL     AB
   \   000164   C8           XCH     A,R0
   \   000165   ACF0         MOV     R4,B
   \   000167   75F000       MOV     B,#0x0
   \   00016A   A4           MUL     AB
   \   00016B   2C           ADD     A,R4
   \   00016C   FC           MOV     R4,A
   \   00016D   75F002       MOV     B,#0x2
   \   000170   E9           MOV     A,R1
   \   000171   A4           MUL     AB
   \   000172   2C           ADD     A,R4
   \   000173   F9           MOV     R1,A
   \   000174   85..82       MOV     DPL,?V0
   \   000177   85..83       MOV     DPH,?V1
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   28           ADD     A,R0
   \   000183   FC           MOV     R4,A
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   39           ADDC    A,R1
   \   000187   8C82         MOV     DPL,R4
   \   000189   F583         MOV     DPH,A
   \   00018B   EA           MOV     A,R2
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   A3           INC     DPTR
   \   00018E   EB           MOV     A,R3
   \   00018F   F0           MOVX    @DPTR,A
   3085                buf += 2;
   \   000190   EE           MOV     A,R6
   \   000191   2402         ADD     A,#0x2
   \   000193   FE           MOV     R6,A
   \   000194   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   000196   0F           INC     R7
   3086              }
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000197   05..         INC     ?V2
   \   000199   809F         SJMP    ??ZDO_ParseSimpleDescBuf_5
   3087            }
   3088          
   3089            // move in output cluster list (if any). allocate aligned memory.
   3090            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00019B   8E82         MOV     DPL,R6
   \   00019D   8F83         MOV     DPH,R7
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F8           MOV     R0,A
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   A3           INC     DPTR
   \   0001A6   AE82         MOV     R6,DPL
   \   0001A8   AF83         MOV     R7,DPH
   \   0001AA   E8           MOV     A,R0
   \   0001AB   C0E0         PUSH    A
   \   0001AD   85..82       MOV     DPL,?V0
   \   0001B0   85..83       MOV     DPH,?V1
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   D0E0         POP     A
   \   0001BE   F0           MOVX    @DPTR,A
   \   0001BF   88..         MOV     ?V3,R0
   3091            if (num)
   \   0001C1   E5..         MOV     A,?V3
   \   0001C3   7003         JNZ     $+5
   \   0001C5   02....       LJMP    ??ZDO_ParseSimpleDescBuf_7 & 0xFFFF
   3092            {
   3093              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0001C8                ; Setup parameters for call to function osal_mem_alloc
   \   0001C8   AA..         MOV     R2,?V3
   \   0001CA   7B00         MOV     R3,#0x0
   \   0001CC   EA           MOV     A,R2
   \   0001CD   75F002       MOV     B,#0x2
   \   0001D0   A4           MUL     AB
   \   0001D1   CA           XCH     A,R2
   \   0001D2   A8F0         MOV     R0,B
   \   0001D4   75F000       MOV     B,#0x0
   \   0001D7   A4           MUL     AB
   \   0001D8   28           ADD     A,R0
   \   0001D9   F8           MOV     R0,A
   \   0001DA   75F002       MOV     B,#0x2
   \   0001DD   EB           MOV     A,R3
   \   0001DE   A4           MUL     AB
   \   0001DF   28           ADD     A,R0
   \   0001E0   FB           MOV     R3,A
   \   0001E1   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001E4   85..82       MOV     DPL,?V0
   \   0001E7   85..83       MOV     DPH,?V1
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   EA           MOV     A,R2
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   EB           MOV     A,R3
   \   0001F8   F0           MOVX    @DPTR,A
   \   0001F9   85..82       MOV     DPL,?V0
   \   0001FC   85..83       MOV     DPH,?V1
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   F8           MOV     R0,A
   \   00020B   A3           INC     DPTR
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F9           MOV     R1,A
   \   00020E   E8           MOV     A,R0
   \   00020F   49           ORL     A,R1
   \   000210   7043         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3094              {
   3095                // malloc failed. free input cluster list memory if there is any
   3096                if ( desc->pAppInClusterList != NULL )
   \   000212   85..82       MOV     DPL,?V0
   \   000215   85..83       MOV     DPH,?V1
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F8           MOV     R0,A
   \   000221   A3           INC     DPTR
   \   000222   E0           MOVX    A,@DPTR
   \   000223   F9           MOV     R1,A
   \   000224   E8           MOV     A,R0
   \   000225   49           ORL     A,R1
   \   000226   6029         JZ      ??ZDO_ParseSimpleDescBuf_9
   3097                {
   3098                  osal_mem_free(desc->pAppInClusterList);
   \   000228                ; Setup parameters for call to function osal_mem_free
   \   000228   85..82       MOV     DPL,?V0
   \   00022B   85..83       MOV     DPH,?V1
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   E0           MOVX    A,@DPTR
   \   000236   FA           MOV     R2,A
   \   000237   A3           INC     DPTR
   \   000238   E0           MOVX    A,@DPTR
   \   000239   FB           MOV     R3,A
   \   00023A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3099          
   3100                  desc->pAppInClusterList = NULL;
   \   00023D   85..82       MOV     DPL,?V0
   \   000240   85..83       MOV     DPH,?V1
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   7400         MOV     A,#0x0
   \   00024C   F0           MOVX    @DPTR,A
   \   00024D   A3           INC     DPTR
   \   00024E   7400         MOV     A,#0x0
   \   000250   F0           MOVX    @DPTR,A
   3101                }
   3102                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000251   7901         MOV     R1,#0x1
   \   000253   8069         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3103              }
   3104              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000255   75..00       MOV     ?V2,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000258   E5..         MOV     A,?V2
   \   00025A   C3           CLR     C
   \   00025B   95..         SUBB    A,?V3
   \   00025D   505D         JNC     ??ZDO_ParseSimpleDescBuf_7
   3105              {
   3106                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \   00025F   8E82         MOV     DPL,R6
   \   000261   8F83         MOV     DPH,R7
   \   000263   E0           MOVX    A,@DPTR
   \   000264   FA           MOV     R2,A
   \   000265   7B00         MOV     R3,#0x0
   \   000267   8E82         MOV     DPL,R6
   \   000269   8F83         MOV     DPH,R7
   \   00026B   A3           INC     DPTR
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   F8           MOV     R0,A
   \   00026E   7900         MOV     R1,#0x0
   \   000270   E4           CLR     A
   \   000271   C8           XCH     A,R0
   \   000272   F9           MOV     R1,A
   \   000273   EA           MOV     A,R2
   \   000274   28           ADD     A,R0
   \   000275   FA           MOV     R2,A
   \   000276   EB           MOV     A,R3
   \   000277   39           ADDC    A,R1
   \   000278   FB           MOV     R3,A
   \   000279   A8..         MOV     R0,?V2
   \   00027B   7900         MOV     R1,#0x0
   \   00027D   E8           MOV     A,R0
   \   00027E   75F002       MOV     B,#0x2
   \   000281   A4           MUL     AB
   \   000282   C8           XCH     A,R0
   \   000283   ACF0         MOV     R4,B
   \   000285   75F000       MOV     B,#0x0
   \   000288   A4           MUL     AB
   \   000289   2C           ADD     A,R4
   \   00028A   FC           MOV     R4,A
   \   00028B   75F002       MOV     B,#0x2
   \   00028E   E9           MOV     A,R1
   \   00028F   A4           MUL     AB
   \   000290   2C           ADD     A,R4
   \   000291   F9           MOV     R1,A
   \   000292   85..82       MOV     DPL,?V0
   \   000295   85..83       MOV     DPH,?V1
   \   000298   A3           INC     DPTR
   \   000299   A3           INC     DPTR
   \   00029A   A3           INC     DPTR
   \   00029B   A3           INC     DPTR
   \   00029C   A3           INC     DPTR
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   A3           INC     DPTR
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   28           ADD     A,R0
   \   0002A4   FC           MOV     R4,A
   \   0002A5   A3           INC     DPTR
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   39           ADDC    A,R1
   \   0002A8   8C82         MOV     DPL,R4
   \   0002AA   F583         MOV     DPH,A
   \   0002AC   EA           MOV     A,R2
   \   0002AD   F0           MOVX    @DPTR,A
   \   0002AE   A3           INC     DPTR
   \   0002AF   EB           MOV     A,R3
   \   0002B0   F0           MOVX    @DPTR,A
   3107                buf += 2;
   \   0002B1   EE           MOV     A,R6
   \   0002B2   2402         ADD     A,#0x2
   \   0002B4   FE           MOV     R6,A
   \   0002B5   5001         JNC     ??ZDO_ParseSimpleDescBuf_11
   \   0002B7   0F           INC     R7
   3108              }
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0002B8   05..         INC     ?V2
   \   0002BA   809C         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3109            }
   3110            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0002BC   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0002BE   7F04         MOV     R7,#0x4
   \   0002C0   02....       LJMP    ?BANKED_LEAVE_XDATA
   3111          }
   3112          
   3113          /*********************************************************************
   3114           * @fn          ZDO_ParseDeviceAnnce
   3115           *
   3116           * @brief       Parse a Device Announce message.
   3117           *
   3118           * @param       inMsg - Incoming message
   3119           * @param       pAnnce - place to put the parsed information
   3120           *
   3121           * @return      none
   3122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3123          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3124          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3125            uint8 *msg;
   3126          
   3127            // Parse incoming message
   3128            msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FE           MOV     R6,A
   \   00001F   E9           MOV     A,R1
   \   000020   FF           MOV     R7,A
   3129            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   7B00         MOV     R3,#0x0
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   7900         MOV     R1,#0x0
   \   000032   E4           CLR     A
   \   000033   C8           XCH     A,R0
   \   000034   F9           MOV     R1,A
   \   000035   EA           MOV     A,R2
   \   000036   28           ADD     A,R0
   \   000037   F8           MOV     R0,A
   \   000038   EB           MOV     A,R3
   \   000039   39           ADDC    A,R1
   \   00003A   F9           MOV     R1,A
   \   00003B   85..82       MOV     DPL,?V0
   \   00003E   85..83       MOV     DPH,?V1
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
   3130            msg += 2;
   \   000046   EE           MOV     A,R6
   \   000047   2402         ADD     A,#0x2
   \   000049   FE           MOV     R6,A
   \   00004A   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   00004C   0F           INC     R7
   3131            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   00004D                ; Setup parameters for call to function sAddrExtCpy
   \   00004D   EE           MOV     A,R6
   \   00004E   FC           MOV     R4,A
   \   00004F   EF           MOV     A,R7
   \   000050   FD           MOV     R5,A
   \   000051   E5..         MOV     A,?V0
   \   000053   2402         ADD     A,#0x2
   \   000055   FA           MOV     R2,A
   \   000056   E4           CLR     A
   \   000057   35..         ADDC    A,?V1
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3132            msg += Z_EXTADDR_LEN;
   \   00005D   EE           MOV     A,R6
   \   00005E   2408         ADD     A,#0x8
   \   000060   FE           MOV     R6,A
   \   000061   5001         JNC     ??ZDO_ParseDeviceAnnce_1
   \   000063   0F           INC     R7
   3133            pAnnce->capabilities = *msg;
   \                     ??ZDO_ParseDeviceAnnce_1:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   E0           MOVX    A,@DPTR
   \   000069   C0E0         PUSH    A
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
   3134          }
   \   00007E   7F04         MOV     R7,#0x4
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
   3135          
   3136          /*********************************************************************
   3137           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3138           *
   3139           * @brief       This function handles parsing of the incoming Management
   3140           *              Network Update notify.
   3141           *
   3142           * @param       inMsg - incoming message (request)
   3143           *
   3144           * @return      a pointer to parsed response structure (NULL if not allocated).
   3145           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3146           *          by the calling function [osal_mem_free()].
   3147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3148          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   3150            uint8 status;
   3151            uint32 scannedChannels = 0;
   \   000014   75..00       MOV     ?V4,#0x0
   \   000017   75..00       MOV     ?V5,#0x0
   \   00001A   75..00       MOV     ?V6,#0x0
   \   00001D   75..00       MOV     ?V7,#0x0
   3152            uint16 totalTransmissions = 0;
   \   000020   7406         MOV     A,#0x6
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7400         MOV     A,#0x0
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   7400         MOV     A,#0x0
   \   00002B   F0           MOVX    @DPTR,A
   3153            uint16 transmissionFailures = 0;
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   7400         MOV     A,#0x0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   7400         MOV     A,#0x0
   \   000037   F0           MOVX    @DPTR,A
   3154            uint8 listCount = 0;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
   3155            uint8 *msg = inMsg->asdu;
   \   000041   7408         MOV     A,#0x8
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C8           XCH     A,R0
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   C8           XCH     A,R0
   \   000050   3400         ADDC    A,#0x0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FE           MOV     R6,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FF           MOV     R7,A
   3156            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3157          
   3158            status = *msg++;
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   F0           MOVX    @DPTR,A
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   AE82         MOV     R6,DPL
   \   00006F   AF83         MOV     R7,DPH
   3159            if ( status == ZSuccess )
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E0           MOVX    A,@DPTR
   \   000077   6003         JZ      $+5
   \   000079   02....       LJMP    ??ZDO_ParseMgmtNwkUpdateNotify_0 & 0xFFFF
   3160            {
   3161              scannedChannels = osal_build_uint32( msg, 4 );
   \   00007C                ; Setup parameters for call to function osal_build_uint32
   \   00007C   7904         MOV     R1,#0x4
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000085   8A..         MOV     ?V0,R2
   \   000087   8B..         MOV     ?V1,R3
   \   000089   8C..         MOV     ?V2,R4
   \   00008B   8D..         MOV     ?V3,R5
   \   00008D   85....       MOV     ?V4,?V0
   \   000090   85....       MOV     ?V5,?V1
   \   000093   85....       MOV     ?V6,?V2
   \   000096   85....       MOV     ?V7,?V3
   3162              msg += 4;
   \   000099   EE           MOV     A,R6
   \   00009A   2404         ADD     A,#0x4
   \   00009C   FE           MOV     R6,A
   \   00009D   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   00009F   0F           INC     R7
   3163              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   7B00         MOV     R3,#0x0
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F8           MOV     R0,A
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   E4           CLR     A
   \   0000B2   C8           XCH     A,R0
   \   0000B3   F9           MOV     R1,A
   \   0000B4   EA           MOV     A,R2
   \   0000B5   28           ADD     A,R0
   \   0000B6   F8           MOV     R0,A
   \   0000B7   EB           MOV     A,R3
   \   0000B8   39           ADDC    A,R1
   \   0000B9   F9           MOV     R1,A
   \   0000BA   7406         MOV     A,#0x6
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   E8           MOV     A,R0
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E9           MOV     A,R1
   \   0000C3   F0           MOVX    @DPTR,A
   3164              msg += 2;
   \   0000C4   EE           MOV     A,R6
   \   0000C5   2402         ADD     A,#0x2
   \   0000C7   FE           MOV     R6,A
   \   0000C8   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   0000CA   0F           INC     R7
   3165              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   FA           MOV     R2,A
   \   0000D1   7B00         MOV     R3,#0x0
   \   0000D3   8E82         MOV     DPL,R6
   \   0000D5   8F83         MOV     DPH,R7
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F8           MOV     R0,A
   \   0000DA   7900         MOV     R1,#0x0
   \   0000DC   E4           CLR     A
   \   0000DD   C8           XCH     A,R0
   \   0000DE   F9           MOV     R1,A
   \   0000DF   EA           MOV     A,R2
   \   0000E0   28           ADD     A,R0
   \   0000E1   F8           MOV     R0,A
   \   0000E2   EB           MOV     A,R3
   \   0000E3   39           ADDC    A,R1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   7404         MOV     A,#0x4
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E8           MOV     A,R0
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E9           MOV     A,R1
   \   0000EE   F0           MOVX    @DPTR,A
   3166              msg += 2;
   \   0000EF   EE           MOV     A,R6
   \   0000F0   2402         ADD     A,#0x2
   \   0000F2   FE           MOV     R6,A
   \   0000F3   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_3
   \   0000F5   0F           INC     R7
   3167              listCount = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   C0E0         PUSH    A
   \   0000FD   85..82       MOV     DPL,?XSP + 0
   \   000100   85..83       MOV     DPH,?XSP + 1
   \   000103   D0E0         POP     A
   \   000105   F0           MOVX    @DPTR,A
   \   000106   8E82         MOV     DPL,R6
   \   000108   8F83         MOV     DPH,R7
   \   00010A   A3           INC     DPTR
   \   00010B   AE82         MOV     R6,DPL
   \   00010D   AF83         MOV     R7,DPH
   3168            }
   3169          
   3170            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00010F                ; Setup parameters for call to function osal_mem_alloc
   \   00010F   85..82       MOV     DPL,?XSP + 0
   \   000112   85..83       MOV     DPH,?XSP + 1
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F8           MOV     R0,A
   \   000117   7900         MOV     R1,#0x0
   \   000119   E8           MOV     A,R0
   \   00011A   240A         ADD     A,#0xa
   \   00011C   FA           MOV     R2,A
   \   00011D   E4           CLR     A
   \   00011E   39           ADDC    A,R1
   \   00011F   FB           MOV     R3,A
   \   000120   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000123   7401         MOV     A,#0x1
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   EA           MOV     A,R2
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   EB           MOV     A,R3
   \   00012C   F0           MOVX    @DPTR,A
   3171          
   3172            if ( pRsp )
   \   00012D   7401         MOV     A,#0x1
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   E0           MOVX    A,@DPTR
   \   000133   F8           MOV     R0,A
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F9           MOV     R1,A
   \   000137   E8           MOV     A,R0
   \   000138   49           ORL     A,R1
   \   000139   7003         JNZ     $+5
   \   00013B   02....       LJMP    ??ZDO_ParseMgmtNwkUpdateNotify_4 & 0xFFFF
   3173            {
   3174              pRsp->status = status;
   \   00013E   7403         MOV     A,#0x3
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   E0           MOVX    A,@DPTR
   \   000144   C0E0         PUSH    A
   \   000146   7401         MOV     A,#0x1
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F8           MOV     R0,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F583         MOV     DPH,A
   \   000151   8882         MOV     DPL,R0
   \   000153   D0E0         POP     A
   \   000155   F0           MOVX    @DPTR,A
   3175              pRsp->scannedChannels = scannedChannels;
   \   000156   7401         MOV     A,#0x1
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F8           MOV     R0,A
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F583         MOV     DPH,A
   \   000161   8882         MOV     DPL,R0
   \   000163   A3           INC     DPTR
   \   000164   78..         MOV     R0,#?V4
   \   000166   12....       LCALL   ?L_MOV_TO_X
   3176              pRsp->totalTransmissions = totalTransmissions;
   \   000169   7406         MOV     A,#0x6
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F8           MOV     R0,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F9           MOV     R1,A
   \   000173   7401         MOV     A,#0x1
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   E0           MOVX    A,@DPTR
   \   000179   FA           MOV     R2,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F583         MOV     DPH,A
   \   00017E   8A82         MOV     DPL,R2
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   E8           MOV     A,R0
   \   000186   F0           MOVX    @DPTR,A
   \   000187   A3           INC     DPTR
   \   000188   E9           MOV     A,R1
   \   000189   F0           MOVX    @DPTR,A
   3177              pRsp->transmissionFailures = transmissionFailures;
   \   00018A   7404         MOV     A,#0x4
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F8           MOV     R0,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F9           MOV     R1,A
   \   000194   7401         MOV     A,#0x1
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   FA           MOV     R2,A
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   CA           XCH     A,R2
   \   00019E   2407         ADD     A,#0x7
   \   0001A0   F582         MOV     DPL,A
   \   0001A2   CA           XCH     A,R2
   \   0001A3   3400         ADDC    A,#0x0
   \   0001A5   F583         MOV     DPH,A
   \   0001A7   E8           MOV     A,R0
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E9           MOV     A,R1
   \   0001AB   F0           MOVX    @DPTR,A
   3178              pRsp->listCount = listCount;
   \   0001AC   85..82       MOV     DPL,?XSP + 0
   \   0001AF   85..83       MOV     DPH,?XSP + 1
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   C0E0         PUSH    A
   \   0001B5   7401         MOV     A,#0x1
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   F8           MOV     R0,A
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   C8           XCH     A,R0
   \   0001BF   2409         ADD     A,#0x9
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   C8           XCH     A,R0
   \   0001C4   3400         ADDC    A,#0x0
   \   0001C6   F583         MOV     DPH,A
   \   0001C8   D0E0         POP     A
   \   0001CA   F0           MOVX    @DPTR,A
   3179          
   3180              // Allocate a buffer big enough to handle the list.
   3181              if ( listCount > 0 )
   \   0001CB   85..82       MOV     DPL,?XSP + 0
   \   0001CE   85..83       MOV     DPH,?XSP + 1
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   602B         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
   3182              {
   3183                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0001D4                ; Setup parameters for call to function osal_memcpy
   \   0001D4   8E..         MOV     ?V0,R6
   \   0001D6   8F..         MOV     ?V1,R7
   \   0001D8   75..00       MOV     ?V2,#0x0
   \   0001DB   78..         MOV     R0,#?V0
   \   0001DD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001E0   7403         MOV     A,#0x3
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   FC           MOV     R4,A
   \   0001E7   7D00         MOV     R5,#0x0
   \   0001E9   7404         MOV     A,#0x4
   \   0001EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   240A         ADD     A,#0xa
   \   0001F1   FA           MOV     R2,A
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   3400         ADDC    A,#0x0
   \   0001F6   FB           MOV     R3,A
   \   0001F7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001FA   7403         MOV     A,#0x3
   \   0001FC   12....       LCALL   ?DEALLOC_XSTACK8
   3184              }
   3185            }
   3186          
   3187            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_4:
   \   0001FF   7401         MOV     A,#0x1
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   E0           MOVX    A,@DPTR
   \   000205   FA           MOV     R2,A
   \   000206   A3           INC     DPTR
   \   000207   E0           MOVX    A,@DPTR
   \   000208   FB           MOV     R3,A
   \   000209   740A         MOV     A,#0xa
   \   00020B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020E   7F08         MOV     R7,#0x8
   \   000210   02....       LJMP    ?BANKED_LEAVE_XDATA
   3188          }
   3189          
   3190          /*********************************************************************
   3191           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3192           *
   3193           * @brief       This function handles parsing the incoming Management
   3194           *              Network Update request and starts the request (if needed).
   3195           *
   3196           * @param       inMsg - incoming message (request)
   3197           * @param       pReq - pointer to place to parse message to
   3198           *
   3199           * @return      none
   3200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3201          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3202          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3203            uint8 *msg = inMsg->asdu;
   \   00000D   E5..         MOV     A,?V2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FE           MOV     R6,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FF           MOV     R7,A
   3204          
   3205            pReq->channelMask = osal_build_uint32( msg, 4 );
   \   00001D                ; Setup parameters for call to function osal_build_uint32
   \   00001D   7904         MOV     R1,#0x4
   \   00001F   EE           MOV     A,R6
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000026   EA           MOV     A,R2
   \   000027   F8           MOV     R0,A
   \   000028   EB           MOV     A,R3
   \   000029   F9           MOV     R1,A
   \   00002A   EC           MOV     A,R4
   \   00002B   FA           MOV     R2,A
   \   00002C   ED           MOV     A,R5
   \   00002D   FB           MOV     R3,A
   \   00002E   85..82       MOV     DPL,?V0
   \   000031   85..83       MOV     DPH,?V1
   \   000034   12....       LCALL   ?XSTORE_R0123
   3206            msg += 4;
   \   000037   EE           MOV     A,R6
   \   000038   2404         ADD     A,#0x4
   \   00003A   FE           MOV     R6,A
   \   00003B   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   \   00003D   0F           INC     R7
   3207            pReq->scanDuration = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   AE82         MOV     R6,DPL
   \   000059   AF83         MOV     R7,DPH
   3208          
   3209            if ( pReq->scanDuration <= 0x05 )
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   C3           CLR     C
   \   000067   9406         SUBB    A,#0x6
   \   000069   5017         JNC     ??ZDO_ParseMgmtNwkUpdateReq_1
   3210            {
   3211              // Request is to scan over channelMask
   3212              pReq->scanCount = *msg;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C0E0         PUSH    A
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8078         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_2
   3213            }
   3214            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000082   85..82       MOV     DPL,?V0
   \   000085   85..83       MOV     DPH,?V1
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   64FE         XRL     A,#0xfe
   \   00008F   600F         JZ      ??ZDO_ParseMgmtNwkUpdateReq_3
   \   000091   85..82       MOV     DPL,?V0
   \   000094   85..83       MOV     DPH,?V1
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   64FF         XRL     A,#0xff
   \   00009E   705A         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
   3215            {
   3216              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3217              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   85..82       MOV     DPL,?V0
   \   0000AA   85..83       MOV     DPH,?V1
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   AE82         MOV     R6,DPL
   \   0000BD   AF83         MOV     R7,DPH
   3218          
   3219              if ( pReq->scanDuration == 0xFF )
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   85..83       MOV     DPH,?V1
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   64FF         XRL     A,#0xff
   \   0000CC   702C         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
   3220              {
   3221                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   E4           CLR     A
   \   0000E0   C8           XCH     A,R0
   \   0000E1   F9           MOV     R1,A
   \   0000E2   EA           MOV     A,R2
   \   0000E3   28           ADD     A,R0
   \   0000E4   F8           MOV     R0,A
   \   0000E5   EB           MOV     A,R3
   \   0000E6   39           ADDC    A,R1
   \   0000E7   F9           MOV     R1,A
   \   0000E8   85..82       MOV     DPL,?V0
   \   0000EB   85..83       MOV     DPH,?V1
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   E8           MOV     A,R0
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E9           MOV     A,R1
   \   0000F9   F0           MOVX    @DPTR,A
   3222              }
   3223            }
   3224          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   0000FA   7F04         MOV     R7,#0x4
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDODeviceSetup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDODeviceSetup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendEDBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendEDBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq
   3225          
   3226          /*********************************************************************
   3227          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     71   ZDMatchSendState
        0     39   -> APS_SetEndDeviceBindTimeout
        0     39   -> ZDO_RemoveMatchMemory
        0     47   -> ZDP_BindUnbindReq
        0     44   -> ZDP_SendData
        0     39   -> sAddrExtCpy
      2      0   ZDODeviceSetup
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
      0     49   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     44   ZDO_CompareClusterLists
      0     45   ZDO_ConvertOTAClusters
      0     41   ZDO_CopyMatchInfo
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     17   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      0      9   ZDO_EndDeviceTimeoutCB
        0      9   -> ZDO_RemoveEndDeviceBind
        0      9   -> ZDO_SendEDBindRsp
      2      0   ZDO_Init
        2      0   -> ZDODeviceSetup
        2      0   -> sAddrExtCpy
      1     29   ZDO_MatchEndDeviceBind
        0     24   -> APS_SetEndDeviceBindTimeout
        0     24   -> ZDMatchSendState
        0     28   -> ZDO_CompareClusterLists
        0     24   -> ZDO_CopyMatchInfo
        0     24   -> ZDO_RemoveMatchMemory
        0     29   -> ZDP_SendData
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
        0     24   -> osal_memset
      1     16   ZDO_ParseAddrRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     12   ZDO_ParseBindUnbindReq
        0     12   -> sAddrExtCpy
      1     54   ZDO_ParseDeviceAnnce
        0     12   -> sAddrExtCpy
      1     20   ZDO_ParseEPListRsp
        0     17   -> osal_mem_alloc
        0     20   -> osal_memcpy
      1     14   ZDO_ParseEndDeviceBindReq
        0     14   -> ZDO_ConvertOTAClusters
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     19   ZDO_ParseMgmNwkDiscRsp
        0     19   -> osal_mem_alloc
        0     19   -> sAddrExtCpy
      1     19   ZDO_ParseMgmtBindRsp
        0     19   -> osal_mem_alloc
        0     19   -> sAddrExtCpy
      1     19   ZDO_ParseMgmtLqiRsp
        0     19   -> osal_mem_alloc
        0     19   -> sAddrExtCpy
      1     29   ZDO_ParseMgmtNwkUpdateNotify
        0     26   -> osal_build_uint32
        0     26   -> osal_mem_alloc
        0     29   -> osal_memcpy
      1     12   ZDO_ParseMgmtNwkUpdateReq
        0     12   -> osal_build_uint32
      1     18   ZDO_ParseMgmtRtgRsp
        0     18   -> osal_mem_alloc
      1     10   ZDO_ParseNodeDescRsp
      1     10   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     24   ZDO_ParseSimpleDescBuf
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
      1     12   ZDO_ParseSimpleDescRsp
        0     12   -> ZDO_ParseSimpleDescBuf
      1     21   ZDO_ParseUserDescRsp
        0     18   -> osal_mem_alloc
        0     21   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     29   ZDO_ProcessBindUnbindReq
        0     25   -> APSME_BindRequest
        0     24   -> APSME_LookupNwkAddr
        0     25   -> APSME_UnBindRequest
        0     24   -> NLME_GetExtAddr
        0     24   -> ZDApp_NVUpdate
        0     24   -> ZDP_NwkAddrReq
        0     29   -> ZDP_SendData
        0     24   -> sAddrExtCmp
        0     24   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> nwkNeighborUpdateNwkAddr
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      1     41   ZDO_ProcessMatchDescReq
        0     34   -> NLME_IsAddressBroadcast
        0     36   -> ZDO_AnyClusterMatches
        0     34   -> ZDO_ConvertOTAClusters
        0     41   -> ZDP_EPRsp
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     34   -> osal_msg_allocate
        0     34   -> osal_msg_send
      0     27   ZDO_ProcessMgmtBindReq
        0     22   -> APSME_GetRequest
        0     27   -> ZDP_MgmtBindRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
      1     20   ZDO_ProcessMgmtDirectJoinReq
        0     15   -> NLME_DirectJoinRequest
        0     20   -> ZDP_SendData
      1     25   ZDO_ProcessMgmtLeaveReq
        0     20   -> AddrMgrExtAddrValid
        0     20   -> NLME_GetExtAddr
        0     20   -> NLME_LeaveReq
        0     25   -> ZDP_SendData
        0     20   -> sAddrExtCmp
      1     63   ZDO_ProcessMgmtLqiReq
        0     58   -> AddrMgrEntryLookupNwk
        0     58   -> AssocCount
        0     58   -> AssocFindDevice
        0     58   -> NLME_GetRequest
        0     63   -> ZDP_MgmtLqiRsp
        0     58   -> osal_mem_alloc
        0     58   -> osal_mem_free
        0     58   -> osal_memset
        0     58   -> sAddrExtCpy
      1     18   ZDO_ProcessMgmtNwkDiscReq
        0     18   -> NLME_NwkDiscReq2
        0     18   -> NLME_NwkDiscTerm
        0     18   -> osal_build_uint32
      1     18   ZDO_ProcessMgmtPermitJoinReq
        0     13   -> NLME_PermitJoiningRequest
        0     18   -> ZDP_SendData
      0     24   ZDO_ProcessMgmtRtgReq
        0     19   -> NLME_GetRequest
        0     24   -> ZDP_MgmtRtgRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      0     18   ZDO_ProcessNodeDescReq
        0     18   -> ZDP_GenericRsp
        0     16   -> ZDP_NodeDescMsg
      0     18   ZDO_ProcessPowerDescReq
        0     18   -> ZDP_GenericRsp
        0     16   -> ZDP_PowerDescMsg
      0     16   ZDO_ProcessServerDiscReq
        0     16   -> ZDP_ServerDiscRsp
      0     16   ZDO_ProcessSimpleDescReq
        0     16   -> ZDP_SimpleDescMsg
        0     16   -> afFindSimpleDesc
        0     16   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      2      9   ZDO_RemoveEndDeviceBind
        2      0   -> osal_mem_free
      2     39   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      1     28   ZDO_SendEDBindRsp
        0     19   -> ZDP_SendData
      0     22   ZDO_StartDevice
        0     22   -> NLME_NetworkDiscoveryRequest
        0     22   -> NLME_OrphanJoinRequest
        0     22   -> nwk_ScanJoiningOrphan
        0     22   -> osal_start_timerEx
      0     23   ZDO_UpdateAddrManager
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
      0     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> zdoSendStateChangeMsg
      1     25   zdoSendStateChangeMsg
        0     13   -> osal_msg_allocate
        0     13   -> osal_msg_find
        0     13   -> osal_msg_send
        0     13   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
    1204  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      29  ZDODeviceSetup
       6  ZDODeviceSetup::?relay
     150  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     513  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     214  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
     105  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     513  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      21  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
      93  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      35  ZDO_Init
       6  ZDO_Init::?relay
    1209  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     401  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
     276  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
     131  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     235  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     655  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
     551  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     563  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     427  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     531  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     255  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     410  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     592  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     353  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
     101  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     707  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
     143  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     236  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     211  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     542  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     438  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
    1962  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     398  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
     147  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     230  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
    1121  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     192  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
     152  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     404  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
     180  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
     180  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
     145  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     240  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     246  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     381  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     146  ZDO_RemoveEndDeviceBind
       6  ZDO_RemoveEndDeviceBind::?relay
     353  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     103  ZDO_SendEDBindRsp
       6  ZDO_SendEDBindRsp::?relay
     243  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      71  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     106  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  apsChannelMask
       2  matchED
       1  scanCnt
     131  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay

 
 18 978 bytes in segment BANKED_CODE
    318 bytes in segment BANK_RELAYS
     61 bytes in segment XDATA_Z
 
 19 296 bytes of CODE  memory
     61 bytes of XDATA memory

Errors: none
Warnings: none
