###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:26
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\PMS7003.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\PMS7003.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\PMS7003.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\PMS7003.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\PMS7003.c
      1          //=====================================================================
      2          //文件名称：PMS7003.c
      3          //功能概要：空气颗粒物传感器（PM2.5）PMS7003构件源文件
      4          //=====================================================================
      5          
      6          #include "PMS7003.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      7          
      8          //SET------3.3V
      9          //RST------3.3V
     10          
     11          //=====================================================================
     12          //传感器命令协议：
     13          //特征字节  特征字节  指令字节  状态字节1 状态字节2 校验字节1 校验字节2
     14          // 0x42      0x4d      CMD      DATAH     DATAL    LRCH      LRCL
     15          //指令及特征字节的定义：
     16          //CMD  DATAH  DATAL      	  说明
     17          //0xe2   x      x        	 被动读数
     18          //0xe1   x    00H-被动式         状态切换
     19          //            01H-主动式
     20          //0xe4   x    00H-待机模式       待机控制
     21          //       x    01H-正常模式
     22          //校验字生成：
     23          //从特征字开始所有字节累加和
     24          //=====================================================================
     25          
     26          //=========================================================================
     27          //函数名称：PMS7003_init
     28          //函数参数：无
     29          //函数返回：无
     30          //功能概要：初始化SET、RST引脚
     31          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     32          void PMS7003_Init(void)
   \                     PMS7003_Init:
     33          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     34              P0SEL &= ~0x30;                 //设置P0.4 P0.5为普通IO口
   \   000004   53F3CF       ANL     0xf3,#0xcf
     35              P0DIR |= 0x30;                 //P0.4 P0.5定义为输出口
   \   000007   43FD30       ORL     0xfd,#0x30
     36              //PMS7003_rest();
     37              //PMS7003_SET = 1;
     38              PMS7003_control(PMS7003_CMD_READSTATE_PASSTIVE);
   \   00000A                ; Setup parameters for call to function PMS7003_control
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7BE1         MOV     R3,#-0x1f
   \   00000E   12....       LCALL   `??PMS7003_control::?relay`; Banked call to: PMS7003_control
   \   000011   E9           MOV     A,R1
     39          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE P0SEL
   \   000019                REQUIRE P0DIR
     40          
     41          //=========================================================================
     42          //函数名称：PMS7003_control
     43          //函数参数：cmd:控制命令
     44          //函数返回：命令发送成功：0；命令发送失败：0x11
     45          //功能概要：通过命令控制传感器工作状态
     46          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          unsigned char PMS7003_control(unsigned int cmd)
   \                     PMS7003_control:
     48          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
     49          	unsigned char flag;
     50          	//初始化命令帧
     51          	unsigned char command[PMS7003_LENTH_CMD] = {0};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0}>`
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7407         MOV     A,#0x7
   \   000017   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     52          
     53          	PMS7003_buildframe(cmd,command);
   \   00001A                ; Setup parameters for call to function PMS7003_buildframe
   \   00001A   AC..         MOV     R4,?XSP + 0
   \   00001C   AD..         MOV     R5,?XSP + 1
   \   00001E   AA..         MOV     R2,?V0
   \   000020   AB..         MOV     R3,?V1
   \   000022   12....       LCALL   `??PMS7003_buildframe::?relay`; Banked call to: PMS7003_buildframe
     54          	flag = HalUARTWrite(0, command, PMS7003_LENTH_CMD);
   \   000025                ; Setup parameters for call to function HalUARTWrite
   \   000025   7C07         MOV     R4,#0x7
   \   000027   7D00         MOV     R5,#0x0
   \   000029   AA..         MOV     R2,?XSP + 0
   \   00002B   AB..         MOV     R3,?XSP + 1
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000032   EA           MOV     A,R2
   \   000033   FE           MOV     R6,A
     55          
     56          	//如果发送命令错误，返回错误码
     57          	if(!flag)
   \   000034   EE           MOV     A,R6
   \   000035   7004         JNZ     ??PMS7003_control_0
     58          	{
     59          		return PMS7003_ERR_CMDFAIL;
   \   000037   7911         MOV     R1,#0x11
   \   000039   8002         SJMP    ??PMS7003_control_1
     60          	}
     61          
     62          	return 0;
   \                     ??PMS7003_control_0:
   \   00003B   7900         MOV     R1,#0x0
   \                     ??PMS7003_control_1:
   \   00003D   7407         MOV     A,#0x7
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   7F02         MOV     R7,#0x2
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
     63          }
     64          
     65          //=========================================================================
     66          //函数名称：PMS7003_buildframe
     67          //函数参数：cmd:控制命令
     68          //		 *frame：命令帧数组
     69          //函数返回：无
     70          //功能概要：将命令组成命令帧
     71          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          void PMS7003_buildframe(unsigned int cmd_state,unsigned char *frame)
   \                     PMS7003_buildframe:
     73          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
     74          	unsigned char cmd;
     75          	unsigned char statechar;
     76          	unsigned char lrcl;
     77          	unsigned char lrch;
     78          	unsigned int lrc = 0;
   \   000005   7E00         MOV     R6,#0x0
   \   000007   7F00         MOV     R7,#0x0
     79          
     80          	//计算命令和状态字节
     81          	cmd = cmd_state >> 8;
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   EB           MOV     A,R3
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   C9           XCH     A,R1
   \   00000F   F8           MOV     R0,A
   \   000010   E8           MOV     A,R0
   \   000011   F5..         MOV     ?V0,A
     82          	statechar = cmd_state;
   \   000013   EA           MOV     A,R2
   \   000014   F5..         MOV     ?V1,A
     83          
     84          	//组帧
     85          	frame[0] = 0x42;
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   7442         MOV     A,#0x42
   \   00001C   F0           MOVX    @DPTR,A
     86          	frame[1] = 0x4d;
   \   00001D   8C82         MOV     DPL,R4
   \   00001F   8D83         MOV     DPH,R5
   \   000021   A3           INC     DPTR
   \   000022   744D         MOV     A,#0x4d
   \   000024   F0           MOVX    @DPTR,A
     87          	frame[2] = cmd;
   \   000025   E5..         MOV     A,?V0
   \   000027   C0E0         PUSH    A
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   D0E0         POP     A
   \   000031   F0           MOVX    @DPTR,A
     88          	frame[3] = 0x00;
   \   000032   8C82         MOV     DPL,R4
   \   000034   8D83         MOV     DPH,R5
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   7400         MOV     A,#0x0
   \   00003B   F0           MOVX    @DPTR,A
     89          	frame[4] = statechar;
   \   00003C   E5..         MOV     A,?V1
   \   00003E   C0E0         PUSH    A
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   D0E0         POP     A
   \   00004A   F0           MOVX    @DPTR,A
     90          
     91          	//计算校验字 节
     92          	unsigned char i;
     93          	for(i = 0 ; i < (PMS7003_LENTH_CMD-2) ; i++)
   \   00004B   75..00       MOV     ?V4,#0x0
   \                     ??PMS7003_buildframe_0:
   \   00004E   E5..         MOV     A,?V4
   \   000050   C3           CLR     C
   \   000051   9405         SUBB    A,#0x5
   \   000053   501A         JNC     ??PMS7003_buildframe_1
     94          	{
     95          		lrc += frame[i];
   \   000055   A8..         MOV     R0,?V4
   \   000057   7900         MOV     R1,#0x0
   \   000059   EC           MOV     A,R4
   \   00005A   28           ADD     A,R0
   \   00005B   F582         MOV     DPL,A
   \   00005D   ED           MOV     A,R5
   \   00005E   39           ADDC    A,R1
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   7900         MOV     R1,#0x0
   \   000065   EE           MOV     A,R6
   \   000066   28           ADD     A,R0
   \   000067   FE           MOV     R6,A
   \   000068   EF           MOV     A,R7
   \   000069   39           ADDC    A,R1
   \   00006A   FF           MOV     R7,A
     96          	}
   \   00006B   05..         INC     ?V4
   \   00006D   80DF         SJMP    ??PMS7003_buildframe_0
     97          	lrch = lrc >> 8;
   \                     ??PMS7003_buildframe_1:
   \   00006F   EE           MOV     A,R6
   \   000070   F8           MOV     R0,A
   \   000071   EF           MOV     A,R7
   \   000072   F9           MOV     R1,A
   \   000073   E4           CLR     A
   \   000074   C9           XCH     A,R1
   \   000075   F8           MOV     R0,A
   \   000076   E8           MOV     A,R0
   \   000077   F5..         MOV     ?V3,A
     98          	lrcl = lrc;
   \   000079   EE           MOV     A,R6
   \   00007A   F5..         MOV     ?V2,A
     99          	//组帧
    100          	frame[5] = lrcl;
   \   00007C   E5..         MOV     A,?V2
   \   00007E   C0E0         PUSH    A
   \   000080   8C82         MOV     DPL,R4
   \   000082   8D83         MOV     DPH,R5
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   D0E0         POP     A
   \   00008B   F0           MOVX    @DPTR,A
    101          	frame[6] = lrch;
   \   00008C   E5..         MOV     A,?V3
   \   00008E   C0E0         PUSH    A
   \   000090   8C82         MOV     DPL,R4
   \   000092   8D83         MOV     DPH,R5
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
    102          }
   \   00009D   7F05         MOV     R7,#0x5
   \   00009F   02....       LJMP    ?BANKED_LEAVE_XDATA
    103          
    104          //=========================================================================
    105          //函数名称：PMS7003_rest
    106          //函数参数：无
    107          //函数返回：无
    108          //功能概要：通过RST引脚复位传感器
    109          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          void PMS7003_rest(void)
   \                     PMS7003_rest:
    111          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    112          	PMS7003_RST = 0;
   \   000000   C284         CLR     0x80.4
    113                  for(int i=0;i<500;i++);
   \   000002   7800         MOV     R0,#0x0
   \   000004   7900         MOV     R1,#0x0
   \                     ??PMS7003_rest_0:
   \   000006   C3           CLR     C
   \   000007   E8           MOV     A,R0
   \   000008   94F4         SUBB    A,#-0xc
   \   00000A   E9           MOV     A,R1
   \   00000B   9401         SUBB    A,#0x1
   \   00000D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00000F   65D0         XRL     A,PSW
   \   000011   33           RLC     A
   \   000012   5007         JNC     ??PMS7003_rest_1
   \   000014   08           INC     R0
   \   000015   E8           MOV     A,R0
   \   000016   70EE         JNZ     ??PMS7003_rest_0
   \   000018   09           INC     R1
   \   000019   80EB         SJMP    ??PMS7003_rest_0
    114                  PMS7003_RST = 1;
   \                     ??PMS7003_rest_1:
   \   00001B   D284         SETB    0x80.4
    115          }
   \   00001D   02....       LJMP    ?BRET
   \   000020                REQUIRE _A_P0
    116          
    117          //=========================================================================
    118          //函数名称：PMS7003_sleep
    119          //函数参数：无
    120          //函数返回：无
    121          //功能概要：通过SET引脚休眠传感器
    122          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void PMS7003_sleep(void)
   \                     PMS7003_sleep:
    124          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    125          	PMS7003_SET = 0;
   \   000000   C285         CLR     0x80.5
    126          }
   \   000002   02....       LJMP    ?BRET
   \   000005                REQUIRE _A_P0
    127          
    128          //======================================================================
    129          //函数名称：PMS7003_datarec
    130          //函数参数：databuf:数据接收缓存
    131          //函数返回：接收成功：0 ；接收失败：0x12
    132          //功能概要：接收传感器原始读数
    133          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          unsigned char PMS7003_recdata(unsigned char *databuf)
   \                     PMS7003_recdata:
    135          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    136          	unsigned char lrcl, lrch, i;
    137          	unsigned int lrcsum, datasum = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   \   00000C   75..00       MOV     ?V3,#0x0
    138                  PMS7003_control(PMS7003_CMD_PSSTIVEREAD);
   \   00000F                ; Setup parameters for call to function PMS7003_control
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7BE2         MOV     R3,#-0x1e
   \   000013   12....       LCALL   `??PMS7003_control::?relay`; Banked call to: PMS7003_control
   \   000016   E9           MOV     A,R1
    139          	//接收传感器的数据
    140                  i=HalUARTRead(0, databuf, PMS7003_LENTH_DATA);
   \   000017                ; Setup parameters for call to function HalUARTRead
   \   000017   7C20         MOV     R4,#0x20
   \   000019   7D00         MOV     R5,#0x0
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000024   EA           MOV     A,R2
   \   000025   F5..         MOV     ?V0,A
    141          
    142          	//计算校验和
    143          	for(i = 0; i < (PMS7003_LENTH_DATA -2) ; i++)
   \   000027   75..00       MOV     ?V0,#0x0
   \                     ??PMS7003_recdata_0:
   \   00002A   E5..         MOV     A,?V0
   \   00002C   C3           CLR     C
   \   00002D   941E         SUBB    A,#0x1e
   \   00002F   501E         JNC     ??PMS7003_recdata_1
    144          	{
    145          		datasum += databuf[i];
   \   000031   A8..         MOV     R0,?V0
   \   000033   7900         MOV     R1,#0x0
   \   000035   EE           MOV     A,R6
   \   000036   28           ADD     A,R0
   \   000037   F582         MOV     DPL,A
   \   000039   EF           MOV     A,R7
   \   00003A   39           ADDC    A,R1
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   7900         MOV     R1,#0x0
   \   000041   E5..         MOV     A,?V2
   \   000043   28           ADD     A,R0
   \   000044   F5..         MOV     ?V2,A
   \   000046   E5..         MOV     A,?V3
   \   000048   39           ADDC    A,R1
   \   000049   F5..         MOV     ?V3,A
    146          	}
   \   00004B   05..         INC     ?V0
   \   00004D   80DB         SJMP    ??PMS7003_recdata_0
    147          	lrcl = databuf[PMS7003_LENTH_DATA-1];
   \                     ??PMS7003_recdata_1:
   \   00004F   EE           MOV     A,R6
   \   000050   241F         ADD     A,#0x1f
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   3F           ADDC    A,R7
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V4,A
    148          	lrch = databuf[PMS7003_LENTH_DATA-2];
   \   00005B   EE           MOV     A,R6
   \   00005C   241E         ADD     A,#0x1e
   \   00005E   F582         MOV     DPL,A
   \   000060   E4           CLR     A
   \   000061   3F           ADDC    A,R7
   \   000062   F583         MOV     DPH,A
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F5..         MOV     ?V1,A
    149          	lrcsum = (lrch<<8)+lrcl;
   \   000067   A8..         MOV     R0,?V1
   \   000069   7900         MOV     R1,#0x0
   \   00006B   E4           CLR     A
   \   00006C   C8           XCH     A,R0
   \   00006D   F9           MOV     R1,A
   \   00006E   AA..         MOV     R2,?V4
   \   000070   7B00         MOV     R3,#0x0
   \   000072   E8           MOV     A,R0
   \   000073   2A           ADD     A,R2
   \   000074   F8           MOV     R0,A
   \   000075   E9           MOV     A,R1
   \   000076   3B           ADDC    A,R3
   \   000077   F9           MOV     R1,A
   \   000078   88..         MOV     ?V6,R0
   \   00007A   89..         MOV     ?V7,R1
    150          	//如果校验错误，返回错误码
    151          	if(datasum != lrcsum)
   \   00007C   E5..         MOV     A,?V6
   \   00007E   65..         XRL     A,?V2
   \   000080   7004         JNZ     ??PMS7003_recdata_2
   \   000082   E5..         MOV     A,?V7
   \   000084   65..         XRL     A,?V3
   \                     ??PMS7003_recdata_2:
   \   000086   6004         JZ      ??PMS7003_recdata_3
    152                  {
    153          		return PMS7003_ERR_RECFAIL;
   \   000088   7912         MOV     R1,#0x12
   \   00008A   8002         SJMP    ??PMS7003_recdata_4
    154                  }
    155          
    156          	return 0;
   \                     ??PMS7003_recdata_3:
   \   00008C   7900         MOV     R1,#0x0
   \                     ??PMS7003_recdata_4:
   \   00008E   7F08         MOV     R7,#0x8
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
    157          }
    158          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    159          unsigned char PMS7003_Read_Str(unsigned char *buf)
   \                     PMS7003_Read_Str:
    160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV     A,#-0x22
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    161            unsigned char tmp[PMS7003_LENTH_DATA];
    162            unsigned int pm1, pm25, pm10;//CF=1，标准颗粒物，单位ug/m3
    163            unsigned int cnt = 0;
   \   000015   7E00         MOV     R6,#0x0
   \   000017   7F00         MOV     R7,#0x0
    164            while(PMS7003_recdata(tmp) == PMS7003_ERR_RECFAIL)
   \                     ??PMS7003_Read_Str_0:
   \   000019                ; Setup parameters for call to function PMS7003_recdata
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP101_8
   \   00001E   12....       LCALL   `??PMS7003_recdata::?relay`; Banked call to: PMS7003_recdata
   \   000021   E9           MOV     A,R1
   \   000022   6412         XRL     A,#0x12
   \   000024   7013         JNZ     ??PMS7003_Read_Str_1
    165            {
    166              if(++cnt > 1000)
   \   000026   0E           INC     R6
   \   000027   EE           MOV     A,R6
   \   000028   7001         JNZ     ??PMS7003_Read_Str_2
   \   00002A   0F           INC     R7
   \                     ??PMS7003_Read_Str_2:
   \   00002B   C3           CLR     C
   \   00002C   EE           MOV     A,R6
   \   00002D   94E9         SUBB    A,#-0x17
   \   00002F   EF           MOV     A,R7
   \   000030   9403         SUBB    A,#0x3
   \   000032   40E5         JC      ??PMS7003_Read_Str_0
    167                return 1;         //timeout,sensor no response
   \   000034   7901         MOV     R1,#0x1
   \   000036   02....       LJMP    ??PMS7003_Read_Str_3 & 0xFFFF
    168            }
    169            pm1 = (tmp[4]<<8) + tmp[5];
   \                     ??PMS7003_Read_Str_1:
   \   000039   7406         MOV     A,#0x6
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F8           MOV     R0,A
   \   000040   7900         MOV     R1,#0x0
   \   000042   E4           CLR     A
   \   000043   C8           XCH     A,R0
   \   000044   F9           MOV     R1,A
   \   000045   7407         MOV     A,#0x7
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FA           MOV     R2,A
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   E8           MOV     A,R0
   \   00004F   2A           ADD     A,R2
   \   000050   F8           MOV     R0,A
   \   000051   E9           MOV     A,R1
   \   000052   3B           ADDC    A,R3
   \   000053   F9           MOV     R1,A
   \   000054   88..         MOV     ?V4,R0
   \   000056   89..         MOV     ?V5,R1
    170            pm25 = (tmp[6]<<8) + tmp[7];
   \   000058   7408         MOV     A,#0x8
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   7900         MOV     R1,#0x0
   \   000061   E4           CLR     A
   \   000062   C8           XCH     A,R0
   \   000063   F9           MOV     R1,A
   \   000064   7409         MOV     A,#0x9
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FA           MOV     R2,A
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   E8           MOV     A,R0
   \   00006E   2A           ADD     A,R2
   \   00006F   F8           MOV     R0,A
   \   000070   E9           MOV     A,R1
   \   000071   3B           ADDC    A,R3
   \   000072   F9           MOV     R1,A
   \   000073   88..         MOV     ?V2,R0
   \   000075   89..         MOV     ?V3,R1
    171            pm10 = (tmp[8]<<8) + tmp[9];
   \   000077   740A         MOV     A,#0xa
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F8           MOV     R0,A
   \   00007E   7900         MOV     R1,#0x0
   \   000080   E4           CLR     A
   \   000081   C8           XCH     A,R0
   \   000082   F9           MOV     R1,A
   \   000083   740B         MOV     A,#0xb
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FA           MOV     R2,A
   \   00008A   7B00         MOV     R3,#0x0
   \   00008C   E8           MOV     A,R0
   \   00008D   2A           ADD     A,R2
   \   00008E   F8           MOV     R0,A
   \   00008F   E9           MOV     A,R1
   \   000090   3B           ADDC    A,R3
   \   000091   F9           MOV     R1,A
   \   000092   88..         MOV     ?V0,R0
   \   000094   89..         MOV     ?V1,R1
    172                
    173            if(pm1<1000 && pm25<1000 && pm10<1000)
   \   000096   C3           CLR     C
   \   000097   E5..         MOV     A,?V4
   \   000099   94E8         SUBB    A,#-0x18
   \   00009B   E5..         MOV     A,?V5
   \   00009D   9403         SUBB    A,#0x3
   \   00009F   503F         JNC     ??PMS7003_Read_Str_4
   \   0000A1   C3           CLR     C
   \   0000A2   E5..         MOV     A,?V2
   \   0000A4   94E8         SUBB    A,#-0x18
   \   0000A6   E5..         MOV     A,?V3
   \   0000A8   9403         SUBB    A,#0x3
   \   0000AA   5034         JNC     ??PMS7003_Read_Str_4
   \   0000AC   C3           CLR     C
   \   0000AD   E5..         MOV     A,?V0
   \   0000AF   94E8         SUBB    A,#-0x18
   \   0000B1   E5..         MOV     A,?V1
   \   0000B3   9403         SUBB    A,#0x3
   \   0000B5   5029         JNC     ??PMS7003_Read_Str_4
    174            {
    175              sprintf((char*)buf, "%3d %3d %3d", pm1, pm25, pm10);
   \   0000B7                ; Setup parameters for call to function sprintf
   \   0000B7   78..         MOV     R0,#?V0
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   78..         MOV     R0,#?V2
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   78..         MOV     R0,#?V4
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   7C..         MOV     R4,#`?<Constant "%3d %3d %3d">` & 0xff
   \   0000C8   7D..         MOV     R5,#(`?<Constant "%3d %3d %3d">` >> 8) & 0xff
   \   0000CA   7406         MOV     A,#0x6
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   FA           MOV     R2,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FB           MOV     R3,A
   \   0000D4   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0000D7   7406         MOV     A,#0x6
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
    176              return 0;
   \   0000DC   7900         MOV     R1,#0x0
   \   0000DE   8002         SJMP    ??PMS7003_Read_Str_3
    177            }
    178            return 1;              //should not arrive here
   \                     ??PMS7003_Read_Str_4:
   \   0000E0   7901         MOV     R1,#0x1
   \                     ??PMS7003_Read_Str_3:
   \   0000E2   7422         MOV     A,#0x22
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   7F06         MOV     R7,#0x6
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
    179          }
    180          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          unsigned char PMS7003_Read(unsigned char *buf)
   \                     PMS7003_Read:
    182          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    183            unsigned char tmp[PMS7003_LENTH_DATA];
    184            unsigned int pm1, pm25, pm10;//CF=1，标准颗粒物，单位ug/m3
    185            unsigned int cnt = 0;
   \   00000E   75..00       MOV     ?V0,#0x0
   \   000011   75..00       MOV     ?V1,#0x0
    186            while(PMS7003_recdata(tmp) == PMS7003_ERR_RECFAIL)
   \                     ??PMS7003_Read_0:
   \   000014                ; Setup parameters for call to function PMS7003_recdata
   \   000014   AA..         MOV     R2,?XSP + 0
   \   000016   AB..         MOV     R3,?XSP + 1
   \   000018   12....       LCALL   `??PMS7003_recdata::?relay`; Banked call to: PMS7003_recdata
   \   00001B   E9           MOV     A,R1
   \   00001C   6412         XRL     A,#0x12
   \   00001E   7018         JNZ     ??PMS7003_Read_1
    187            {
    188              if(++cnt > 1000)
   \   000020   05..         INC     ?V0
   \   000022   E5..         MOV     A,?V0
   \   000024   7002         JNZ     ??PMS7003_Read_2
   \   000026   05..         INC     ?V1
   \                     ??PMS7003_Read_2:
   \   000028   C3           CLR     C
   \   000029   E5..         MOV     A,?V0
   \   00002B   94E9         SUBB    A,#-0x17
   \   00002D   E5..         MOV     A,?V1
   \   00002F   9403         SUBB    A,#0x3
   \   000031   40E1         JC      ??PMS7003_Read_0
    189                return 1;         //timeout,sensor no response
   \   000033   7901         MOV     R1,#0x1
   \   000035   02....       LJMP    ??PMS7003_Read_3 & 0xFFFF
    190            }
    191            pm1 = (tmp[4]<<8) + tmp[5];
   \                     ??PMS7003_Read_1:
   \   000038   7404         MOV     A,#0x4
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   7900         MOV     R1,#0x0
   \   000041   E4           CLR     A
   \   000042   C8           XCH     A,R0
   \   000043   F9           MOV     R1,A
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   E8           MOV     A,R0
   \   00004E   2A           ADD     A,R2
   \   00004F   F8           MOV     R0,A
   \   000050   E9           MOV     A,R1
   \   000051   3B           ADDC    A,R3
   \   000052   F9           MOV     R1,A
   \   000053   88..         MOV     ?V6,R0
   \   000055   89..         MOV     ?V7,R1
    192            pm25 = (tmp[6]<<8) + tmp[7];
   \   000057   7406         MOV     A,#0x6
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F8           MOV     R0,A
   \   00005E   7900         MOV     R1,#0x0
   \   000060   E4           CLR     A
   \   000061   C8           XCH     A,R0
   \   000062   F9           MOV     R1,A
   \   000063   7407         MOV     A,#0x7
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   E8           MOV     A,R0
   \   00006D   2A           ADD     A,R2
   \   00006E   F8           MOV     R0,A
   \   00006F   E9           MOV     A,R1
   \   000070   3B           ADDC    A,R3
   \   000071   F9           MOV     R1,A
   \   000072   88..         MOV     ?V4,R0
   \   000074   89..         MOV     ?V5,R1
    193            pm10 = (tmp[8]<<8) + tmp[9];
   \   000076   7408         MOV     A,#0x8
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   E4           CLR     A
   \   000080   C8           XCH     A,R0
   \   000081   F9           MOV     R1,A
   \   000082   7409         MOV     A,#0x9
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FA           MOV     R2,A
   \   000089   7B00         MOV     R3,#0x0
   \   00008B   E8           MOV     A,R0
   \   00008C   2A           ADD     A,R2
   \   00008D   F8           MOV     R0,A
   \   00008E   E9           MOV     A,R1
   \   00008F   3B           ADDC    A,R3
   \   000090   F9           MOV     R1,A
   \   000091   88..         MOV     ?V2,R0
   \   000093   89..         MOV     ?V3,R1
    194                
    195            if(pm1<1000 && pm25<1000 && pm10<1000)
   \   000095   C3           CLR     C
   \   000096   E5..         MOV     A,?V6
   \   000098   94E8         SUBB    A,#-0x18
   \   00009A   E5..         MOV     A,?V7
   \   00009C   9403         SUBB    A,#0x3
   \   00009E   4003         JC      $+5
   \   0000A0   02....       LJMP    ??PMS7003_Read_4 & 0xFFFF
   \   0000A3   C3           CLR     C
   \   0000A4   E5..         MOV     A,?V4
   \   0000A6   94E8         SUBB    A,#-0x18
   \   0000A8   E5..         MOV     A,?V5
   \   0000AA   9403         SUBB    A,#0x3
   \   0000AC   5078         JNC     ??PMS7003_Read_4
   \   0000AE   C3           CLR     C
   \   0000AF   E5..         MOV     A,?V2
   \   0000B1   94E8         SUBB    A,#-0x18
   \   0000B3   E5..         MOV     A,?V3
   \   0000B5   9403         SUBB    A,#0x3
   \   0000B7   506D         JNC     ??PMS7003_Read_4
    196            {
    197              buf[0] = tmp[4];    //pm1 H
   \   0000B9   7404         MOV     A,#0x4
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C0E0         PUSH    A
   \   0000C1   8E82         MOV     DPL,R6
   \   0000C3   8F83         MOV     DPH,R7
   \   0000C5   D0E0         POP     A
   \   0000C7   F0           MOVX    @DPTR,A
    198              buf[1] = tmp[5];    //pm1 L
   \   0000C8   7405         MOV     A,#0x5
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   C0E0         PUSH    A
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   A3           INC     DPTR
   \   0000D5   D0E0         POP     A
   \   0000D7   F0           MOVX    @DPTR,A
    199              
    200              buf[2] = tmp[6];
   \   0000D8   7406         MOV     A,#0x6
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C0E0         PUSH    A
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   D0E0         POP     A
   \   0000E8   F0           MOVX    @DPTR,A
    201              buf[3] = tmp[7];
   \   0000E9   7407         MOV     A,#0x7
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   C0E0         PUSH    A
   \   0000F1   8E82         MOV     DPL,R6
   \   0000F3   8F83         MOV     DPH,R7
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
    202              
    203              buf[4] = tmp[8];
   \   0000FB   7408         MOV     A,#0x8
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C0E0         PUSH    A
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   D0E0         POP     A
   \   00010D   F0           MOVX    @DPTR,A
    204              buf[5] = tmp[9];
   \   00010E   7409         MOV     A,#0x9
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C0E0         PUSH    A
   \   000116   8E82         MOV     DPL,R6
   \   000118   8F83         MOV     DPH,R7
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   D0E0         POP     A
   \   000121   F0           MOVX    @DPTR,A
    205              return 0;
   \   000122   7900         MOV     R1,#0x0
   \   000124   8002         SJMP    ??PMS7003_Read_3
    206            }
    207            return 1;              //should not arrive here
   \                     ??PMS7003_Read_4:
   \   000126   7901         MOV     R1,#0x1
   \                     ??PMS7003_Read_3:
   \   000128   7420         MOV     A,#0x20
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   7F08         MOV     R7,#0x8
   \   00012F   02....       LJMP    ?BANKED_LEAVE_XDATA
    208          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_control::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_control

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_buildframe::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_buildframe

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_rest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_rest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_sleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_recdata::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_recdata

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_Read_Str::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_Read_Str

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_Read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_Read

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%3d %3d %3d">`:
   \   000000   25336420     DB "%3d %3d %3d"
   \            25336420
   \            25336400
    209          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   PMS7003_Init
        2      0   -> PMS7003_control
      1     48   PMS7003_Read
        0     48   -> PMS7003_recdata
      0     54   PMS7003_Read_Str
        0     48   -> PMS7003_recdata
        0     54   -> sprintf
      1     30   PMS7003_buildframe
      0     33   PMS7003_control
        0     17   -> HalUARTWrite
        0     17   -> PMS7003_buildframe
      0     64   PMS7003_recdata
        0     16   -> HalUARTRead
        0     16   -> PMS7003_control
      0      0   PMS7003_rest
      0      0   PMS7003_sleep


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "%3d %3d %3d">
       7  ?<Constant {0, 0, 0, 0, 0, 0, 0}>
       1  P0DIR
       1  P0SEL
      25  PMS7003_Init
       6  PMS7003_Init::?relay
     306  PMS7003_Read
       6  PMS7003_Read::?relay
     236  PMS7003_Read_Str
       6  PMS7003_Read_Str::?relay
     162  PMS7003_buildframe
       6  PMS7003_buildframe::?relay
      71  PMS7003_control
       6  PMS7003_control::?relay
     147  PMS7003_recdata
       6  PMS7003_recdata::?relay
      32  PMS7003_rest
       6  PMS7003_rest::?relay
       5  PMS7003_sleep
       6  PMS7003_sleep::?relay
       1  _A_P0

 
 984 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
  19 bytes in segment XDATA_ROM_C
 
 1 032 bytes of CODE  memory
    19 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)

Errors: none
Warnings: none
