###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:21
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\design\ZStack-2.5.1a\Components\mt\MT.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000 D:\design\ZStack-2.5.1a\Components\mt\MT.c -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
#        -D xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\MT.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\MT.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\mt\MT.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2011-06-07 12:12:44 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26238 $
      5          
      6            Description:    MonitorTest Event Loop functions.
      7                            Everything in the MonitorTest Task (except the serial driver).
      8          
      9          
     10            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40           **************************************************************************************************/
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          
     46          #include "ZComDef.h"
     47          #include "MT.h"
     48          #include "MT_APP.h"
     49          #include "MT_DEBUG.h"
     50          #include "MT_UTIL.h"
     51          #include "MT_SYS.h"
     52          
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Memory.h"
     56          #include "OSAL_Nv.h"
     57          
     58          #include "DebugTrace.h"
     59          #include "ZMAC.h"
     60          
     61          #if !defined ( NONWK )
     62            #include "NLMEDE.h"
     63            #include "nwk_bufs.h"
     64            #include "ZDObject.h"
     65            #include "ssp.h"
     66            #include "nwk_util.h"
     67            #include "AF.h"
     68            #include "MT_SAPI.h"
     69          #endif
     70          
     71          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     72            #include "MT_MAC.h"
     73          #endif
     74          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     75            #include "MT_NWK.h"
     76            #include "nwk.h"
     77            #include "nwk_bufs.h"
     78          #endif
     79          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     80            #include "MT_AF.h"
     81          #endif
     82          #if defined( MT_USER_TEST_FUNC )
     83            #include "AF.h"
     84          #endif
     85          #if defined( MT_ZDO_FUNC )
     86            #include "MT_ZDO.h"
     87          #endif
     88          #if defined (MT_SAPI_FUNC)
     89          	#include "MT_SAPI.h"
     90          #endif
     91          #if defined (MT_OTA_FUNC)
     92            #include "MT_OTA.h"
     93          #endif
     94          
     95          #if defined( APP_TP )
     96           #include "TestProfile.h"
     97          #endif
     98          #if defined( APP_TP2 )
     99           #include "TestProfile2.h"
    100          #endif
    101          
    102          #if defined(APP_TGEN)
    103            #include "TrafficGenApp.h"
    104          #endif
    105          #if defined(APP_DEBUG)
    106          	#include "DebugApp.h"
    107          #endif
    108          #if defined (NWK_TEST)
    109          	#include "HWTTApp.h"
    110          #endif
    111          
    112          /* HAL */
    113          #include "hal_uart.h"
    114          #include "hal_led.h"
    115          #include "hal_key.h"
    116          #include "MT_UART.h"
    117          
    118          /**************************************************************************************************
    119           * CONSTANTS
    120           **************************************************************************************************/
    121          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          mtProcessMsg_t mtProcessIncoming[] =
   \                     mtProcessIncoming:
   \   000000                DS 22
   \   000016                REQUIRE __INIT_XDATA_Z
    123          {
    124            NULL,
    125          
    126          #if defined (MT_SYS_FUNC)
    127            MT_SysCommandProcessing,
    128          #else
    129            NULL,
    130          #endif
    131          
    132          #if defined (MT_MAC_FUNC)
    133            MT_MacCommandProcessing,
    134          #else
    135            NULL,
    136          #endif
    137          
    138          #if defined (MT_NWK_FUNC)
    139            MT_NwkCommandProcessing,
    140          #else
    141            NULL,
    142          #endif
    143          
    144          #if defined (MT_AF_FUNC)
    145            MT_AfCommandProcessing,
    146          #else
    147            NULL,
    148          #endif
    149          
    150          #if defined (MT_ZDO_FUNC)
    151            MT_ZdoCommandProcessing,
    152          #else
    153            NULL,
    154          #endif
    155          
    156          #if defined (MT_SAPI_FUNC)
    157            MT_SapiCommandProcessing,
    158          #else
    159            NULL,
    160          #endif
    161          
    162          #if defined (MT_UTIL_FUNC)
    163            MT_UtilCommandProcessing,
    164          #else
    165            NULL,
    166          #endif
    167          
    168          #if defined (MT_DEBUG_FUNC)
    169            MT_DebugCommandProcessing,
    170          #else
    171            NULL,
    172          #endif
    173          
    174          #if defined (MT_APP_FUNC)
    175            MT_AppCommandProcessing,
    176          #else
    177            NULL,
    178          #endif
    179          
    180          #if defined (MT_OTA_FUNC)
    181            MT_OtaCommandProcessing,
    182          #else
    183            NULL,
    184          #endif
    185          };
    186          
    187          /**************************************************************************************************
    188           * GLOBAL VARIABLES
    189           **************************************************************************************************/
    190          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    193          
    194          /**************************************************************************************************
    195           * LOCAL FUNCTIONS
    196           **************************************************************************************************/
    197          
    198          void MT_MsgQueueInit( void );
    199          void MT_ResetMsgQueue( void );
    200          byte MT_QueueMsg( byte *msg , byte len );
    201          void MT_ProcessQueue( void );
    202          
    203          #if defined ( MT_USER_TEST_FUNC )
    204          void MT_ProcessAppUserCmd( byte *pData );
    205          #endif
    206          
    207          /**************************************************************************************************
    208           * @fn         MT_Init
    209           *
    210           * @brief      This function is the secondary initialization that resolves conflicts during
    211           *             osalInitTasks(). For example, since MT is the highest priority task, and
    212           *             specifically because the MT task is initialized before the ZDApp task, if MT_Init()
    213           *             registers anything with ZDO_RegisterForZdoCB(), it is wiped out when ZDApp task
    214           *             initialization invokes ZDApp_InitZdoCBFunc().
    215           *             There may be other existing or future such races, so try to do all possible
    216           *             MT initialization here vice in MT_TaskInit().
    217           *
    218           * input parameters
    219           *
    220           * None.
    221           *
    222           * output parameters
    223           *
    224           * None.
    225           *
    226           * @return      None.
    227           **************************************************************************************************
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          void MT_Init(void)
   \                     MT_Init:
    230          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    231          #if defined (MT_ZDO_FUNC)
    232            MT_ZdoInit();
    233          #endif
    234            MT_SysResetInd();
   \   000004                ; Setup parameters for call to function MT_SysResetInd
   \   000004   12....       LCALL   `??MT_SysResetInd::?relay`; Banked call to: MT_SysResetInd
    235          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    236          
    237          /***************************************************************************************************
    238           * @fn      MT_BuildSPIMsg
    239           *
    240           * @brief
    241           *
    242           *   Format an SPI message.
    243           *
    244           * @param   UINT16 cmd - command id
    245           * @param   byte *msg - pointer to message buffer
    246           * @param   byte dataLen - length of data field
    247           * @param   byte *pData - pointer to data field
    248           *
    249           * @return  void
    250           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          void MT_BuildSPIMsg( uint8 cmdType, uint8 cmdId, byte *msg, byte dataLen, byte *pData )
   \                     MT_BuildSPIMsg:
    252          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V5,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V7,A
    253            /* Fill in the CMD and Data Length */
    254            *msg++ = dataLen;
   \   00001B   E5..         MOV     A,?V3
   \   00001D   C0E0         PUSH    A
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   AE82         MOV     R6,DPL
   \   00002D   AF83         MOV     R7,DPH
    255            *msg++ = cmdType;
   \   00002F   E5..         MOV     A,?V5
   \   000031   C0E0         PUSH    A
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   AE82         MOV     R6,DPL
   \   000041   AF83         MOV     R7,DPH
    256            *msg++ = cmdId;
   \   000043   E5..         MOV     A,?V4
   \   000045   C0E0         PUSH    A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   A3           INC     DPTR
   \   000053   AE82         MOV     R6,DPL
   \   000055   AF83         MOV     R7,DPH
    257          
    258            /* Fill in the data */
    259            if ( pData )
   \   000057   E5..         MOV     A,?V6
   \   000059   45..         ORL     A,?V7
   \   00005B   601E         JZ      ??MT_BuildSPIMsg_0
    260            {
    261              osal_memcpy( msg, pData, dataLen );
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   85....       MOV     ?V0,?V6
   \   000060   85....       MOV     ?V1,?V7
   \   000063   75..00       MOV     ?V2,#0x0
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006B   AC..         MOV     R4,?V3
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   EE           MOV     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   EF           MOV     A,R7
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
    262            }
    263          }
   \                     ??MT_BuildSPIMsg_0:
   \   00007B   7F08         MOV     R7,#0x8
   \   00007D   02....       LJMP    ?BANKED_LEAVE_XDATA
    264          
    265          /***************************************************************************************************
    266           * @fn      MT_BuildAndSendZToolResponse
    267           *
    268           * @brief   Build and send a ZTOOL msg
    269           * @param   uint8 cmdType - include type and subsystem
    270           *          uint8 cmdId - command ID
    271           *          byte dataLen
    272           *          byte *pData
    273           *
    274           * @return  void
    275           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    276          void MT_BuildAndSendZToolResponse(uint8 cmdType, uint8 cmdId, uint8 dataLen, uint8 *pData)
   \                     MT_BuildAndSendZToolResponse:
    277          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A..         MOV     ?V0,R2
   \   000009   EB           MOV     A,R3
   \   00000A   FE           MOV     R6,A
   \   00000B   8C..         MOV     ?V6,R4
   \   00000D   8D..         MOV     ?V7,R5
    278            uint8 *msg_ptr;
    279          
    280            /* Allocate memory including SOP and FCS */
    281            msg_ptr = MT_TransportAlloc((mtRpcCmdType_t)(cmdType & 0xE0), dataLen);
   \   00000F                ; Setup parameters for call to function MT_TransportAlloc
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   74E0         MOV     A,#-0x20
   \   000013   5F           ANL     A,R7
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??MT_TransportAlloc::?relay`; Banked call to: MT_TransportAlloc
   \   000018   8A..         MOV     ?V2,R2
   \   00001A   8B..         MOV     ?V3,R3
   \   00001C   85....       MOV     ?V4,?V2
   \   00001F   85....       MOV     ?V5,?V3
    282          
    283            if (msg_ptr)
   \   000022   E5..         MOV     A,?V4
   \   000024   45..         ORL     A,?V5
   \   000026   6024         JZ      ??MT_BuildAndSendZToolResponse_0
    284            {
    285              /* Build the message */
    286              MT_BuildSPIMsg(cmdType, cmdId, msg_ptr, dataLen, pData);
   \   000028                ; Setup parameters for call to function MT_BuildSPIMsg
   \   000028   85....       MOV     ?V2,?V6
   \   00002B   85....       MOV     ?V3,?V7
   \   00002E   78..         MOV     R0,#?V2
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   EE           MOV     A,R6
   \   000034   FB           MOV     R3,A
   \   000035   AC..         MOV     R4,?V4
   \   000037   AD..         MOV     R5,?V5
   \   000039   AA..         MOV     R2,?V0
   \   00003B   EF           MOV     A,R7
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??MT_BuildSPIMsg::?relay`; Banked call to: MT_BuildSPIMsg
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    287              /* Send out the msg */
    288              MT_TransportSend(msg_ptr);
   \   000045                ; Setup parameters for call to function MT_TransportSend
   \   000045   AA..         MOV     R2,?V4
   \   000047   AB..         MOV     R3,?V5
   \   000049   12....       LCALL   `??MT_TransportSend::?relay`; Banked call to: MT_TransportSend
    289            }
    290          }
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   00004C   7F08         MOV     R7,#0x8
   \   00004E   02....       LJMP    ?BANKED_LEAVE_XDATA
    291          
    292          /***************************************************************************************************
    293           * @fn      MT_ProcessIncoming
    294           *
    295           * @brief  Process Incoming Message.
    296           *
    297           * @param   byte *pBuf - pointer to event message
    298           *
    299           * @return  void
    300           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void MT_ProcessIncoming(uint8 *pBuf)
   \                     MT_ProcessIncoming:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    303            mtProcessMsg_t func;
    304            uint8 rsp[MT_RPC_FRAME_HDR_SZ];
    305          
    306            /* pre-build response message:  | status | cmd0 | cmd1 | */
    307            rsp[1] = pBuf[MT_RPC_POS_CMD0];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   C0E0         PUSH    A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   D0E0         POP     A
   \   00001D   F0           MOVX    @DPTR,A
    308            rsp[2] = pBuf[MT_RPC_POS_CMD1];
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C0E0         PUSH    A
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
    309          
    310            /* check length */
    311            if (pBuf[MT_RPC_POS_LEN] > MT_RPC_DATA_MAX)
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C3           CLR     C
   \   000035   94FB         SUBB    A,#-0x5
   \   000037   400C         JC      ??MT_ProcessIncoming_0
    312            {
    313              rsp[0] = MT_RPC_ERR_LENGTH;
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   7404         MOV     A,#0x4
   \   000041   F0           MOVX    @DPTR,A
   \   000042   02....       LJMP    ??MT_ProcessIncoming_1 & 0xFFFF
    314            }
    315            /* check subsystem range */
    316            else if ((rsp[1] & MT_RPC_SUBSYSTEM_MASK) < MT_RPC_SYS_MAX)
   \                     ??MT_ProcessIncoming_0:
   \   000045   7401         MOV     A,#0x1
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   7900         MOV     R1,#0x0
   \   00004E   E8           MOV     A,R0
   \   00004F   541F         ANL     A,#0x1f
   \   000051   F8           MOV     R0,A
   \   000052   E9           MOV     A,R1
   \   000053   5400         ANL     A,#0x0
   \   000055   F9           MOV     R1,A
   \   000056   C3           CLR     C
   \   000057   E8           MOV     A,R0
   \   000058   940B         SUBB    A,#0xb
   \   00005A   E9           MOV     A,R1
   \   00005B   9400         SUBB    A,#0x0
   \   00005D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00005F   65D0         XRL     A,PSW
   \   000061   33           RLC     A
   \   000062   5065         JNC     ??MT_ProcessIncoming_2
    317            {
    318              /* look up processing function */
    319              func = mtProcessIncoming[rsp[1] & MT_RPC_SUBSYSTEM_MASK];
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F8           MOV     R0,A
   \   00006B   7900         MOV     R1,#0x0
   \   00006D   E8           MOV     A,R0
   \   00006E   541F         ANL     A,#0x1f
   \   000070   F8           MOV     R0,A
   \   000071   E9           MOV     A,R1
   \   000072   5400         ANL     A,#0x0
   \   000074   F9           MOV     R1,A
   \   000075   E8           MOV     A,R0
   \   000076   75F002       MOV     B,#0x2
   \   000079   A4           MUL     AB
   \   00007A   C8           XCH     A,R0
   \   00007B   AAF0         MOV     R2,B
   \   00007D   75F000       MOV     B,#0x0
   \   000080   A4           MUL     AB
   \   000081   2A           ADD     A,R2
   \   000082   FA           MOV     R2,A
   \   000083   75F002       MOV     B,#0x2
   \   000086   E9           MOV     A,R1
   \   000087   A4           MUL     AB
   \   000088   2A           ADD     A,R2
   \   000089   F9           MOV     R1,A
   \   00008A   74..         MOV     A,#mtProcessIncoming & 0xff
   \   00008C   28           ADD     A,R0
   \   00008D   F582         MOV     DPL,A
   \   00008F   74..         MOV     A,#(mtProcessIncoming >> 8) & 0xff
   \   000091   39           ADDC    A,R1
   \   000092   F583         MOV     DPH,A
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F8           MOV     R0,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   88..         MOV     ?V0,R0
   \   00009B   89..         MOV     ?V1,R1
    320              if (func)
   \   00009D   E5..         MOV     A,?V0
   \   00009F   45..         ORL     A,?V1
   \   0000A1   601B         JZ      ??MT_ProcessIncoming_3
    321              {
    322                /* execute processing function */
    323                rsp[0] = (*func)(pBuf);
   \   0000A3                ; Setup parameters for indirect call
   \   0000A3   EE           MOV     A,R6
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   FB           MOV     R3,A
   \   0000A7   85..82       MOV     DPL,?V0
   \   0000AA   85..83       MOV     DPH,?V1
   \   0000AD   12....       LCALL   ?CALL_IND
   \   0000B0   E9           MOV     A,R1
   \   0000B1   C0E0         PUSH    A
   \   0000B3   85..82       MOV     DPL,?XSP + 0
   \   0000B6   85..83       MOV     DPH,?XSP + 1
   \   0000B9   D0E0         POP     A
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   8014         SJMP    ??MT_ProcessIncoming_1
    324              }
    325              else
    326              {
    327                rsp[0] = MT_RPC_ERR_SUBSYSTEM;
   \                     ??MT_ProcessIncoming_3:
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   8009         SJMP    ??MT_ProcessIncoming_1
    328              }
    329            }
    330            else
    331            {
    332              rsp[0] = MT_RPC_ERR_SUBSYSTEM;
   \                     ??MT_ProcessIncoming_2:
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   F0           MOVX    @DPTR,A
    333            }
    334          
    335            /* if error and this was an SREQ, send error message */
    336            if ((rsp[0] != MT_RPC_SUCCESS) && ((rsp[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ))
   \                     ??MT_ProcessIncoming_1:
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   6019         JZ      ??MT_ProcessIncoming_4
   \   0000DB   7401         MOV     A,#0x1
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   54E0         ANL     A,#0xe0
   \   0000E3   6420         XRL     A,#0x20
   \   0000E5   700D         JNZ     ??MT_ProcessIncoming_4
    337            {
    338              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_RES0), 0,
    339                                                                            MT_RPC_FRAME_HDR_SZ, rsp);
   \   0000E7                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000E7   AC..         MOV     R4,?XSP + 0
   \   0000E9   AD..         MOV     R5,?XSP + 1
   \   0000EB   7B03         MOV     R3,#0x3
   \   0000ED   7A00         MOV     R2,#0x0
   \   0000EF   7960         MOV     R1,#0x60
   \   0000F1   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    340            }
    341          }
   \                     ??MT_ProcessIncoming_4:
   \   0000F4   7403         MOV     A,#0x3
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F9   7F02         MOV     R7,#0x2
   \   0000FB   02....       LJMP    ?BANKED_LEAVE_XDATA
    342          
    343          /***************************************************************************************************
    344           * @fn      MTProcessAppRspMsg
    345           *
    346           * @brief   Process the User App Response Message
    347           *
    348           * @param   data - output serial buffer.  The first byte must be the
    349           *          endpoint that send this message.
    350           * @param   len - data length
    351           *
    352           * @return  none
    353           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    354          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
    355          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    356            /* Send out Reset Response message */
    357            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), MT_APP_RSP, len, pData );
   \   00000B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000B   EE           MOV     A,R6
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   AB..         MOV     R3,?V0
   \   000011   7A80         MOV     R2,#-0x80
   \   000013   7969         MOV     R1,#0x69
   \   000015   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    358          }
   \   000018   7F01         MOV     R7,#0x1
   \   00001A   02....       LJMP    ?BANKED_LEAVE_XDATA
    359          
    360          
    361          /***************************************************************************************************
    362           * @fn      MT_ReverseBytes
    363           *
    364           * @brief
    365           *
    366           *   Reverses bytes within an array
    367           *
    368           * @param   data - ptr to data buffer to reverse
    369           * @param    len - number of bytes in buffer
    370           *
    371           * @return  void
    372           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
    374          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    375            byte i,j;
    376            byte temp;
    377          
    378            for ( i = 0, j = len-1; len > 1; len-=2 )
   \   000007   7E00         MOV     R6,#0x0
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   2C           ADD     A,R4
   \   00000C   FD           MOV     R5,A
   \                     ??MT_ReverseBytes_0:
   \   00000D   EC           MOV     A,R4
   \   00000E   C3           CLR     C
   \   00000F   9402         SUBB    A,#0x2
   \   000011   4046         JC      ??MT_ReverseBytes_1
    379            {
    380              temp = pData[i];
   \   000013   EE           MOV     A,R6
   \   000014   F8           MOV     R0,A
   \   000015   7900         MOV     R1,#0x0
   \   000017   EA           MOV     A,R2
   \   000018   28           ADD     A,R0
   \   000019   F582         MOV     DPL,A
   \   00001B   EB           MOV     A,R3
   \   00001C   39           ADDC    A,R1
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
    381              pData[i++] = pData[j];
   \   000021   ED           MOV     A,R5
   \   000022   F8           MOV     R0,A
   \   000023   7900         MOV     R1,#0x0
   \   000025   EA           MOV     A,R2
   \   000026   28           ADD     A,R0
   \   000027   F582         MOV     DPL,A
   \   000029   EB           MOV     A,R3
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   EE           MOV     A,R6
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   EA           MOV     A,R2
   \   000035   28           ADD     A,R0
   \   000036   F582         MOV     DPL,A
   \   000038   EB           MOV     A,R3
   \   000039   39           ADDC    A,R1
   \   00003A   F583         MOV     DPH,A
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   0E           INC     R6
    382              pData[j--] = temp;
   \   000040   EF           MOV     A,R7
   \   000041   C0E0         PUSH    A
   \   000043   ED           MOV     A,R5
   \   000044   F8           MOV     R0,A
   \   000045   7900         MOV     R1,#0x0
   \   000047   EA           MOV     A,R2
   \   000048   28           ADD     A,R0
   \   000049   F582         MOV     DPL,A
   \   00004B   EB           MOV     A,R3
   \   00004C   39           ADDC    A,R1
   \   00004D   F583         MOV     DPH,A
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   1D           DEC     R5
    383            }
   \   000053   74FE         MOV     A,#-0x2
   \   000055   2C           ADD     A,R4
   \   000056   FC           MOV     R4,A
   \   000057   80B4         SJMP    ??MT_ReverseBytes_0
    384          }
   \                     ??MT_ReverseBytes_1:
   \   000059   7F01         MOV     R7,#0x1
   \   00005B   02....       LJMP    ?BANKED_LEAVE_XDATA
    385          
    386          
    387          /***************************************************************************************************
    388           * @fn      MT_Word2Buf
    389           *
    390           * @brief   Copy a uint16 array to a byte array, little endian.
    391           *
    392           * @param   pBuf - byte array
    393           * @param   pWord - uint16 array
    394           * @param   len - length of uint16 array
    395           *
    396           * @return  pointer to end of byte array
    397           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    398          uint8 *MT_Word2Buf( uint8 *pBuf, uint16 *pWord, uint8 len )
   \                     MT_Word2Buf:
    399          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    400            while ( len-- > 0 )
   \                     ??MT_Word2Buf_0:
   \   000005   E9           MOV     A,R1
   \   000006   F8           MOV     R0,A
   \   000007   74FF         MOV     A,#-0x1
   \   000009   28           ADD     A,R0
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   6044         JZ      ??MT_Word2Buf_1
    401            {
    402              *pBuf++ = LO_UINT16( *pWord );
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   \   000017   EE           MOV     A,R6
   \   000018   C0E0         PUSH    A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
    403              *pBuf++ = HI_UINT16( *pWord );
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   8D83         MOV     DPH,R5
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FE           MOV     R6,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FF           MOV     R7,A
   \   000033   E4           CLR     A
   \   000034   CF           XCH     A,R7
   \   000035   FE           MOV     R6,A
   \   000036   EE           MOV     A,R6
   \   000037   C0E0         PUSH    A
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   A3           INC     DPTR
   \   000045   AA82         MOV     R2,DPL
   \   000047   AB83         MOV     R3,DPH
    404              pWord++;
   \   000049   EC           MOV     A,R4
   \   00004A   2402         ADD     A,#0x2
   \   00004C   FC           MOV     R4,A
   \   00004D   50B6         JNC     ??MT_Word2Buf_0
   \   00004F   0D           INC     R5
   \   000050   80B3         SJMP    ??MT_Word2Buf_0
    405            }
    406          
    407            return pBuf;
   \                     ??MT_Word2Buf_1:
   \   000052   7F01         MOV     R7,#0x1
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
    408          }
    409          #if !defined(NONWK)
    410          /***************************************************************************************************
    411           * @fn      MT_BuildEndpointDesc
    412           *
    413           * @brief   Build endpoint descriptor and simple descriptor structure from incoming buffer
    414           *
    415           * @param   pBuf - byte array
    416           *
    417           * @return  epDesc - pointer to the endpoint descriptor
    418           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    419          uint8 MT_BuildEndpointDesc( uint8 *pBuf, void *param )
   \                     MT_BuildEndpointDesc:
    420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
    421            uint8 i;
    422            uint8 ret = ZSuccess;
   \   00000D   75..00       MOV     ?V2,#0x0
    423            endPointDesc_t *epDesc;
    424          
    425            epDesc = (endPointDesc_t *)param;
   \   000010   85....       MOV     ?V0,?V6
   \   000013   85....       MOV     ?V1,?V7
    426            /* check if this endpoint is already registered */
    427            if ( afFindEndPointDesc( *pBuf ) != NULL )
   \   000016                ; Setup parameters for call to function afFindEndPointDesc
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00001F   8A..         MOV     ?V4,R2
   \   000021   8B..         MOV     ?V5,R3
   \   000023   E5..         MOV     A,?V4
   \   000025   45..         ORL     A,?V5
   \   000027   6006         JZ      ??MT_BuildEndpointDesc_0
    428            {
    429              ret = ZApsDuplicateEntry;
   \   000029   75..B8       MOV     ?V2,#-0x48
   \   00002C   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    430            }
    431            else if ( epDesc )
   \                     ??MT_BuildEndpointDesc_0:
   \   00002F   E5..         MOV     A,?V0
   \   000031   45..         ORL     A,?V1
   \   000033   7003         JNZ     $+5
   \   000035   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    432            {
    433              epDesc->endPoint = *pBuf;
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C0E0         PUSH    A
   \   00003F   85..82       MOV     DPL,?V0
   \   000042   85..83       MOV     DPH,?V1
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    434          
    435              /* Ignore the latency reqs */
    436              epDesc->latencyReq = noLatencyReqs;
   \   000048   85..82       MOV     DPL,?V0
   \   00004B   85..83       MOV     DPH,?V1
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   7400         MOV     A,#0x0
   \   000055   F0           MOVX    @DPTR,A
    437          
    438              /* allocate memory for the simple descriptor */
    439              epDesc->simpleDesc = (SimpleDescriptionFormat_t *) osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   7A0C         MOV     R2,#0xc
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005D   85..82       MOV     DPL,?V0
   \   000060   85..83       MOV     DPH,?V1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   EA           MOV     A,R2
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   EB           MOV     A,R3
   \   00006A   F0           MOVX    @DPTR,A
    440              if (epDesc->simpleDesc)
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F8           MOV     R0,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   E8           MOV     A,R0
   \   00007A   49           ORL     A,R1
   \   00007B   7003         JNZ     $+5
   \   00007D   02....       LJMP    ??MT_BuildEndpointDesc_2 & 0xFFFF
    441              {
    442                /* Endpoint */
    443                epDesc->simpleDesc->EndPoint = *pBuf++;
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C0E0         PUSH    A
   \   000087   85..82       MOV     DPL,?V0
   \   00008A   85..83       MOV     DPH,?V1
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F8           MOV     R0,A
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F583         MOV     DPH,A
   \   000096   8882         MOV     DPL,R0
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   A3           INC     DPTR
   \   0000A0   AE82         MOV     R6,DPL
   \   0000A2   AF83         MOV     R7,DPH
    444          
    445                /* AppProfId */
    446                epDesc->simpleDesc->AppProfId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FA           MOV     R2,A
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   7900         MOV     R1,#0x0
   \   0000B5   E4           CLR     A
   \   0000B6   C8           XCH     A,R0
   \   0000B7   F9           MOV     R1,A
   \   0000B8   EA           MOV     A,R2
   \   0000B9   28           ADD     A,R0
   \   0000BA   FA           MOV     R2,A
   \   0000BB   EB           MOV     A,R3
   \   0000BC   39           ADDC    A,R1
   \   0000BD   FB           MOV     R3,A
   \   0000BE   85..82       MOV     DPL,?V0
   \   0000C1   85..83       MOV     DPH,?V1
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F8           MOV     R0,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   8882         MOV     DPL,R0
   \   0000CF   A3           INC     DPTR
   \   0000D0   EA           MOV     A,R2
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   EB           MOV     A,R3
   \   0000D4   F0           MOVX    @DPTR,A
    447                pBuf += sizeof(uint16);
   \   0000D5   EE           MOV     A,R6
   \   0000D6   2402         ADD     A,#0x2
   \   0000D8   FE           MOV     R6,A
   \   0000D9   5001         JNC     ??MT_BuildEndpointDesc_3
   \   0000DB   0F           INC     R7
    448          
    449                /* AppDeviceId */
    450                epDesc->simpleDesc->AppDeviceId = BUILD_UINT16(pBuf[0],pBuf[1]);
   \                     ??MT_BuildEndpointDesc_3:
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FA           MOV     R2,A
   \   0000E2   7B00         MOV     R3,#0x0
   \   0000E4   8E82         MOV     DPL,R6
   \   0000E6   8F83         MOV     DPH,R7
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F8           MOV     R0,A
   \   0000EB   7900         MOV     R1,#0x0
   \   0000ED   E4           CLR     A
   \   0000EE   C8           XCH     A,R0
   \   0000EF   F9           MOV     R1,A
   \   0000F0   EA           MOV     A,R2
   \   0000F1   28           ADD     A,R0
   \   0000F2   FA           MOV     R2,A
   \   0000F3   EB           MOV     A,R3
   \   0000F4   39           ADDC    A,R1
   \   0000F5   FB           MOV     R3,A
   \   0000F6   85..82       MOV     DPL,?V0
   \   0000F9   85..83       MOV     DPH,?V1
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F8           MOV     R0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F583         MOV     DPH,A
   \   000105   8882         MOV     DPL,R0
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   EA           MOV     A,R2
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   EB           MOV     A,R3
   \   00010E   F0           MOVX    @DPTR,A
    451                pBuf += sizeof(uint16);
   \   00010F   EE           MOV     A,R6
   \   000110   2402         ADD     A,#0x2
   \   000112   FE           MOV     R6,A
   \   000113   5001         JNC     ??MT_BuildEndpointDesc_4
   \   000115   0F           INC     R7
    452          
    453                /* AppDevVer */
    454                epDesc->simpleDesc->AppDevVer = (*pBuf++) & AF_APP_DEV_VER_MASK ;
   \                     ??MT_BuildEndpointDesc_4:
   \   000116   8E82         MOV     DPL,R6
   \   000118   8F83         MOV     DPH,R7
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   540F         ANL     A,#0xf
   \   00011D   F9           MOV     R1,A
   \   00011E   8E82         MOV     DPL,R6
   \   000120   8F83         MOV     DPH,R7
   \   000122   A3           INC     DPTR
   \   000123   AE82         MOV     R6,DPL
   \   000125   AF83         MOV     R7,DPH
   \   000127   85..82       MOV     DPL,?V0
   \   00012A   85..83       MOV     DPH,?V1
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F8           MOV     R0,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F583         MOV     DPH,A
   \   000136   8882         MOV     DPL,R0
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   54F0         ANL     A,#0xf0
   \   000140   F0           MOVX    @DPTR,A
   \   000141   740F         MOV     A,#0xf
   \   000143   59           ANL     A,R1
   \   000144   F9           MOV     R1,A
   \   000145   85..82       MOV     DPL,?V0
   \   000148   85..83       MOV     DPH,?V1
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F583         MOV     DPH,A
   \   000154   8882         MOV     DPL,R0
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   49           ORL     A,R1
   \   00015D   F0           MOVX    @DPTR,A
    455          
    456                /* LatencyReq */
    457                pBuf++;
   \   00015E   8E82         MOV     DPL,R6
   \   000160   8F83         MOV     DPH,R7
   \   000162   A3           INC     DPTR
   \   000163   AE82         MOV     R6,DPL
   \   000165   AF83         MOV     R7,DPH
    458          
    459                /* AppNumInClusters */
    460                epDesc->simpleDesc->AppNumInClusters = *pBuf++;
   \   000167   8E82         MOV     DPL,R6
   \   000169   8F83         MOV     DPH,R7
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   C0E0         PUSH    A
   \   00016E   85..82       MOV     DPL,?V0
   \   000171   85..83       MOV     DPH,?V1
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F8           MOV     R0,A
   \   000179   A3           INC     DPTR
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   C8           XCH     A,R0
   \   00017C   2406         ADD     A,#0x6
   \   00017E   F582         MOV     DPL,A
   \   000180   C8           XCH     A,R0
   \   000181   3400         ADDC    A,#0x0
   \   000183   F583         MOV     DPH,A
   \   000185   D0E0         POP     A
   \   000187   F0           MOVX    @DPTR,A
   \   000188   8E82         MOV     DPL,R6
   \   00018A   8F83         MOV     DPH,R7
   \   00018C   A3           INC     DPTR
   \   00018D   AE82         MOV     R6,DPL
   \   00018F   AF83         MOV     R7,DPH
    461                if (epDesc->simpleDesc->AppNumInClusters)
   \   000191   85..82       MOV     DPL,?V0
   \   000194   85..83       MOV     DPH,?V1
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   F8           MOV     R0,A
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   C8           XCH     A,R0
   \   00019F   2406         ADD     A,#0x6
   \   0001A1   F582         MOV     DPL,A
   \   0001A3   C8           XCH     A,R0
   \   0001A4   3400         ADDC    A,#0x0
   \   0001A6   F583         MOV     DPH,A
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   7003         JNZ     $+5
   \   0001AB   02....       LJMP    ??MT_BuildEndpointDesc_5 & 0xFFFF
    462                {
    463                  epDesc->simpleDesc->pAppInClusterList = (uint16 *)
    464                            osal_mem_alloc((epDesc->simpleDesc->AppNumInClusters)*sizeof(uint16));
   \   0001AE                ; Setup parameters for call to function osal_mem_alloc
   \   0001AE   85..82       MOV     DPL,?V0
   \   0001B1   85..83       MOV     DPH,?V1
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   F8           MOV     R0,A
   \   0001B9   A3           INC     DPTR
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   C8           XCH     A,R0
   \   0001BC   2406         ADD     A,#0x6
   \   0001BE   F582         MOV     DPL,A
   \   0001C0   C8           XCH     A,R0
   \   0001C1   3400         ADDC    A,#0x0
   \   0001C3   F583         MOV     DPH,A
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   FA           MOV     R2,A
   \   0001C7   7B00         MOV     R3,#0x0
   \   0001C9   EA           MOV     A,R2
   \   0001CA   75F002       MOV     B,#0x2
   \   0001CD   A4           MUL     AB
   \   0001CE   CA           XCH     A,R2
   \   0001CF   A8F0         MOV     R0,B
   \   0001D1   75F000       MOV     B,#0x0
   \   0001D4   A4           MUL     AB
   \   0001D5   28           ADD     A,R0
   \   0001D6   F8           MOV     R0,A
   \   0001D7   75F002       MOV     B,#0x2
   \   0001DA   EB           MOV     A,R3
   \   0001DB   A4           MUL     AB
   \   0001DC   28           ADD     A,R0
   \   0001DD   FB           MOV     R3,A
   \   0001DE   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001E1   8A..         MOV     ?V4,R2
   \   0001E3   8B..         MOV     ?V5,R3
   \   0001E5   AA..         MOV     R2,?V4
   \   0001E7   AB..         MOV     R3,?V5
   \   0001E9   85..82       MOV     DPL,?V0
   \   0001EC   85..83       MOV     DPH,?V1
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   F8           MOV     R0,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   C8           XCH     A,R0
   \   0001F7   2407         ADD     A,#0x7
   \   0001F9   F582         MOV     DPL,A
   \   0001FB   C8           XCH     A,R0
   \   0001FC   3400         ADDC    A,#0x0
   \   0001FE   F583         MOV     DPH,A
   \   000200   EA           MOV     A,R2
   \   000201   F0           MOVX    @DPTR,A
   \   000202   A3           INC     DPTR
   \   000203   EB           MOV     A,R3
   \   000204   F0           MOVX    @DPTR,A
    465                  if ( epDesc->simpleDesc->pAppInClusterList )
   \   000205   85..82       MOV     DPL,?V0
   \   000208   85..83       MOV     DPH,?V1
   \   00020B   A3           INC     DPTR
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   F8           MOV     R0,A
   \   000210   A3           INC     DPTR
   \   000211   E0           MOVX    A,@DPTR
   \   000212   C8           XCH     A,R0
   \   000213   2407         ADD     A,#0x7
   \   000215   F582         MOV     DPL,A
   \   000217   C8           XCH     A,R0
   \   000218   3400         ADDC    A,#0x0
   \   00021A   F583         MOV     DPH,A
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F8           MOV     R0,A
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F9           MOV     R1,A
   \   000221   E8           MOV     A,R0
   \   000222   49           ORL     A,R1
   \   000223   7003         JNZ     $+5
   \   000225   02....       LJMP    ??MT_BuildEndpointDesc_6 & 0xFFFF
    466                  {
    467                    for (i=0; i<(epDesc->simpleDesc->AppNumInClusters); i++)
   \   000228   75..00       MOV     ?V3,#0x0
   \                     ??MT_BuildEndpointDesc_7:
   \   00022B   85..82       MOV     DPL,?V0
   \   00022E   85..83       MOV     DPH,?V1
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   E0           MOVX    A,@DPTR
   \   000235   F8           MOV     R0,A
   \   000236   A3           INC     DPTR
   \   000237   E0           MOVX    A,@DPTR
   \   000238   C8           XCH     A,R0
   \   000239   2406         ADD     A,#0x6
   \   00023B   F582         MOV     DPL,A
   \   00023D   C8           XCH     A,R0
   \   00023E   3400         ADDC    A,#0x0
   \   000240   F583         MOV     DPH,A
   \   000242   E0           MOVX    A,@DPTR
   \   000243   F8           MOV     R0,A
   \   000244   E5..         MOV     A,?V3
   \   000246   C3           CLR     C
   \   000247   98           SUBB    A,R0
   \   000248   5068         JNC     ??MT_BuildEndpointDesc_5
    468                    {
    469                      epDesc->simpleDesc->pAppInClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   00024A   8E82         MOV     DPL,R6
   \   00024C   8F83         MOV     DPH,R7
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   FA           MOV     R2,A
   \   000250   7B00         MOV     R3,#0x0
   \   000252   8E82         MOV     DPL,R6
   \   000254   8F83         MOV     DPH,R7
   \   000256   A3           INC     DPTR
   \   000257   E0           MOVX    A,@DPTR
   \   000258   F8           MOV     R0,A
   \   000259   7900         MOV     R1,#0x0
   \   00025B   E4           CLR     A
   \   00025C   C8           XCH     A,R0
   \   00025D   F9           MOV     R1,A
   \   00025E   EA           MOV     A,R2
   \   00025F   28           ADD     A,R0
   \   000260   FC           MOV     R4,A
   \   000261   EB           MOV     A,R3
   \   000262   39           ADDC    A,R1
   \   000263   FD           MOV     R5,A
   \   000264   AA..         MOV     R2,?V3
   \   000266   7B00         MOV     R3,#0x0
   \   000268   EA           MOV     A,R2
   \   000269   75F002       MOV     B,#0x2
   \   00026C   A4           MUL     AB
   \   00026D   CA           XCH     A,R2
   \   00026E   A8F0         MOV     R0,B
   \   000270   75F000       MOV     B,#0x0
   \   000273   A4           MUL     AB
   \   000274   28           ADD     A,R0
   \   000275   F8           MOV     R0,A
   \   000276   75F002       MOV     B,#0x2
   \   000279   EB           MOV     A,R3
   \   00027A   A4           MUL     AB
   \   00027B   28           ADD     A,R0
   \   00027C   FB           MOV     R3,A
   \   00027D   85..82       MOV     DPL,?V0
   \   000280   85..83       MOV     DPH,?V1
   \   000283   A3           INC     DPTR
   \   000284   A3           INC     DPTR
   \   000285   A3           INC     DPTR
   \   000286   E0           MOVX    A,@DPTR
   \   000287   F8           MOV     R0,A
   \   000288   A3           INC     DPTR
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   C8           XCH     A,R0
   \   00028B   2407         ADD     A,#0x7
   \   00028D   F582         MOV     DPL,A
   \   00028F   C8           XCH     A,R0
   \   000290   3400         ADDC    A,#0x0
   \   000292   F583         MOV     DPH,A
   \   000294   E0           MOVX    A,@DPTR
   \   000295   2A           ADD     A,R2
   \   000296   F8           MOV     R0,A
   \   000297   A3           INC     DPTR
   \   000298   E0           MOVX    A,@DPTR
   \   000299   3B           ADDC    A,R3
   \   00029A   8882         MOV     DPL,R0
   \   00029C   F583         MOV     DPH,A
   \   00029E   EC           MOV     A,R4
   \   00029F   F0           MOVX    @DPTR,A
   \   0002A0   A3           INC     DPTR
   \   0002A1   ED           MOV     A,R5
   \   0002A2   F0           MOVX    @DPTR,A
    470                      pBuf += 2;
   \   0002A3   EE           MOV     A,R6
   \   0002A4   2402         ADD     A,#0x2
   \   0002A6   FE           MOV     R6,A
   \   0002A7   5001         JNC     ??MT_BuildEndpointDesc_8
   \   0002A9   0F           INC     R7
    471                    }
   \                     ??MT_BuildEndpointDesc_8:
   \   0002AA   05..         INC     ?V3
   \   0002AC   02....       LJMP    ??MT_BuildEndpointDesc_7 & 0xFFFF
    472                  }
    473                  else
    474                  {
    475                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_6:
   \   0002AF   75..10       MOV     ?V2,#0x10
    476                  }
    477                }
    478          
    479                /* AppNumOutClusters */
    480                epDesc->simpleDesc->AppNumOutClusters = *pBuf++;
   \                     ??MT_BuildEndpointDesc_5:
   \   0002B2   8E82         MOV     DPL,R6
   \   0002B4   8F83         MOV     DPH,R7
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   C0E0         PUSH    A
   \   0002B9   85..82       MOV     DPL,?V0
   \   0002BC   85..83       MOV     DPH,?V1
   \   0002BF   A3           INC     DPTR
   \   0002C0   A3           INC     DPTR
   \   0002C1   A3           INC     DPTR
   \   0002C2   E0           MOVX    A,@DPTR
   \   0002C3   F8           MOV     R0,A
   \   0002C4   A3           INC     DPTR
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   C8           XCH     A,R0
   \   0002C7   2409         ADD     A,#0x9
   \   0002C9   F582         MOV     DPL,A
   \   0002CB   C8           XCH     A,R0
   \   0002CC   3400         ADDC    A,#0x0
   \   0002CE   F583         MOV     DPH,A
   \   0002D0   D0E0         POP     A
   \   0002D2   F0           MOVX    @DPTR,A
   \   0002D3   8E82         MOV     DPL,R6
   \   0002D5   8F83         MOV     DPH,R7
   \   0002D7   A3           INC     DPTR
   \   0002D8   AE82         MOV     R6,DPL
   \   0002DA   AF83         MOV     R7,DPH
    481                if (epDesc->simpleDesc->AppNumOutClusters)
   \   0002DC   85..82       MOV     DPL,?V0
   \   0002DF   85..83       MOV     DPH,?V1
   \   0002E2   A3           INC     DPTR
   \   0002E3   A3           INC     DPTR
   \   0002E4   A3           INC     DPTR
   \   0002E5   E0           MOVX    A,@DPTR
   \   0002E6   F8           MOV     R0,A
   \   0002E7   A3           INC     DPTR
   \   0002E8   E0           MOVX    A,@DPTR
   \   0002E9   C8           XCH     A,R0
   \   0002EA   2409         ADD     A,#0x9
   \   0002EC   F582         MOV     DPL,A
   \   0002EE   C8           XCH     A,R0
   \   0002EF   3400         ADDC    A,#0x0
   \   0002F1   F583         MOV     DPH,A
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   7003         JNZ     $+5
   \   0002F6   02....       LJMP    ??MT_BuildEndpointDesc_9 & 0xFFFF
    482                {
    483                  epDesc->simpleDesc->pAppOutClusterList = (uint16 *)
    484                                    osal_mem_alloc((epDesc->simpleDesc->AppNumOutClusters)*sizeof(uint16));
   \   0002F9                ; Setup parameters for call to function osal_mem_alloc
   \   0002F9   85..82       MOV     DPL,?V0
   \   0002FC   85..83       MOV     DPH,?V1
   \   0002FF   A3           INC     DPTR
   \   000300   A3           INC     DPTR
   \   000301   A3           INC     DPTR
   \   000302   E0           MOVX    A,@DPTR
   \   000303   F8           MOV     R0,A
   \   000304   A3           INC     DPTR
   \   000305   E0           MOVX    A,@DPTR
   \   000306   C8           XCH     A,R0
   \   000307   2409         ADD     A,#0x9
   \   000309   F582         MOV     DPL,A
   \   00030B   C8           XCH     A,R0
   \   00030C   3400         ADDC    A,#0x0
   \   00030E   F583         MOV     DPH,A
   \   000310   E0           MOVX    A,@DPTR
   \   000311   FA           MOV     R2,A
   \   000312   7B00         MOV     R3,#0x0
   \   000314   EA           MOV     A,R2
   \   000315   75F002       MOV     B,#0x2
   \   000318   A4           MUL     AB
   \   000319   CA           XCH     A,R2
   \   00031A   A8F0         MOV     R0,B
   \   00031C   75F000       MOV     B,#0x0
   \   00031F   A4           MUL     AB
   \   000320   28           ADD     A,R0
   \   000321   F8           MOV     R0,A
   \   000322   75F002       MOV     B,#0x2
   \   000325   EB           MOV     A,R3
   \   000326   A4           MUL     AB
   \   000327   28           ADD     A,R0
   \   000328   FB           MOV     R3,A
   \   000329   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00032C   8A..         MOV     ?V4,R2
   \   00032E   8B..         MOV     ?V5,R3
   \   000330   AA..         MOV     R2,?V4
   \   000332   AB..         MOV     R3,?V5
   \   000334   85..82       MOV     DPL,?V0
   \   000337   85..83       MOV     DPH,?V1
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   E0           MOVX    A,@DPTR
   \   00033E   F8           MOV     R0,A
   \   00033F   A3           INC     DPTR
   \   000340   E0           MOVX    A,@DPTR
   \   000341   C8           XCH     A,R0
   \   000342   240A         ADD     A,#0xa
   \   000344   F582         MOV     DPL,A
   \   000346   C8           XCH     A,R0
   \   000347   3400         ADDC    A,#0x0
   \   000349   F583         MOV     DPH,A
   \   00034B   EA           MOV     A,R2
   \   00034C   F0           MOVX    @DPTR,A
   \   00034D   A3           INC     DPTR
   \   00034E   EB           MOV     A,R3
   \   00034F   F0           MOVX    @DPTR,A
    485                  if (epDesc->simpleDesc->pAppOutClusterList)
   \   000350   85..82       MOV     DPL,?V0
   \   000353   85..83       MOV     DPH,?V1
   \   000356   A3           INC     DPTR
   \   000357   A3           INC     DPTR
   \   000358   A3           INC     DPTR
   \   000359   E0           MOVX    A,@DPTR
   \   00035A   F8           MOV     R0,A
   \   00035B   A3           INC     DPTR
   \   00035C   E0           MOVX    A,@DPTR
   \   00035D   C8           XCH     A,R0
   \   00035E   240A         ADD     A,#0xa
   \   000360   F582         MOV     DPL,A
   \   000362   C8           XCH     A,R0
   \   000363   3400         ADDC    A,#0x0
   \   000365   F583         MOV     DPH,A
   \   000367   E0           MOVX    A,@DPTR
   \   000368   F8           MOV     R0,A
   \   000369   A3           INC     DPTR
   \   00036A   E0           MOVX    A,@DPTR
   \   00036B   F9           MOV     R1,A
   \   00036C   E8           MOV     A,R0
   \   00036D   49           ORL     A,R1
   \   00036E   7003         JNZ     $+5
   \   000370   02....       LJMP    ??MT_BuildEndpointDesc_10 & 0xFFFF
    486                  {
    487                    for (i=0; i<(epDesc->simpleDesc->AppNumOutClusters); i++)
   \   000373   75..00       MOV     ?V3,#0x0
   \                     ??MT_BuildEndpointDesc_11:
   \   000376   85..82       MOV     DPL,?V0
   \   000379   85..83       MOV     DPH,?V1
   \   00037C   A3           INC     DPTR
   \   00037D   A3           INC     DPTR
   \   00037E   A3           INC     DPTR
   \   00037F   E0           MOVX    A,@DPTR
   \   000380   F8           MOV     R0,A
   \   000381   A3           INC     DPTR
   \   000382   E0           MOVX    A,@DPTR
   \   000383   C8           XCH     A,R0
   \   000384   2409         ADD     A,#0x9
   \   000386   F582         MOV     DPL,A
   \   000388   C8           XCH     A,R0
   \   000389   3400         ADDC    A,#0x0
   \   00038B   F583         MOV     DPH,A
   \   00038D   E0           MOVX    A,@DPTR
   \   00038E   F8           MOV     R0,A
   \   00038F   E5..         MOV     A,?V3
   \   000391   C3           CLR     C
   \   000392   98           SUBB    A,R0
   \   000393   5068         JNC     ??MT_BuildEndpointDesc_9
    488                    {
    489                      epDesc->simpleDesc->pAppOutClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   000395   8E82         MOV     DPL,R6
   \   000397   8F83         MOV     DPH,R7
   \   000399   E0           MOVX    A,@DPTR
   \   00039A   FA           MOV     R2,A
   \   00039B   7B00         MOV     R3,#0x0
   \   00039D   8E82         MOV     DPL,R6
   \   00039F   8F83         MOV     DPH,R7
   \   0003A1   A3           INC     DPTR
   \   0003A2   E0           MOVX    A,@DPTR
   \   0003A3   F8           MOV     R0,A
   \   0003A4   7900         MOV     R1,#0x0
   \   0003A6   E4           CLR     A
   \   0003A7   C8           XCH     A,R0
   \   0003A8   F9           MOV     R1,A
   \   0003A9   EA           MOV     A,R2
   \   0003AA   28           ADD     A,R0
   \   0003AB   FC           MOV     R4,A
   \   0003AC   EB           MOV     A,R3
   \   0003AD   39           ADDC    A,R1
   \   0003AE   FD           MOV     R5,A
   \   0003AF   AA..         MOV     R2,?V3
   \   0003B1   7B00         MOV     R3,#0x0
   \   0003B3   EA           MOV     A,R2
   \   0003B4   75F002       MOV     B,#0x2
   \   0003B7   A4           MUL     AB
   \   0003B8   CA           XCH     A,R2
   \   0003B9   A8F0         MOV     R0,B
   \   0003BB   75F000       MOV     B,#0x0
   \   0003BE   A4           MUL     AB
   \   0003BF   28           ADD     A,R0
   \   0003C0   F8           MOV     R0,A
   \   0003C1   75F002       MOV     B,#0x2
   \   0003C4   EB           MOV     A,R3
   \   0003C5   A4           MUL     AB
   \   0003C6   28           ADD     A,R0
   \   0003C7   FB           MOV     R3,A
   \   0003C8   85..82       MOV     DPL,?V0
   \   0003CB   85..83       MOV     DPH,?V1
   \   0003CE   A3           INC     DPTR
   \   0003CF   A3           INC     DPTR
   \   0003D0   A3           INC     DPTR
   \   0003D1   E0           MOVX    A,@DPTR
   \   0003D2   F8           MOV     R0,A
   \   0003D3   A3           INC     DPTR
   \   0003D4   E0           MOVX    A,@DPTR
   \   0003D5   C8           XCH     A,R0
   \   0003D6   240A         ADD     A,#0xa
   \   0003D8   F582         MOV     DPL,A
   \   0003DA   C8           XCH     A,R0
   \   0003DB   3400         ADDC    A,#0x0
   \   0003DD   F583         MOV     DPH,A
   \   0003DF   E0           MOVX    A,@DPTR
   \   0003E0   2A           ADD     A,R2
   \   0003E1   F8           MOV     R0,A
   \   0003E2   A3           INC     DPTR
   \   0003E3   E0           MOVX    A,@DPTR
   \   0003E4   3B           ADDC    A,R3
   \   0003E5   8882         MOV     DPL,R0
   \   0003E7   F583         MOV     DPH,A
   \   0003E9   EC           MOV     A,R4
   \   0003EA   F0           MOVX    @DPTR,A
   \   0003EB   A3           INC     DPTR
   \   0003EC   ED           MOV     A,R5
   \   0003ED   F0           MOVX    @DPTR,A
    490                      pBuf += 2;
   \   0003EE   EE           MOV     A,R6
   \   0003EF   2402         ADD     A,#0x2
   \   0003F1   FE           MOV     R6,A
   \   0003F2   5001         JNC     ??MT_BuildEndpointDesc_12
   \   0003F4   0F           INC     R7
    491                    }
   \                     ??MT_BuildEndpointDesc_12:
   \   0003F5   05..         INC     ?V3
   \   0003F7   02....       LJMP    ??MT_BuildEndpointDesc_11 & 0xFFFF
    492                  }
    493                  else
    494                  {
    495                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_10:
   \   0003FA   75..10       MOV     ?V2,#0x10
    496                  }
    497                }
    498          
    499                /* if any list cannot be allocated...free all */
    500                if ( ret == ZMemError )
   \                     ??MT_BuildEndpointDesc_9:
   \   0003FD   7410         MOV     A,#0x10
   \   0003FF   65..         XRL     A,?V2
   \   000401   6003         JZ      $+5
   \   000403   02....       LJMP    ??MT_BuildEndpointDesc_1 & 0xFFFF
    501                {
    502                  if (epDesc->simpleDesc->pAppInClusterList)
   \   000406   85..82       MOV     DPL,?V0
   \   000409   85..83       MOV     DPH,?V1
   \   00040C   A3           INC     DPTR
   \   00040D   A3           INC     DPTR
   \   00040E   A3           INC     DPTR
   \   00040F   E0           MOVX    A,@DPTR
   \   000410   F8           MOV     R0,A
   \   000411   A3           INC     DPTR
   \   000412   E0           MOVX    A,@DPTR
   \   000413   C8           XCH     A,R0
   \   000414   2407         ADD     A,#0x7
   \   000416   F582         MOV     DPL,A
   \   000418   C8           XCH     A,R0
   \   000419   3400         ADDC    A,#0x0
   \   00041B   F583         MOV     DPH,A
   \   00041D   E0           MOVX    A,@DPTR
   \   00041E   F8           MOV     R0,A
   \   00041F   A3           INC     DPTR
   \   000420   E0           MOVX    A,@DPTR
   \   000421   F9           MOV     R1,A
   \   000422   E8           MOV     A,R0
   \   000423   49           ORL     A,R1
   \   000424   601F         JZ      ??MT_BuildEndpointDesc_13
    503                  {
    504                    osal_mem_free(epDesc->simpleDesc->pAppInClusterList);
   \   000426                ; Setup parameters for call to function osal_mem_free
   \   000426   85..82       MOV     DPL,?V0
   \   000429   85..83       MOV     DPH,?V1
   \   00042C   A3           INC     DPTR
   \   00042D   A3           INC     DPTR
   \   00042E   A3           INC     DPTR
   \   00042F   E0           MOVX    A,@DPTR
   \   000430   F8           MOV     R0,A
   \   000431   A3           INC     DPTR
   \   000432   E0           MOVX    A,@DPTR
   \   000433   C8           XCH     A,R0
   \   000434   2407         ADD     A,#0x7
   \   000436   F582         MOV     DPL,A
   \   000438   C8           XCH     A,R0
   \   000439   3400         ADDC    A,#0x0
   \   00043B   F583         MOV     DPH,A
   \   00043D   E0           MOVX    A,@DPTR
   \   00043E   FA           MOV     R2,A
   \   00043F   A3           INC     DPTR
   \   000440   E0           MOVX    A,@DPTR
   \   000441   FB           MOV     R3,A
   \   000442   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    505                  }
    506          
    507                  if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??MT_BuildEndpointDesc_13:
   \   000445   85..82       MOV     DPL,?V0
   \   000448   85..83       MOV     DPH,?V1
   \   00044B   A3           INC     DPTR
   \   00044C   A3           INC     DPTR
   \   00044D   A3           INC     DPTR
   \   00044E   E0           MOVX    A,@DPTR
   \   00044F   F8           MOV     R0,A
   \   000450   A3           INC     DPTR
   \   000451   E0           MOVX    A,@DPTR
   \   000452   C8           XCH     A,R0
   \   000453   2409         ADD     A,#0x9
   \   000455   F582         MOV     DPL,A
   \   000457   C8           XCH     A,R0
   \   000458   3400         ADDC    A,#0x0
   \   00045A   F583         MOV     DPH,A
   \   00045C   E0           MOVX    A,@DPTR
   \   00045D   601F         JZ      ??MT_BuildEndpointDesc_14
    508                  {
    509                    osal_mem_free(epDesc->simpleDesc->pAppOutClusterList);
   \   00045F                ; Setup parameters for call to function osal_mem_free
   \   00045F   85..82       MOV     DPL,?V0
   \   000462   85..83       MOV     DPH,?V1
   \   000465   A3           INC     DPTR
   \   000466   A3           INC     DPTR
   \   000467   A3           INC     DPTR
   \   000468   E0           MOVX    A,@DPTR
   \   000469   F8           MOV     R0,A
   \   00046A   A3           INC     DPTR
   \   00046B   E0           MOVX    A,@DPTR
   \   00046C   C8           XCH     A,R0
   \   00046D   240A         ADD     A,#0xa
   \   00046F   F582         MOV     DPL,A
   \   000471   C8           XCH     A,R0
   \   000472   3400         ADDC    A,#0x0
   \   000474   F583         MOV     DPH,A
   \   000476   E0           MOVX    A,@DPTR
   \   000477   FA           MOV     R2,A
   \   000478   A3           INC     DPTR
   \   000479   E0           MOVX    A,@DPTR
   \   00047A   FB           MOV     R3,A
   \   00047B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    510                  }
    511          
    512                  osal_mem_free(epDesc->simpleDesc);
   \                     ??MT_BuildEndpointDesc_14:
   \   00047E                ; Setup parameters for call to function osal_mem_free
   \   00047E   85..82       MOV     DPL,?V0
   \   000481   85..83       MOV     DPH,?V1
   \   000484   A3           INC     DPTR
   \   000485   A3           INC     DPTR
   \   000486   A3           INC     DPTR
   \   000487   E0           MOVX    A,@DPTR
   \   000488   FA           MOV     R2,A
   \   000489   A3           INC     DPTR
   \   00048A   E0           MOVX    A,@DPTR
   \   00048B   FB           MOV     R3,A
   \   00048C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00048F   8003         SJMP    ??MT_BuildEndpointDesc_1
    513                }
    514              }
    515              else
    516              {
    517                ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_2:
   \   000491   75..10       MOV     ?V2,#0x10
    518              }
    519            }
    520          
    521            return ret;
   \                     ??MT_BuildEndpointDesc_1:
   \   000494   A9..         MOV     R1,?V2
   \   000496   7F08         MOV     R7,#0x8
   \   000498   02....       LJMP    ?BANKED_LEAVE_XDATA
    522          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildSPIMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildSPIMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildAndSendZToolResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildAndSendZToolResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MTProcessAppRspMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MTProcessAppRspMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ReverseBytes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ReverseBytes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Word2Buf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Word2Buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildEndpointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildEndpointDesc
    523          #endif
    524          /***************************************************************************************************
    525          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MTProcessAppRspMsg
        0      9   -> MT_BuildAndSendZToolResponse
      0     31   MT_BuildAndSendZToolResponse
        0     18   -> MT_BuildSPIMsg
        0     16   -> MT_TransportAlloc
        0     16   -> MT_TransportSend
      1     16   MT_BuildEndpointDesc
        0     16   -> afFindEndPointDesc
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1     37   MT_BuildSPIMsg
        0     19   -> osal_memcpy
      2      0   MT_Init
        2      0   -> MT_SysResetInd
      1     13   MT_ProcessIncoming
        0     13   -> MT_BuildAndSendZToolResponse
      1      9   MT_ReverseBytes
      1      9   MT_Word2Buf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      29  MTProcessAppRspMsg
       6  MTProcessAppRspMsg::?relay
      81  MT_BuildAndSendZToolResponse
       6  MT_BuildAndSendZToolResponse::?relay
    1179  MT_BuildEndpointDesc
       6  MT_BuildEndpointDesc::?relay
     128  MT_BuildSPIMsg
       6  MT_BuildSPIMsg::?relay
      14  MT_Init
       6  MT_Init::?relay
     254  MT_ProcessIncoming
       6  MT_ProcessIncoming::?relay
      94  MT_ReverseBytes
       6  MT_ReverseBytes::?relay
      87  MT_Word2Buf
       6  MT_Word2Buf::?relay
       1  debugCompId
       1  debugThreshold
      22  mtProcessIncoming

 
 1 866 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    24 bytes in segment XDATA_Z
 
 1 914 bytes of CODE  memory
    24 bytes of XDATA memory

Errors: none
Warnings: none
