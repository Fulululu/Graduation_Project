###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:33
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\design\ZStack-2.5.1a\Components\stack\zdo\ZDSecMgr.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\stack\zdo\ZDSecMgr.c -D
#        NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
#        -D xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\ZDSecMgr.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\ZDSecMgr.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\stack\zdo\ZDSecMgr.c
      1          /******************************************************************************
      2            Filename:       ZDSecMgr.c
      3            Revised:        $Date: 2012-02-16 13:22:48 -0800 (Thu, 16 Feb 2012) $
      4            Revision:       $Revision: 29339 $
      5          
      6            Description:    The ZigBee Device Security Manager.
      7          
      8          
      9            Copyright 2005-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComdef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_NV.h"
     51          #include "ZGlobals.h"
     52          #include "ssp.h"
     53          #include "nwk_globals.h"
     54          #include "nwk.h"
     55          #include "NLMEDE.h"
     56          #include "AddrMgr.h"
     57          #include "AssocList.h"
     58          #include "APSMEDE.h"
     59          #include "ZDConfig.h"
     60          #include "ZDSecMgr.h"
     61          
     62          /******************************************************************************
     63           * CONSTANTS
     64           */
     65          // maximum number of devices managed by this Security Manager
     66          #if !defined ( ZDSECMGR_DEVICE_MAX )
     67            #define ZDSECMGR_DEVICE_MAX 3
     68          #endif
     69          
     70          // total number of preconfigured devices (EXT address, MASTER key)
     71          //devtag.pro.security
     72          //#define ZDSECMGR_PRECONFIG_MAX ZDSECMGR_DEVICE_MAX
     73          #define ZDSECMGR_PRECONFIG_MAX 0
     74          
     75          // maximum number of MASTER keys this device may hold
     76          #define ZDSECMGR_MASTERKEY_MAX ZDSECMGR_DEVICE_MAX
     77          
     78          // maximum number of LINK keys this device may store
     79          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     80          
     81          // total number of devices under control - authentication, SKKE, etc.
     82          #define ZDSECMGR_CTRL_MAX ZDSECMGR_DEVICE_MAX
     83          
     84          // total number of stored devices
     85          #if !defined ( ZDSECMGR_STORED_DEVICES )
     86            #define ZDSECMGR_STORED_DEVICES 3
     87          #endif
     88          
     89          // Total number of preconfigured trust center link key
     90          #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
     91            #define ZDSECMGR_TC_DEVICE_MAX 1
     92          #endif
     93          
     94          #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
     95            #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
     96          #endif
     97          
     98          #define ZDSECMGR_CTRL_NONE       0
     99          #define ZDSECMGR_CTRL_INIT       1
    100          #define ZDSECMGR_CTRL_TK_MASTER  2
    101          #define ZDSECMGR_CTRL_SKKE_INIT  3
    102          #define ZDSECMGR_CTRL_SKKE_WAIT  4
    103          #define ZDSECMGR_CTRL_SKKE_DONE  5
    104          #define ZDSECMGR_CTRL_SKKE_FAIL  6
    105          #define ZDSECMGR_CTRL_TK_NWK     7
    106          
    107          #define ZDSECMGR_CTRL_BASE_CNTR      1
    108          #define ZDSECMGR_CTRL_SKKE_INIT_CNTR 1
    109          #define ZDSECMGR_CTRL_TK_NWK_CNTR    1
    110          
    111          // set SKA slot maximum
    112          #define ZDSECMGR_SKA_SLOT_MAX 1
    113          
    114          // APSME Stub Implementations
    115          #define ZDSecMgrMasterKeyGet   APSME_MasterKeyGet
    116          #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
    117          #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
    118          #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
    119          #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
    120          
    121          /******************************************************************************
    122           * TYPEDEFS
    123           */
    124          typedef struct
    125          {
    126            uint8 extAddr[Z_EXTADDR_LEN];
    127            uint8 key[SEC_KEY_LEN];
    128          } ZDSecMgrPreConfigData_t;
    129          
    130          typedef struct
    131          {
    132            uint16 ami;
    133            uint8  key[SEC_KEY_LEN];
    134          } ZDSecMgrMasterKeyData_t;
    135          
    136          typedef struct
    137          {
    138            uint16            ami;
    139            uint16            keyNvId;   // index to the Link Key table in NV
    140            ZDSecMgr_Authentication_Option authenticateOption;
    141          } ZDSecMgrEntry_t;
    142          
    143          typedef struct
    144          {
    145            ZDSecMgrEntry_t* entry;
    146            uint16           parentAddr;
    147            uint8            secure;
    148            uint8            state;
    149            uint8            cntr;
    150          } ZDSecMgrCtrl_t;
    151          
    152          typedef struct
    153          {
    154            uint16          nwkAddr;
    155            uint8*          extAddr;
    156            uint16          parentAddr;
    157            uint8           secure;
    158            uint8           devStatus;
    159            ZDSecMgrCtrl_t* ctrl;
    160          } ZDSecMgrDevice_t;
    161          
    162          /******************************************************************************
    163           * LOCAL VARIABLES
    164           */
    165          #if 0 // Taken out because the following functionality is only used for test
    166                // purpose. A more efficient (above) way is used. It can be put
    167                // back in if customers request for a white/black list feature.
    168          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    169          {
    170            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    171            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    172            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    173          };
    174          #endif
    175          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    177            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    178          
    179          // Key data is put in CONST area for security reasons

   \                                 In  segment CODE_C, align 1
    180          CONST uint8 ZDSecMgrTCMasterKey[SEC_KEY_LEN] =
   \                     ZDSecMgrTCMasterKey:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   89           DB 137
   \   000009   67           DB 103
   \   00000A   45           DB 69
   \   00000B   23           DB 35
   \   00000C   01           DB 1
   \   00000D   EF           DB 239
   \   00000E   CD           DB 205
   \   00000F   AB           DB 171
    181            {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    182             0x89,0x67,0x45,0x23,0x01,0xEF,0xCD,0xAB};
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    185          
    186          //devtag.pro.security - remove this
    187          #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
    188          const ZDSecMgrPreConfigData_t ZDSecMgrPreConfigData[ZDSECMGR_PRECONFIG_MAX] =
    189          {
    190            //---------------------------------------------------------------------------
    191            // DEVICE A
    192            //---------------------------------------------------------------------------
    193            {
    194              // extAddr
    195              {0x7C,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
    196          
    197              // key
    198              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    199               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
    200            },
    201            //---------------------------------------------------------------------------
    202            // DEVICE B
    203            //---------------------------------------------------------------------------
    204            {
    205              // extAddr
    206              {0x84,0x03,0x00,0x00,0x00,0x4B,0x12,0x00},
    207          
    208              // key
    209              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    210               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
    211            },
    212            //---------------------------------------------------------------------------
    213            // DEVICE C
    214            //---------------------------------------------------------------------------
    215            {
    216              // extAddr
    217              {0x3E,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
    218          
    219              // key
    220              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    221               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
    222            },
    223          };
    224          #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
    225          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    226          ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    227          ZDSecMgrCtrl_t*  ZDSecMgrCtrlData = NULL;
   \                     ZDSecMgrCtrlData:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    228          void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr );
    229          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    230          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    231          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    232          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    233          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    234          APSME_TCLinkKey_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 32
   \   000020                REQUIRE __INIT_XDATA_Z
    235          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    236          APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
   \                     ApsLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    237          APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
   \                     TCLinkKeyFrmCntr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    238          
    239          /******************************************************************************
    240           * PRIVATE FUNCTIONS
    241           *
    242           *   ZDSecMgrMasterKeyInit
    243           *   ZDSecMgrAddrStore
    244           *   ZDSecMgrExtAddrStore
    245           *   ZDSecMgrExtAddrLookup
    246           *   ZDSecMgrMasterKeyLookup
    247           *   ZDSecMgrMasterKeyStore
    248           *   ZDSecMgrEntryInit
    249           *   ZDSecMgrEntryLookup
    250           *   ZDSecMgrEntryLookupAMI
    251           *   ZDSecMgrEntryLookupExt
    252           *   ZDSecMgrEntryLookupExtGetIndex
    253           *   ZDSecMgrEntryFree
    254           *   ZDSecMgrEntryNew
    255           *   ZDSecMgrCtrlInit
    256           *   ZDSecMgrCtrlRelease
    257           *   ZDSecMgrCtrlLookup
    258           *   ZDSecMgrCtrlSet
    259           *   ZDSecMgrCtrlAdd
    260           *   ZDSecMgrCtrlTerm
    261           *   ZDSecMgrCtrlReset
    262           *   ZDSecMgrMasterKeyLoad
    263           *   ZDSecMgrAppKeyGet
    264           *   ZDSecMgrAppKeyReq
    265           *   ZDSecMgrEstablishKey
    266           *   ZDSecMgrSendMasterKey
    267           *   ZDSecMgrSendNwkKey
    268           *   ZDSecMgrDeviceEntryRemove
    269           *   ZDSecMgrDeviceEntryAdd
    270           *   ZDSecMgrDeviceCtrlHandler
    271           *   ZDSecMgrDeviceCtrlSetup
    272           *   ZDSecMgrDeviceCtrlUpdate
    273           *   ZDSecMgrDeviceRemove
    274           *   ZDSecMgrDeviceValidateSKKE
    275           *   ZDSecMgrDeviceValidateRM
    276           *   ZDSecMgrDeviceValidateCM
    277           *   ZDSecMgrDeviceValidate
    278           *   ZDSecMgrDeviceJoin
    279           *   ZDSecMgrDeviceJoinDirect
    280           *   ZDSecMgrDeviceJoinFwd
    281           *   ZDSecMgrDeviceNew
    282           *   ZDSecMgrAssocDeviceAuth
    283           *   ZDSecMgrAuthInitiate
    284           *   ZDSecMgrAuthNwkKey
    285           *   APSME_TCLinkKeyInit
    286           *   APSME_IsDefaultTCLK
    287           */
    288          //-----------------------------------------------------------------------------
    289          // master key data
    290          //-----------------------------------------------------------------------------
    291          void ZDSecMgrMasterKeyInit( void );
    292          
    293          //-----------------------------------------------------------------------------
    294          // address management
    295          //-----------------------------------------------------------------------------
    296          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    297          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    298          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    299          
    300          //-----------------------------------------------------------------------------
    301          // Trust Center management
    302          //-----------------------------------------------------------------------------
    303          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
    304          void ZDSecMgrTCDataLoad( uint8* extAddr );
    305          
    306          //-----------------------------------------------------------------------------
    307          // MASTER key data
    308          //-----------------------------------------------------------------------------
    309          ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint16* pKeyNvId );
    310          ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key );
    311          
    312          //-----------------------------------------------------------------------------
    313          // entry data
    314          //-----------------------------------------------------------------------------
    315          void ZDSecMgrEntryInit(uint8 state);
    316          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    317          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    318          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    319          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
    320          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
    321          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    322          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    323          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    324          void ZDSecMgrApsLinkKeyInit(void);
    325          #if defined ( NV_RESTORE )
    326          static void ZDSecMgrWriteNV(void);
    327          static void ZDSecMgrRestoreFromNV(void);
    328          static void ZDSecMgrUpdateNV( uint16 index );
    329          #endif
    330          
    331          //-----------------------------------------------------------------------------
    332          // control data
    333          //-----------------------------------------------------------------------------
    334          void ZDSecMgrCtrlInit( void );
    335          void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl );
    336          void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl );
    337          void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
    338                                ZDSecMgrEntry_t*  entry,
    339                                ZDSecMgrCtrl_t*   ctrl );
    340          ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry );
    341          void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry );
    342          ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device,
    343                                       ZDSecMgrEntry_t*  entry );
    344          
    345          //-----------------------------------------------------------------------------
    346          // key support
    347          //-----------------------------------------------------------------------------
    348          ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key );
    349          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    350                                       uint8*  initExtAddr,
    351                                       uint16  partNwkAddr,
    352                                       uint8*  partExtAddr,
    353                                       uint8** key,
    354                                       uint8*  keyType );
    355          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    356          ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device );
    357          ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device );
    358          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    359          void ZDSecMgrNwkKeyInit(uint8 setDefault);
    360          
    361          //-----------------------------------------------------------------------------
    362          // device entry
    363          //-----------------------------------------------------------------------------
    364          void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry );
    365          ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami );
    366          
    367          //-----------------------------------------------------------------------------
    368          // device control
    369          //-----------------------------------------------------------------------------
    370          void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device );
    371          void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device );
    372          void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state );
    373          
    374          //-----------------------------------------------------------------------------
    375          // device management
    376          //-----------------------------------------------------------------------------
    377          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    378          ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device );
    379          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    380          ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device );
    381          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    382          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    383          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    384          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    385          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    386          
    387          //-----------------------------------------------------------------------------
    388          // association management
    389          //-----------------------------------------------------------------------------
    390          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    391          
    392          //-----------------------------------------------------------------------------
    393          // authentication management
    394          //-----------------------------------------------------------------------------
    395          void ZDSecMgrAuthInitiate( uint8* responder );
    396          void ZDSecMgrAuthNwkKey( void );
    397          
    398          //-----------------------------------------------------------------------------
    399          // APSME function
    400          //-----------------------------------------------------------------------------
    401          void APSME_TCLinkKeyInit( uint8 setDefault );
    402          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    403          
    404          /******************************************************************************
    405           * @fn          ZDSecMgrMasterKeyInit                     ]
    406           *
    407           * @brief       Initialize master key data in NV
    408           *
    409           * @param       none
    410           *
    411           * @return      none
    412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void ZDSecMgrMasterKeyInit( void )
   \                     ZDSecMgrMasterKeyInit:
    414          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    415            uint16 index;
    416            ZDSecMgrMasterKeyData_t   masterKeyData;
    417          
    418            masterKeyData.ami = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   74FF         MOV     A,#-0x1
   \   000016   F0           MOVX    @DPTR,A
    419          
    420            osal_memset( &masterKeyData.key, 0x00, SEC_KEY_LEN );
   \   000017                ; Setup parameters for call to function osal_memset
   \   000017   7C10         MOV     R4,#0x10
   \   000019   7D00         MOV     R5,#0x0
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AA82         MOV     R2,DPL
   \   000024   AB83         MOV     R3,DPH
   \   000026   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    421          
    422            for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
   \   000029   7E00         MOV     R6,#0x0
   \   00002B   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrMasterKeyInit_0:
   \   00002D   C3           CLR     C
   \   00002E   EE           MOV     A,R6
   \   00002F   9403         SUBB    A,#0x3
   \   000031   EF           MOV     A,R7
   \   000032   9400         SUBB    A,#0x0
   \   000034   5058         JNC     ??ZDSecMgrMasterKeyInit_1
    423            {
    424              if ( osal_nv_item_init( (ZCD_NV_MASTER_KEY_DATA_START + index),
    425                                 sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData) == SUCCESS)
   \   000036                ; Setup parameters for call to function osal_nv_item_init
   \   000036   A8..         MOV     R0,?XSP + 0
   \   000038   A9..         MOV     R1,?XSP + 1
   \   00003A   88..         MOV     ?V0,R0
   \   00003C   89..         MOV     ?V1,R1
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C12         MOV     R4,#0x12
   \   000045   7D00         MOV     R5,#0x0
   \   000047   EE           MOV     A,R6
   \   000048   2401         ADD     A,#0x1
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   3403         ADDC    A,#0x3
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   702D         JNZ     ??ZDSecMgrMasterKeyInit_2
    426              {
    427                // the item already exists in NV just needs to be set to default values
    428                osal_nv_write( (ZCD_NV_MASTER_KEY_DATA_START + index), 0,
    429                                sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
   \   00005A                ; Setup parameters for call to function osal_nv_write
   \   00005A   A8..         MOV     R0,?XSP + 0
   \   00005C   A9..         MOV     R1,?XSP + 1
   \   00005E   88..         MOV     ?V0,R0
   \   000060   89..         MOV     ?V1,R1
   \   000062   78..         MOV     R0,#?V0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   75..12       MOV     ?V0,#0x12
   \   00006A   75..00       MOV     ?V1,#0x0
   \   00006D   78..         MOV     R0,#?V0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   7C00         MOV     R4,#0x0
   \   000074   7D00         MOV     R5,#0x0
   \   000076   EE           MOV     A,R6
   \   000077   2401         ADD     A,#0x1
   \   000079   FA           MOV     R2,A
   \   00007A   EF           MOV     A,R7
   \   00007B   3403         ADDC    A,#0x3
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   \   000086   E9           MOV     A,R1
    430              }
    431            }
   \                     ??ZDSecMgrMasterKeyInit_2:
   \   000087   0E           INC     R6
   \   000088   EE           MOV     A,R6
   \   000089   70A2         JNZ     ??ZDSecMgrMasterKeyInit_0
   \   00008B   0F           INC     R7
   \   00008C   809F         SJMP    ??ZDSecMgrMasterKeyInit_0
    432          }
   \                     ??ZDSecMgrMasterKeyInit_1:
   \   00008E   7412         MOV     A,#0x12
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   7F02         MOV     R7,#0x2
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    433          
    434          /******************************************************************************
    435           * @fn          ZDSecMgrAddrStore
    436           *
    437           * @brief       Store device addresses.
    438           *
    439           * @param       nwkAddr - [in] NWK address
    440           * @param       extAddr - [in] EXT address
    441           * @param       ami     - [out] Address Manager index
    442           *
    443           * @return      ZStatus_t
    444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    445          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    446          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V4,R4
   \   000010   8D..         MOV     ?V5,R5
   \   000012   741B         MOV     A,#0x1b
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
    447            ZStatus_t      status;
    448            AddrMgrEntry_t entry;
    449          
    450          
    451            // add entry
    452            entry.user    = ADDRMGR_USER_SECURITY;
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   7402         MOV     A,#0x2
   \   000024   F0           MOVX    @DPTR,A
    453            entry.nwkAddr = nwkAddr;
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E5..         MOV     A,?V2
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   E5..         MOV     A,?V3
   \   000030   F0           MOVX    @DPTR,A
    454            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000031                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000031   AC..         MOV     R4,?V4
   \   000033   AD..         MOV     R5,?V5
   \   000035   7403         MOV     A,#0x3
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   AA82         MOV     R2,DPL
   \   00003C   AB83         MOV     R3,DPH
   \   00003E   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    455          
    456            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000041                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000041   AA..         MOV     R2,?XSP + 0
   \   000043   AB..         MOV     R3,?XSP + 1
   \   000045   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000048   E9           MOV     A,R1
   \   000049   6401         XRL     A,#0x1
   \   00004B   7018         JNZ     ??ZDSecMgrAddrStore_0
    457            {
    458              // return successful results
    459              *ami   = entry.index;
   \   00004D   740B         MOV     A,#0xb
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F9           MOV     R1,A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
    460              status = ZSuccess;
   \   000060   75..00       MOV     ?V0,#0x0
   \   000063   8016         SJMP    ??ZDSecMgrAddrStore_1
    461            }
    462            else
    463            {
    464              // return failed results
    465              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   000065   740B         MOV     A,#0xb
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F8           MOV     R0,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E8           MOV     A,R0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
    466              status = ZNwkUnknownDevice;
   \   000078   75..C8       MOV     ?V0,#-0x38
    467            }
    468          
    469            return status;
   \                     ??ZDSecMgrAddrStore_1:
   \   00007B   A9..         MOV     R1,?V0
   \   00007D   740D         MOV     A,#0xd
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F06         MOV     R7,#0x6
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
    470          }
    471          
    472          /******************************************************************************
    473           * @fn          ZDSecMgrExtAddrStore
    474           *
    475           * @brief       Store EXT address.
    476           *
    477           * @param       extAddr - [in] EXT address
    478           * @param       ami     - [out] Address Manager index
    479           *
    480           * @return      ZStatus_t
    481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    483          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V4,R4
   \   000010   8D..         MOV     ?V5,R5
   \   000012   741B         MOV     A,#0x1b
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
    484            ZStatus_t      status;
    485            AddrMgrEntry_t entry;
    486          
    487          
    488            // add entry
    489            entry.user    = ADDRMGR_USER_SECURITY;
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   7402         MOV     A,#0x2
   \   000024   F0           MOVX    @DPTR,A
    490            entry.nwkAddr = nwkAddr;
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E5..         MOV     A,?V2
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   E5..         MOV     A,?V3
   \   000030   F0           MOVX    @DPTR,A
    491            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000031                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000031   AC..         MOV     R4,?V4
   \   000033   AD..         MOV     R5,?V5
   \   000035   7403         MOV     A,#0x3
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   AA82         MOV     R2,DPL
   \   00003C   AB83         MOV     R3,DPH
   \   00003E   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    492          
    493            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000041                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000041   AA..         MOV     R2,?XSP + 0
   \   000043   AB..         MOV     R3,?XSP + 1
   \   000045   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000048   E9           MOV     A,R1
   \   000049   6401         XRL     A,#0x1
   \   00004B   7018         JNZ     ??ZDSecMgrExtAddrStore_0
    494            {
    495              // return successful results
    496              *ami   = entry.index;
   \   00004D   740B         MOV     A,#0xb
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F9           MOV     R1,A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
    497              status = ZSuccess;
   \   000060   75..00       MOV     ?V0,#0x0
   \   000063   8016         SJMP    ??ZDSecMgrExtAddrStore_1
    498            }
    499            else
    500            {
    501              // return failed results
    502              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   000065   740B         MOV     A,#0xb
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F8           MOV     R0,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E8           MOV     A,R0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
    503              status = ZNwkUnknownDevice;
   \   000078   75..C8       MOV     ?V0,#-0x38
    504            }
    505          
    506            return status;
   \                     ??ZDSecMgrExtAddrStore_1:
   \   00007B   A9..         MOV     R1,?V0
   \   00007D   740D         MOV     A,#0xd
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F06         MOV     R7,#0x6
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
    507          }
    508          
    509          /******************************************************************************
    510           * @fn          ZDSecMgrExtAddrLookup
    511           *
    512           * @brief       Lookup index for specified EXT address.
    513           *
    514           * @param       extAddr - [in] EXT address
    515           * @param       ami     - [out] Address Manager index
    516           *
    517           * @return      ZStatus_t
    518           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    520          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    521            ZStatus_t      status;
    522            AddrMgrEntry_t entry;
    523          
    524          
    525            // lookup entry
    526            entry.user = ADDRMGR_USER_SECURITY;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   7402         MOV     A,#0x2
   \   00001A   F0           MOVX    @DPTR,A
    527            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   00001B                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001B   AC..         MOV     R4,?V0
   \   00001D   AD..         MOV     R5,?V1
   \   00001F   7403         MOV     A,#0x3
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   AA82         MOV     R2,DPL
   \   000026   AB83         MOV     R3,DPH
   \   000028   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    528          
    529            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   00002B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002B   AA..         MOV     R2,?XSP + 0
   \   00002D   AB..         MOV     R3,?XSP + 1
   \   00002F   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000032   E9           MOV     A,R1
   \   000033   6401         XRL     A,#0x1
   \   000035   7018         JNZ     ??ZDSecMgrExtAddrLookup_0
    530            {
    531              // return successful results
    532              *ami   = entry.index;
   \   000037   740B         MOV     A,#0xb
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    533              status = ZSuccess;
   \   00004A   75..00       MOV     ?V2,#0x0
   \   00004D   8016         SJMP    ??ZDSecMgrExtAddrLookup_1
    534            }
    535            else
    536            {
    537              // return failed results
    538              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   00004F   740B         MOV     A,#0xb
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E8           MOV     A,R0
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E9           MOV     A,R1
   \   000061   F0           MOVX    @DPTR,A
    539              status = ZNwkUnknownDevice;
   \   000062   75..C8       MOV     ?V2,#-0x38
    540            }
    541          
    542            return status;
   \                     ??ZDSecMgrExtAddrLookup_1:
   \   000065   A9..         MOV     R1,?V2
   \   000067   740D         MOV     A,#0xd
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   7F03         MOV     R7,#0x3
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
    543          }
    544          
    545          /******************************************************************************
    546           * @fn          ZDSecMgrAddrClear
    547           *
    548           * @brief       Clear security bit from Address Manager for specific device.
    549           *
    550           * @param       extAddr - [in] EXT address
    551           *
    552           * @return      ZStatus_t
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
   \                     ZDSecMgrAddrClear:
    555          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    556            ZStatus_t status;
    557            uint16 entryAmi;
    558          
    559            // get Address Manager Index
    560            status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000019   E9           MOV     A,R1
   \   00001A   F5..         MOV     ?V0,A
    561          
    562            if ( status == ZSuccess )
   \   00001C   E5..         MOV     A,?V0
   \   00001E   702D         JNZ     ??ZDSecMgrAddrClear_0
    563            {
    564              AddrMgrEntry_t addrEntry;
    565          
    566              // Clear SECURITY User bit from the address manager
    567              addrEntry.user = ADDRMGR_USER_SECURITY;
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7402         MOV     A,#0x2
   \   000027   F0           MOVX    @DPTR,A
    568              addrEntry.index = entryAmi;
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   740D         MOV     A,#0xd
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E8           MOV     A,R0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   E9           MOV     A,R1
   \   00003C   F0           MOVX    @DPTR,A
    569          
    570              if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
   \   00003D                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP101_8
   \   000042   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000045   E9           MOV     A,R1
   \   000046   6401         XRL     A,#0x1
   \   000048   6003         JZ      ??ZDSecMgrAddrClear_0
    571              {
    572                // return failure results
    573                status = ZFailure;
   \   00004A   75..01       MOV     ?V0,#0x1
    574              }
    575            }
    576          
    577            return status;
   \                     ??ZDSecMgrAddrClear_0:
   \   00004D   A9..         MOV     R1,?V0
   \   00004F   740F         MOV     A,#0xf
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   7F01         MOV     R7,#0x1
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    578          }
    579          
    580          /******************************************************************************
    581           * @fn          ZDSecMgrMasterKeyLookup
    582           *
    583           * @brief       Lookup MASTER key for specified address index.
    584           *
    585           * @param       ami - [in] Address Manager index
    586           * @param       pKeyNvId - [out] MASTER key NV ID
    587           *
    588           * @return      ZStatus_t
    589           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    590          ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint16* pKeyNvId )
   \                     ZDSecMgrMasterKeyLookup:
    591          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    592            uint16 index;
    593            ZDSecMgrMasterKeyData_t masterKeyData;
    594          
    595          
    596            for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
   \   000012   7E00         MOV     R6,#0x0
   \   000014   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrMasterKeyLookup_0:
   \   000016   C3           CLR     C
   \   000017   EE           MOV     A,R6
   \   000018   9403         SUBB    A,#0x3
   \   00001A   EF           MOV     A,R7
   \   00001B   9400         SUBB    A,#0x0
   \   00001D   5069         JNC     ??ZDSecMgrMasterKeyLookup_1
    597            {
    598              // Read entry index of the Master key table from NV
    599              osal_nv_read( (ZCD_NV_MASTER_KEY_DATA_START + index), 0,
    600                            sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
   \   00001F                ; Setup parameters for call to function osal_nv_read
   \   00001F   A8..         MOV     R0,?XSP + 0
   \   000021   A9..         MOV     R1,?XSP + 1
   \   000023   88..         MOV     ?V4,R0
   \   000025   89..         MOV     ?V5,R1
   \   000027   78..         MOV     R0,#?V4
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..12       MOV     ?V4,#0x12
   \   00002F   75..00       MOV     ?V5,#0x0
   \   000032   78..         MOV     R0,#?V4
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7C00         MOV     R4,#0x0
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   EE           MOV     A,R6
   \   00003C   2401         ADD     A,#0x1
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   3403         ADDC    A,#0x3
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000046   7404         MOV     A,#0x4
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   E9           MOV     A,R1
    601          
    602              if ( masterKeyData.ami == ami )
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   65..         XRL     A,?V2
   \   000055   7004         JNZ     ??ZDSecMgrMasterKeyLookup_2
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   65..         XRL     A,?V3
   \                     ??ZDSecMgrMasterKeyLookup_2:
   \   00005B   7024         JNZ     ??ZDSecMgrMasterKeyLookup_3
    603              {
    604                // return successful results
    605                *pKeyNvId   = ZCD_NV_MASTER_KEY_DATA_START + index;
   \   00005D   EE           MOV     A,R6
   \   00005E   2401         ADD     A,#0x1
   \   000060   F8           MOV     R0,A
   \   000061   EF           MOV     A,R7
   \   000062   3403         ADDC    A,#0x3
   \   000064   F9           MOV     R1,A
   \   000065   85..82       MOV     DPL,?V0
   \   000068   85..83       MOV     DPH,?V1
   \   00006B   E8           MOV     A,R0
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E9           MOV     A,R1
   \   00006F   F0           MOVX    @DPTR,A
    606          
    607                // clear copy of key in RAM
    608                osal_memset(&masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t));
   \   000070                ; Setup parameters for call to function osal_memset
   \   000070   7C12         MOV     R4,#0x12
   \   000072   7D00         MOV     R5,#0x0
   \   000074   7900         MOV     R1,#0x0
   \   000076   AA..         MOV     R2,?XSP + 0
   \   000078   AB..         MOV     R3,?XSP + 1
   \   00007A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    609          
    610                return ZSuccess;
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   8023         SJMP    ??ZDSecMgrMasterKeyLookup_4
    611              }
    612            }
   \                     ??ZDSecMgrMasterKeyLookup_3:
   \   000081   0E           INC     R6
   \   000082   EE           MOV     A,R6
   \   000083   7091         JNZ     ??ZDSecMgrMasterKeyLookup_0
   \   000085   0F           INC     R7
   \   000086   808E         SJMP    ??ZDSecMgrMasterKeyLookup_0
    613          
    614            *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??ZDSecMgrMasterKeyLookup_1:
   \   000088   85..82       MOV     DPL,?V0
   \   00008B   85..83       MOV     DPH,?V1
   \   00008E   7400         MOV     A,#0x0
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   7400         MOV     A,#0x0
   \   000094   F0           MOVX    @DPTR,A
    615          
    616            // clear copy of key in RAM
    617            osal_memset(&masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t));
   \   000095                ; Setup parameters for call to function osal_memset
   \   000095   7C12         MOV     R4,#0x12
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7900         MOV     R1,#0x0
   \   00009B   AA..         MOV     R2,?XSP + 0
   \   00009D   AB..         MOV     R3,?XSP + 1
   \   00009F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    618          
    619            return ZNwkUnknownDevice;
   \   0000A2   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrMasterKeyLookup_4:
   \   0000A4   7412         MOV     A,#0x12
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A9   7F06         MOV     R7,#0x6
   \   0000AB   02....       LJMP    ?BANKED_LEAVE_XDATA
    620          }
    621          
    622          /******************************************************************************
    623           * @fn          ZDSecMgrMasterKeyStore
    624           *
    625           * @brief       Store MASTER key for specified address index.
    626           *
    627           * @param       ami - [in] Address Manager index
    628           * @param       key - [in] valid key to store
    629           *
    630           * @return      ZStatus_t
    631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    632          ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key )
   \                     ZDSecMgrMasterKeyStore:
    633          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   \   00000E   8C..         MOV     ?V4,R4
   \   000010   8D..         MOV     ?V5,R5
    634            uint16    index;
    635            ZDSecMgrMasterKeyData_t   masterKeyData;
    636          
    637          
    638            for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
   \   000012   7E00         MOV     R6,#0x0
   \   000014   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrMasterKeyStore_0:
   \   000016   C3           CLR     C
   \   000017   EE           MOV     A,R6
   \   000018   9403         SUBB    A,#0x3
   \   00001A   EF           MOV     A,R7
   \   00001B   9400         SUBB    A,#0x0
   \   00001D   4003         JC      $+5
   \   00001F   02....       LJMP    ??ZDSecMgrMasterKeyStore_1 & 0xFFFF
    639            {
    640              // Read entry index of the Master key table from NV
    641              osal_nv_read( (ZCD_NV_MASTER_KEY_DATA_START + index), 0,
    642                             sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
   \   000022                ; Setup parameters for call to function osal_nv_read
   \   000022   A8..         MOV     R0,?XSP + 0
   \   000024   A9..         MOV     R1,?XSP + 1
   \   000026   88..         MOV     ?V0,R0
   \   000028   89..         MOV     ?V1,R1
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   75..12       MOV     ?V0,#0x12
   \   000032   75..00       MOV     ?V1,#0x0
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7C00         MOV     R4,#0x0
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   EE           MOV     A,R6
   \   00003F   2401         ADD     A,#0x1
   \   000041   FA           MOV     R2,A
   \   000042   EF           MOV     A,R7
   \   000043   3403         ADDC    A,#0x3
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000049   7404         MOV     A,#0x4
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004E   E9           MOV     A,R1
    643          
    644              if ( masterKeyData.ami == INVALID_NODE_ADDR )
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   64FE         XRL     A,#0xfe
   \   000058   7004         JNZ     ??ZDSecMgrMasterKeyStore_2
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrMasterKeyStore_2:
   \   00005E   6003         JZ      $+5
   \   000060   02....       LJMP    ??ZDSecMgrMasterKeyStore_3 & 0xFFFF
    645              {
    646                // store EXT address index
    647                masterKeyData.ami = ami;
   \   000063   85..82       MOV     DPL,?XSP + 0
   \   000066   85..83       MOV     DPH,?XSP + 1
   \   000069   E5..         MOV     A,?V6
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E5..         MOV     A,?V7
   \   00006F   F0           MOVX    @DPTR,A
    648          
    649                if ( key != NULL )
   \   000070   E5..         MOV     A,?V4
   \   000072   45..         ORL     A,?V5
   \   000074   6025         JZ      ??ZDSecMgrMasterKeyStore_4
    650                {
    651                  osal_memcpy( masterKeyData.key, key,  SEC_KEY_LEN );
   \   000076                ; Setup parameters for call to function osal_memcpy
   \   000076   85....       MOV     ?V0,?V4
   \   000079   85....       MOV     ?V1,?V5
   \   00007C   75..00       MOV     ?V2,#0x0
   \   00007F   78..         MOV     R0,#?V0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   7C10         MOV     R4,#0x10
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7405         MOV     A,#0x5
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   AA82         MOV     R2,DPL
   \   00008F   AB83         MOV     R3,DPH
   \   000091   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000094   7403         MOV     A,#0x3
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   8012         SJMP    ??ZDSecMgrMasterKeyStore_5
    652                }
    653                else
    654                {
    655                  osal_memset( masterKeyData.key, 0, SEC_KEY_LEN );
   \                     ??ZDSecMgrMasterKeyStore_4:
   \   00009B                ; Setup parameters for call to function osal_memset
   \   00009B   7C10         MOV     R4,#0x10
   \   00009D   7D00         MOV     R5,#0x0
   \   00009F   7900         MOV     R1,#0x0
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    656                }
    657          
    658                // set new values in NV
    659                osal_nv_write( (ZCD_NV_MASTER_KEY_DATA_START + index), 0,
    660                                sizeof(ZDSecMgrMasterKeyData_t), &masterKeyData );
   \                     ??ZDSecMgrMasterKeyStore_5:
   \   0000AD                ; Setup parameters for call to function osal_nv_write
   \   0000AD   A8..         MOV     R0,?XSP + 0
   \   0000AF   A9..         MOV     R1,?XSP + 1
   \   0000B1   88..         MOV     ?V0,R0
   \   0000B3   89..         MOV     ?V1,R1
   \   0000B5   78..         MOV     R0,#?V0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   75..12       MOV     ?V0,#0x12
   \   0000BD   75..00       MOV     ?V1,#0x0
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   7C00         MOV     R4,#0x0
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   EE           MOV     A,R6
   \   0000CA   2401         ADD     A,#0x1
   \   0000CC   FA           MOV     R2,A
   \   0000CD   EF           MOV     A,R7
   \   0000CE   3403         ADDC    A,#0x3
   \   0000D0   FB           MOV     R3,A
   \   0000D1   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000D4   7404         MOV     A,#0x4
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   E9           MOV     A,R1
    661          
    662                // clear copy of key in RAM
    663                osal_memset( &masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t) );
   \   0000DA                ; Setup parameters for call to function osal_memset
   \   0000DA   7C12         MOV     R4,#0x12
   \   0000DC   7D00         MOV     R5,#0x0
   \   0000DE   7900         MOV     R1,#0x0
   \   0000E0   AA..         MOV     R2,?XSP + 0
   \   0000E2   AB..         MOV     R3,?XSP + 1
   \   0000E4   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    664          
    665                // return successful results
    666                return ZSuccess;
   \   0000E7   7900         MOV     R1,#0x0
   \   0000E9   8017         SJMP    ??ZDSecMgrMasterKeyStore_6
    667              }
    668            }
   \                     ??ZDSecMgrMasterKeyStore_3:
   \   0000EB   0E           INC     R6
   \   0000EC   EE           MOV     A,R6
   \   0000ED   7001         JNZ     ??ZDSecMgrMasterKeyStore_7
   \   0000EF   0F           INC     R7
   \                     ??ZDSecMgrMasterKeyStore_7:
   \   0000F0   02....       LJMP    ??ZDSecMgrMasterKeyStore_0 & 0xFFFF
    669          
    670            // clear copy of key in RAM
    671            osal_memset( &masterKeyData, 0x00, sizeof(ZDSecMgrMasterKeyData_t) );
   \                     ??ZDSecMgrMasterKeyStore_1:
   \   0000F3                ; Setup parameters for call to function osal_memset
   \   0000F3   7C12         MOV     R4,#0x12
   \   0000F5   7D00         MOV     R5,#0x0
   \   0000F7   7900         MOV     R1,#0x0
   \   0000F9   AA..         MOV     R2,?XSP + 0
   \   0000FB   AB..         MOV     R3,?XSP + 1
   \   0000FD   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    672          
    673            return ZNwkUnknownDevice;
   \   000100   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrMasterKeyStore_6:
   \   000102   7412         MOV     A,#0x12
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   \   000107   7F08         MOV     R7,#0x8
   \   000109   02....       LJMP    ?BANKED_LEAVE_XDATA
    674          }
    675          
    676          /******************************************************************************
    677           * @fn          ZDSecMgrEntryInit
    678           *
    679           * @brief       Initialize entry sub module
    680           *
    681           * @param       state - device initialization state
    682           *
    683           * @return      none
    684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    686          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    687            if (ZDSecMgrEntries == NULL)
   \   000007   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDSecMgrEntryInit_0 & 0xFFFF
    688            {
    689              uint16 index;
    690          
    691              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   7A0F         MOV     R2,#0xf
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EB           MOV     A,R3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   E8           MOV     A,R0
   \   00002E   49           ORL     A,R1
   \   00002F   6070         JZ      ??ZDSecMgrEntryInit_0
    692              {
    693                return;
    694              }
    695          
    696              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   000031   7E00         MOV     R6,#0x0
   \   000033   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrEntryInit_1:
   \   000035   C3           CLR     C
   \   000036   EE           MOV     A,R6
   \   000037   9403         SUBB    A,#0x3
   \   000039   EF           MOV     A,R7
   \   00003A   9400         SUBB    A,#0x0
   \   00003C   5063         JNC     ??ZDSecMgrEntryInit_0
    697              {
    698                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \   00003E   EE           MOV     A,R6
   \   00003F   F8           MOV     R0,A
   \   000040   EF           MOV     A,R7
   \   000041   F9           MOV     R1,A
   \   000042   E8           MOV     A,R0
   \   000043   75F005       MOV     B,#0x5
   \   000046   A4           MUL     AB
   \   000047   C8           XCH     A,R0
   \   000048   AAF0         MOV     R2,B
   \   00004A   75F000       MOV     B,#0x0
   \   00004D   A4           MUL     AB
   \   00004E   2A           ADD     A,R2
   \   00004F   FA           MOV     R2,A
   \   000050   75F005       MOV     B,#0x5
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   2A           ADD     A,R2
   \   000056   F9           MOV     R1,A
   \   000057   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   28           ADD     A,R0
   \   00005C   FA           MOV     R2,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   39           ADDC    A,R1
   \   000060   8A82         MOV     DPL,R2
   \   000062   F583         MOV     DPH,A
   \   000064   74FE         MOV     A,#-0x2
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   74FF         MOV     A,#-0x1
   \   00006A   F0           MOVX    @DPTR,A
    699          
    700                ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
   \   00006B   EE           MOV     A,R6
   \   00006C   F8           MOV     R0,A
   \   00006D   EF           MOV     A,R7
   \   00006E   F9           MOV     R1,A
   \   00006F   E8           MOV     A,R0
   \   000070   75F005       MOV     B,#0x5
   \   000073   A4           MUL     AB
   \   000074   C8           XCH     A,R0
   \   000075   AAF0         MOV     R2,B
   \   000077   75F000       MOV     B,#0x0
   \   00007A   A4           MUL     AB
   \   00007B   2A           ADD     A,R2
   \   00007C   FA           MOV     R2,A
   \   00007D   75F005       MOV     B,#0x5
   \   000080   E9           MOV     A,R1
   \   000081   A4           MUL     AB
   \   000082   2A           ADD     A,R2
   \   000083   F9           MOV     R1,A
   \   000084   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000087   E0           MOVX    A,@DPTR
   \   000088   28           ADD     A,R0
   \   000089   FA           MOV     R2,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   39           ADDC    A,R1
   \   00008D   8A82         MOV     DPL,R2
   \   00008F   F583         MOV     DPH,A
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   7400         MOV     A,#0x0
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   7400         MOV     A,#0x0
   \   000099   F0           MOVX    @DPTR,A
    701              }
   \   00009A   0E           INC     R6
   \   00009B   EE           MOV     A,R6
   \   00009C   7097         JNZ     ??ZDSecMgrEntryInit_1
   \   00009E   0F           INC     R7
   \   00009F   8094         SJMP    ??ZDSecMgrEntryInit_1
    702            }
    703          
    704          #if defined NV_RESTORE
    705            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
    706            {
    707              ZDSecMgrRestoreFromNV();
    708            }
    709          #else
    710            (void)state;
    711          #endif
    712          }
   \                     ??ZDSecMgrEntryInit_0:
   \   0000A1   7F01         MOV     R7,#0x1
   \   0000A3   02....       LJMP    ?BANKED_LEAVE_XDATA
    713          
    714          /******************************************************************************
    715           * @fn          ZDSecMgrEntryLookup
    716           *
    717           * @brief       Lookup entry index using specified NWK address.
    718           *
    719           * @param       nwkAddr - [in] NWK address
    720           * @param       entry   - [out] valid entry
    721           *
    722           * @return      ZStatus_t
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
    726            uint16         index;
    727            AddrMgrEntry_t addrMgrEntry;
    728          
    729            // initialize results
    730            *entry = NULL;
   \   000012   85..82       MOV     DPL,?V0
   \   000015   85..83       MOV     DPH,?V1
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   7400         MOV     A,#0x0
   \   00001E   F0           MOVX    @DPTR,A
    731          
    732            // verify data is available
    733            if ( ZDSecMgrEntries != NULL )
   \   00001F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   49           ORL     A,R1
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??ZDSecMgrEntryLookup_0 & 0xFFFF
    734            {
    735              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   7402         MOV     A,#0x2
   \   000036   F0           MOVX    @DPTR,A
    736              addrMgrEntry.nwkAddr = nwkAddr;
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E5..         MOV     A,?V2
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E5..         MOV     A,?V3
   \   000042   F0           MOVX    @DPTR,A
    737          
    738              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \   000043                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000043   AA..         MOV     R2,?XSP + 0
   \   000045   AB..         MOV     R3,?XSP + 1
   \   000047   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   707F         JNZ     ??ZDSecMgrEntryLookup_0
    739              {
    740                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00004F   7E00         MOV     R6,#0x0
   \   000051   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrEntryLookup_1:
   \   000053   C3           CLR     C
   \   000054   EE           MOV     A,R6
   \   000055   9403         SUBB    A,#0x3
   \   000057   EF           MOV     A,R7
   \   000058   9400         SUBB    A,#0x0
   \   00005A   5072         JNC     ??ZDSecMgrEntryLookup_0
    741                {
    742                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \   00005C   740B         MOV     A,#0xb
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FA           MOV     R2,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FB           MOV     R3,A
   \   000066   EE           MOV     A,R6
   \   000067   F8           MOV     R0,A
   \   000068   EF           MOV     A,R7
   \   000069   F9           MOV     R1,A
   \   00006A   E8           MOV     A,R0
   \   00006B   75F005       MOV     B,#0x5
   \   00006E   A4           MUL     AB
   \   00006F   C8           XCH     A,R0
   \   000070   ACF0         MOV     R4,B
   \   000072   75F000       MOV     B,#0x0
   \   000075   A4           MUL     AB
   \   000076   2C           ADD     A,R4
   \   000077   FC           MOV     R4,A
   \   000078   75F005       MOV     B,#0x5
   \   00007B   E9           MOV     A,R1
   \   00007C   A4           MUL     AB
   \   00007D   2C           ADD     A,R4
   \   00007E   F9           MOV     R1,A
   \   00007F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000082   E0           MOVX    A,@DPTR
   \   000083   28           ADD     A,R0
   \   000084   FC           MOV     R4,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   39           ADDC    A,R1
   \   000088   8C82         MOV     DPL,R4
   \   00008A   F583         MOV     DPH,A
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   6A           XRL     A,R2
   \   00008E   7003         JNZ     ??ZDSecMgrEntryLookup_2
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookup_2:
   \   000093   7032         JNZ     ??ZDSecMgrEntryLookup_3
    743                  {
    744                    // return successful results
    745                    *entry = &ZDSecMgrEntries[index];
   \   000095   EE           MOV     A,R6
   \   000096   F8           MOV     R0,A
   \   000097   EF           MOV     A,R7
   \   000098   F9           MOV     R1,A
   \   000099   E8           MOV     A,R0
   \   00009A   75F005       MOV     B,#0x5
   \   00009D   A4           MUL     AB
   \   00009E   C8           XCH     A,R0
   \   00009F   AAF0         MOV     R2,B
   \   0000A1   75F000       MOV     B,#0x0
   \   0000A4   A4           MUL     AB
   \   0000A5   2A           ADD     A,R2
   \   0000A6   FA           MOV     R2,A
   \   0000A7   75F005       MOV     B,#0x5
   \   0000AA   E9           MOV     A,R1
   \   0000AB   A4           MUL     AB
   \   0000AC   2A           ADD     A,R2
   \   0000AD   F9           MOV     R1,A
   \   0000AE   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   28           ADD     A,R0
   \   0000B3   F8           MOV     R0,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   39           ADDC    A,R1
   \   0000B7   F9           MOV     R1,A
   \   0000B8   85..82       MOV     DPL,?V0
   \   0000BB   85..83       MOV     DPH,?V1
   \   0000BE   E8           MOV     A,R0
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E9           MOV     A,R1
   \   0000C2   F0           MOVX    @DPTR,A
    746          
    747                    // break from loop
    748                    return ZSuccess;
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   8009         SJMP    ??ZDSecMgrEntryLookup_4
    749                  }
    750                }
   \                     ??ZDSecMgrEntryLookup_3:
   \   0000C7   0E           INC     R6
   \   0000C8   EE           MOV     A,R6
   \   0000C9   7088         JNZ     ??ZDSecMgrEntryLookup_1
   \   0000CB   0F           INC     R7
   \   0000CC   8085         SJMP    ??ZDSecMgrEntryLookup_1
    751              }
    752            }
    753          
    754            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookup_0:
   \   0000CE   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookup_4:
   \   0000D0   740D         MOV     A,#0xd
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   7F04         MOV     R7,#0x4
   \   0000D7   02....       LJMP    ?BANKED_LEAVE_XDATA
    755          }
    756          
    757          /******************************************************************************
    758           * @fn          ZDSecMgrEntryLookupAMI
    759           *
    760           * @brief       Lookup entry using specified address index
    761           *
    762           * @param       ami   - [in] Address Manager index
    763           * @param       entry - [out] valid entry
    764           *
    765           * @return      ZStatus_t
    766           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    767          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    768          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    769            uint16 index;
    770          
    771            // initialize results
    772            *entry = NULL;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   7400         MOV     A,#0x0
   \   000013   F0           MOVX    @DPTR,A
    773          
    774            // verify data is available
    775            if ( ZDSecMgrEntries != NULL )
   \   000014   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   607D         JZ      ??ZDSecMgrEntryLookupAMI_0
    776            {
    777              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000024   C3           CLR     C
   \   000025   EA           MOV     A,R2
   \   000026   9403         SUBB    A,#0x3
   \   000028   EB           MOV     A,R3
   \   000029   9400         SUBB    A,#0x0
   \   00002B   5070         JNC     ??ZDSecMgrEntryLookupAMI_0
    778              {
    779                if ( ZDSecMgrEntries[index].ami == ami )
   \   00002D   EA           MOV     A,R2
   \   00002E   F8           MOV     R0,A
   \   00002F   EB           MOV     A,R3
   \   000030   F9           MOV     R1,A
   \   000031   E8           MOV     A,R0
   \   000032   75F005       MOV     B,#0x5
   \   000035   A4           MUL     AB
   \   000036   C8           XCH     A,R0
   \   000037   85F0..       MOV     ?V0,B
   \   00003A   75F000       MOV     B,#0x0
   \   00003D   A4           MUL     AB
   \   00003E   25..         ADD     A,?V0
   \   000040   F5..         MOV     ?V0,A
   \   000042   75F005       MOV     B,#0x5
   \   000045   E9           MOV     A,R1
   \   000046   A4           MUL     AB
   \   000047   25..         ADD     A,?V0
   \   000049   F9           MOV     R1,A
   \   00004A   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   28           ADD     A,R0
   \   00004F   F5..         MOV     ?V0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   39           ADDC    A,R1
   \   000054   85..82       MOV     DPL,?V0
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6E           XRL     A,R6
   \   00005B   7003         JNZ     ??ZDSecMgrEntryLookupAMI_2
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6F           XRL     A,R7
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   000060   7034         JNZ     ??ZDSecMgrEntryLookupAMI_3
    780                {
    781                  // return successful results
    782                  *entry = &ZDSecMgrEntries[index];
   \   000062   EA           MOV     A,R2
   \   000063   F8           MOV     R0,A
   \   000064   EB           MOV     A,R3
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   75F005       MOV     B,#0x5
   \   00006A   A4           MUL     AB
   \   00006B   C8           XCH     A,R0
   \   00006C   85F0..       MOV     ?V0,B
   \   00006F   75F000       MOV     B,#0x0
   \   000072   A4           MUL     AB
   \   000073   25..         ADD     A,?V0
   \   000075   F5..         MOV     ?V0,A
   \   000077   75F005       MOV     B,#0x5
   \   00007A   E9           MOV     A,R1
   \   00007B   A4           MUL     AB
   \   00007C   25..         ADD     A,?V0
   \   00007E   F9           MOV     R1,A
   \   00007F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000082   E0           MOVX    A,@DPTR
   \   000083   28           ADD     A,R0
   \   000084   F8           MOV     R0,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   39           ADDC    A,R1
   \   000088   F9           MOV     R1,A
   \   000089   8C82         MOV     DPL,R4
   \   00008B   8D83         MOV     DPH,R5
   \   00008D   E8           MOV     A,R0
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   E9           MOV     A,R1
   \   000091   F0           MOVX    @DPTR,A
    783          
    784                  // break from loop
    785                  return ZSuccess;
   \   000092   7900         MOV     R1,#0x0
   \   000094   8009         SJMP    ??ZDSecMgrEntryLookupAMI_4
    786                }
    787              }
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000096   0A           INC     R2
   \   000097   EA           MOV     A,R2
   \   000098   708A         JNZ     ??ZDSecMgrEntryLookupAMI_1
   \   00009A   0B           INC     R3
   \   00009B   8087         SJMP    ??ZDSecMgrEntryLookupAMI_1
    788            }
    789          
    790            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   00009D   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   00009F   7F01         MOV     R7,#0x1
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA
    791          }
    792          
    793          /******************************************************************************
    794           * @fn          ZDSecMgrEntryLookupExt
    795           *
    796           * @brief       Lookup entry index using specified EXT address.
    797           *
    798           * @param       extAddr - [in] EXT address
    799           * @param       entry   - [out] valid entry
    800           *
    801           * @return      ZStatus_t
    802           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    803          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    804          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    805            ZStatus_t status;
    806            uint16    ami;
    807          
    808            // initialize results
    809            *entry = NULL;
   \   000012   8E82         MOV     DPL,R6
   \   000014   8F83         MOV     DPH,R7
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   7400         MOV     A,#0x0
   \   00001C   F0           MOVX    @DPTR,A
    810            status = ZNwkUnknownDevice;
   \   00001D   75..C8       MOV     ?V2,#-0x38
    811          
    812            // lookup address index
    813            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   000020                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000020   AC..         MOV     R4,?XSP + 0
   \   000022   AD..         MOV     R5,?XSP + 1
   \   000024   AA..         MOV     R2,?V0
   \   000026   AB..         MOV     R3,?V1
   \   000028   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00002B   E9           MOV     A,R1
   \   00002C   7015         JNZ     ??ZDSecMgrEntryLookupExt_0
    814            {
    815              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   00002E                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   00002E   EE           MOV     A,R6
   \   00002F   FC           MOV     R4,A
   \   000030   EF           MOV     A,R7
   \   000031   FD           MOV     R5,A
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000040   E9           MOV     A,R1
   \   000041   F5..         MOV     ?V2,A
    816            }
    817          
    818            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   000043   A9..         MOV     R1,?V2
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   7F03         MOV     R7,#0x3
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
    819          }
    820          
    821          /******************************************************************************
    822           * @fn          ZDSecMgrEntryLookupExtGetIndex
    823           *
    824           * @brief       Lookup entry index using specified EXT address.
    825           *
    826           * @param       extAddr - [in] EXT address
    827           * @param       entryIndex - [out] valid index to the entry table
    828           *
    829           * @return      ZStatus_t
    830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    831          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupExtGetIndex:
    832          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   8C..         MOV     ?V4,R4
   \   000010   8D..         MOV     ?V5,R5
   \   000012   7410         MOV     A,#0x10
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V3,A
    833            uint16 ami;
    834            uint16 index;
    835          
    836            // lookup address index
    837            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00001E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00001E   AC..         MOV     R4,?XSP + 0
   \   000020   AD..         MOV     R5,?XSP + 1
   \   000022   AA..         MOV     R2,?V0
   \   000024   AB..         MOV     R3,?V1
   \   000026   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000029   E9           MOV     A,R1
   \   00002A   6003         JZ      $+5
   \   00002C   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    838            {
    839              // verify data is available
    840              if ( ZDSecMgrEntries != NULL )
   \   00002F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   49           ORL     A,R1
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    841              {
    842                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00003E   7E00         MOV     R6,#0x0
   \   000040   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrEntryLookupExtGetIndex_1:
   \   000042   C3           CLR     C
   \   000043   EE           MOV     A,R6
   \   000044   9403         SUBB    A,#0x3
   \   000046   EF           MOV     A,R7
   \   000047   9400         SUBB    A,#0x0
   \   000049   507F         JNC     ??ZDSecMgrEntryLookupExtGetIndex_0
    843                {
    844                  if ( ZDSecMgrEntries[index].ami == ami )
   \   00004B   EE           MOV     A,R6
   \   00004C   F8           MOV     R0,A
   \   00004D   EF           MOV     A,R7
   \   00004E   F9           MOV     R1,A
   \   00004F   E8           MOV     A,R0
   \   000050   75F005       MOV     B,#0x5
   \   000053   A4           MUL     AB
   \   000054   C8           XCH     A,R0
   \   000055   AAF0         MOV     R2,B
   \   000057   75F000       MOV     B,#0x0
   \   00005A   A4           MUL     AB
   \   00005B   2A           ADD     A,R2
   \   00005C   FA           MOV     R2,A
   \   00005D   75F005       MOV     B,#0x5
   \   000060   E9           MOV     A,R1
   \   000061   A4           MUL     AB
   \   000062   2A           ADD     A,R2
   \   000063   F9           MOV     R1,A
   \   000064   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000067   E0           MOVX    A,@DPTR
   \   000068   28           ADD     A,R0
   \   000069   FA           MOV     R2,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   39           ADDC    A,R1
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   F583         MOV     DPH,A
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   68           XRL     A,R0
   \   00007E   7003         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_2
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   69           XRL     A,R1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_2:
   \   000083   703D         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_3
    845                  {
    846                    // return successful results
    847                    *entry = &ZDSecMgrEntries[index];
   \   000085   EE           MOV     A,R6
   \   000086   F8           MOV     R0,A
   \   000087   EF           MOV     A,R7
   \   000088   F9           MOV     R1,A
   \   000089   E8           MOV     A,R0
   \   00008A   75F005       MOV     B,#0x5
   \   00008D   A4           MUL     AB
   \   00008E   C8           XCH     A,R0
   \   00008F   AAF0         MOV     R2,B
   \   000091   75F000       MOV     B,#0x0
   \   000094   A4           MUL     AB
   \   000095   2A           ADD     A,R2
   \   000096   FA           MOV     R2,A
   \   000097   75F005       MOV     B,#0x5
   \   00009A   E9           MOV     A,R1
   \   00009B   A4           MUL     AB
   \   00009C   2A           ADD     A,R2
   \   00009D   F9           MOV     R1,A
   \   00009E   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   28           ADD     A,R0
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   39           ADDC    A,R1
   \   0000A7   F9           MOV     R1,A
   \   0000A8   85..82       MOV     DPL,?V4
   \   0000AB   85..83       MOV     DPH,?V5
   \   0000AE   E8           MOV     A,R0
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E9           MOV     A,R1
   \   0000B2   F0           MOVX    @DPTR,A
    848                    *entryIndex = index;
   \   0000B3   85..82       MOV     DPL,?V2
   \   0000B6   85..83       MOV     DPH,?V3
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   EF           MOV     A,R7
   \   0000BD   F0           MOVX    @DPTR,A
    849          
    850                    // break from loop
    851                    return ZSuccess;
   \   0000BE   7900         MOV     R1,#0x0
   \   0000C0   800A         SJMP    ??ZDSecMgrEntryLookupExtGetIndex_4
    852                  }
    853                }
   \                     ??ZDSecMgrEntryLookupExtGetIndex_3:
   \   0000C2   0E           INC     R6
   \   0000C3   EE           MOV     A,R6
   \   0000C4   7001         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_5
   \   0000C6   0F           INC     R7
   \                     ??ZDSecMgrEntryLookupExtGetIndex_5:
   \   0000C7   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_1 & 0xFFFF
    854              }
    855            }
    856          
    857            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupExtGetIndex_0:
   \   0000CA   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupExtGetIndex_4:
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D1   7F06         MOV     R7,#0x6
   \   0000D3   02....       LJMP    ?BANKED_LEAVE_XDATA
    858          }
    859          
    860          /******************************************************************************
    861           * @fn          ZDSecMgrEntryLookupAMIGetIndex
    862           *
    863           * @brief       Lookup entry using specified address index
    864           *
    865           * @param       ami   - [in] Address Manager index
    866           * @param       entryIndex - [out] valid index to the entry table
    867           *
    868           * @return      ZStatus_t
    869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    870          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupAMIGetIndex:
    871          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    872            uint16 index;
    873          
    874            // verify data is available
    875            if ( ZDSecMgrEntries != NULL )
   \   000009   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6056         JZ      ??ZDSecMgrEntryLookupAMIGetIndex_0
    876            {
    877              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000015   7A00         MOV     R2,#0x0
   \   000017   7B00         MOV     R3,#0x0
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_1:
   \   000019   C3           CLR     C
   \   00001A   EA           MOV     A,R2
   \   00001B   9403         SUBB    A,#0x3
   \   00001D   EB           MOV     A,R3
   \   00001E   9400         SUBB    A,#0x0
   \   000020   5049         JNC     ??ZDSecMgrEntryLookupAMIGetIndex_0
    878              {
    879                if ( ZDSecMgrEntries[index].ami == ami )
   \   000022   EA           MOV     A,R2
   \   000023   F8           MOV     R0,A
   \   000024   EB           MOV     A,R3
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   75F005       MOV     B,#0x5
   \   00002A   A4           MUL     AB
   \   00002B   C8           XCH     A,R0
   \   00002C   85F0..       MOV     ?V0,B
   \   00002F   75F000       MOV     B,#0x0
   \   000032   A4           MUL     AB
   \   000033   25..         ADD     A,?V0
   \   000035   F5..         MOV     ?V0,A
   \   000037   75F005       MOV     B,#0x5
   \   00003A   E9           MOV     A,R1
   \   00003B   A4           MUL     AB
   \   00003C   25..         ADD     A,?V0
   \   00003E   F9           MOV     R1,A
   \   00003F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000042   E0           MOVX    A,@DPTR
   \   000043   28           ADD     A,R0
   \   000044   F5..         MOV     ?V0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   39           ADDC    A,R1
   \   000049   85..82       MOV     DPL,?V0
   \   00004C   F583         MOV     DPH,A
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6E           XRL     A,R6
   \   000050   7003         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_2
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6F           XRL     A,R7
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_2:
   \   000055   700D         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_3
    880                {
    881                  // return successful results
    882                  *entryIndex = index;
   \   000057   8C82         MOV     DPL,R4
   \   000059   8D83         MOV     DPH,R5
   \   00005B   EA           MOV     A,R2
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   EB           MOV     A,R3
   \   00005F   F0           MOVX    @DPTR,A
    883          
    884                  // break from loop
    885                  return ZSuccess;
   \   000060   7900         MOV     R1,#0x0
   \   000062   8009         SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_4
    886                }
    887              }
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_3:
   \   000064   0A           INC     R2
   \   000065   EA           MOV     A,R2
   \   000066   70B1         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_1
   \   000068   0B           INC     R3
   \   000069   80AE         SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_1
    888            }
    889          
    890            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_0:
   \   00006B   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_4:
   \   00006D   7F01         MOV     R7,#0x1
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
    891          }
    892          
    893          /******************************************************************************
    894           * @fn          ZDSecMgrEntryFree
    895           *
    896           * @brief       Free entry.
    897           *
    898           * @param       entry - [in] valid entry
    899           *
    900           * @return      ZStatus_t
    901           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    902          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    903          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    904            APSME_LinkKeyData_t   *pApsLinkKey = NULL;
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   75..00       MOV     ?V1,#0x0
    905          
    906          #if defined ( NV_RESTORE )
    907            ZStatus_t status;
    908            uint16 entryIndex;
    909          
    910            status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
    911          #endif
    912          
    913            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A18         MOV     R2,#0x18
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV     ?V2,R2
   \   000018   8B..         MOV     ?V3,R3
   \   00001A   85....       MOV     ?V0,?V2
   \   00001D   85....       MOV     ?V1,?V3
    914          
    915            if (pApsLinkKey != NULL)
   \   000020   E5..         MOV     A,?V0
   \   000022   45..         ORL     A,?V1
   \   000024   6049         JZ      ??ZDSecMgrEntryFree_0
    916            {
    917              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C18         MOV     R4,#0x18
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   AA..         MOV     R2,?V0
   \   00002E   AB..         MOV     R3,?V1
   \   000030   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    918          
    919              // Clear the APS Link key in NV
    920              osal_nv_write( entry->keyNvId, 0,
    921                                  sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   000033                ; Setup parameters for call to function osal_nv_write
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   75..18       MOV     ?V2,#0x18
   \   00003B   75..00       MOV     ?V3,#0x0
   \   00003E   78..         MOV     R0,#?V2
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C00         MOV     R4,#0x0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
    922          
    923              // set entry to invalid Key
    924              entry->keyNvId = SEC_NO_KEY_NV_ID;
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   7400         MOV     A,#0x0
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   7400         MOV     A,#0x0
   \   000067   F0           MOVX    @DPTR,A
    925          
    926              osal_mem_free(pApsLinkKey);
   \   000068                ; Setup parameters for call to function osal_mem_free
   \   000068   AA..         MOV     R2,?V0
   \   00006A   AB..         MOV     R3,?V1
   \   00006C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    927            }
    928          
    929            // marking the entry as INVALID_NODE_ADDR
    930            entry->ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryFree_0:
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   74FE         MOV     A,#-0x2
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   74FF         MOV     A,#-0x1
   \   000079   F0           MOVX    @DPTR,A
    931          
    932            // set to default value
    933            entry->authenticateOption = ZDSecMgr_Not_Authenticated;
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   7400         MOV     A,#0x0
   \   000084   F0           MOVX    @DPTR,A
    934          
    935          #if defined ( NV_RESTORE )
    936            if ( status == ZSuccess )
    937            {
    938              ZDSecMgrUpdateNV(entryIndex);
    939            }
    940          #endif
    941          }
   \   000085   7F04         MOV     R7,#0x4
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    942          
    943          /******************************************************************************
    944           * @fn          ZDSecMgrEntryNew
    945           *
    946           * @brief       Get a new entry.
    947           *
    948           * @param       entry - [out] valid entry
    949           *
    950           * @return      ZStatus_t
    951           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    952          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    953          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FC           MOV     R4,A
   \   000007   EB           MOV     A,R3
   \   000008   FD           MOV     R5,A
    954            uint16 index;
    955          
    956            // initialize results
    957            *entry = NULL;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   7400         MOV     A,#0x0
   \   000013   F0           MOVX    @DPTR,A
    958          
    959            // verify data is available
    960            if ( ZDSecMgrEntries != NULL )
   \   000014   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??ZDSecMgrEntryNew_0 & 0xFFFF
    961            {
    962              // find available entry
    963              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \                     ??ZDSecMgrEntryNew_1:
   \   000027   C3           CLR     C
   \   000028   EA           MOV     A,R2
   \   000029   9403         SUBB    A,#0x3
   \   00002B   EB           MOV     A,R3
   \   00002C   9400         SUBB    A,#0x0
   \   00002E   4003         JC      $+5
   \   000030   02....       LJMP    ??ZDSecMgrEntryNew_0 & 0xFFFF
    964              {
    965                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \   000033   EA           MOV     A,R2
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   75F005       MOV     B,#0x5
   \   00003B   A4           MUL     AB
   \   00003C   C8           XCH     A,R0
   \   00003D   AEF0         MOV     R6,B
   \   00003F   75F000       MOV     B,#0x0
   \   000042   A4           MUL     AB
   \   000043   2E           ADD     A,R6
   \   000044   FE           MOV     R6,A
   \   000045   75F005       MOV     B,#0x5
   \   000048   E9           MOV     A,R1
   \   000049   A4           MUL     AB
   \   00004A   2E           ADD     A,R6
   \   00004B   F9           MOV     R1,A
   \   00004C   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   28           ADD     A,R0
   \   000051   FE           MOV     R6,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   39           ADDC    A,R1
   \   000055   8E82         MOV     DPL,R6
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   64FE         XRL     A,#0xfe
   \   00005C   7004         JNZ     ??ZDSecMgrEntryNew_2
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrEntryNew_2:
   \   000062   705D         JNZ     ??ZDSecMgrEntryNew_3
    966                {
    967                  // return successful result
    968                  *entry = &ZDSecMgrEntries[index];
   \   000064   EA           MOV     A,R2
   \   000065   F8           MOV     R0,A
   \   000066   EB           MOV     A,R3
   \   000067   F9           MOV     R1,A
   \   000068   E8           MOV     A,R0
   \   000069   75F005       MOV     B,#0x5
   \   00006C   A4           MUL     AB
   \   00006D   C8           XCH     A,R0
   \   00006E   AEF0         MOV     R6,B
   \   000070   75F000       MOV     B,#0x0
   \   000073   A4           MUL     AB
   \   000074   2E           ADD     A,R6
   \   000075   FE           MOV     R6,A
   \   000076   75F005       MOV     B,#0x5
   \   000079   E9           MOV     A,R1
   \   00007A   A4           MUL     AB
   \   00007B   2E           ADD     A,R6
   \   00007C   F9           MOV     R1,A
   \   00007D   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000080   E0           MOVX    A,@DPTR
   \   000081   28           ADD     A,R0
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   39           ADDC    A,R1
   \   000086   F9           MOV     R1,A
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   E8           MOV     A,R0
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   E9           MOV     A,R1
   \   00008F   F0           MOVX    @DPTR,A
    969          
    970                  // Set the authentication option to default
    971                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   000090   EA           MOV     A,R2
   \   000091   F8           MOV     R0,A
   \   000092   EB           MOV     A,R3
   \   000093   F9           MOV     R1,A
   \   000094   E8           MOV     A,R0
   \   000095   75F005       MOV     B,#0x5
   \   000098   A4           MUL     AB
   \   000099   C8           XCH     A,R0
   \   00009A   AEF0         MOV     R6,B
   \   00009C   75F000       MOV     B,#0x0
   \   00009F   A4           MUL     AB
   \   0000A0   2E           ADD     A,R6
   \   0000A1   FE           MOV     R6,A
   \   0000A2   75F005       MOV     B,#0x5
   \   0000A5   E9           MOV     A,R1
   \   0000A6   A4           MUL     AB
   \   0000A7   2E           ADD     A,R6
   \   0000A8   F9           MOV     R1,A
   \   0000A9   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   28           ADD     A,R0
   \   0000AE   FE           MOV     R6,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   39           ADDC    A,R1
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   7400         MOV     A,#0x0
   \   0000BC   F0           MOVX    @DPTR,A
    972          
    973                  // break from loop
    974                  return ZSuccess;
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   800A         SJMP    ??ZDSecMgrEntryNew_4
    975                }
    976              }
   \                     ??ZDSecMgrEntryNew_3:
   \   0000C1   0A           INC     R2
   \   0000C2   EA           MOV     A,R2
   \   0000C3   7001         JNZ     ??ZDSecMgrEntryNew_5
   \   0000C5   0B           INC     R3
   \                     ??ZDSecMgrEntryNew_5:
   \   0000C6   02....       LJMP    ??ZDSecMgrEntryNew_1 & 0xFFFF
    977            }
    978          
    979            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryNew_0:
   \   0000C9   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryNew_4:
   \   0000CB   7F01         MOV     R7,#0x1
   \   0000CD   02....       LJMP    ?BANKED_LEAVE_XDATA
    980          }
    981          
    982          /******************************************************************************
    983           * @fn          ZDSecMgrCtrlInit
    984           *
    985           * @brief       Initialize control sub module
    986           *
    987           * @param       none
    988           *
    989           * @return      none
    990           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    991          void ZDSecMgrCtrlInit( void )
   \                     ZDSecMgrCtrlInit:
    992          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    993            uint16 size;
    994            uint16 index;
    995          
    996            // allocate entry data
    997            size = (short)( sizeof(ZDSecMgrCtrl_t) * ZDSECMGR_CTRL_MAX );
   \   000005   7E15         MOV     R6,#0x15
   \   000007   7F00         MOV     R7,#0x0
    998          
    999            ZDSecMgrCtrlData = osal_mem_alloc( size );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
   1000          
   1001            // initialize data
   1002            if ( ZDSecMgrCtrlData != NULL )
   \   000018   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   E8           MOV     A,R0
   \   000021   49           ORL     A,R1
   \   000022   6049         JZ      ??ZDSecMgrCtrlInit_0
   1003            {
   1004              for( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
   \   000024   75..00       MOV     ?V0,#0x0
   \   000027   75..00       MOV     ?V1,#0x0
   \                     ??ZDSecMgrCtrlInit_1:
   \   00002A   C3           CLR     C
   \   00002B   E5..         MOV     A,?V0
   \   00002D   9403         SUBB    A,#0x3
   \   00002F   E5..         MOV     A,?V1
   \   000031   9400         SUBB    A,#0x0
   \   000033   5038         JNC     ??ZDSecMgrCtrlInit_0
   1005              {
   1006                ZDSecMgrCtrlData[index].state = ZDSECMGR_CTRL_NONE;
   \   000035   A8..         MOV     R0,?V0
   \   000037   A9..         MOV     R1,?V1
   \   000039   E8           MOV     A,R0
   \   00003A   75F007       MOV     B,#0x7
   \   00003D   A4           MUL     AB
   \   00003E   C8           XCH     A,R0
   \   00003F   AAF0         MOV     R2,B
   \   000041   75F000       MOV     B,#0x0
   \   000044   A4           MUL     AB
   \   000045   2A           ADD     A,R2
   \   000046   FA           MOV     R2,A
   \   000047   75F007       MOV     B,#0x7
   \   00004A   E9           MOV     A,R1
   \   00004B   A4           MUL     AB
   \   00004C   2A           ADD     A,R2
   \   00004D   F9           MOV     R1,A
   \   00004E   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000051   E0           MOVX    A,@DPTR
   \   000052   28           ADD     A,R0
   \   000053   FA           MOV     R2,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   39           ADDC    A,R1
   \   000057   8A82         MOV     DPL,R2
   \   000059   F583         MOV     DPH,A
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   7400         MOV     A,#0x0
   \   000062   F0           MOVX    @DPTR,A
   1007              }
   \   000063   05..         INC     ?V0
   \   000065   E5..         MOV     A,?V0
   \   000067   70C1         JNZ     ??ZDSecMgrCtrlInit_1
   \   000069   05..         INC     ?V1
   \   00006B   80BD         SJMP    ??ZDSecMgrCtrlInit_1
   1008            }
   1009          }
   \                     ??ZDSecMgrCtrlInit_0:
   \   00006D   7F02         MOV     R7,#0x2
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1010          
   1011          /******************************************************************************
   1012           * @fn          ZDSecMgrCtrlRelease
   1013           *
   1014           * @brief       Release control data.
   1015           *
   1016           * @param       ctrl - [in] valid control data
   1017           *
   1018           * @return      none
   1019           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1020          void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl )
   \                     ZDSecMgrCtrlRelease:
   1021          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1022            // should always be enough entry control data
   1023            ctrl->state = ZDSECMGR_CTRL_NONE;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
   1024          }
   \   000010   D083         POP     DPH
   \   000012   D082         POP     DPL
   \   000014   02....       LJMP    ?BRET
   1025          
   1026          /******************************************************************************
   1027           * @fn          ZDSecMgrCtrlLookup
   1028           *
   1029           * @brief       Lookup control data.
   1030           *
   1031           * @param       entry - [in] valid entry data
   1032           * @param       ctrl  - [out] control data - NULL if not found
   1033           *
   1034           * @return      none
   1035           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1036          void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl )
   \                     ZDSecMgrCtrlLookup:
   1037          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1038            uint16 index;
   1039          
   1040            // initialize search results
   1041            *ctrl = NULL;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   7400         MOV     A,#0x0
   \   000013   F0           MOVX    @DPTR,A
   1042          
   1043            // verify data is available
   1044            if ( ZDSecMgrCtrlData != NULL )
   \   000014   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FA           MOV     R2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FB           MOV     R3,A
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??ZDSecMgrCtrlLookup_0 & 0xFFFF
   1045            {
   1046              for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
   \   000023   7800         MOV     R0,#0x0
   \   000025   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrCtrlLookup_1:
   \   000027   C3           CLR     C
   \   000028   E8           MOV     A,R0
   \   000029   9403         SUBB    A,#0x3
   \   00002B   E9           MOV     A,R1
   \   00002C   9400         SUBB    A,#0x0
   \   00002E   4003         JC      $+5
   \   000030   02....       LJMP    ??ZDSecMgrCtrlLookup_0 & 0xFFFF
   1047              {
   1048                // make sure control data is in use
   1049                if ( ZDSecMgrCtrlData[index].state != ZDSECMGR_CTRL_NONE )
   \   000033   E8           MOV     A,R0
   \   000034   FA           MOV     R2,A
   \   000035   E9           MOV     A,R1
   \   000036   FB           MOV     R3,A
   \   000037   EA           MOV     A,R2
   \   000038   75F007       MOV     B,#0x7
   \   00003B   A4           MUL     AB
   \   00003C   CA           XCH     A,R2
   \   00003D   85F0..       MOV     ?V0,B
   \   000040   75F000       MOV     B,#0x0
   \   000043   A4           MUL     AB
   \   000044   25..         ADD     A,?V0
   \   000046   F5..         MOV     ?V0,A
   \   000048   75F007       MOV     B,#0x7
   \   00004B   EB           MOV     A,R3
   \   00004C   A4           MUL     AB
   \   00004D   25..         ADD     A,?V0
   \   00004F   FB           MOV     R3,A
   \   000050   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000053   E0           MOVX    A,@DPTR
   \   000054   2A           ADD     A,R2
   \   000055   F5..         MOV     ?V0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   3B           ADDC    A,R3
   \   00005A   85..82       MOV     DPL,?V0
   \   00005D   F583         MOV     DPH,A
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   606B         JZ      ??ZDSecMgrCtrlLookup_2
   1050                {
   1051                  // check for entry match
   1052                  if ( ZDSecMgrCtrlData[index].entry == entry )
   \   000067   E8           MOV     A,R0
   \   000068   FA           MOV     R2,A
   \   000069   E9           MOV     A,R1
   \   00006A   FB           MOV     R3,A
   \   00006B   EA           MOV     A,R2
   \   00006C   75F007       MOV     B,#0x7
   \   00006F   A4           MUL     AB
   \   000070   CA           XCH     A,R2
   \   000071   85F0..       MOV     ?V0,B
   \   000074   75F000       MOV     B,#0x0
   \   000077   A4           MUL     AB
   \   000078   25..         ADD     A,?V0
   \   00007A   F5..         MOV     ?V0,A
   \   00007C   75F007       MOV     B,#0x7
   \   00007F   EB           MOV     A,R3
   \   000080   A4           MUL     AB
   \   000081   25..         ADD     A,?V0
   \   000083   FB           MOV     R3,A
   \   000084   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000087   E0           MOVX    A,@DPTR
   \   000088   2A           ADD     A,R2
   \   000089   F5..         MOV     ?V0,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   3B           ADDC    A,R3
   \   00008E   85..82       MOV     DPL,?V0
   \   000091   F583         MOV     DPH,A
   \   000093   E0           MOVX    A,@DPTR
   \   000094   FA           MOV     R2,A
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FB           MOV     R3,A
   \   000098   EE           MOV     A,R6
   \   000099   6A           XRL     A,R2
   \   00009A   7002         JNZ     ??ZDSecMgrCtrlLookup_3
   \   00009C   EF           MOV     A,R7
   \   00009D   6B           XRL     A,R3
   \                     ??ZDSecMgrCtrlLookup_3:
   \   00009E   7032         JNZ     ??ZDSecMgrCtrlLookup_2
   1053                  {
   1054                    // return this control data
   1055                    *ctrl = &ZDSecMgrCtrlData[index];
   \   0000A0   E8           MOV     A,R0
   \   0000A1   FA           MOV     R2,A
   \   0000A2   E9           MOV     A,R1
   \   0000A3   FB           MOV     R3,A
   \   0000A4   EA           MOV     A,R2
   \   0000A5   75F007       MOV     B,#0x7
   \   0000A8   A4           MUL     AB
   \   0000A9   CA           XCH     A,R2
   \   0000AA   85F0..       MOV     ?V0,B
   \   0000AD   75F000       MOV     B,#0x0
   \   0000B0   A4           MUL     AB
   \   0000B1   25..         ADD     A,?V0
   \   0000B3   F5..         MOV     ?V0,A
   \   0000B5   75F007       MOV     B,#0x7
   \   0000B8   EB           MOV     A,R3
   \   0000B9   A4           MUL     AB
   \   0000BA   25..         ADD     A,?V0
   \   0000BC   FB           MOV     R3,A
   \   0000BD   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   2A           ADD     A,R2
   \   0000C2   FA           MOV     R2,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   3B           ADDC    A,R3
   \   0000C6   FB           MOV     R3,A
   \   0000C7   8C82         MOV     DPL,R4
   \   0000C9   8D83         MOV     DPH,R5
   \   0000CB   EA           MOV     A,R2
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   EB           MOV     A,R3
   \   0000CF   F0           MOVX    @DPTR,A
   1056          
   1057                    // break from loop
   1058                    return;
   \   0000D0   8008         SJMP    ??ZDSecMgrCtrlLookup_0
   1059                  }
   1060                }
   1061              }
   \                     ??ZDSecMgrCtrlLookup_2:
   \   0000D2   08           INC     R0
   \   0000D3   E8           MOV     A,R0
   \   0000D4   7001         JNZ     ??ZDSecMgrCtrlLookup_4
   \   0000D6   09           INC     R1
   \                     ??ZDSecMgrCtrlLookup_4:
   \   0000D7   02....       LJMP    ??ZDSecMgrCtrlLookup_1 & 0xFFFF
   1062            }
   1063          }
   \                     ??ZDSecMgrCtrlLookup_0:
   \   0000DA   7F01         MOV     R7,#0x1
   \   0000DC   02....       LJMP    ?BANKED_LEAVE_XDATA
   1064          
   1065          /******************************************************************************
   1066           * @fn          ZDSecMgrCtrlSet
   1067           *
   1068           * @brief       Set control data.
   1069           *
   1070           * @param       device - [in] valid device data
   1071           * @param       entry  - [in] valid entry data
   1072           * @param       ctrl   - [in] valid control data
   1073           *
   1074           * @return      none
   1075           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1076          void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
   \                     ZDSecMgrCtrlSet:
   1077                                ZDSecMgrEntry_t*  entry,
   1078                                ZDSecMgrCtrl_t*   ctrl )
   1079          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV     A,#0x9
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   1080            // set control date
   1081            ctrl->parentAddr = device->parentAddr;
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   EE           MOV     A,R6
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   EF           MOV     A,R7
   \   000026   F0           MOVX    @DPTR,A
   1082            ctrl->secure     = device->secure;
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C0E0         PUSH    A
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   1083            ctrl->entry      = entry;
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   EC           MOV     A,R4
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   ED           MOV     A,R5
   \   000047   F0           MOVX    @DPTR,A
   1084            ctrl->state      = ZDSECMGR_CTRL_INIT;
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
   1085            ctrl->cntr       = 0;
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   7400         MOV     A,#0x0
   \   000060   F0           MOVX    @DPTR,A
   1086          
   1087            // set device pointer
   1088            device->ctrl = ctrl;
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   1089          }
   \   000072   7F01         MOV     R7,#0x1
   \   000074   02....       LJMP    ?BANKED_LEAVE_XDATA
   1090          
   1091          /******************************************************************************
   1092           * @fn          ZDSecMgrCtrlAdd
   1093           *
   1094           * @brief       Add control data.
   1095           *
   1096           * @param       device - [in] valid device data
   1097           * @param       entry  - [in] valid entry data
   1098           *
   1099           * @return      ZStatus_t
   1100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1101          ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry )
   \                     ZDSecMgrCtrlAdd:
   1102          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1103            uint16 index;
   1104          
   1105            // verify data is available
   1106            if ( ZDSecMgrCtrlData != NULL )
   \   00000D   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   E8           MOV     A,R0
   \   000016   49           ORL     A,R1
   \   000017   7003         JNZ     $+5
   \   000019   02....       LJMP    ??ZDSecMgrCtrlAdd_0 & 0xFFFF
   1107            {
   1108              // look for an empty slot
   1109              for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
   \   00001C   7E00         MOV     R6,#0x0
   \   00001E   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrCtrlAdd_1:
   \   000020   C3           CLR     C
   \   000021   EE           MOV     A,R6
   \   000022   9403         SUBB    A,#0x3
   \   000024   EF           MOV     A,R7
   \   000025   9400         SUBB    A,#0x0
   \   000027   5073         JNC     ??ZDSecMgrCtrlAdd_0
   1110              {
   1111                if ( ZDSecMgrCtrlData[index].state == ZDSECMGR_CTRL_NONE )
   \   000029   EE           MOV     A,R6
   \   00002A   F8           MOV     R0,A
   \   00002B   EF           MOV     A,R7
   \   00002C   F9           MOV     R1,A
   \   00002D   E8           MOV     A,R0
   \   00002E   75F007       MOV     B,#0x7
   \   000031   A4           MUL     AB
   \   000032   C8           XCH     A,R0
   \   000033   AAF0         MOV     R2,B
   \   000035   75F000       MOV     B,#0x0
   \   000038   A4           MUL     AB
   \   000039   2A           ADD     A,R2
   \   00003A   FA           MOV     R2,A
   \   00003B   75F007       MOV     B,#0x7
   \   00003E   E9           MOV     A,R1
   \   00003F   A4           MUL     AB
   \   000040   2A           ADD     A,R2
   \   000041   F9           MOV     R1,A
   \   000042   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000045   E0           MOVX    A,@DPTR
   \   000046   28           ADD     A,R0
   \   000047   FA           MOV     R2,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   39           ADDC    A,R1
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   F583         MOV     DPH,A
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   703E         JNZ     ??ZDSecMgrCtrlAdd_2
   1112                {
   1113                  // return successful results
   1114                  ZDSecMgrCtrlSet( device, entry, &ZDSecMgrCtrlData[index] );
   \   000057                ; Setup parameters for call to function ZDSecMgrCtrlSet
   \   000057   EE           MOV     A,R6
   \   000058   F8           MOV     R0,A
   \   000059   EF           MOV     A,R7
   \   00005A   F9           MOV     R1,A
   \   00005B   E8           MOV     A,R0
   \   00005C   75F007       MOV     B,#0x7
   \   00005F   A4           MUL     AB
   \   000060   C8           XCH     A,R0
   \   000061   AAF0         MOV     R2,B
   \   000063   75F000       MOV     B,#0x0
   \   000066   A4           MUL     AB
   \   000067   2A           ADD     A,R2
   \   000068   FA           MOV     R2,A
   \   000069   75F007       MOV     B,#0x7
   \   00006C   E9           MOV     A,R1
   \   00006D   A4           MUL     AB
   \   00006E   2A           ADD     A,R2
   \   00006F   F9           MOV     R1,A
   \   000070   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000073   E0           MOVX    A,@DPTR
   \   000074   28           ADD     A,R0
   \   000075   F5..         MOV     ?V4,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   39           ADDC    A,R1
   \   00007A   F5..         MOV     ?V5,A
   \   00007C   78..         MOV     R0,#?V4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   AC..         MOV     R4,?V0
   \   000083   AD..         MOV     R5,?V1
   \   000085   AA..         MOV     R2,?V2
   \   000087   AB..         MOV     R3,?V3
   \   000089   12....       LCALL   `??ZDSecMgrCtrlSet::?relay`; Banked call to: ZDSecMgrCtrlSet
   \   00008C   7402         MOV     A,#0x2
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   1115          
   1116                  // break from loop
   1117                  return ZSuccess;
   \   000091   7900         MOV     R1,#0x0
   \   000093   8009         SJMP    ??ZDSecMgrCtrlAdd_3
   1118                }
   1119              }
   \                     ??ZDSecMgrCtrlAdd_2:
   \   000095   0E           INC     R6
   \   000096   EE           MOV     A,R6
   \   000097   7087         JNZ     ??ZDSecMgrCtrlAdd_1
   \   000099   0F           INC     R7
   \   00009A   8084         SJMP    ??ZDSecMgrCtrlAdd_1
   1120            }
   1121          
   1122            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrCtrlAdd_0:
   \   00009C   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrCtrlAdd_3:
   \   00009E   7F06         MOV     R7,#0x6
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA
   1123          }
   1124          
   1125          /******************************************************************************
   1126           * @fn          ZDSecMgrCtrlTerm
   1127           *
   1128           * @brief       Terminate device control.
   1129           *
   1130           * @param       entry - [in] valid entry data
   1131           *
   1132           * @return      none
   1133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1134          void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrCtrlTerm:
   1135          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1136            ZDSecMgrCtrl_t* ctrl;
   1137          
   1138            // remove device from control data
   1139            ZDSecMgrCtrlLookup ( entry, &ctrl );
   \   00000E                ; Setup parameters for call to function ZDSecMgrCtrlLookup
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrCtrlLookup::?relay`; Banked call to: ZDSecMgrCtrlLookup
   1140          
   1141            if ( ctrl != NULL )
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   E8           MOV     A,R0
   \   000025   49           ORL     A,R1
   \   000026   600E         JZ      ??ZDSecMgrCtrlTerm_0
   1142            {
   1143              ZDSecMgrCtrlRelease ( ctrl );
   \   000028                ; Setup parameters for call to function ZDSecMgrCtrlRelease
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   `??ZDSecMgrCtrlRelease::?relay`; Banked call to: ZDSecMgrCtrlRelease
   1144            }
   1145          }
   \                     ??ZDSecMgrCtrlTerm_0:
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   7F01         MOV     R7,#0x1
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1146          
   1147          /******************************************************************************
   1148           * @fn          ZDSecMgrCtrlReset
   1149           *
   1150           * @brief       Reset control data.
   1151           *
   1152           * @param       device - [in] valid device data
   1153           * @param       entry  - [in] valid entry data
   1154           *
   1155           * @return      ZStatus_t
   1156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1157          ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrCtrlReset:
   1158          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1159            ZStatus_t       status;
   1160            ZDSecMgrCtrl_t* ctrl;
   1161          
   1162            // initialize results
   1163            status = ZNwkUnknownDevice;
   \   000012   75..C8       MOV     ?V2,#-0x38
   1164          
   1165            // look for a match for the entry
   1166            ZDSecMgrCtrlLookup( entry, &ctrl );
   \   000015                ; Setup parameters for call to function ZDSecMgrCtrlLookup
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??ZDSecMgrCtrlLookup::?relay`; Banked call to: ZDSecMgrCtrlLookup
   1167          
   1168            if ( ctrl != NULL )
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   E8           MOV     A,R0
   \   00002C   49           ORL     A,R1
   \   00002D   601E         JZ      ??ZDSecMgrCtrlReset_0
   1169            {
   1170              ZDSecMgrCtrlSet( device, entry, ctrl );
   \   00002F                ; Setup parameters for call to function ZDSecMgrCtrlSet
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FD           MOV     R5,A
   \   00003C   AA..         MOV     R2,?V0
   \   00003E   AB..         MOV     R3,?V1
   \   000040   12....       LCALL   `??ZDSecMgrCtrlSet::?relay`; Banked call to: ZDSecMgrCtrlSet
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1171          
   1172              status = ZSuccess;
   \   000048   75..00       MOV     ?V2,#0x0
   \   00004B   800E         SJMP    ??ZDSecMgrCtrlReset_1
   1173            }
   1174            else
   1175            {
   1176              status = ZDSecMgrCtrlAdd( device, entry );
   \                     ??ZDSecMgrCtrlReset_0:
   \   00004D                ; Setup parameters for call to function ZDSecMgrCtrlAdd
   \   00004D   EE           MOV     A,R6
   \   00004E   FC           MOV     R4,A
   \   00004F   EF           MOV     A,R7
   \   000050   FD           MOV     R5,A
   \   000051   AA..         MOV     R2,?V0
   \   000053   AB..         MOV     R3,?V1
   \   000055   12....       LCALL   `??ZDSecMgrCtrlAdd::?relay`; Banked call to: ZDSecMgrCtrlAdd
   \   000058   E9           MOV     A,R1
   \   000059   F5..         MOV     ?V2,A
   1177            }
   1178          
   1179            return status;
   \                     ??ZDSecMgrCtrlReset_1:
   \   00005B   A9..         MOV     R1,?V2
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   7F03         MOV     R7,#0x3
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA
   1180          }
   1181          
   1182          /******************************************************************************
   1183           * @fn          ZDSecMgrMasterKeyLoad
   1184           *
   1185           * @brief       Load the MASTER key for device with specified EXT
   1186           *              address.
   1187           *
   1188           * @param       extAddr - [in] EXT address of device
   1189           * @param       key     - [in] MASTER key shared with device
   1190           *
   1191           * @return      ZStatus_t
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key )
   \                     ZDSecMgrMasterKeyLoad:
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   1195            ZStatus_t status;
   1196            uint16 ami;
   1197            uint16 keyNvId;
   1198          
   1199            // set status based on policy
   1200            status = ZDSecMgrExtAddrLookup( extAddr, &ami );
   \   000012                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000012   AC..         MOV     R4,?XSP + 0
   \   000014   AD..         MOV     R5,?XSP + 1
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00001D   E9           MOV     A,R1
   \   00001E   F5..         MOV     ?V0,A
   1201          
   1202            if ( status == ZSuccess )
   \   000020   E5..         MOV     A,?V0
   \   000022   7054         JNZ     ??ZDSecMgrMasterKeyLoad_0
   1203            {
   1204              // get the address NV ID
   1205              if ( ZDSecMgrMasterKeyLookup( ami, &keyNvId ) == ZSuccess )
   \   000024                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?XSTACK_DISP102_8
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??ZDSecMgrMasterKeyLookup::?relay`; Banked call to: ZDSecMgrMasterKeyLookup
   \   000037   E9           MOV     A,R1
   \   000038   7029         JNZ     ??ZDSecMgrMasterKeyLoad_1
   1206              {
   1207                // overwrite old key in NV
   1208                osal_nv_write( keyNvId, osal_offsetof(ZDSecMgrMasterKeyData_t, key),
   1209                               SEC_KEY_LEN, key );
   \   00003A                ; Setup parameters for call to function osal_nv_write
   \   00003A   78..         MOV     R0,#?V2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   75..10       MOV     ?V4,#0x10
   \   000042   75..00       MOV     ?V5,#0x0
   \   000045   78..         MOV     R0,#?V4
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   7C02         MOV     R4,#0x2
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   7406         MOV     A,#0x6
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FA           MOV     R2,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   E9           MOV     A,R1
   \   000061   8015         SJMP    ??ZDSecMgrMasterKeyLoad_0
   1210              }
   1211              else
   1212              {
   1213                // store new key -- NULL will zero key
   1214                status = ZDSecMgrMasterKeyStore( ami, key );
   \                     ??ZDSecMgrMasterKeyLoad_1:
   \   000063                ; Setup parameters for call to function ZDSecMgrMasterKeyStore
   \   000063   AC..         MOV     R4,?V2
   \   000065   AD..         MOV     R5,?V3
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   `??ZDSecMgrMasterKeyStore::?relay`; Banked call to: ZDSecMgrMasterKeyStore
   \   000075   E9           MOV     A,R1
   \   000076   F5..         MOV     ?V0,A
   1215              }
   1216            }
   1217          
   1218            return status;
   \                     ??ZDSecMgrMasterKeyLoad_0:
   \   000078   A9..         MOV     R1,?V0
   \   00007A   7404         MOV     A,#0x4
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   7F06         MOV     R7,#0x6
   \   000081   02....       LJMP    ?BANKED_LEAVE_XDATA
   1219          }
   1220          
   1221          /******************************************************************************
   1222           * @fn          ZDSecMgrAppKeyGet
   1223           *
   1224           * @brief       get an APP key - option APP(MASTER or LINK) key
   1225           *
   1226           * @param       initNwkAddr - [in] NWK address of initiator device
   1227           * @param       initExtAddr - [in] EXT address of initiator device
   1228           * @param       partNwkAddr - [in] NWK address of partner device
   1229           * @param       partExtAddr - [in] EXT address of partner device
   1230           * @param       key         - [out] APP(MASTER or LINK) key
   1231           * @param       keyType     - [out] APP(MASTER or LINK) key type
   1232           *
   1233           * @return      ZStatus_t
   1234           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
   1235          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
   1236                                                           // to KEY_TYPE_APP_LINK since
   1237                                                           // only specific requirement
   1238                                                           // right now comes from SE profile
   1239          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1240          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
   1241                                       uint8*  initExtAddr,
   1242                                       uint16  partNwkAddr,
   1243                                       uint8*  partExtAddr,
   1244                                       uint8** key,
   1245                                       uint8*  keyType )
   1246          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V1,A
   \   000019   7414         MOV     A,#0x14
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FE           MOV     R6,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FF           MOV     R7,A
   1247            // Intentionally unreferenced parameters
   1248            (void)initNwkAddr;
   1249            (void)initExtAddr;
   1250            (void)partNwkAddr;
   1251            (void)partExtAddr;
   1252          
   1253            //---------------------------------------------------------------------------
   1254            // note:
   1255            // should use a robust mechanism to generate keys, for example
   1256            // combine EXT addresses and call a hash function
   1257            //---------------------------------------------------------------------------
   1258            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   000023                ; Setup parameters for call to function SSP_GetTrueRand
   \   000023   85..82       MOV     DPL,?V0
   \   000026   85..83       MOV     DPH,?V1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FA           MOV     R2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FB           MOV     R3,A
   \   00002E   7910         MOV     R1,#0x10
   \   000030   12....       LCALL   `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
   1259          
   1260            *keyType = ZDSecMgrAppKeyType;
   \   000033   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C0E0         PUSH    A
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
   1261          
   1262            return ZSuccess;
   \   000040   7900         MOV     R1,#0x0
   \   000042   7F06         MOV     R7,#0x6
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   1263          }
   1264          
   1265          /******************************************************************************
   1266           * @fn          ZDSecMgrAppKeyReq
   1267           *
   1268           * @brief       Process request for APP key between two devices.
   1269           *
   1270           * @param       device - [in] ZDO_RequestKeyInd_t, request info
   1271           *
   1272           * @return      none
   1273           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1274          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
   1275          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV     A,#-0x27
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1276            APSME_TransportKeyReq_t req;
   1277            uint8                   initExtAddr[Z_EXTADDR_LEN];
   1278            uint16                  partNwkAddr;
   1279            uint8                   key[SEC_KEY_LEN];
   1280          
   1281          
   1282            // validate initiator and partner
   1283            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
   1284                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   2405         ADD     A,#0x5
   \   000015   FA           MOV     R2,A
   \   000016   E4           CLR     A
   \   000017   3F           ADDC    A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00001C   E9           MOV     A,R1
   \   00001D   6401         XRL     A,#0x1
   \   00001F   6003         JZ      $+5
   \   000021   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   000024                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000024   740F         MOV     A,#0xf
   \   000026   12....       LCALL   ?XSTACK_DISP102_8
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000037   E9           MOV     A,R1
   \   000038   6401         XRL     A,#0x1
   \   00003A   6003         JZ      $+5
   \   00003C   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   1285            {
   1286              // point the key to some memory
   1287              req.key = key;
   \   00003F   7417         MOV     A,#0x17
   \   000041   12....       LCALL   ?XSTACK_DISP100_8
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
   1288          
   1289              // get an APP key - option APP (MASTER or LINK) key
   1290              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
   1291                                      initExtAddr,
   1292                                      partNwkAddr,
   1293                                      ind->partExtAddr,
   1294                                      &req.key,
   1295                                      &req.keyType ) == ZSuccess )
   \   00004E                ; Setup parameters for call to function ZDSecMgrAppKeyGet
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   8582..       MOV     ?V0,DPL
   \   000056   8583..       MOV     ?V1,DPH
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7408         MOV     A,#0x8
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   8582..       MOV     ?V0,DPL
   \   000066   8583..       MOV     ?V1,DPH
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   EE           MOV     A,R6
   \   00006F   2405         ADD     A,#0x5
   \   000071   F5..         MOV     ?V0,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   F5..         MOV     ?V1,A
   \   000077   78..         MOV     R0,#?V0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   7406         MOV     A,#0x6
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000084   7417         MOV     A,#0x17
   \   000086   12....       LCALL   ?XSTACK_DISP102_8
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FA           MOV     R2,A
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
   \   000097   7408         MOV     A,#0x8
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   E9           MOV     A,R1
   \   00009D   6003         JZ      $+5
   \   00009F   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   1296              {
   1297                // always secure
   1298                req.nwkSecure = TRUE;
   \   0000A2   740C         MOV     A,#0xc
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   F0           MOVX    @DPTR,A
   1299                req.apsSecure = TRUE;
   \   0000AA   740B         MOV     A,#0xb
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   F0           MOVX    @DPTR,A
   1300                req.tunnel    = NULL;
   \   0000B2   740D         MOV     A,#0xd
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   7400         MOV     A,#0x0
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   7400         MOV     A,#0x0
   \   0000BD   F0           MOVX    @DPTR,A
   1301          
   1302                // send key to initiator device
   1303                req.dstAddr   = ind->srcAddr;
   \   0000BE   8E82         MOV     DPL,R6
   \   0000C0   8F83         MOV     DPH,R7
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E8           MOV     A,R0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E9           MOV     A,R1
   \   0000D2   F0           MOVX    @DPTR,A
   1304                req.extAddr   = ind->partExtAddr;
   \   0000D3   EE           MOV     A,R6
   \   0000D4   2405         ADD     A,#0x5
   \   0000D6   F8           MOV     R0,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   F9           MOV     R1,A
   \   0000DA   7408         MOV     A,#0x8
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E8           MOV     A,R0
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E9           MOV     A,R1
   \   0000E3   F0           MOVX    @DPTR,A
   1305                req.initiator = TRUE;
   \   0000E4   740A         MOV     A,#0xa
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   7401         MOV     A,#0x1
   \   0000EB   F0           MOVX    @DPTR,A
   1306                APSME_TransportKeyReq( &req );
   \   0000EC                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000EC   7402         MOV     A,#0x2
   \   0000EE   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F1   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000F4   E9           MOV     A,R1
   1307          
   1308                // send key to partner device
   1309                req.dstAddr   = partNwkAddr;
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E8           MOV     A,R0
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   E9           MOV     A,R1
   \   000109   F0           MOVX    @DPTR,A
   1310                req.extAddr   = initExtAddr;
   \   00010A   740F         MOV     A,#0xf
   \   00010C   12....       LCALL   ?XSTACK_DISP100_8
   \   00010F   7408         MOV     A,#0x8
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   E8           MOV     A,R0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   E9           MOV     A,R1
   \   000118   F0           MOVX    @DPTR,A
   1311                req.initiator = FALSE;
   \   000119   740A         MOV     A,#0xa
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   7400         MOV     A,#0x0
   \   000120   F0           MOVX    @DPTR,A
   1312          
   1313                APSME_TransportKeyReq( &req );
   \   000121                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000121   7402         MOV     A,#0x2
   \   000123   12....       LCALL   ?XSTACK_DISP101_8
   \   000126   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000129   E9           MOV     A,R1
   1314          
   1315                // clear copy of key in RAM
   1316                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   00012A                ; Setup parameters for call to function osal_memset
   \   00012A   7C10         MOV     R4,#0x10
   \   00012C   7D00         MOV     R5,#0x0
   \   00012E   7900         MOV     R1,#0x0
   \   000130   7417         MOV     A,#0x17
   \   000132   12....       LCALL   ?XSTACK_DISP101_8
   \   000135   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1317          
   1318              }
   1319            }
   1320          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   000138   7427         MOV     A,#0x27
   \   00013A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013D   7F02         MOV     R7,#0x2
   \   00013F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1321          
   1322          /******************************************************************************
   1323           * @fn          ZDSecMgrEstablishKey
   1324           *
   1325           * @brief       Start SKKE with device joining network.
   1326           *
   1327           * @param       device - [in] ZDSecMgrDevice_t, device info
   1328           *
   1329           * @return      ZStatus_t
   1330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1331          ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrEstablishKey:
   1332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1333            ZStatus_t               status;
   1334            APSME_EstablishKeyReq_t req;
   1335          
   1336          
   1337            req.respExtAddr = device->extAddr;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E8           MOV     A,R0
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   E9           MOV     A,R1
   \   000022   F0           MOVX    @DPTR,A
   1338            req.method      = APSME_SKKE_METHOD;
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
   1339          
   1340            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00002B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   \   000032   A8..         MOV     R0,?V2
   \   000034   A9..         MOV     R1,?V3
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   68           XRL     A,R0
   \   000040   7003         JNZ     ??ZDSecMgrEstablishKey_0
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   69           XRL     A,R1
   \                     ??ZDSecMgrEstablishKey_0:
   \   000045   7026         JNZ     ??ZDSecMgrEstablishKey_1
   1341            {
   1342              req.dstAddr   = device->nwkAddr;
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E9           MOV     A,R1
   \   00005A   F0           MOVX    @DPTR,A
   1343              //devtag.0604.todo - remove obsolete
   1344              req.apsSecure = FALSE;
   \   00005B   7405         MOV     A,#0x5
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7400         MOV     A,#0x0
   \   000062   F0           MOVX    @DPTR,A
   1345              req.nwkSecure = FALSE;
   \   000063   7406         MOV     A,#0x6
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   7400         MOV     A,#0x0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   8028         SJMP    ??ZDSecMgrEstablishKey_2
   1346            }
   1347            else
   1348            {
   1349              req.dstAddr   = device->parentAddr;
   \                     ??ZDSecMgrEstablishKey_1:
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F9           MOV     R1,A
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   E8           MOV     A,R0
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E9           MOV     A,R1
   \   000084   F0           MOVX    @DPTR,A
   1350              //devtag.0604.todo - remove obsolete
   1351              req.apsSecure = TRUE;
   \   000085   7405         MOV     A,#0x5
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   7401         MOV     A,#0x1
   \   00008C   F0           MOVX    @DPTR,A
   1352              req.nwkSecure = TRUE;
   \   00008D   7406         MOV     A,#0x6
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   7401         MOV     A,#0x1
   \   000094   F0           MOVX    @DPTR,A
   1353            }
   1354          
   1355            status = APSME_EstablishKeyReq( &req );
   \                     ??ZDSecMgrEstablishKey_2:
   \   000095                ; Setup parameters for call to function APSME_EstablishKeyReq
   \   000095   AA..         MOV     R2,?XSP + 0
   \   000097   AB..         MOV     R3,?XSP + 1
   \   000099   12....       LCALL   `??APSME_EstablishKeyReq::?relay`; Banked call to: APSME_EstablishKeyReq
   \   00009C   E9           MOV     A,R1
   \   00009D   F5..         MOV     ?V0,A
   1356          
   1357            return status;
   \   00009F   A9..         MOV     R1,?V0
   \   0000A1   7407         MOV     A,#0x7
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   7F04         MOV     R7,#0x4
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA
   1358          }
   1359          
   1360          /******************************************************************************
   1361           * @fn          ZDSecMgrSendMasterKey
   1362           *
   1363           * @brief       Send MASTER key to device joining network.
   1364           *
   1365           * @param       device - [in] ZDSecMgrDevice_t, device info
   1366           *
   1367           * @return      ZStatus_t
   1368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1369          ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendMasterKey:
   1370          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 31
   \   000005   74E1         MOV     A,#-0x1f
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1371            ZStatus_t status;
   1372            APSME_TransportKeyReq_t req;
   1373            uint16 keyNvId;
   1374            uint8 masterKey[SEC_KEY_LEN];
   1375          
   1376          
   1377            req.keyType = KEY_TYPE_TC_MASTER;
   \   00000E   7404         MOV     A,#0x4
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   1378            req.extAddr = device->extAddr;
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   7408         MOV     A,#0x8
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E8           MOV     A,R0
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E9           MOV     A,R1
   \   00002A   F0           MOVX    @DPTR,A
   1379            req.tunnel  = NULL;
   \   00002B   740D         MOV     A,#0xd
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   7400         MOV     A,#0x0
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   7400         MOV     A,#0x0
   \   000036   F0           MOVX    @DPTR,A
   1380          
   1381            if ( ZDSecMgrMasterKeyLookup( device->ctrl->entry->ami, &keyNvId ) == ZSuccess )
   \   000037                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000037   AC..         MOV     R4,?XSP + 0
   \   000039   AD..         MOV     R5,?XSP + 1
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F583         MOV     DPH,A
   \   00004D   8882         MOV     DPL,R0
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F583         MOV     DPH,A
   \   000055   8882         MOV     DPL,R0
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FA           MOV     R2,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FB           MOV     R3,A
   \   00005C   12....       LCALL   `??ZDSecMgrMasterKeyLookup::?relay`; Banked call to: ZDSecMgrMasterKeyLookup
   \   00005F   E9           MOV     A,R1
   \   000060   7032         JNZ     ??ZDSecMgrSendMasterKey_0
   1382            {
   1383              osal_nv_read( keyNvId, osal_offsetof(ZDSecMgrMasterKeyData_t, key),
   1384                            SEC_KEY_LEN, masterKey );
   \   000062                ; Setup parameters for call to function osal_nv_read
   \   000062   740F         MOV     A,#0xf
   \   000064   12....       LCALL   ?XSTACK_DISP100_8
   \   000067   88..         MOV     ?V2,R0
   \   000069   89..         MOV     ?V3,R1
   \   00006B   78..         MOV     R0,#?V2
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   75..10       MOV     ?V2,#0x10
   \   000073   75..00       MOV     ?V3,#0x0
   \   000076   78..         MOV     R0,#?V2
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   7C02         MOV     R4,#0x2
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   7404         MOV     A,#0x4
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FA           MOV     R2,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FB           MOV     R3,A
   \   000089   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00008C   7404         MOV     A,#0x4
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   800E         SJMP    ??ZDSecMgrSendMasterKey_1
   1385            }
   1386            else
   1387            {
   1388              // in case read from NV fails
   1389              osal_memset( masterKey, 0x00, SEC_KEY_LEN);
   \                     ??ZDSecMgrSendMasterKey_0:
   \   000094                ; Setup parameters for call to function osal_memset
   \   000094   7C10         MOV     R4,#0x10
   \   000096   7D00         MOV     R5,#0x0
   \   000098   7900         MOV     R1,#0x0
   \   00009A   740F         MOV     A,#0xf
   \   00009C   12....       LCALL   ?XSTACK_DISP101_8
   \   00009F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1390            }
   1391          
   1392            req.key = masterKey;
   \                     ??ZDSecMgrSendMasterKey_1:
   \   0000A2   740F         MOV     A,#0xf
   \   0000A4   12....       LCALL   ?XSTACK_DISP100_8
   \   0000A7   7406         MOV     A,#0x6
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E8           MOV     A,R0
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E9           MOV     A,R1
   \   0000B0   F0           MOVX    @DPTR,A
   1393          
   1394            //check if using secure hop to to parent
   1395            if ( device->parentAddr != NLME_GetShortAddr() )
   \   0000B1                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000B1   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000B4   8A..         MOV     ?V2,R2
   \   0000B6   8B..         MOV     ?V3,R3
   \   0000B8   A8..         MOV     R0,?V2
   \   0000BA   A9..         MOV     R1,?V3
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   68           XRL     A,R0
   \   0000C6   7003         JNZ     ??ZDSecMgrSendMasterKey_2
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   69           XRL     A,R1
   \                     ??ZDSecMgrSendMasterKey_2:
   \   0000CB   6029         JZ      ??ZDSecMgrSendMasterKey_3
   1396            {
   1397              //send to parent with security
   1398              req.dstAddr   = device->parentAddr;
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F8           MOV     R0,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F9           MOV     R1,A
   \   0000DA   7402         MOV     A,#0x2
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E8           MOV     A,R0
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E9           MOV     A,R1
   \   0000E3   F0           MOVX    @DPTR,A
   1399              req.nwkSecure = TRUE;
   \   0000E4   740C         MOV     A,#0xc
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   7401         MOV     A,#0x1
   \   0000EB   F0           MOVX    @DPTR,A
   1400              req.apsSecure = TRUE;
   \   0000EC   740B         MOV     A,#0xb
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   7401         MOV     A,#0x1
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   8023         SJMP    ??ZDSecMgrSendMasterKey_4
   1401            }
   1402            else
   1403            {
   1404              //direct with no security
   1405              req.dstAddr   = device->nwkAddr;
   \                     ??ZDSecMgrSendMasterKey_3:
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F8           MOV     R0,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F9           MOV     R1,A
   \   0000FF   7402         MOV     A,#0x2
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E8           MOV     A,R0
   \   000105   F0           MOVX    @DPTR,A
   \   000106   A3           INC     DPTR
   \   000107   E9           MOV     A,R1
   \   000108   F0           MOVX    @DPTR,A
   1406              req.nwkSecure = FALSE;
   \   000109   740C         MOV     A,#0xc
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   7400         MOV     A,#0x0
   \   000110   F0           MOVX    @DPTR,A
   1407              req.apsSecure = FALSE;
   \   000111   740B         MOV     A,#0xb
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   7400         MOV     A,#0x0
   \   000118   F0           MOVX    @DPTR,A
   1408            }
   1409          
   1410            status = APSME_TransportKeyReq( &req );
   \                     ??ZDSecMgrSendMasterKey_4:
   \   000119                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000119   7402         MOV     A,#0x2
   \   00011B   12....       LCALL   ?XSTACK_DISP101_8
   \   00011E   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000121   E9           MOV     A,R1
   \   000122   F5..         MOV     ?V0,A
   1411          
   1412            // clear copy of key in RAM
   1413            osal_memset( masterKey, 0x00, SEC_KEY_LEN);
   \   000124                ; Setup parameters for call to function osal_memset
   \   000124   7C10         MOV     R4,#0x10
   \   000126   7D00         MOV     R5,#0x0
   \   000128   7900         MOV     R1,#0x0
   \   00012A   740F         MOV     A,#0xf
   \   00012C   12....       LCALL   ?XSTACK_DISP101_8
   \   00012F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1414          
   1415            return status;
   \   000132   A9..         MOV     R1,?V0
   \   000134   741F         MOV     A,#0x1f
   \   000136   12....       LCALL   ?DEALLOC_XSTACK8
   \   000139   7F04         MOV     R7,#0x4
   \   00013B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1416          }
   1417          
   1418          /******************************************************************************
   1419           * @fn          ZDSecMgrSendNwkKey
   1420           *
   1421           * @brief       Send NWK key to device joining network.
   1422           *
   1423           * @param       device - [in] ZDSecMgrDevice_t, device info
   1424           *
   1425           * @return      ZStatus_t
   1426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1427          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
   1428          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1429            ZStatus_t status;
   1430            APSME_TransportKeyReq_t req;
   1431            APSDE_FrameTunnel_t tunnel;
   1432            nwkKeyDesc tmpKey;
   1433          
   1434            req.dstAddr   = device->nwkAddr;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   E8           MOV     A,R0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   E9           MOV     A,R1
   \   000021   F0           MOVX    @DPTR,A
   1435            req.extAddr   = device->extAddr;
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   7406         MOV     A,#0x6
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E8           MOV     A,R0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E9           MOV     A,R1
   \   000036   F0           MOVX    @DPTR,A
   1436          
   1437            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1438            {
   1439              req.keyType   = KEY_TYPE_NWK_HIGH;
   1440            }
   1441            else
   1442            {
   1443              req.keyType   = KEY_TYPE_NWK;
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   7401         MOV     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
   1444            }
   1445          
   1446            // get the Active Key into a local variable
   1447            if( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
   1448                                     ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
   \   00003F                ; Setup parameters for call to function NLME_ReadNwkKeyInfo
   \   00003F   75..3A       MOV     ?V2,#0x3a
   \   000042   75..00       MOV     ?V3,#0x0
   \   000045   78..         MOV     R0,#?V2
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   740F         MOV     A,#0xf
   \   00004C   12....       LCALL   ?XSTACK_DISP100_8
   \   00004F   88..         MOV     ?V2,R0
   \   000051   89..         MOV     ?V3,R1
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   7C11         MOV     R4,#0x11
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   7A00         MOV     R2,#0x0
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   12....       LCALL   `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   \   000068   E9           MOV     A,R1
   \   000069   600E         JZ      ??ZDSecMgrSendNwkKey_0
   1449            {
   1450              // set key data to all 0s if NV read fails
   1451              osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
   \   00006B                ; Setup parameters for call to function osal_memset
   \   00006B   7C11         MOV     R4,#0x11
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7900         MOV     R1,#0x0
   \   000071   740D         MOV     A,#0xd
   \   000073   12....       LCALL   ?XSTACK_DISP101_8
   \   000076   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1452            }
   1453          
   1454            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
   1455                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
   1456            {
   1457              // set values
   1458              req.keySeqNum = tmpKey.keySeqNum;
   1459              req.key       = tmpKey.key;
   1460          
   1461              //devtag.pro.security.todo - make sure that if there is no link key the NWK
   1462              //key isn't used to secure the frame at the APS layer -- since the receiving
   1463              //device may not have a NWK key yet
   1464              req.apsSecure = TRUE;
   1465          
   1466              // check if using secure hop to to parent
   1467              if ( device->parentAddr == NLME_GetShortAddr() )
   1468              {
   1469                req.nwkSecure = FALSE;
   1470                req.tunnel    = NULL;
   1471              }
   1472              else
   1473              {
   1474                req.nwkSecure   = TRUE;
   1475                req.tunnel      = &tunnel;
   1476                req.tunnel->tna = device->parentAddr;
   1477                req.tunnel->dea = device->extAddr;
   1478              }
   1479            }
   1480            else
   1481            {
   1482              // default values
   1483              //devtag.0604.verify
   1484              req.nwkSecure = TRUE;
   \                     ??ZDSecMgrSendNwkKey_0:
   \   000079   740A         MOV     A,#0xa
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   7401         MOV     A,#0x1
   \   000080   F0           MOVX    @DPTR,A
   1485              req.apsSecure = FALSE;
   \   000081   7409         MOV     A,#0x9
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   7400         MOV     A,#0x0
   \   000088   F0           MOVX    @DPTR,A
   1486              req.tunnel    = NULL;
   \   000089   740B         MOV     A,#0xb
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   7400         MOV     A,#0x0
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   7400         MOV     A,#0x0
   \   000094   F0           MOVX    @DPTR,A
   1487          
   1488              if ( device->parentAddr != NLME_GetShortAddr() )
   \   000095                ; Setup parameters for call to function NLME_GetShortAddr
   \   000095   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000098   8A..         MOV     ?V2,R2
   \   00009A   8B..         MOV     ?V3,R3
   \   00009C   A8..         MOV     R0,?V2
   \   00009E   A9..         MOV     R1,?V3
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   68           XRL     A,R0
   \   0000AA   7003         JNZ     ??ZDSecMgrSendNwkKey_1
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   69           XRL     A,R1
   \                     ??ZDSecMgrSendNwkKey_1:
   \   0000AF   6018         JZ      ??ZDSecMgrSendNwkKey_2
   1489              {
   1490                req.dstAddr = device->parentAddr;
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   E8           MOV     A,R0
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E9           MOV     A,R1
   \   0000C8   F0           MOVX    @DPTR,A
   1491              }
   1492          
   1493              // special cases
   1494              //devtag.0604.todo - modify to preconfig flag
   1495              if ( device->secure == FALSE )
   \                     ??ZDSecMgrSendNwkKey_2:
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   7049         JNZ     ??ZDSecMgrSendNwkKey_3
   1496              {
   1497                req.keySeqNum = tmpKey.keySeqNum;
   \   0000D6   740D         MOV     A,#0xd
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C0E0         PUSH    A
   \   0000DE   7403         MOV     A,#0x3
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   D0E0         POP     A
   \   0000E5   F0           MOVX    @DPTR,A
   1498                req.key       = tmpKey.key;
   \   0000E6   740E         MOV     A,#0xe
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   A882         MOV     R0,DPL
   \   0000ED   A983         MOV     R1,DPH
   \   0000EF   7404         MOV     A,#0x4
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   E8           MOV     A,R0
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E9           MOV     A,R1
   \   0000F8   F0           MOVX    @DPTR,A
   1499          
   1500                // check if using secure hop to to parent
   1501                if ( device->parentAddr == NLME_GetShortAddr() )
   \   0000F9                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000F9   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000FC   8A..         MOV     ?V2,R2
   \   0000FE   8B..         MOV     ?V3,R3
   \   000100   A8..         MOV     R0,?V2
   \   000102   A9..         MOV     R1,?V3
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   68           XRL     A,R0
   \   00010E   7003         JNZ     ??ZDSecMgrSendNwkKey_4
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   69           XRL     A,R1
   \                     ??ZDSecMgrSendNwkKey_4:
   \   000113   701E         JNZ     ??ZDSecMgrSendNwkKey_5
   1502                {
   1503                  req.nwkSecure = FALSE;
   \   000115   740A         MOV     A,#0xa
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   7400         MOV     A,#0x0
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   8014         SJMP    ??ZDSecMgrSendNwkKey_5
   1504                }
   1505              }
   1506              else
   1507              {
   1508                req.key       = NULL;
   \                     ??ZDSecMgrSendNwkKey_3:
   \   00011F   7404         MOV     A,#0x4
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   7400         MOV     A,#0x0
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   7400         MOV     A,#0x0
   \   00012A   F0           MOVX    @DPTR,A
   1509                req.keySeqNum = 0;
   \   00012B   7403         MOV     A,#0x3
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   7400         MOV     A,#0x0
   \   000132   F0           MOVX    @DPTR,A
   1510              }
   1511            }
   1512          
   1513            status = APSME_TransportKeyReq( &req );
   \                     ??ZDSecMgrSendNwkKey_5:
   \   000133                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000133   AA..         MOV     R2,?XSP + 0
   \   000135   AB..         MOV     R3,?XSP + 1
   \   000137   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   00013A   E9           MOV     A,R1
   \   00013B   F5..         MOV     ?V0,A
   1514          
   1515            // clear copy of key in RAM before return
   1516            osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
   \   00013D                ; Setup parameters for call to function osal_memset
   \   00013D   7C11         MOV     R4,#0x11
   \   00013F   7D00         MOV     R5,#0x0
   \   000141   7900         MOV     R1,#0x0
   \   000143   740D         MOV     A,#0xd
   \   000145   12....       LCALL   ?XSTACK_DISP101_8
   \   000148   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1517          
   1518            return status;
   \   00014B   A9..         MOV     R1,?V0
   \   00014D   741E         MOV     A,#0x1e
   \   00014F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000152   7F04         MOV     R7,#0x4
   \   000154   02....       LJMP    ?BANKED_LEAVE_XDATA
   1519          }
   1520          
   1521          /******************************************************************************
   1522           * @fn          ZDSecMgrDeviceEntryRemove
   1523           *
   1524           * @brief       Remove device entry.
   1525           *
   1526           * @param       entry - [in] valid entry
   1527           *
   1528           * @return      none
   1529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1530          void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrDeviceEntryRemove:
   1531          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1532            // terminate device control
   1533            if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1534            {
   1535              ZDSecMgrCtrlTerm( entry );
   1536            }
   1537          
   1538            // remove device from entry data
   1539            ZDSecMgrEntryFree( entry );
   \   000009                ; Setup parameters for call to function ZDSecMgrEntryFree
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
   1540          
   1541          }
   \   000010   7F01         MOV     R7,#0x1
   \   000012   02....       LJMP    ?BANKED_LEAVE_XDATA
   1542          
   1543          /******************************************************************************
   1544           * @fn          ZDSecMgrDeviceRemoveByExtAddr
   1545           *
   1546           * @brief       Remove device entry by its ext address.
   1547           *
   1548           * @param       pAddr - pointer to the extended address
   1549           *
   1550           * @return      ZStatus_t
   1551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1552          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
   1553          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1554            ZDSecMgrEntry_t *pEntry;
   1555            uint8           retValue;
   1556          
   1557            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000019   E9           MOV     A,R1
   \   00001A   F5..         MOV     ?V0,A
   1558          
   1559            if( retValue == ZSuccess )
   \   00001C   E5..         MOV     A,?V0
   \   00001E   700E         JNZ     ??ZDSecMgrDeviceRemoveByExtAddr_0
   1560            {
   1561              ZDSecMgrDeviceEntryRemove( pEntry );
   \   000020                ; Setup parameters for call to function ZDSecMgrDeviceEntryRemove
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??ZDSecMgrDeviceEntryRemove::?relay`; Banked call to: ZDSecMgrDeviceEntryRemove
   1562            }
   1563          
   1564            return retValue;
   \                     ??ZDSecMgrDeviceRemoveByExtAddr_0:
   \   00002E   A9..         MOV     R1,?V0
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
   1565          }
   1566          
   1567          /******************************************************************************
   1568           * @fn          ZDSecMgrDeviceEntryAdd
   1569           *
   1570           * @brief       Add entry.
   1571           *
   1572           * @param       device - [in] ZDSecMgrDevice_t, device info
   1573           * @param       ami    - [in] Address Manager index
   1574           *
   1575           * @return      ZStatus_t
   1576           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1577          void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr )
   \                     ZDSecMgrAddrMgrUpdate:
   1578          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1579            AddrMgrEntry_t entry;
   1580          
   1581            // get the ami data
   1582            entry.user  = ADDRMGR_USER_SECURITY;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   7402         MOV     A,#0x2
   \   00001A   F0           MOVX    @DPTR,A
   1583            entry.index = ami;
   \   00001B   740B         MOV     A,#0xb
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E5..         MOV     A,?V0
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E5..         MOV     A,?V1
   \   000026   F0           MOVX    @DPTR,A
   1584          
   1585            AddrMgrEntryGet( &entry );
   \   000027                ; Setup parameters for call to function AddrMgrEntryGet
   \   000027   AA..         MOV     R2,?XSP + 0
   \   000029   AB..         MOV     R3,?XSP + 1
   \   00002B   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   00002E   E9           MOV     A,R1
   1586          
   1587            // check if NWK address is same
   1588            if ( entry.nwkAddr != nwkAddr )
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6E           XRL     A,R6
   \   000036   7003         JNZ     ??ZDSecMgrAddrMgrUpdate_0
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6F           XRL     A,R7
   \                     ??ZDSecMgrAddrMgrUpdate_0:
   \   00003B   6012         JZ      ??ZDSecMgrAddrMgrUpdate_1
   1589            {
   1590              // update NWK address
   1591              entry.nwkAddr = nwkAddr;
   \   00003D   7401         MOV     A,#0x1
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   EE           MOV     A,R6
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   EF           MOV     A,R7
   \   000046   F0           MOVX    @DPTR,A
   1592          
   1593              AddrMgrEntryUpdate( &entry );
   \   000047                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000047   AA..         MOV     R2,?XSP + 0
   \   000049   AB..         MOV     R3,?XSP + 1
   \   00004B   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004E   E9           MOV     A,R1
   1594            }
   1595          }
   \                     ??ZDSecMgrAddrMgrUpdate_1:
   \   00004F   740D         MOV     A,#0xd
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   7F02         MOV     R7,#0x2
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
   1596          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1597          ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami )
   \                     ZDSecMgrDeviceEntryAdd:
   1598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   1599            ZStatus_t        status;
   1600            ZDSecMgrEntry_t* entry;
   1601          
   1602            // initialize as unknown until completion
   1603            status = ZNwkUnknownDevice;
   \   000012   75..C8       MOV     ?V0,#-0x38
   1604          
   1605            device->ctrl = NULL;
   \   000015   85..82       MOV     DPL,?V2
   \   000018   85..83       MOV     DPH,?V3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   7400         MOV     A,#0x0
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
   1606          
   1607            // make sure not already registered
   1608            if ( ZDSecMgrEntryLookup( device->nwkAddr, &entry ) == ZSuccess )
   \   00002A                ; Setup parameters for call to function ZDSecMgrEntryLookup
   \   00002A   AC..         MOV     R4,?XSP + 0
   \   00002C   AD..         MOV     R5,?XSP + 1
   \   00002E   85..82       MOV     DPL,?V2
   \   000031   85..83       MOV     DPH,?V3
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FA           MOV     R2,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??ZDSecMgrEntryLookup::?relay`; Banked call to: ZDSecMgrEntryLookup
   \   00003C   E9           MOV     A,R1
   \   00003D   7047         JNZ     ??ZDSecMgrDeviceEntryAdd_0
   1609            {
   1610              // verify that address index is same
   1611              if ( entry->ami != ami )
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F8           MOV     R0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F583         MOV     DPH,A
   \   00004B   8882         MOV     DPL,R0
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   6E           XRL     A,R6
   \   00004F   7003         JNZ     ??ZDSecMgrDeviceEntryAdd_1
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6F           XRL     A,R7
   \                     ??ZDSecMgrDeviceEntryAdd_1:
   \   000054   6050         JZ      ??ZDSecMgrDeviceEntryAdd_2
   1612              {
   1613                // remove conflicting entry
   1614                ZDSecMgrDeviceEntryRemove( entry );
   \   000056                ; Setup parameters for call to function ZDSecMgrDeviceEntryRemove
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FA           MOV     R2,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   `??ZDSecMgrDeviceEntryRemove::?relay`; Banked call to: ZDSecMgrDeviceEntryRemove
   1615          
   1616                if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
   \   000064                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000064   AC..         MOV     R4,?XSP + 0
   \   000066   AD..         MOV     R5,?XSP + 1
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   00006F   E9           MOV     A,R1
   \   000070   7034         JNZ     ??ZDSecMgrDeviceEntryAdd_2
   1617                {
   1618                  // update NWK address
   1619                  ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
   \   000072                ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
   \   000072   85..82       MOV     DPL,?V2
   \   000075   85..83       MOV     DPH,?V3
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FC           MOV     R4,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   FD           MOV     R5,A
   \   00007D   EE           MOV     A,R6
   \   00007E   FA           MOV     R2,A
   \   00007F   EF           MOV     A,R7
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   `??ZDSecMgrAddrMgrUpdate::?relay`; Banked call to: ZDSecMgrAddrMgrUpdate
   \   000084   8020         SJMP    ??ZDSecMgrDeviceEntryAdd_2
   1620                }
   1621              }
   1622            }
   1623            else if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
   \                     ??ZDSecMgrDeviceEntryAdd_0:
   \   000086                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000086   AC..         MOV     R4,?XSP + 0
   \   000088   AD..         MOV     R5,?XSP + 1
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000091   E9           MOV     A,R1
   \   000092   7012         JNZ     ??ZDSecMgrDeviceEntryAdd_2
   1624            {
   1625              // update NWK address
   1626              ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
   \   000094                ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
   \   000094   85..82       MOV     DPL,?V2
   \   000097   85..83       MOV     DPH,?V3
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FC           MOV     R4,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   FD           MOV     R5,A
   \   00009F   EE           MOV     A,R6
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   `??ZDSecMgrAddrMgrUpdate::?relay`; Banked call to: ZDSecMgrAddrMgrUpdate
   1627            }
   1628          
   1629            // check if a new entry needs to be created
   1630            if ( entry == NULL )
   \                     ??ZDSecMgrDeviceEntryAdd_2:
   \   0000A6   85..82       MOV     DPL,?XSP + 0
   \   0000A9   85..83       MOV     DPH,?XSP + 1
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F8           MOV     R0,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   E8           MOV     A,R0
   \   0000B2   49           ORL     A,R1
   \   0000B3   7034         JNZ     ??ZDSecMgrDeviceEntryAdd_3
   1631            {
   1632              // get new entry
   1633              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   0000B5                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   0000B5   AA..         MOV     R2,?XSP + 0
   \   0000B7   AB..         MOV     R3,?XSP + 1
   \   0000B9   12....       LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   0000BC   E9           MOV     A,R1
   \   0000BD   702D         JNZ     ??ZDSecMgrDeviceEntryAdd_4
   1634              {
   1635                // reset entry lkd
   1636          
   1637                // finish setting up entry
   1638                entry->ami = ami;
   \   0000BF   85..82       MOV     DPL,?XSP + 0
   \   0000C2   85..83       MOV     DPH,?XSP + 1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F8           MOV     R0,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   8882         MOV     DPL,R0
   \   0000CD   EE           MOV     A,R6
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   EF           MOV     A,R7
   \   0000D1   F0           MOVX    @DPTR,A
   1639          
   1640                // update NWK address
   1641                ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
   \   0000D2                ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
   \   0000D2   85..82       MOV     DPL,?V2
   \   0000D5   85..83       MOV     DPH,?V3
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FC           MOV     R4,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FD           MOV     R5,A
   \   0000DD   EE           MOV     A,R6
   \   0000DE   FA           MOV     R2,A
   \   0000DF   EF           MOV     A,R7
   \   0000E0   FB           MOV     R3,A
   \   0000E1   12....       LCALL   `??ZDSecMgrAddrMgrUpdate::?relay`; Banked call to: ZDSecMgrAddrMgrUpdate
   1642          
   1643                // enter new device into device control
   1644                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1645                {
   1646                  status = ZDSecMgrCtrlAdd( device, entry );
   1647                }
   1648                else
   1649                {
   1650                  status = ZSuccess;
   \   0000E4   75..00       MOV     ?V0,#0x0
   \   0000E7   8003         SJMP    ??ZDSecMgrDeviceEntryAdd_4
   1651                }
   1652              }
   1653            }
   1654            else
   1655            {
   1656              // reset entry lkd
   1657          
   1658              // reset entry in entry control
   1659              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1660              {
   1661                status = ZDSecMgrCtrlReset( device, entry );
   1662              }
   1663              else
   1664              {
   1665                status = ZSuccess;
   \                     ??ZDSecMgrDeviceEntryAdd_3:
   \   0000E9   75..00       MOV     ?V0,#0x0
   1666              }
   1667            }
   1668          
   1669            return status;
   \                     ??ZDSecMgrDeviceEntryAdd_4:
   \   0000EC   A9..         MOV     R1,?V0
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   7F04         MOV     R7,#0x4
   \   0000F5   02....       LJMP    ?BANKED_LEAVE_XDATA
   1670          }
   1671          
   1672          /******************************************************************************
   1673           * @fn          ZDSecMgrDeviceCtrlHandler
   1674           *
   1675           * @brief       Device control handler.
   1676           *
   1677           * @param       device - [in] ZDSecMgrDevice_t, device info
   1678           *
   1679           * @return      none
   1680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1681          void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceCtrlHandler:
   1682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1683            uint8 state;
   1684            uint8 cntr;
   1685          
   1686            state = device->ctrl->state;
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FE           MOV     R6,A
   1687            cntr  = ZDSECMGR_CTRL_BASE_CNTR;
   \   000026   7F01         MOV     R7,#0x1
   1688          
   1689            switch ( state )
   \   000028   EE           MOV     A,R6
   \   000029   24FE         ADD     A,#-0x2
   \   00002B   600C         JZ      ??ZDSecMgrDeviceCtrlHandler_0
   \   00002D   14           DEC     A
   \   00002E   6019         JZ      ??ZDSecMgrDeviceCtrlHandler_1
   \   000030   14           DEC     A
   \   000031   6034         JZ      ??ZDSecMgrDeviceCtrlHandler_2
   \   000033   24FD         ADD     A,#-0x3
   \   000035   6020         JZ      ??ZDSecMgrDeviceCtrlHandler_3
   \   000037   802C         SJMP    ??ZDSecMgrDeviceCtrlHandler_4
   1690            {
   1691              case ZDSECMGR_CTRL_TK_MASTER:
   1692                if ( ZDSecMgrSendMasterKey( device ) == ZSuccess )
   \                     ??ZDSecMgrDeviceCtrlHandler_0:
   \   000039                ; Setup parameters for call to function ZDSecMgrSendMasterKey
   \   000039   AA..         MOV     R2,?V0
   \   00003B   AB..         MOV     R3,?V1
   \   00003D   12....       LCALL   `??ZDSecMgrSendMasterKey::?relay`; Banked call to: ZDSecMgrSendMasterKey
   \   000040   E9           MOV     A,R1
   \   000041   7024         JNZ     ??ZDSecMgrDeviceCtrlHandler_2
   1693                {
   1694                  state = ZDSECMGR_CTRL_SKKE_INIT;
   \   000043   7E03         MOV     R6,#0x3
   1695                  cntr  = ZDSECMGR_CTRL_SKKE_INIT_CNTR;
   \   000045   7F01         MOV     R7,#0x1
   1696                }
   1697                break;
   \   000047   801E         SJMP    ??ZDSecMgrDeviceCtrlHandler_2
   1698          
   1699              case ZDSECMGR_CTRL_SKKE_INIT:
   1700                if ( ZDSecMgrEstablishKey( device ) == ZSuccess )
   \                     ??ZDSecMgrDeviceCtrlHandler_1:
   \   000049                ; Setup parameters for call to function ZDSecMgrEstablishKey
   \   000049   AA..         MOV     R2,?V0
   \   00004B   AB..         MOV     R3,?V1
   \   00004D   12....       LCALL   `??ZDSecMgrEstablishKey::?relay`; Banked call to: ZDSecMgrEstablishKey
   \   000050   E9           MOV     A,R1
   \   000051   7014         JNZ     ??ZDSecMgrDeviceCtrlHandler_2
   1701                {
   1702                  state = ZDSECMGR_CTRL_SKKE_WAIT;
   \   000053   7E04         MOV     R6,#0x4
   1703                }
   1704                break;
   \   000055   8010         SJMP    ??ZDSecMgrDeviceCtrlHandler_2
   1705          
   1706              case ZDSECMGR_CTRL_SKKE_WAIT:
   1707                // continue to wait for SKA control timeout
   1708                break;
   1709          
   1710              case ZDSECMGR_CTRL_TK_NWK:
   1711                if ( ZDSecMgrSendNwkKey( device ) == ZSuccess )
   \                     ??ZDSecMgrDeviceCtrlHandler_3:
   \   000057                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000057   AA..         MOV     R2,?V0
   \   000059   AB..         MOV     R3,?V1
   \   00005B   12....       LCALL   `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   00005E   E9           MOV     A,R1
   \   00005F   7006         JNZ     ??ZDSecMgrDeviceCtrlHandler_2
   1712                {
   1713                  state = ZDSECMGR_CTRL_NONE;
   \   000061   7E00         MOV     R6,#0x0
   1714                }
   1715                break;
   \   000063   8002         SJMP    ??ZDSecMgrDeviceCtrlHandler_2
   1716          
   1717              default:
   1718                state = ZDSECMGR_CTRL_NONE;
   \                     ??ZDSecMgrDeviceCtrlHandler_4:
   \   000065   7E00         MOV     R6,#0x0
   1719                break;
   1720            }
   1721          
   1722            if ( state != ZDSECMGR_CTRL_NONE )
   \                     ??ZDSecMgrDeviceCtrlHandler_2:
   \   000067   EE           MOV     A,R6
   \   000068   6056         JZ      ??ZDSecMgrDeviceCtrlHandler_5
   1723            {
   1724              device->ctrl->state = state;
   \   00006A   EE           MOV     A,R6
   \   00006B   C0E0         PUSH    A
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F583         MOV     DPH,A
   \   000081   8882         MOV     DPL,R0
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   D0E0         POP     A
   \   00008A   F0           MOVX    @DPTR,A
   1725              device->ctrl->cntr  = cntr;
   \   00008B   EF           MOV     A,R7
   \   00008C   C0E0         PUSH    A
   \   00008E   85..82       MOV     DPL,?V0
   \   000091   85..83       MOV     DPH,?V1
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F8           MOV     R0,A
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   C8           XCH     A,R0
   \   0000A1   2406         ADD     A,#0x6
   \   0000A3   F582         MOV     DPL,A
   \   0000A5   C8           XCH     A,R0
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   F583         MOV     DPH,A
   \   0000AA   D0E0         POP     A
   \   0000AC   F0           MOVX    @DPTR,A
   1726          
   1727              osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
   \   0000AD                ; Setup parameters for call to function osal_start_timerEx
   \   0000AD   7C64         MOV     R4,#0x64
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   7A00         MOV     R2,#0x0
   \   0000B3   7B01         MOV     R3,#0x1
   \   0000B5   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F9           MOV     R1,A
   \   0000BA   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000BD   E9           MOV     A,R1
   \   0000BE   8016         SJMP    ??ZDSecMgrDeviceCtrlHandler_6
   1728            }
   1729            else
   1730            {
   1731              ZDSecMgrCtrlRelease( device->ctrl );
   \                     ??ZDSecMgrDeviceCtrlHandler_5:
   \   0000C0                ; Setup parameters for call to function ZDSecMgrCtrlRelease
   \   0000C0   85..82       MOV     DPL,?V0
   \   0000C3   85..83       MOV     DPH,?V1
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FA           MOV     R2,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   FB           MOV     R3,A
   \   0000D3   12....       LCALL   `??ZDSecMgrCtrlRelease::?relay`; Banked call to: ZDSecMgrCtrlRelease
   1732            }
   1733          }
   \                     ??ZDSecMgrDeviceCtrlHandler_6:
   \   0000D6   7F02         MOV     R7,#0x2
   \   0000D8   02....       LJMP    ?BANKED_LEAVE_XDATA
   1734          
   1735          /******************************************************************************
   1736           * @fn          ZDSecMgrDeviceCtrlSetup
   1737           *
   1738           * @brief       Setup device control.
   1739           *
   1740           * @param       device - [in] ZDSecMgrDevice_t, device info
   1741           *
   1742           * @return      ZStatus_t
   1743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1744          void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceCtrlSetup:
   1745          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1746            if ( device->ctrl != NULL )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   E8           MOV     A,R0
   \   00001B   49           ORL     A,R1
   \   00001C   604E         JZ      ??ZDSecMgrDeviceCtrlSetup_0
   1747            {
   1748              if ( device->secure == FALSE )
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   701E         JNZ     ??ZDSecMgrDeviceCtrlSetup_1
   1749              {
   1750                // send the master key data to the joining device
   1751                device->ctrl->state = ZDSECMGR_CTRL_TK_MASTER;
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F583         MOV     DPH,A
   \   00003D   8882         MOV     DPL,R0
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   7402         MOV     A,#0x2
   \   000046   F0           MOVX    @DPTR,A
   \   000047   801C         SJMP    ??ZDSecMgrDeviceCtrlSetup_2
   1752              }
   1753              else
   1754              {
   1755                // start SKKE
   1756                device->ctrl->state = ZDSECMGR_CTRL_SKKE_INIT;
   \                     ??ZDSecMgrDeviceCtrlSetup_1:
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F583         MOV     DPH,A
   \   00005B   8882         MOV     DPL,R0
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   7403         MOV     A,#0x3
   \   000064   F0           MOVX    @DPTR,A
   1757              }
   1758          
   1759              ZDSecMgrDeviceCtrlHandler( device );
   \                     ??ZDSecMgrDeviceCtrlSetup_2:
   \   000065                ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??ZDSecMgrDeviceCtrlHandler::?relay`; Banked call to: ZDSecMgrDeviceCtrlHandler
   1760            }
   1761          }
   \                     ??ZDSecMgrDeviceCtrlSetup_0:
   \   00006C   7F01         MOV     R7,#0x1
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1762          
   1763          /******************************************************************************
   1764           * @fn          ZDSecMgrDeviceCtrlUpdate
   1765           *
   1766           * @brief       Update control data.
   1767           *
   1768           * @param       extAddr - [in] EXT address
   1769           * @param       state   - [in] new control state
   1770           *
   1771           * @return      none
   1772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1773          void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state )
   \                     ZDSecMgrDeviceCtrlUpdate:
   1774          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0,R1
   1775            ZDSecMgrEntry_t* entry;
   1776            ZDSecMgrCtrl_t*  ctrl;
   1777          
   1778            // lookup device entry data
   1779            (void)ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   000010                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?XSTACK_DISP102_8
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00001C   E9           MOV     A,R1
   \   00001D   FA           MOV     R2,A
   1780          
   1781            if ( entry != NULL )
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   49           ORL     A,R1
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??ZDSecMgrDeviceCtrlUpdate_0 & 0xFFFF
   1782            {
   1783              // lookup device control data
   1784              ZDSecMgrCtrlLookup( entry, &ctrl );
   \   00002F                ; Setup parameters for call to function ZDSecMgrCtrlLookup
   \   00002F   AC..         MOV     R4,?XSP + 0
   \   000031   AD..         MOV     R5,?XSP + 1
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??ZDSecMgrCtrlLookup::?relay`; Banked call to: ZDSecMgrCtrlLookup
   1785          
   1786              // make sure control data is valid
   1787              if ( ctrl != NULL )
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   E8           MOV     A,R0
   \   00004C   49           ORL     A,R1
   \   00004D   7003         JNZ     $+5
   \   00004F   02....       LJMP    ??ZDSecMgrDeviceCtrlUpdate_0 & 0xFFFF
   1788              {
   1789                // possible state transitions
   1790                if ( ctrl->state == ZDSECMGR_CTRL_SKKE_WAIT )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F583         MOV     DPH,A
   \   00005E   8882         MOV     DPL,R0
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   6404         XRL     A,#0x4
   \   000068   7068         JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
   1791                {
   1792                  if ( state == ZDSECMGR_CTRL_SKKE_DONE )
   \   00006A   7405         MOV     A,#0x5
   \   00006C   65..         XRL     A,?V0
   \   00006E   702F         JNZ     ??ZDSecMgrDeviceCtrlUpdate_1
   1793                  {
   1794                    // send the network key
   1795                    ctrl->state = ZDSECMGR_CTRL_TK_NWK;
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F8           MOV     R0,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F583         MOV     DPH,A
   \   00007C   8882         MOV     DPL,R0
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   7407         MOV     A,#0x7
   \   000085   F0           MOVX    @DPTR,A
   1796                    ctrl->cntr  = ZDSECMGR_CTRL_TK_NWK_CNTR;
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F8           MOV     R0,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   C8           XCH     A,R0
   \   000091   2406         ADD     A,#0x6
   \   000093   F582         MOV     DPL,A
   \   000095   C8           XCH     A,R0
   \   000096   3400         ADDC    A,#0x0
   \   000098   F583         MOV     DPH,A
   \   00009A   7401         MOV     A,#0x1
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   8033         SJMP    ??ZDSecMgrDeviceCtrlUpdate_0
   1797                  }
   1798                  else if ( state == ZDSECMGR_CTRL_SKKE_FAIL )
   \                     ??ZDSecMgrDeviceCtrlUpdate_1:
   \   00009F   7406         MOV     A,#0x6
   \   0000A1   65..         XRL     A,?V0
   \   0000A3   702D         JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
   1799                  {
   1800                    // force default timeout in order to cleanup control logic
   1801                    ctrl->state = ZDSECMGR_CTRL_SKKE_FAIL;
   \   0000A5   85..82       MOV     DPL,?XSP + 0
   \   0000A8   85..83       MOV     DPH,?XSP + 1
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F8           MOV     R0,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   8882         MOV     DPL,R0
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   F0           MOVX    @DPTR,A
   1802                    ctrl->cntr  = ZDSECMGR_CTRL_BASE_CNTR;
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F8           MOV     R0,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   C8           XCH     A,R0
   \   0000C6   2406         ADD     A,#0x6
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   C8           XCH     A,R0
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   F0           MOVX    @DPTR,A
   1803                  }
   1804                }
   1805                // timer should be active
   1806              }
   1807            }
   1808          }
   \                     ??ZDSecMgrDeviceCtrlUpdate_0:
   \   0000D2   7404         MOV     A,#0x4
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   7F01         MOV     R7,#0x1
   \   0000D9   02....       LJMP    ?BANKED_LEAVE_XDATA
   1809          
   1810          void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr );

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1811          void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr )
   \                     APSME_SKA_TimerExpired:
   1812          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1813            if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1814            {
   1815              if ( initiator == TRUE )
   1816              {
   1817                ZDSecMgrDeviceCtrlUpdate( partExtAddr, ZDSECMGR_CTRL_SKKE_FAIL );
   1818              }
   1819            }
   1820          }
   \   000000   02....       LJMP    ?BRET
   1821          
   1822          /******************************************************************************
   1823           * @fn          ZDSecMgrDeviceRemove
   1824           *
   1825           * @brief       Remove device from network.
   1826           *
   1827           * @param       device - [in] ZDSecMgrDevice_t, device info
   1828           *
   1829           * @return      none
   1830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1831          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
   1832          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1833            APSME_RemoveDeviceReq_t remDevReq;
   1834            NLME_LeaveReq_t         leaveReq;
   1835            associated_devices_t*   assoc;
   1836          
   1837            // check if parent, remove the device
   1838            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000011   8A..         MOV     ?V2,R2
   \   000013   8B..         MOV     ?V3,R3
   \   000015   A8..         MOV     R0,?V2
   \   000017   A9..         MOV     R1,?V3
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   68           XRL     A,R0
   \   000023   7003         JNZ     ??ZDSecMgrDeviceRemove_0
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   69           XRL     A,R1
   \                     ??ZDSecMgrDeviceRemove_0:
   \   000028   6003         JZ      $+5
   \   00002A   02....       LJMP    ??ZDSecMgrDeviceRemove_1 & 0xFFFF
   1839            {
   1840              // this is the parent of the device
   1841              leaveReq.extAddr        = device->extAddr;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   E8           MOV     A,R0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E9           MOV     A,R1
   \   000042   F0           MOVX    @DPTR,A
   1842              leaveReq.removeChildren = FALSE;
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   1843              leaveReq.rejoin         = FALSE;
   \   00004B   7403         MOV     A,#0x3
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7400         MOV     A,#0x0
   \   000052   F0           MOVX    @DPTR,A
   1844          
   1845              // find child association
   1846              assoc = AssocGetWithExt( device->extAddr );
   \   000053                ; Setup parameters for call to function AssocGetWithExt
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FA           MOV     R2,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000061   8A..         MOV     ?V2,R2
   \   000063   8B..         MOV     ?V3,R3
   \   000065   85....       MOV     ?V0,?V2
   \   000068   85....       MOV     ?V1,?V3
   1847          
   1848              if ( ( assoc != NULL                            ) &&
   1849                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
   1850                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   00006B   E5..         MOV     A,?V0
   \   00006D   45..         ORL     A,?V1
   \   00006F   607E         JZ      ??ZDSecMgrDeviceRemove_2
   \   000071   85..82       MOV     DPL,?V0
   \   000074   85..83       MOV     DPH,?V1
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   6071         JZ      ??ZDSecMgrDeviceRemove_2
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   C3           CLR     C
   \   00008A   9405         SUBB    A,#0x5
   \   00008C   5061         JNC     ??ZDSecMgrDeviceRemove_2
   1851              {
   1852                // check if associated device is authenticated
   1853                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   00008E   85..82       MOV     DPL,?V0
   \   000091   85..83       MOV     DPH,?V1
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00009C   500A         JNC     ??ZDSecMgrDeviceRemove_3
   1854                {
   1855                  leaveReq.silent = FALSE;
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   7400         MOV     A,#0x0
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8008         SJMP    ??ZDSecMgrDeviceRemove_4
   1856                }
   1857                else
   1858                {
   1859                  leaveReq.silent = TRUE;
   \                     ??ZDSecMgrDeviceRemove_3:
   \   0000A8   7404         MOV     A,#0x4
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   7401         MOV     A,#0x1
   \   0000AF   F0           MOVX    @DPTR,A
   1860                }
   1861          
   1862                NLME_LeaveReq( &leaveReq );
   \                     ??ZDSecMgrDeviceRemove_4:
   \   0000B0                ; Setup parameters for call to function NLME_LeaveReq
   \   0000B0   AA..         MOV     R2,?XSP + 0
   \   0000B2   AB..         MOV     R3,?XSP + 1
   \   0000B4   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000B7   E9           MOV     A,R1
   \   0000B8   8035         SJMP    ??ZDSecMgrDeviceRemove_2
   1863              }
   1864            }
   1865            else
   1866            {
   1867              // this is not the parent of the device
   1868              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F9           MOV     R1,A
   \   0000C7   7405         MOV     A,#0x5
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   E8           MOV     A,R0
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   E9           MOV     A,R1
   \   0000D0   F0           MOVX    @DPTR,A
   1869              remDevReq.childExtAddr = device->extAddr;
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F8           MOV     R0,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F9           MOV     R1,A
   \   0000DC   7407         MOV     A,#0x7
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   E8           MOV     A,R0
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E9           MOV     A,R1
   \   0000E5   F0           MOVX    @DPTR,A
   1870          
   1871              APSME_RemoveDeviceReq( &remDevReq );
   \   0000E6                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   0000E6   7405         MOV     A,#0x5
   \   0000E8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000EB   12....       LCALL   `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   \   0000EE   E9           MOV     A,R1
   1872            }
   1873          }
   \                     ??ZDSecMgrDeviceRemove_2:
   \   0000EF   7409         MOV     A,#0x9
   \   0000F1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F4   7F04         MOV     R7,#0x4
   \   0000F6   02....       LJMP    ?BANKED_LEAVE_XDATA
   1874          
   1875          /******************************************************************************
   1876           * @fn          ZDSecMgrDeviceValidateSKKE
   1877           *
   1878           * @brief       Decide whether device is allowed for SKKE.
   1879           *
   1880           * @param       device - [in] ZDSecMgrDevice_t, device info
   1881           *
   1882           * @return      ZStatus_t
   1883           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1884          ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateSKKE:
   1885          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1886            ZStatus_t status;
   1887            uint16 ami;
   1888            uint16 keyNvId;
   1889          
   1890            // get EXT address
   1891            status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   8E82         MOV     DPL,R6
   \   000014   8F83         MOV     DPH,R7
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FA           MOV     R2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000020   E9           MOV     A,R1
   \   000021   F5..         MOV     ?V0,A
   1892          
   1893            if ( status == ZSuccess )
   \   000023   E5..         MOV     A,?V0
   \   000025   702F         JNZ     ??ZDSecMgrDeviceValidateSKKE_0
   1894            {
   1895              // get MASTER key
   1896              status = ZDSecMgrMasterKeyLookup( ami, &keyNvId );
   \   000027                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP102_8
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FA           MOV     R2,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   `??ZDSecMgrMasterKeyLookup::?relay`; Banked call to: ZDSecMgrMasterKeyLookup
   \   00003A   E9           MOV     A,R1
   \   00003B   F5..         MOV     ?V0,A
   1897          
   1898              if ( status == ZSuccess )
   \   00003D   E5..         MOV     A,?V0
   \   00003F   7015         JNZ     ??ZDSecMgrDeviceValidateSKKE_0
   1899              {
   1900                status = ZDSecMgrDeviceEntryAdd( device, ami );
   \   000041                ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FC           MOV     R4,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FD           MOV     R5,A
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   `??ZDSecMgrDeviceEntryAdd::?relay`; Banked call to: ZDSecMgrDeviceEntryAdd
   \   000053   E9           MOV     A,R1
   \   000054   F5..         MOV     ?V0,A
   1901              }
   1902            }
   1903          
   1904            return status;
   \                     ??ZDSecMgrDeviceValidateSKKE_0:
   \   000056   A9..         MOV     R1,?V0
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005D   7F01         MOV     R7,#0x1
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1905          }
   1906          
   1907          /******************************************************************************
   1908           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1909           *
   1910           * @brief       Decide whether device is allowed.
   1911           *
   1912           * @param       device - [in] ZDSecMgrDevice_t, device info
   1913           *
   1914           * @return      ZStatus_t
   1915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1916          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1917          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1918            ZStatus_t status;
   1919          
   1920            status = ZSuccess;
   \   000004   7900         MOV     R1,#0x0
   1921          
   1922            (void)device;  // Intentionally unreferenced parameter
   1923          
   1924            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1925            // the trust center to reject any newly joining devices by sending
   1926            // Remove-device to the parents.
   1927            if ( zgSecurePermitJoin == FALSE )
   \   000006   90....       MOV     DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   7002         JNZ     ??ZDSecMgrDeviceValidateRM_0
   1928            {
   1929              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV     R1,#-0x38
   1930            }
   1931          
   1932          
   1933          
   1934          #if 0  // Taken out because the following functionality is only used for test
   1935                 // purpose. A more efficient (above) way is used. It can be put
   1936                 // back in if customers request for a white/black list feature.
   1937                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1938          
   1939            // The following code processes the device black list (stored device list)
   1940            // If the joining device is not part of the forbidden device list
   1941            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1942            // will send Remove-device and ban the device from joining.
   1943          
   1944            uint8     index;
   1945            uint8*    restricted;
   1946          
   1947            // Look through the stored device list - used for restricted devices
   1948            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1949            {
   1950              restricted = ZDSecMgrStoredDeviceList[index];
   1951          
   1952              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1953              {
   1954                // return as unknown device in regards to validation
   1955                status = ZNwkUnknownDevice;
   1956          
   1957                // break from loop
   1958                index = ZDSECMGR_STORED_DEVICES;
   1959              }
   1960            }
   1961          
   1962          #endif
   1963          
   1964            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   1965          }
   1966          
   1967          /******************************************************************************
   1968           * @fn          ZDSecMgrDeviceValidateCM (COMMERCIAL MODE)
   1969           *
   1970           * @brief       Decide whether device is allowed.
   1971           *
   1972           * @param       device - [in] ZDSecMgrDevice_t, device info
   1973           *
   1974           * @return      ZStatus_t
   1975           */
   1976          //devtag.pro.security

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1977          ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateCM:
   1978          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1979            ZStatus_t status;
   1980            uint16    ami;
   1981            uint8     key[SEC_KEY_LEN];
   1982          
   1983            // implement EXT address and MASTER key policy here -- the total number of
   1984            // Security Manager entries should never exceed the number of EXT addresses
   1985            // and MASTER keys available
   1986          
   1987            // set status based on policy
   1988            //status = ZNwkUnknownDevice;
   1989          
   1990            // set status based on policy
   1991            status = ZSuccess; // ZNwkUnknownDevice;
   \   00000E   7E00         MOV     R6,#0x0
   1992          
   1993            // get key based on policy
   1994            osal_memcpy( key, ZDSecMgrTCMasterKey, SEC_KEY_LEN);
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   75....       MOV     ?V0,#ZDSecMgrTCMasterKey & 0xff
   \   000013   75....       MOV     ?V1,#(ZDSecMgrTCMasterKey >> 8) & 0xff
   \   000016   75..80       MOV     ?V2,#-0x80
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001E   7C10         MOV     R4,#0x10
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7405         MOV     A,#0x5
   \   000024   12....       LCALL   ?XSTACK_DISP101_8
   \   000027   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002A   7403         MOV     A,#0x3
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   1995          
   1996            // if policy, store new EXT address
   1997            status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \   00002F                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00002F   A8..         MOV     R0,?XSP + 0
   \   000031   A9..         MOV     R1,?XSP + 1
   \   000033   88..         MOV     ?V0,R0
   \   000035   89..         MOV     ?V1,R1
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   85..82       MOV     DPL,?V4
   \   00003F   85..83       MOV     DPH,?V5
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FC           MOV     R4,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FD           MOV     R5,A
   \   000049   85..82       MOV     DPL,?V4
   \   00004C   85..83       MOV     DPH,?V5
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FA           MOV     R2,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FB           MOV     R3,A
   \   000054   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   E9           MOV     A,R1
   \   00005D   FE           MOV     R6,A
   1998          
   1999            // set the key
   2000            ZDSecMgrMasterKeyLoad( device->extAddr, key );
   \   00005E                ; Setup parameters for call to function ZDSecMgrMasterKeyLoad
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP102_8
   \   000063   85..82       MOV     DPL,?V4
   \   000066   85..83       MOV     DPH,?V5
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FA           MOV     R2,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   `??ZDSecMgrMasterKeyLoad::?relay`; Banked call to: ZDSecMgrMasterKeyLoad
   \   000073   E9           MOV     A,R1
   2001          
   2002            // if EXT address and MASTER key available -- add device
   2003            if ( status == ZSuccess )
   \   000074   EE           MOV     A,R6
   \   000075   7014         JNZ     ??ZDSecMgrDeviceValidateCM_0
   2004            {
   2005              // add device to internal data - with control
   2006              status = ZDSecMgrDeviceEntryAdd( device, ami );
   \   000077                ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   FC           MOV     R4,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   FD           MOV     R5,A
   \   000082   AA..         MOV     R2,?V4
   \   000084   AB..         MOV     R3,?V5
   \   000086   12....       LCALL   `??ZDSecMgrDeviceEntryAdd::?relay`; Banked call to: ZDSecMgrDeviceEntryAdd
   \   000089   E9           MOV     A,R1
   \   00008A   FE           MOV     R6,A
   2007            }
   2008          
   2009            // remove copy of key in RAM
   2010            osal_memset( key, 0x00, SEC_KEY_LEN );
   \                     ??ZDSecMgrDeviceValidateCM_0:
   \   00008B                ; Setup parameters for call to function osal_memset
   \   00008B   7C10         MOV     R4,#0x10
   \   00008D   7D00         MOV     R5,#0x0
   \   00008F   7900         MOV     R1,#0x0
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?XSTACK_DISP101_8
   \   000096   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2011          
   2012            return status;
   \   000099   EE           MOV     A,R6
   \   00009A   F9           MOV     R1,A
   \   00009B   7412         MOV     A,#0x12
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   7F06         MOV     R7,#0x6
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA
   2013          }
   2014          
   2015          /******************************************************************************
   2016           * @fn          ZDSecMgrDeviceValidate
   2017           *
   2018           * @brief       Decide whether device is allowed.
   2019           *
   2020           * @param       device - [in] ZDSecMgrDevice_t, device info
   2021           *
   2022           * @return      ZStatus_t
   2023           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2024          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   2025          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2026            ZStatus_t status;
   2027          
   2028          
   2029            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000009   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6401         XRL     A,#0x1
   \   00000F   7030         JNZ     ??ZDSecMgrDeviceValidate_0
   2030            {
   2031              // device may be joining with a secure flag but it is ultimately the Trust
   2032              // Center that decides -- check if expected pre configured device --
   2033              // override settings
   2034              if ( zgPreConfigKeys == TRUE )
   \   000011   90....       MOV     DPTR,#zgPreConfigKeys
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6401         XRL     A,#0x1
   \   000017   700F         JNZ     ??ZDSecMgrDeviceValidate_1
   2035              {
   2036                device->secure = TRUE;
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   7401         MOV     A,#0x1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   800D         SJMP    ??ZDSecMgrDeviceValidate_2
   2037              }
   2038              else
   2039              {
   2040                device->secure = FALSE;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   7400         MOV     A,#0x0
   \   000034   F0           MOVX    @DPTR,A
   2041              }
   2042          
   2043              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2044              {
   2045                status = ZDSecMgrDeviceValidateCM( device );
   2046              }
   2047              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2048              {
   2049                status = ZDSecMgrDeviceValidateRM( device );
   \                     ??ZDSecMgrDeviceValidate_2:
   \   000035                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   EF           MOV     A,R7
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
   \   00003C   E9           MOV     A,R1
   \   00003D   F5..         MOV     ?V0,A
   \   00003F   8003         SJMP    ??ZDSecMgrDeviceValidate_3
   2050              }
   2051            }
   2052            else
   2053            {
   2054              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   000041   75..C8       MOV     ?V0,#-0x38
   2055            }
   2056          
   2057            return status;
   \                     ??ZDSecMgrDeviceValidate_3:
   \   000044   A9..         MOV     R1,?V0
   \   000046   7F01         MOV     R7,#0x1
   \   000048   02....       LJMP    ?BANKED_LEAVE_XDATA
   2058          }
   2059          
   2060          /******************************************************************************
   2061           * @fn          ZDSecMgrDeviceJoin
   2062           *
   2063           * @brief       Try to join this device.
   2064           *
   2065           * @param       device - [in] ZDSecMgrDevice_t, device info
   2066           *
   2067           * @return      ZStatus_t
   2068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2069          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   2070          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2071            ZStatus_t status;
   2072            uint16    ami;
   2073          
   2074            // attempt to validate device
   2075            status = ZDSecMgrDeviceValidate( device );
   \   00000E                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00000E   EE           MOV     A,R6
   \   00000F   FA           MOV     R2,A
   \   000010   EF           MOV     A,R7
   \   000011   FB           MOV     R3,A
   \   000012   12....       LCALL   `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
   \   000015   E9           MOV     A,R1
   \   000016   F5..         MOV     ?V0,A
   2076          
   2077            if ( status == ZSuccess )
   \   000018   E5..         MOV     A,?V0
   \   00001A   7036         JNZ     ??ZDSecMgrDeviceJoin_0
   2078            {
   2079              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2080              {
   2081                ZDSecMgrDeviceCtrlSetup( device );
   2082              }
   2083              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2084              {
   2085                // Add the device to the address manager
   2086                ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \   00001C                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00001C   A8..         MOV     R0,?XSP + 0
   \   00001E   A9..         MOV     R1,?XSP + 1
   \   000020   88..         MOV     ?V2,R0
   \   000022   89..         MOV     ?V3,R1
   \   000024   78..         MOV     R0,#?V2
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FC           MOV     R4,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FD           MOV     R5,A
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   2087                //send the nwk key data to the joining device
   2088                status = ZDSecMgrSendNwkKey( device );
   \   000046                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   00004D   E9           MOV     A,R1
   \   00004E   F5..         MOV     ?V0,A
   \   000050   8007         SJMP    ??ZDSecMgrDeviceJoin_1
   2089              }
   2090            }
   2091            else
   2092            {
   2093              // not allowed, remove the device
   2094              ZDSecMgrDeviceRemove( device );
   \                     ??ZDSecMgrDeviceJoin_0:
   \   000052                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000052   EE           MOV     A,R6
   \   000053   FA           MOV     R2,A
   \   000054   EF           MOV     A,R7
   \   000055   FB           MOV     R3,A
   \   000056   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2095            }
   2096          
   2097            return status;
   \                     ??ZDSecMgrDeviceJoin_1:
   \   000059   A9..         MOV     R1,?V0
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   7F04         MOV     R7,#0x4
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
   2098          }
   2099          
   2100          /******************************************************************************
   2101           * @fn          ZDSecMgrDeviceJoinDirect
   2102           *
   2103           * @brief       Try to join this device as a direct child.
   2104           *
   2105           * @param       device - [in] ZDSecMgrDevice_t, device info
   2106           *
   2107           * @return      ZStatus_t
   2108           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2109          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   2110          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2111            ZStatus_t status;
   2112          
   2113            status = ZDSecMgrDeviceJoin( device );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   000010   E9           MOV     A,R1
   \   000011   F5..         MOV     ?V0,A
   2114          
   2115            if ( status == ZSuccess )
   \   000013   E5..         MOV     A,?V0
   \   000015   700F         JNZ     ??ZDSecMgrDeviceJoinDirect_0
   2116            {
   2117              // set association status to authenticated
   2118              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   000017                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000017                ; Setup parameters for call to function AssocGetWithShort
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000023   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2119            }
   2120          
   2121            return status;
   \                     ??ZDSecMgrDeviceJoinDirect_0:
   \   000026   A9..         MOV     R1,?V0
   \   000028   7F01         MOV     R7,#0x1
   \   00002A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2122          }
   2123          
   2124          /******************************************************************************
   2125           * @fn          ZDSecMgrDeviceJoinFwd
   2126           *
   2127           * @brief       Forward join to Trust Center.
   2128           *
   2129           * @param       device - [in] ZDSecMgrDevice_t, device info
   2130           *
   2131           * @return      ZStatus_t
   2132           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2133          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   2134          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2135            ZStatus_t               status;
   2136            APSME_UpdateDeviceReq_t req;
   2137          
   2138            // forward any joining device to the Trust Center -- the Trust Center will
   2139            // decide if the device is allowed to join
   2140            status = ZSuccess;
   \   00000E   75..00       MOV     ?V0,#0x0
   2141          
   2142            // forward authorization to the Trust Center
   2143            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   7400         MOV     A,#0x0
   \   00001D   F0           MOVX    @DPTR,A
   2144            req.devAddr    = device->nwkAddr;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E8           MOV     A,R0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   E9           MOV     A,R1
   \   000030   F0           MOVX    @DPTR,A
   2145            req.devExtAddr = device->extAddr;
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
   2146          
   2147            // set security status, option for router to reject if policy set
   2148            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   A2E7         MOV     C,0xE0 /* A   */.7
   \   000054   503D         JNC     ??ZDSecMgrDeviceJoinFwd_0
   2149            {
   2150              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   A2E6         MOV     C,0xE0 /* A   */.6
   \   000064   5023         JNC     ??ZDSecMgrDeviceJoinFwd_1
   2151              {
   2152                if ( device->secure == TRUE )
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6401         XRL     A,#0x1
   \   000073   700A         JNZ     ??ZDSecMgrDeviceJoinFwd_2
   2153                {
   2154                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000075   7406         MOV     A,#0x6
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   7404         MOV     A,#0x4
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   804F         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2155                }
   2156                else
   2157                {
   2158                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   00007F   7406         MOV     A,#0x6
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   7407         MOV     A,#0x7
   \   000086   F0           MOVX    @DPTR,A
   \   000087   8045         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2159                }
   2160              }
   2161              else
   2162              {
   2163                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   000089   7406         MOV     A,#0x6
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   7405         MOV     A,#0x5
   \   000090   F0           MOVX    @DPTR,A
   \   000091   803B         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2164              }
   2165            }
   2166            else
   2167            {
   2168              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000A1   5023         JNC     ??ZDSecMgrDeviceJoinFwd_4
   2169              {
   2170                if ( device->secure == TRUE )
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   6401         XRL     A,#0x1
   \   0000B0   700A         JNZ     ??ZDSecMgrDeviceJoinFwd_5
   2171                {
   2172                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   0000B2   7406         MOV     A,#0x6
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   7400         MOV     A,#0x0
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   8012         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2173                }
   2174                else
   2175                {
   2176                  req.status = APSME_UD_STANDARD_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   0000BC   7406         MOV     A,#0x6
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   8008         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   2177                }
   2178              }
   2179              else
   2180              {
   2181                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   0000C6   7406         MOV     A,#0x6
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   7401         MOV     A,#0x1
   \   0000CD   F0           MOVX    @DPTR,A
   2182              }
   2183            }
   2184          
   2185            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2186            {
   2187              req.apsSecure = TRUE;
   2188            }
   2189            else
   2190            {
   2191              req.apsSecure = FALSE;
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   0000CE   7407         MOV     A,#0x7
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   7400         MOV     A,#0x0
   \   0000D5   F0           MOVX    @DPTR,A
   2192            }
   2193          
   2194            // send and APSME_UPDATE_DEVICE request to the trust center
   2195            status = APSME_UpdateDeviceReq( &req );
   \   0000D6                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000D6   AA..         MOV     R2,?XSP + 0
   \   0000D8   AB..         MOV     R3,?XSP + 1
   \   0000DA   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   0000DD   E9           MOV     A,R1
   \   0000DE   F5..         MOV     ?V0,A
   2196          
   2197            return status;
   \   0000E0   A9..         MOV     R1,?V0
   \   0000E2   7408         MOV     A,#0x8
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   7F01         MOV     R7,#0x1
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
   2198          }
   2199          
   2200          /******************************************************************************
   2201           * @fn          ZDSecMgrDeviceNew
   2202           *
   2203           * @brief       Process a new device.
   2204           *
   2205           * @param       device - [in] ZDSecMgrDevice_t, device info
   2206           *
   2207           * @return      ZStatus_t
   2208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2209          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   2210          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2211            ZStatus_t status;
   2212          
   2213            if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2214            {
   2215              // try to join this device
   2216              status = ZDSecMgrDeviceJoinDirect( joiner );
   2217            }
   2218            else
   2219            {
   2220              status = ZDSecMgrDeviceJoinFwd( joiner );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??ZDSecMgrDeviceJoinFwd::?relay`; Banked call to: ZDSecMgrDeviceJoinFwd
   \   000010   E9           MOV     A,R1
   \   000011   F5..         MOV     ?V0,A
   2221            }
   2222          
   2223            return status;
   \   000013   A9..         MOV     R1,?V0
   \   000015   7F01         MOV     R7,#0x1
   \   000017   02....       LJMP    ?BANKED_LEAVE_XDATA
   2224          }
   2225          
   2226          /******************************************************************************
   2227           * @fn          ZDSecMgrAssocDeviceAuth
   2228           *
   2229           * @brief       Set associated device status to authenticated
   2230           *
   2231           * @param       assoc - [in, out] associated_devices_t
   2232           *
   2233           * @return      none
   2234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2235          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   2236          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2237            if ( assoc != NULL )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600D         JZ      ??ZDSecMgrAssocDeviceAuth_0
   2238            {
   2239              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   D2E3         SETB    0xE0 /* A   */.3
   \   000014   F0           MOVX    @DPTR,A
   2240            }
   2241          }
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
   2242          
   2243          /******************************************************************************
   2244           * @fn          ZDSecMgrAuthInitiate
   2245           *
   2246           * @brief       Initiate entity authentication
   2247           *
   2248           * @param       responder - [in] responder EXT address
   2249           *
   2250           * @return      none
   2251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2252          void ZDSecMgrAuthInitiate( uint8* responder )
   \                     ZDSecMgrAuthInitiate:
   2253          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2254            APSME_AuthenticateReq_t req;
   2255          
   2256          
   2257            // make sure NWK address is available
   2258            if ( APSME_LookupNwkAddr( responder, &req.nwkAddr ) )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000019   E9           MOV     A,R1
   \   00001A   6026         JZ      ??ZDSecMgrAuthInitiate_0
   2259            {
   2260              // set request fields
   2261              req.extAddr   = responder;
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   EE           MOV     A,R6
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   EF           MOV     A,R7
   \   000025   F0           MOVX    @DPTR,A
   2262              req.action    = APSME_EA_INITIATE;
   \   000026   7406         MOV     A,#0x6
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7400         MOV     A,#0x0
   \   00002D   F0           MOVX    @DPTR,A
   2263              req.challenge = NULL;
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   7400         MOV     A,#0x0
   \   000039   F0           MOVX    @DPTR,A
   2264          
   2265              // start EA processing
   2266              APSME_AuthenticateReq( &req );
   \   00003A                ; Setup parameters for call to function APSME_AuthenticateReq
   \   00003A   AA..         MOV     R2,?XSP + 0
   \   00003C   AB..         MOV     R3,?XSP + 1
   \   00003E   12....       LCALL   `??APSME_AuthenticateReq::?relay`; Banked call to: APSME_AuthenticateReq
   \   000041   E9           MOV     A,R1
   2267            }
   2268          }
   \                     ??ZDSecMgrAuthInitiate_0:
   \   000042   7407         MOV     A,#0x7
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   7F01         MOV     R7,#0x1
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
   2269          
   2270          /******************************************************************************
   2271           * @fn          ZDSecMgrAuthNwkKey
   2272           *
   2273           * @brief       Handle next step in authentication process
   2274           *
   2275           * @param       none
   2276           *
   2277           * @return      none
   2278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2279          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   2280          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2281            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   700D         JNZ     ??ZDSecMgrAuthNwkKey_0
   2282            {
   2283              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2284              {
   2285                uint8 parent[Z_EXTADDR_LEN];
   2286          
   2287                // get parent's EXT address
   2288                NLME_GetCoordExtAddr( parent );
   2289          
   2290                // begin entity authentication with parent
   2291                ZDSecMgrAuthInitiate( parent );
   2292              }
   2293              else
   2294              {
   2295                // inform ZDO that device has been authenticated
   2296                osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV     R2,#-0x80
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000018   E9           MOV     A,R1
   2297              }
   2298            }
   2299          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
   2300          
   2301          /******************************************************************************
   2302           * PUBLIC FUNCTIONS
   2303           */
   2304          /******************************************************************************
   2305           * @fn          ZDSecMgrInit
   2306           *
   2307           * @brief       Initialize ZigBee Device Security Manager.
   2308           *
   2309           * @param       state - device initialization state
   2310           *
   2311           * @return      none
   2312           */
   2313          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   2314          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   2315          void ZDSecMgrAddrMgrCB( uint8           update,
   2316                                  AddrMgrEntry_t* newEntry,
   2317                                  AddrMgrEntry_t* oldEntry )
   2318          {
   2319            (void)update;
   2320            (void)newEntry;
   2321            (void)oldEntry;
   2322          }
   2323          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   2324          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2325          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   2326          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2327            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
   2328                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
   2329            {
   2330              // initialize sub modules
   2331              ZDSecMgrEntryInit(state);
   2332          
   2333              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2334              {
   2335                ZDSecMgrCtrlInit();
   2336              }
   2337          
   2338              // register with Address Manager
   2339          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   2340              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   2341          #endif
   2342            }
   2343          
   2344            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2345            {
   2346              // configure SKA slot data
   2347              APSME_SKA_SlotInit( ZDSECMGR_SKA_SLOT_MAX );
   2348            }
   2349          
   2350            if ( ZG_SECURE_ENABLED )
   2351            {
   2352              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2353              {
   2354                // setup joining permissions
   2355                ZDSecMgrPermitJoiningEnabled = TRUE;
   2356                ZDSecMgrPermitJoiningTimed   = FALSE;
   2357              }
   2358            }
   2359          
   2360            // configure security based on security mode and type of device
   2361            ZDSecMgrConfig();
   \   000007                ; Setup parameters for call to function ZDSecMgrConfig
   \   000007   12....       LCALL   `??ZDSecMgrConfig::?relay`; Banked call to: ZDSecMgrConfig
   2362          }
   \   00000A   7F01         MOV     R7,#0x1
   \   00000C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2363          
   2364          /******************************************************************************
   2365           * @fn          ZDSecMgrConfig
   2366           *
   2367           * @brief       Configure ZigBee Device Security Manager.
   2368           *
   2369           * @param       none
   2370           *
   2371           * @return      none
   2372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2373          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   2374          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2375            if ( ZG_SECURE_ENABLED )
   2376            {
   2377              SSP_Init();
   2378          
   2379              if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
   2380                  || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
   2381              {
   2382                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2383                {
   2384                  // COMMERCIAL MODE - COORDINATOR DEVICE
   2385                  APSME_SecurityCM_CD();
   2386                }
   2387                else if ( ZSTACK_ROUTER_BUILD )
   2388                {
   2389                  // COMMERCIAL MODE - ROUTER DEVICE
   2390                  APSME_SecurityCM_RD();
   2391                }
   2392                else
   2393                {
   2394                  // COMMERCIAL MODE - END DEVICE
   2395                  APSME_SecurityCM_ED();
   2396                }
   2397              }
   2398              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2399              {
   2400                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2401                {
   2402                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   2403                  APSME_SecurityRM_CD();
   2404                }
   2405                else if ( ZSTACK_ROUTER_BUILD )
   2406                {
   2407                  // RESIDENTIAL MODE - ROUTER DEVICE
   2408                  APSME_SecurityRM_RD();
   2409                }
   2410                else
   2411                {
   2412                  // RESIDENTIAL MODE - END DEVICE
   2413                  APSME_SecurityRM_ED();
   2414                }
   2415              }
   2416            }
   2417            else
   2418            {
   2419              // NO SECURITY
   2420              APSME_SecurityNM();
   \   000004                ; Setup parameters for call to function APSME_SecurityNM
   \   000004   12....       LCALL   `??APSME_SecurityNM::?relay`; Banked call to: APSME_SecurityNM
   2421            }
   2422          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   2423          
   2424          /******************************************************************************
   2425           * @fn          ZDSecMgrPermitJoining
   2426           *
   2427           * @brief       Process request to change joining permissions.
   2428           *
   2429           * @param       duration - [in] timed duration for join in seconds
   2430           *                         - 0x00 not allowed
   2431           *                         - 0xFF allowed without timeout
   2432           *
   2433           * @return      uint8 - success(TRUE:FALSE)
   2434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2435          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   2436          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   2437            uint8 accept;
   2438          
   2439            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000006   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000009   7400         MOV     A,#0x0
   \   00000B   F0           MOVX    @DPTR,A
   2440          
   2441            if ( duration > 0 )
   \   00000C   E8           MOV     A,R0
   \   00000D   6013         JZ      ??ZDSecMgrPermitJoining_0
   2442            {
   2443              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   00000F   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
   2444          
   2445              if ( duration != 0xFF )
   \   000015   74FF         MOV     A,#-0x1
   \   000017   68           XRL     A,R0
   \   000018   600E         JZ      ??ZDSecMgrPermitJoining_1
   2446              {
   2447                ZDSecMgrPermitJoiningTimed = TRUE;
   \   00001A   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   00001D   7401         MOV     A,#0x1
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8006         SJMP    ??ZDSecMgrPermitJoining_1
   2448              }
   2449            }
   2450            else
   2451            {
   2452              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   000022   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000025   7400         MOV     A,#0x0
   \   000027   F0           MOVX    @DPTR,A
   2453            }
   2454          
   2455            accept = TRUE;
   \                     ??ZDSecMgrPermitJoining_1:
   \   000028   7901         MOV     R1,#0x1
   2456          
   2457            return accept;
   \   00002A   D083         POP     DPH
   \   00002C   D082         POP     DPL
   \   00002E   02....       LJMP    ?BRET
   2458          }
   2459          
   2460          /******************************************************************************
   2461           * @fn          ZDSecMgrPermitJoiningTimeout
   2462           *
   2463           * @brief       Process permit joining timeout
   2464           *
   2465           * @param       none
   2466           *
   2467           * @return      none
   2468           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2469          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   2470          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2471            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   700C         JNZ     ??ZDSecMgrPermitJoiningTimeout_0
   2472            {
   2473              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
   2474              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000012   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
   2475            }
   2476          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000018   D083         POP     DPH
   \   00001A   D082         POP     DPL
   \   00001C   02....       LJMP    ?BRET
   2477          
   2478          /******************************************************************************
   2479           * @fn          ZDSecMgrNewDeviceEvent
   2480           *
   2481           * @brief       Process a the new device event, if found reset new device
   2482           *              event/timer.
   2483           *
   2484           * @param       none
   2485           *
   2486           * @return      uint8 - found(TRUE:FALSE)
   2487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2488          uint8 ZDSecMgrNewDeviceEvent( void )
   \                     ZDSecMgrNewDeviceEvent:
   2489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2490            uint8                 found;
   2491            ZDSecMgrDevice_t      device;
   2492            AddrMgrEntry_t        addrEntry;
   2493            associated_devices_t* assoc;
   2494            ZStatus_t             status;
   2495          
   2496            // initialize return results
   2497            found = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   2498          
   2499            // look for device in the security init state
   2500            assoc = AssocMatchDeviceStatus( DEV_SEC_INIT_STATUS );
   \   00000D                ; Setup parameters for call to function AssocMatchDeviceStatus
   \   00000D   7904         MOV     R1,#0x4
   \   00000F   12....       LCALL   `??AssocMatchDeviceStatus::?relay`; Banked call to: AssocMatchDeviceStatus
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   AE..         MOV     R6,?V2
   \   000018   AF..         MOV     R7,?V3
   2501          
   2502            if ( assoc != NULL )
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   7003         JNZ     $+5
   \   00001E   02....       LJMP    ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
   2503            {
   2504              // device found
   2505              found = TRUE;
   \   000021   75..01       MOV     ?V0,#0x1
   2506          
   2507              // check for preconfigured security
   2508              if ( zgPreConfigKeys == TRUE )
   \   000024   90....       MOV     DPTR,#zgPreConfigKeys
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   7007         JNZ     ??ZDSecMgrNewDeviceEvent_1
   2509              {
   2510                // set association status to authenticated
   2511                ZDSecMgrAssocDeviceAuth( assoc );
   \   00002C                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2512              }
   2513          
   2514              // set up device info
   2515              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   000033   740A         MOV     A,#0xa
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   7400         MOV     A,#0x0
   \   00003A   F0           MOVX    @DPTR,A
   2516              addrEntry.index = assoc->addrIdx;
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   7415         MOV     A,#0x15
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E8           MOV     A,R0
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   E9           MOV     A,R1
   \   00004F   F0           MOVX    @DPTR,A
   2517              AddrMgrEntryGet( &addrEntry );
   \   000050                ; Setup parameters for call to function AddrMgrEntryGet
   \   000050   740A         MOV     A,#0xa
   \   000052   12....       LCALL   ?XSTACK_DISP101_8
   \   000055   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000058   E9           MOV     A,R1
   2518          
   2519              device.nwkAddr    = assoc->shortAddr;
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E8           MOV     A,R0
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   E9           MOV     A,R1
   \   00006C   F0           MOVX    @DPTR,A
   2520              device.extAddr    = addrEntry.extAddr;
   \   00006D   740D         MOV     A,#0xd
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   A882         MOV     R0,DPL
   \   000074   A983         MOV     R1,DPH
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E8           MOV     A,R0
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E9           MOV     A,R1
   \   00007F   F0           MOVX    @DPTR,A
   2521              device.parentAddr = NLME_GetShortAddr();
   \   000080                ; Setup parameters for call to function NLME_GetShortAddr
   \   000080   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000083   7404         MOV     A,#0x4
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   EA           MOV     A,R2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   EB           MOV     A,R3
   \   00008C   F0           MOVX    @DPTR,A
   2522              device.secure     = FALSE;
   \   00008D   7406         MOV     A,#0x6
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   7400         MOV     A,#0x0
   \   000094   F0           MOVX    @DPTR,A
   2523              device.devStatus  = assoc->devStatus;
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   C0E0         PUSH    A
   \   0000A1   7407         MOV     A,#0x7
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   D0E0         POP     A
   \   0000A8   F0           MOVX    @DPTR,A
   2524          
   2525              // process new device
   2526              status = ZDSecMgrDeviceNew( &device );
   \   0000A9                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   0000A9   AA..         MOV     R2,?XSP + 0
   \   0000AB   AB..         MOV     R3,?XSP + 1
   \   0000AD   12....       LCALL   `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
   \   0000B0   E9           MOV     A,R1
   \   0000B1   F5..         MOV     ?V1,A
   2527          
   2528              if ( status == ZSuccess )
   \   0000B3   E5..         MOV     A,?V1
   \   0000B5   700F         JNZ     ??ZDSecMgrNewDeviceEvent_2
   2529              {
   2530                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   C2E2         CLR     0xE0 /* A   */.2
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   8013         SJMP    ??ZDSecMgrNewDeviceEvent_0
   2531              }
   2532              else if ( status == ZNwkUnknownDevice )
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   0000C6   74C8         MOV     A,#-0x38
   \   0000C8   65..         XRL     A,?V1
   \   0000CA   700D         JNZ     ??ZDSecMgrNewDeviceEvent_0
   2533              {
   2534                AssocRemove( addrEntry.extAddr );
   \   0000CC                ; Setup parameters for call to function AssocRemove
   \   0000CC   740D         MOV     A,#0xd
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   AA82         MOV     R2,DPL
   \   0000D3   AB83         MOV     R3,DPH
   \   0000D5   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   \   0000D8   E9           MOV     A,R1
   2535              }
   2536            }
   2537          
   2538            return found;
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   0000D9   A9..         MOV     R1,?V0
   \   0000DB   7417         MOV     A,#0x17
   \   0000DD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E0   7F04         MOV     R7,#0x4
   \   0000E2   02....       LJMP    ?BANKED_LEAVE_XDATA
   2539          }
   2540          
   2541          /******************************************************************************
   2542           * @fn          ZDSecMgrEvent
   2543           *
   2544           * @brief       Handle ZDO Security Manager event/timer(ZDO_SECMGR_EVENT).
   2545           *
   2546           * @param       none
   2547           *
   2548           * @return      none
   2549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2550          void ZDSecMgrEvent( void )
   \                     ZDSecMgrEvent:
   2551          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2552            uint8            action;
   2553            uint8            restart;
   2554            uint16           index;
   2555            AddrMgrEntry_t   entry;
   2556            ZDSecMgrDevice_t device;
   2557          
   2558            // verify data is available
   2559            if ( ZDSecMgrCtrlData != NULL )
   \   00000A   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   7003         JNZ     $+5
   \   000016   02....       LJMP    ??ZDSecMgrEvent_0 & 0xFFFF
   2560            {
   2561              action  = FALSE;
   \   000019   75..00       MOV     ?V1,#0x0
   2562              restart = FALSE;
   \   00001C   75..00       MOV     ?V0,#0x0
   2563          
   2564              // update all the counters
   2565              for ( index = 0; index < ZDSECMGR_ENTRY_MAX; index++ )
   \   00001F   7E00         MOV     R6,#0x0
   \   000021   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrEvent_1:
   \   000023   C3           CLR     C
   \   000024   EE           MOV     A,R6
   \   000025   9403         SUBB    A,#0x3
   \   000027   EF           MOV     A,R7
   \   000028   9400         SUBB    A,#0x0
   \   00002A   4003         JC      $+5
   \   00002C   02....       LJMP    ??ZDSecMgrEvent_2 & 0xFFFF
   2566              {
   2567                if ( ZDSecMgrCtrlData[index].state !=  ZDSECMGR_CTRL_NONE )
   \   00002F   EE           MOV     A,R6
   \   000030   F8           MOV     R0,A
   \   000031   EF           MOV     A,R7
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   75F007       MOV     B,#0x7
   \   000037   A4           MUL     AB
   \   000038   C8           XCH     A,R0
   \   000039   AAF0         MOV     R2,B
   \   00003B   75F000       MOV     B,#0x0
   \   00003E   A4           MUL     AB
   \   00003F   2A           ADD     A,R2
   \   000040   FA           MOV     R2,A
   \   000041   75F007       MOV     B,#0x7
   \   000044   E9           MOV     A,R1
   \   000045   A4           MUL     AB
   \   000046   2A           ADD     A,R2
   \   000047   F9           MOV     R1,A
   \   000048   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   28           ADD     A,R0
   \   00004D   FA           MOV     R2,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   39           ADDC    A,R1
   \   000051   8A82         MOV     DPL,R2
   \   000053   F583         MOV     DPH,A
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??ZDSecMgrEvent_3 & 0xFFFF
   2568                {
   2569                  if ( ZDSecMgrCtrlData[index].cntr != 0 )
   \   000060   EE           MOV     A,R6
   \   000061   F8           MOV     R0,A
   \   000062   EF           MOV     A,R7
   \   000063   F9           MOV     R1,A
   \   000064   E8           MOV     A,R0
   \   000065   75F007       MOV     B,#0x7
   \   000068   A4           MUL     AB
   \   000069   C8           XCH     A,R0
   \   00006A   AAF0         MOV     R2,B
   \   00006C   75F000       MOV     B,#0x0
   \   00006F   A4           MUL     AB
   \   000070   2A           ADD     A,R2
   \   000071   FA           MOV     R2,A
   \   000072   75F007       MOV     B,#0x7
   \   000075   E9           MOV     A,R1
   \   000076   A4           MUL     AB
   \   000077   2A           ADD     A,R2
   \   000078   F9           MOV     R1,A
   \   000079   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   28           ADD     A,R0
   \   00007E   FA           MOV     R2,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   39           ADDC    A,R1
   \   000082   8A82         MOV     DPL,R2
   \   000084   F583         MOV     DPH,A
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   6030         JZ      ??ZDSecMgrEvent_4
   2570                  {
   2571                    ZDSecMgrCtrlData[index].cntr--;
   \   00008F   EE           MOV     A,R6
   \   000090   F8           MOV     R0,A
   \   000091   EF           MOV     A,R7
   \   000092   F9           MOV     R1,A
   \   000093   E8           MOV     A,R0
   \   000094   75F007       MOV     B,#0x7
   \   000097   A4           MUL     AB
   \   000098   C8           XCH     A,R0
   \   000099   AAF0         MOV     R2,B
   \   00009B   75F000       MOV     B,#0x0
   \   00009E   A4           MUL     AB
   \   00009F   2A           ADD     A,R2
   \   0000A0   FA           MOV     R2,A
   \   0000A1   75F007       MOV     B,#0x7
   \   0000A4   E9           MOV     A,R1
   \   0000A5   A4           MUL     AB
   \   0000A6   2A           ADD     A,R2
   \   0000A7   F9           MOV     R1,A
   \   0000A8   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   28           ADD     A,R0
   \   0000AD   FA           MOV     R2,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   39           ADDC    A,R1
   \   0000B1   8A82         MOV     DPL,R2
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   24FF         ADD     A,#-0x1
   \   0000BE   F0           MOVX    @DPTR,A
   2572                  }
   2573          
   2574                  if ( ( action == FALSE ) && ( ZDSecMgrCtrlData[index].cntr == 0 ) )
   \                     ??ZDSecMgrEvent_4:
   \   0000BF   E5..         MOV     A,?V1
   \   0000C1   6003         JZ      $+5
   \   0000C3   02....       LJMP    ??ZDSecMgrEvent_5 & 0xFFFF
   \   0000C6   EE           MOV     A,R6
   \   0000C7   F8           MOV     R0,A
   \   0000C8   EF           MOV     A,R7
   \   0000C9   F9           MOV     R1,A
   \   0000CA   E8           MOV     A,R0
   \   0000CB   75F007       MOV     B,#0x7
   \   0000CE   A4           MUL     AB
   \   0000CF   C8           XCH     A,R0
   \   0000D0   AAF0         MOV     R2,B
   \   0000D2   75F000       MOV     B,#0x0
   \   0000D5   A4           MUL     AB
   \   0000D6   2A           ADD     A,R2
   \   0000D7   FA           MOV     R2,A
   \   0000D8   75F007       MOV     B,#0x7
   \   0000DB   E9           MOV     A,R1
   \   0000DC   A4           MUL     AB
   \   0000DD   2A           ADD     A,R2
   \   0000DE   F9           MOV     R1,A
   \   0000DF   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   28           ADD     A,R0
   \   0000E4   FA           MOV     R2,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   39           ADDC    A,R1
   \   0000E8   8A82         MOV     DPL,R2
   \   0000EA   F583         MOV     DPH,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   6003         JZ      $+5
   \   0000F5   02....       LJMP    ??ZDSecMgrEvent_5 & 0xFFFF
   2575                  {
   2576                    action = TRUE;
   \   0000F8   75..01       MOV     ?V1,#0x1
   2577          
   2578                    // update from control data
   2579                    device.parentAddr = ZDSecMgrCtrlData[index].parentAddr;
   \   0000FB   EE           MOV     A,R6
   \   0000FC   F8           MOV     R0,A
   \   0000FD   EF           MOV     A,R7
   \   0000FE   F9           MOV     R1,A
   \   0000FF   E8           MOV     A,R0
   \   000100   75F007       MOV     B,#0x7
   \   000103   A4           MUL     AB
   \   000104   C8           XCH     A,R0
   \   000105   AAF0         MOV     R2,B
   \   000107   75F000       MOV     B,#0x0
   \   00010A   A4           MUL     AB
   \   00010B   2A           ADD     A,R2
   \   00010C   FA           MOV     R2,A
   \   00010D   75F007       MOV     B,#0x7
   \   000110   E9           MOV     A,R1
   \   000111   A4           MUL     AB
   \   000112   2A           ADD     A,R2
   \   000113   F9           MOV     R1,A
   \   000114   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000117   E0           MOVX    A,@DPTR
   \   000118   28           ADD     A,R0
   \   000119   FA           MOV     R2,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   39           ADDC    A,R1
   \   00011D   8A82         MOV     DPL,R2
   \   00011F   F583         MOV     DPH,A
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F8           MOV     R0,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   7404         MOV     A,#0x4
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   E8           MOV     A,R0
   \   00012E   F0           MOVX    @DPTR,A
   \   00012F   A3           INC     DPTR
   \   000130   E9           MOV     A,R1
   \   000131   F0           MOVX    @DPTR,A
   2580                    device.secure     = ZDSecMgrCtrlData[index].secure;
   \   000132   EE           MOV     A,R6
   \   000133   F8           MOV     R0,A
   \   000134   EF           MOV     A,R7
   \   000135   F9           MOV     R1,A
   \   000136   E8           MOV     A,R0
   \   000137   75F007       MOV     B,#0x7
   \   00013A   A4           MUL     AB
   \   00013B   C8           XCH     A,R0
   \   00013C   AAF0         MOV     R2,B
   \   00013E   75F000       MOV     B,#0x0
   \   000141   A4           MUL     AB
   \   000142   2A           ADD     A,R2
   \   000143   FA           MOV     R2,A
   \   000144   75F007       MOV     B,#0x7
   \   000147   E9           MOV     A,R1
   \   000148   A4           MUL     AB
   \   000149   2A           ADD     A,R2
   \   00014A   F9           MOV     R1,A
   \   00014B   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   28           ADD     A,R0
   \   000150   FA           MOV     R2,A
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   39           ADDC    A,R1
   \   000154   8A82         MOV     DPL,R2
   \   000156   F583         MOV     DPH,A
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   C0E0         PUSH    A
   \   00015F   7406         MOV     A,#0x6
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   D0E0         POP     A
   \   000166   F0           MOVX    @DPTR,A
   2581                    device.ctrl       = &ZDSecMgrCtrlData[index];
   \   000167   EE           MOV     A,R6
   \   000168   F8           MOV     R0,A
   \   000169   EF           MOV     A,R7
   \   00016A   F9           MOV     R1,A
   \   00016B   E8           MOV     A,R0
   \   00016C   75F007       MOV     B,#0x7
   \   00016F   A4           MUL     AB
   \   000170   C8           XCH     A,R0
   \   000171   AAF0         MOV     R2,B
   \   000173   75F000       MOV     B,#0x0
   \   000176   A4           MUL     AB
   \   000177   2A           ADD     A,R2
   \   000178   FA           MOV     R2,A
   \   000179   75F007       MOV     B,#0x7
   \   00017C   E9           MOV     A,R1
   \   00017D   A4           MUL     AB
   \   00017E   2A           ADD     A,R2
   \   00017F   F9           MOV     R1,A
   \   000180   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   000183   E0           MOVX    A,@DPTR
   \   000184   28           ADD     A,R0
   \   000185   F8           MOV     R0,A
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   39           ADDC    A,R1
   \   000189   F9           MOV     R1,A
   \   00018A   7408         MOV     A,#0x8
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   E8           MOV     A,R0
   \   000190   F0           MOVX    @DPTR,A
   \   000191   A3           INC     DPTR
   \   000192   E9           MOV     A,R1
   \   000193   F0           MOVX    @DPTR,A
   2582          
   2583                    // set the user and address index
   2584                    entry.user  = ADDRMGR_USER_SECURITY;
   \   000194   740A         MOV     A,#0xa
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   7402         MOV     A,#0x2
   \   00019B   F0           MOVX    @DPTR,A
   2585                    entry.index = ZDSecMgrCtrlData[index].entry->ami;
   \   00019C   EE           MOV     A,R6
   \   00019D   F8           MOV     R0,A
   \   00019E   EF           MOV     A,R7
   \   00019F   F9           MOV     R1,A
   \   0001A0   E8           MOV     A,R0
   \   0001A1   75F007       MOV     B,#0x7
   \   0001A4   A4           MUL     AB
   \   0001A5   C8           XCH     A,R0
   \   0001A6   AAF0         MOV     R2,B
   \   0001A8   75F000       MOV     B,#0x0
   \   0001AB   A4           MUL     AB
   \   0001AC   2A           ADD     A,R2
   \   0001AD   FA           MOV     R2,A
   \   0001AE   75F007       MOV     B,#0x7
   \   0001B1   E9           MOV     A,R1
   \   0001B2   A4           MUL     AB
   \   0001B3   2A           ADD     A,R2
   \   0001B4   F9           MOV     R1,A
   \   0001B5   90....       MOV     DPTR,#ZDSecMgrCtrlData
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   28           ADD     A,R0
   \   0001BA   FA           MOV     R2,A
   \   0001BB   A3           INC     DPTR
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   39           ADDC    A,R1
   \   0001BE   8A82         MOV     DPL,R2
   \   0001C0   F583         MOV     DPH,A
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F8           MOV     R0,A
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   F583         MOV     DPH,A
   \   0001C8   8882         MOV     DPL,R0
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F8           MOV     R0,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   F9           MOV     R1,A
   \   0001CF   7415         MOV     A,#0x15
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   E8           MOV     A,R0
   \   0001D5   F0           MOVX    @DPTR,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E9           MOV     A,R1
   \   0001D8   F0           MOVX    @DPTR,A
   2586          
   2587                    // get the address data
   2588                    AddrMgrEntryGet( &entry );
   \   0001D9                ; Setup parameters for call to function AddrMgrEntryGet
   \   0001D9   740A         MOV     A,#0xa
   \   0001DB   12....       LCALL   ?XSTACK_DISP101_8
   \   0001DE   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   0001E1   E9           MOV     A,R1
   2589          
   2590                    // set device address data
   2591                    device.nwkAddr = entry.nwkAddr;
   \   0001E2   740B         MOV     A,#0xb
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   F8           MOV     R0,A
   \   0001E9   A3           INC     DPTR
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   F9           MOV     R1,A
   \   0001EC   85..82       MOV     DPL,?XSP + 0
   \   0001EF   85..83       MOV     DPH,?XSP + 1
   \   0001F2   E8           MOV     A,R0
   \   0001F3   F0           MOVX    @DPTR,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E9           MOV     A,R1
   \   0001F6   F0           MOVX    @DPTR,A
   2592                    device.extAddr = entry.extAddr;
   \   0001F7   740D         MOV     A,#0xd
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   A882         MOV     R0,DPL
   \   0001FE   A983         MOV     R1,DPH
   \   000200   7402         MOV     A,#0x2
   \   000202   12....       LCALL   ?XSTACK_DISP0_8
   \   000205   E8           MOV     A,R0
   \   000206   F0           MOVX    @DPTR,A
   \   000207   A3           INC     DPTR
   \   000208   E9           MOV     A,R1
   \   000209   F0           MOVX    @DPTR,A
   2593          
   2594                    // update from entry data
   2595                    ZDSecMgrDeviceCtrlHandler( &device );
   \   00020A                ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
   \   00020A   AA..         MOV     R2,?XSP + 0
   \   00020C   AB..         MOV     R3,?XSP + 1
   \   00020E   12....       LCALL   `??ZDSecMgrDeviceCtrlHandler::?relay`; Banked call to: ZDSecMgrDeviceCtrlHandler
   \   000211   8003         SJMP    ??ZDSecMgrEvent_3
   2596                  }
   2597                  else
   2598                  {
   2599                    restart = TRUE;
   \                     ??ZDSecMgrEvent_5:
   \   000213   75..01       MOV     ?V0,#0x1
   2600                  }
   2601                }
   2602              }
   \                     ??ZDSecMgrEvent_3:
   \   000216   0E           INC     R6
   \   000217   EE           MOV     A,R6
   \   000218   7001         JNZ     ??ZDSecMgrEvent_6
   \   00021A   0F           INC     R7
   \                     ??ZDSecMgrEvent_6:
   \   00021B   02....       LJMP    ??ZDSecMgrEvent_1 & 0xFFFF
   2603          
   2604              // check for timer restart
   2605              if ( restart == TRUE )
   \                     ??ZDSecMgrEvent_2:
   \   00021E   7401         MOV     A,#0x1
   \   000220   65..         XRL     A,?V0
   \   000222   7011         JNZ     ??ZDSecMgrEvent_0
   2606              {
   2607                osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
   \   000224                ; Setup parameters for call to function osal_start_timerEx
   \   000224   7C64         MOV     R4,#0x64
   \   000226   7D00         MOV     R5,#0x0
   \   000228   7A00         MOV     R2,#0x0
   \   00022A   7B01         MOV     R3,#0x1
   \   00022C   90....       MOV     DPTR,#ZDAppTaskID
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   F9           MOV     R1,A
   \   000231   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000234   E9           MOV     A,R1
   2608              }
   2609            }
   2610          }
   \                     ??ZDSecMgrEvent_0:
   \   000235   7417         MOV     A,#0x17
   \   000237   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023A   7F02         MOV     R7,#0x2
   \   00023C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2611          
   2612          /******************************************************************************
   2613           * @fn          ZDSecMgrEstablishKeyCfm
   2614           *
   2615           * @brief       Process the ZDO_EstablishKeyCfm_t message.
   2616           *
   2617           * @param       cfm - [in] ZDO_EstablishKeyCfm_t confirmation
   2618           *
   2619           * @return      none
   2620           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2621          void ZDSecMgrEstablishKeyCfm( ZDO_EstablishKeyCfm_t* cfm )
   \                     ZDSecMgrEstablishKeyCfm:
   2622          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2623            // send the NWK key
   2624            if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   2625            {
   2626              // update control for specified EXT address
   2627              ZDSecMgrDeviceCtrlUpdate( cfm->partExtAddr, ZDSECMGR_CTRL_SKKE_DONE );
   2628            }
   2629            else
   2630            {
   2631              // this should be done when receiving the NWK key
   2632              // if devState ==
   2633              //if ( devState == DEV_END_DEVICE_UNAUTH )
   2634                  //osal_set_event( ZDAppTaskID, ZDO_DEVICE_AUTH );
   2635          
   2636              // if not in joining state -- this should trigger an event for an
   2637              // end point that requested SKKE
   2638              // if ( devState == DEV_END_DEVICE )
   2639             //       devState == DEV_ROUTER;
   2640          
   2641            }
   2642          }
   \   000000   02....       LJMP    ?BRET
   2643          
   2644          /******************************************************************************
   2645           * @fn          ZDSecMgrTCExtAddrCheck
   2646           *
   2647           * @brief       Verifies if received ext. address matches TC ext. address.
   2648           *
   2649           * @param       extAddr - Extended address to be verified.
   2650           *
   2651           * @return      TRUE - extended address matches
   2652           *              FALSE - otherwise
   2653           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2654          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   2655          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2656            uint8  match;
   2657            uint8  lookup[Z_EXTADDR_LEN];
   2658          
   2659            match = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   2660          
   2661            if ( AddrMgrExtAddrLookup( APSME_TRUSTCENTER_NWKADDR, lookup ) )
   \   000011                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7A00         MOV     R2,#0x0
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   00001C   E9           MOV     A,R1
   \   00001D   600E         JZ      ??ZDSecMgrTCExtAddrCheck_0
   2662            {
   2663              match = AddrMgrExtAddrEqual( lookup, extAddr );
   \   00001F                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   00001F   EE           MOV     A,R6
   \   000020   FC           MOV     R4,A
   \   000021   EF           MOV     A,R7
   \   000022   FD           MOV     R5,A
   \   000023   AA..         MOV     R2,?XSP + 0
   \   000025   AB..         MOV     R3,?XSP + 1
   \   000027   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   00002A   E9           MOV     A,R1
   \   00002B   F5..         MOV     ?V0,A
   2664            }
   2665          
   2666            return match;
   \                     ??ZDSecMgrTCExtAddrCheck_0:
   \   00002D   A9..         MOV     R1,?V0
   \   00002F   7408         MOV     A,#0x8
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   7F01         MOV     R7,#0x1
   \   000036   02....       LJMP    ?BANKED_LEAVE_XDATA
   2667          }
   2668          
   2669          /******************************************************************************
   2670           * @fn          ZDSecMgrTCDataLoad
   2671           *
   2672           * @brief       Stores the address of TC into address manager and stores the
   2673           *              preconfigured ZDSecMgrTCMasterKey to NV if zgPreConfigKeys
   2674           *              is set to TRUE.
   2675           *
   2676           * @param       extAddr - Extended address to be verified.
   2677           *
   2678           * @return      none
   2679           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2680          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   2681          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV     A,#-0x21
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2682            uint16 ami;
   2683            uint16 keyNvId;
   2684            uint8 masterKey[SEC_KEY_LEN];
   2685            AddrMgrEntry_t entry;
   2686          
   2687            // lookup using TC short address
   2688            entry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   7404         MOV     A,#0x4
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   2689            entry.nwkAddr = zgTrustCenterAddr;
   \   000016   90....       MOV     DPTR,#zgTrustCenterAddr
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   7405         MOV     A,#0x5
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E8           MOV     A,R0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E9           MOV     A,R1
   \   000027   F0           MOVX    @DPTR,A
   2690          
   2691            // Verify if TC address has been added to Address Manager
   2692            if ( AddrMgrEntryLookupNwk( &entry ) != TRUE )
   \   000028                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000028   7404         MOV     A,#0x4
   \   00002A   12....       LCALL   ?XSTACK_DISP101_8
   \   00002D   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000030   E9           MOV     A,R1
   \   000031   6401         XRL     A,#0x1
   \   000033   7003         JNZ     $+5
   \   000035   02....       LJMP    ??ZDSecMgrTCDataLoad_0 & 0xFFFF
   2693            {
   2694              if ( ZDSecMgrAddrStore( zgTrustCenterAddr, extAddr, &ami ) == ZSuccess )
   \   000038                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000038   A8..         MOV     R0,?XSP + 0
   \   00003A   A9..         MOV     R1,?XSP + 1
   \   00003C   88..         MOV     ?V0,R0
   \   00003E   89..         MOV     ?V1,R1
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   EE           MOV     A,R6
   \   000046   FC           MOV     R4,A
   \   000047   EF           MOV     A,R7
   \   000048   FD           MOV     R5,A
   \   000049   90....       MOV     DPTR,#zgTrustCenterAddr
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FA           MOV     R2,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000054   7402         MOV     A,#0x2
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   \   000059   E9           MOV     A,R1
   \   00005A   705F         JNZ     ??ZDSecMgrTCDataLoad_0
   2695              {
   2696                // if preconfigured load key
   2697                if ( zgPreConfigKeys == TRUE )
   \   00005C   90....       MOV     DPTR,#zgPreConfigKeys
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6401         XRL     A,#0x1
   \   000062   7057         JNZ     ??ZDSecMgrTCDataLoad_0
   2698                {
   2699                  if ( ZDSecMgrMasterKeyLookup( ami, &keyNvId ) != ZSuccess )
   \   000064                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?XSTACK_DISP102_8
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   `??ZDSecMgrMasterKeyLookup::?relay`; Banked call to: ZDSecMgrMasterKeyLookup
   \   000077   E9           MOV     A,R1
   \   000078   6041         JZ      ??ZDSecMgrTCDataLoad_0
   2700                  {
   2701                    // temporary copy
   2702                    osal_memcpy( masterKey, ZDSecMgrTCMasterKey, SEC_KEY_LEN);
   \   00007A                ; Setup parameters for call to function osal_memcpy
   \   00007A   75....       MOV     ?V0,#ZDSecMgrTCMasterKey & 0xff
   \   00007D   75....       MOV     ?V1,#(ZDSecMgrTCMasterKey >> 8) & 0xff
   \   000080   75..80       MOV     ?V2,#-0x80
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000088   7C10         MOV     R4,#0x10
   \   00008A   7D00         MOV     R5,#0x0
   \   00008C   7414         MOV     A,#0x14
   \   00008E   12....       LCALL   ?XSTACK_DISP101_8
   \   000091   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000094   7403         MOV     A,#0x3
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   2703          
   2704                    ZDSecMgrMasterKeyStore( ami, masterKey );
   \   000099                ; Setup parameters for call to function ZDSecMgrMasterKeyStore
   \   000099   7411         MOV     A,#0x11
   \   00009B   12....       LCALL   ?XSTACK_DISP102_8
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   `??ZDSecMgrMasterKeyStore::?relay`; Banked call to: ZDSecMgrMasterKeyStore
   \   0000AC   E9           MOV     A,R1
   2705          
   2706                    // remove copy of key in RAM
   2707                    osal_memset( masterKey, 0x00, SEC_KEY_LEN );
   \   0000AD                ; Setup parameters for call to function osal_memset
   \   0000AD   7C10         MOV     R4,#0x10
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   7900         MOV     R1,#0x0
   \   0000B3   7411         MOV     A,#0x11
   \   0000B5   12....       LCALL   ?XSTACK_DISP101_8
   \   0000B8   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2708                  }
   2709                }
   2710              }
   2711            }
   2712          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   0000BB   7421         MOV     A,#0x21
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C0   7F03         MOV     R7,#0x3
   \   0000C2   02....       LJMP    ?BANKED_LEAVE_XDATA
   2713          
   2714          /******************************************************************************
   2715           * @fn          ZDSecMgrEstablishKeyInd
   2716           *
   2717           * @brief       Process the ZDO_EstablishKeyInd_t message.
   2718           *
   2719           * @param       ind - [in] ZDO_EstablishKeyInd_t indication
   2720           *
   2721           * @return      none
   2722           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2723          void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
   \                     ZDSecMgrEstablishKeyInd:
   2724          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2725            ZDSecMgrDevice_t        device;
   2726            APSME_EstablishKeyRsp_t rsp;
   2727          
   2728          
   2729            // load Trust Center data if needed
   2730            ZDSecMgrTCDataLoad( ind->initExtAddr );
   \   00000E                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   00000E   EE           MOV     A,R6
   \   00000F   2404         ADD     A,#0x4
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   2731          
   2732            if ( ZDSecMgrTCExtAddrCheck( ind->initExtAddr ) )
   \   000018                ; Setup parameters for call to function ZDSecMgrTCExtAddrCheck
   \   000018   EE           MOV     A,R6
   \   000019   2404         ADD     A,#0x4
   \   00001B   FA           MOV     R2,A
   \   00001C   E4           CLR     A
   \   00001D   3F           ADDC    A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??ZDSecMgrTCExtAddrCheck::?relay`; Banked call to: ZDSecMgrTCExtAddrCheck
   \   000022   E9           MOV     A,R1
   \   000023   6023         JZ      ??ZDSecMgrEstablishKeyInd_0
   2733            {
   2734              //IF (ind->srcAddr == APSME_TRUSTCENTER_NWKADDR)
   2735              //OR
   2736              //!ZDSecMgrTCAuthenticated
   2737              //devtag.0604.critical
   2738                  //how is the parentAddr used here
   2739          
   2740              // initial SKKE from Trust Center via parent
   2741              device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000025   7407         MOV     A,#0x7
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   7400         MOV     A,#0x0
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   7400         MOV     A,#0x0
   \   000030   F0           MOVX    @DPTR,A
   2742              device.parentAddr = ind->srcAddr;
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   740B         MOV     A,#0xb
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
   \   000046   8021         SJMP    ??ZDSecMgrEstablishKeyInd_1
   2743            }
   2744            else
   2745            {
   2746              // Trust Center direct or E2E SKKE
   2747              device.nwkAddr    = ind->srcAddr;
   \                     ??ZDSecMgrEstablishKeyInd_0:
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   7407         MOV     A,#0x7
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E8           MOV     A,R0
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E9           MOV     A,R1
   \   00005C   F0           MOVX    @DPTR,A
   2748              device.parentAddr = INVALID_NODE_ADDR;
   \   00005D   740B         MOV     A,#0xb
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   74FE         MOV     A,#-0x2
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   74FF         MOV     A,#-0x1
   \   000068   F0           MOVX    @DPTR,A
   2749            }
   2750          
   2751            device.extAddr = ind->initExtAddr;
   \                     ??ZDSecMgrEstablishKeyInd_1:
   \   000069   EE           MOV     A,R6
   \   00006A   2404         ADD     A,#0x4
   \   00006C   F8           MOV     R0,A
   \   00006D   E4           CLR     A
   \   00006E   3F           ADDC    A,R7
   \   00006F   F9           MOV     R1,A
   \   000070   7409         MOV     A,#0x9
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E8           MOV     A,R0
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E9           MOV     A,R1
   \   000079   F0           MOVX    @DPTR,A
   2752            //devtag.pro.security.0724.todo - verify usage
   2753            device.secure  = ind->nwkSecure;
   \   00007A   EE           MOV     A,R6
   \   00007B   240E         ADD     A,#0xe
   \   00007D   F582         MOV     DPL,A
   \   00007F   E4           CLR     A
   \   000080   3F           ADDC    A,R7
   \   000081   F583         MOV     DPH,A
   \   000083   E0           MOVX    A,@DPTR
   \   000084   C0E0         PUSH    A
   \   000086   740D         MOV     A,#0xd
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
   2754          
   2755            // validate device for SKKE
   2756            if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
   \   00008E                ; Setup parameters for call to function ZDSecMgrDeviceValidateSKKE
   \   00008E   7407         MOV     A,#0x7
   \   000090   12....       LCALL   ?XSTACK_DISP101_8
   \   000093   12....       LCALL   `??ZDSecMgrDeviceValidateSKKE::?relay`; Banked call to: ZDSecMgrDeviceValidateSKKE
   \   000096   E9           MOV     A,R1
   \   000097   700A         JNZ     ??ZDSecMgrEstablishKeyInd_2
   2757            {
   2758              rsp.accept = TRUE;
   \   000099   7404         MOV     A,#0x4
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   8008         SJMP    ??ZDSecMgrEstablishKeyInd_3
   2759            }
   2760            else
   2761            {
   2762              rsp.accept = FALSE;
   \                     ??ZDSecMgrEstablishKeyInd_2:
   \   0000A3   7404         MOV     A,#0x4
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   7400         MOV     A,#0x0
   \   0000AA   F0           MOVX    @DPTR,A
   2763            }
   2764          
   2765            rsp.dstAddr     = ind->srcAddr;
   \                     ??ZDSecMgrEstablishKeyInd_3:
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F9           MOV     R1,A
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   E8           MOV     A,R0
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E9           MOV     A,R1
   \   0000C0   F0           MOVX    @DPTR,A
   2766            rsp.initExtAddr = &ind->initExtAddr[0];
   \   0000C1   EE           MOV     A,R6
   \   0000C2   2404         ADD     A,#0x4
   \   0000C4   F8           MOV     R0,A
   \   0000C5   E4           CLR     A
   \   0000C6   3F           ADDC    A,R7
   \   0000C7   F9           MOV     R1,A
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E8           MOV     A,R0
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E9           MOV     A,R1
   \   0000D1   F0           MOVX    @DPTR,A
   2767            //devtag.0604.todo - remove obsolete
   2768            rsp.apsSecure   = ind->apsSecure;
   \   0000D2   EE           MOV     A,R6
   \   0000D3   240D         ADD     A,#0xd
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   F583         MOV     DPH,A
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C0E0         PUSH    A
   \   0000DE   7405         MOV     A,#0x5
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   D0E0         POP     A
   \   0000E5   F0           MOVX    @DPTR,A
   2769            rsp.nwkSecure   = ind->nwkSecure;
   \   0000E6   EE           MOV     A,R6
   \   0000E7   240E         ADD     A,#0xe
   \   0000E9   F582         MOV     DPL,A
   \   0000EB   E4           CLR     A
   \   0000EC   3F           ADDC    A,R7
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   C0E0         PUSH    A
   \   0000F2   7406         MOV     A,#0x6
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   D0E0         POP     A
   \   0000F9   F0           MOVX    @DPTR,A
   2770          
   2771            APSME_EstablishKeyRsp( &rsp );
   \   0000FA                ; Setup parameters for call to function APSME_EstablishKeyRsp
   \   0000FA   AA..         MOV     R2,?XSP + 0
   \   0000FC   AB..         MOV     R3,?XSP + 1
   \   0000FE   12....       LCALL   `??APSME_EstablishKeyRsp::?relay`; Banked call to: APSME_EstablishKeyRsp
   \   000101   E9           MOV     A,R1
   2772          }
   \   000102   7411         MOV     A,#0x11
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   \   000107   7F01         MOV     R7,#0x1
   \   000109   02....       LJMP    ?BANKED_LEAVE_XDATA
   2773          
   2774          //devtag.pro.security
   2775          #if 0
   2776          void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
   2777          {
   2778            ZDSecMgrDevice_t        device;
   2779            APSME_EstablishKeyRsp_t rsp;
   2780          
   2781          
   2782            device.extAddr = ind->initExtAddr;
   2783            device.secure  = ind->secure;
   2784          
   2785            if ( ind->secure == FALSE )
   2786            {
   2787              // SKKE from Trust Center is not secured between child and parent
   2788              device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
   2789              device.parentAddr = ind->srcAddr;
   2790            }
   2791            else
   2792            {
   2793              // SKKE from initiator should be secured
   2794              device.nwkAddr    = ind->srcAddr;
   2795              device.parentAddr = INVALID_NODE_ADDR;
   2796            }
   2797          
   2798            rsp.dstAddr     = ind->srcAddr;
   2799            rsp.initExtAddr = &ind->initExtAddr[0];
   2800            rsp.secure      = ind->secure;
   2801          
   2802            // validate device for SKKE
   2803            if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
   2804            {
   2805              rsp.accept = TRUE;
   2806            }
   2807            else
   2808            {
   2809              rsp.accept = FALSE;
   2810            }
   2811          
   2812            APSME_EstablishKeyRsp( &rsp );
   2813          }
   2814          #endif
   2815          
   2816          /******************************************************************************
   2817           * @fn          ZDSecMgrTransportKeyInd
   2818           *
   2819           * @brief       Process the ZDO_TransportKeyInd_t message.
   2820           *
   2821           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   2822           *
   2823           * @return      none
   2824           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2825          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   2826          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2827            uint8 index;
   2828            uint8 zgPreConfigKey[SEC_KEY_LEN];
   2829          
   2830            // load Trust Center data if needed
   2831            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \   00000E                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   00000E   EE           MOV     A,R6
   \   00000F   2416         ADD     A,#0x16
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   2832          
   2833            if ( ind->keyType == KEY_TYPE_TC_MASTER )
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   7003         JNZ     $+5
   \   000023   02....       LJMP    ??ZDSecMgrTransportKeyInd_0 & 0xFFFF
   2834            {
   2835              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2836              //ZDSecMgrTCMasterKey( ind );
   2837              {
   2838                if ( zgPreConfigKeys != TRUE )
   2839                {
   2840                  // devtag.pro.security.todo - check if Trust Center address is configured and correct
   2841                  ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
   2842                }
   2843                else
   2844                {
   2845                  // error condition - reject key
   2846                }
   2847              }
   2848            }
   2849            else if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
   2850                      ( ind->keyType == 6                 ) ||
   2851                      ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6401         XRL     A,#0x1
   \   000031   601D         JZ      ??ZDSecMgrTransportKeyInd_1
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6406         XRL     A,#0x6
   \   00003E   6010         JZ      ??ZDSecMgrTransportKeyInd_1
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   6405         XRL     A,#0x5
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDSecMgrTransportKeyInd_2 & 0xFFFF
   2852            {
   2853              // check for dummy NWK key (all zeros)
   2854              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   000050   75..00       MOV     ?V0,#0x0
   2855                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   000053   E5..         MOV     A,?V0
   \   000055   C3           CLR     C
   \   000056   9410         SUBB    A,#0x10
   \   000058   5019         JNC     ??ZDSecMgrTransportKeyInd_4
   \   00005A   A8..         MOV     R0,?V0
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   EE           MOV     A,R6
   \   00005F   28           ADD     A,R0
   \   000060   F582         MOV     DPL,A
   \   000062   EF           MOV     A,R7
   \   000063   39           ADDC    A,R1
   \   000064   F583         MOV     DPH,A
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   7004         JNZ     ??ZDSecMgrTransportKeyInd_4
   2856                    index++ );
   \   00006F   05..         INC     ?V0
   \   000071   80E0         SJMP    ??ZDSecMgrTransportKeyInd_3
   2857          
   2858              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   000073   7410         MOV     A,#0x10
   \   000075   65..         XRL     A,?V0
   \   000077   702F         JNZ     ??ZDSecMgrTransportKeyInd_5
   2859              {
   2860                // load preconfigured key - once!!
   2861                if ( !_NIB.nwkKeyLoaded )
   \   000079   90....       MOV     DPTR,#_NIB + 61
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   7052         JNZ     ??ZDSecMgrTransportKeyInd_6
   2862                {
   2863                  ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   00007F                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   00007F   AC..         MOV     R4,?XSP + 0
   \   000081   AD..         MOV     R5,?XSP + 1
   \   000083   7A62         MOV     R2,#0x62
   \   000085   7B00         MOV     R3,#0x0
   \   000087   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   00008A   E9           MOV     A,R1
   2864                  SSP_UpdateNwkKey( zgPreConfigKey, 0 );
   \   00008B                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00008B   7900         MOV     R1,#0x0
   \   00008D   AA..         MOV     R2,?XSP + 0
   \   00008F   AB..         MOV     R3,?XSP + 1
   \   000091   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2865                  SSP_SwitchNwkKey( 0 );
   \   000094                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000094   7900         MOV     R1,#0x0
   \   000096   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2866          
   2867                  // clear local copy of key
   2868                  osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000099                ; Setup parameters for call to function osal_memset
   \   000099   7C10         MOV     R4,#0x10
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   7900         MOV     R1,#0x0
   \   00009F   AA..         MOV     R2,?XSP + 0
   \   0000A1   AB..         MOV     R3,?XSP + 1
   \   0000A3   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000A6   8029         SJMP    ??ZDSecMgrTransportKeyInd_6
   2869                }
   2870              }
   2871              else
   2872              {
   2873                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   0000A8                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   EE           MOV     A,R6
   \   0000B4   2406         ADD     A,#0x6
   \   0000B6   FA           MOV     R2,A
   \   0000B7   E4           CLR     A
   \   0000B8   3F           ADDC    A,R7
   \   0000B9   FB           MOV     R3,A
   \   0000BA   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2874                if ( !_NIB.nwkKeyLoaded )
   \   0000BD   90....       MOV     DPTR,#_NIB + 61
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   700E         JNZ     ??ZDSecMgrTransportKeyInd_6
   2875                {
   2876                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   0000C3                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F9           MOV     R1,A
   \   0000CE   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2877                }
   2878              }
   2879          
   2880              // handle next step in authentication process
   2881              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   0000D1                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   0000D1   12....       LCALL   `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
   \   0000D4   8025         SJMP    ??ZDSecMgrTransportKeyInd_0
   2882            }
   2883            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   6404         XRL     A,#0x4
   \   0000E1   6018         JZ      ??ZDSecMgrTransportKeyInd_0
   2884            {
   2885              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2886              {
   2887                // This should not happen because TCLK should not be Tx
   2888              }
   2889            }
   2890            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   6402         XRL     A,#0x2
   \   0000EE   600B         JZ      ??ZDSecMgrTransportKeyInd_0
   2891            {
   2892              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   2893              {
   2894                uint16           ami;
   2895                AddrMgrEntry_t   entry;
   2896                ZDSecMgrEntry_t* entryZD;
   2897          
   2898                ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami );
   2899          
   2900                if ( ind->initiator == TRUE )
   2901                {
   2902                  // get the ami data
   2903                  entry.user  = ADDRMGR_USER_SECURITY;
   2904                  entry.index = ami;
   2905                  AddrMgrEntryGet( &entry );
   2906          
   2907                  if ( entry.nwkAddr != INVALID_NODE_ADDR )
   2908                  {
   2909                    APSME_EstablishKeyReq_t req;
   2910                    ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
   2911          
   2912                    ZDSecMgrEntryLookupAMI( ami, &entryZD );
   2913          
   2914                    if ( entryZD == NULL )
   2915                    {
   2916                      // get new entry
   2917                      if ( ZDSecMgrEntryNew( &entryZD ) == ZSuccess )
   2918                      {
   2919                        // finish setting up entry
   2920                        entryZD->ami = ami;
   2921                      }
   2922                    }
   2923          
   2924                    req.respExtAddr = ind->srcExtAddr;
   2925                    req.method      = APSME_SKKE_METHOD;
   2926                    req.dstAddr     = entry.nwkAddr;
   2927                    req.apsSecure   = FALSE;
   2928                    req.nwkSecure   = TRUE;
   2929                    APSME_EstablishKeyReq( &req );
   2930                  }
   2931                }
   2932                else
   2933                {
   2934                  if ( ami == INVALID_NODE_ADDR )
   2935                  {
   2936                    // store new EXT address
   2937                    ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   2938                  }
   2939          
   2940                  ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
   2941                }
   2942              }
   2943            }
   2944            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   \   0000F0   8E82         MOV     DPL,R6
   \   0000F2   8F83         MOV     DPH,R7
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6403         XRL     A,#0x3
   2945            {
   2946              if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
   2947                   ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   2948              {
   2949                uint16           ami;
   2950                ZDSecMgrEntry_t* entry;
   2951          
   2952                // get the address index
   2953                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   2954                {
   2955                  // store new EXT address
   2956                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   2957                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   2958                }
   2959          
   2960                ZDSecMgrEntryLookupAMI( ami, &entry );
   2961          
   2962                if ( entry == NULL )
   2963                {
   2964                  // get new entry
   2965                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   2966                  {
   2967                    // finish setting up entry
   2968                    entry->ami = ami;
   2969                  }
   2970                }
   2971          
   2972                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   2973          
   2974          #if defined NV_RESTORE
   2975                ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
   2976          #endif
   2977              }
   2978            }
   2979          }
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   0000FB   7410         MOV     A,#0x10
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
   \   000100   7F01         MOV     R7,#0x1
   \   000102   02....       LJMP    ?BANKED_LEAVE_XDATA
   2980          
   2981          /******************************************************************************
   2982           * @fn          ZDSecMgrUpdateDeviceInd
   2983           *
   2984           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   2985           *
   2986           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   2987           *
   2988           * @return      none
   2989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2990          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   2991          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2992            ZDSecMgrDevice_t device;
   2993          
   2994            device.nwkAddr    = ind->devAddr;
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   E8           MOV     A,R0
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   E9           MOV     A,R1
   \   000026   F0           MOVX    @DPTR,A
   2995            device.extAddr    = ind->devExtAddr;
   \   000027   EE           MOV     A,R6
   \   000028   2404         ADD     A,#0x4
   \   00002A   F8           MOV     R0,A
   \   00002B   E4           CLR     A
   \   00002C   3F           ADDC    A,R7
   \   00002D   F9           MOV     R1,A
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E8           MOV     A,R0
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E9           MOV     A,R1
   \   000037   F0           MOVX    @DPTR,A
   2996            device.parentAddr = ind->srcAddr;
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F8           MOV     R0,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E8           MOV     A,R0
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   E9           MOV     A,R1
   \   00004C   F0           MOVX    @DPTR,A
   2997          
   2998            //if ( ( ind->status == APSME_UD_SECURED_JOIN   ) ||
   2999            //     ( ind->status == APSME_UD_UNSECURED_JOIN )   )
   3000            //{
   3001            //  if ( ind->status == APSME_UD_SECURED_JOIN )
   3002            //  {
   3003            //    device.secure = TRUE;
   3004            //  }
   3005            //  else
   3006            //  {
   3007            //    device.secure = FALSE;
   3008            //  }
   3009          
   3010              // try to join this device
   3011              ZDSecMgrDeviceJoin( &device );
   \   00004D                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   00004D   AA..         MOV     R2,?XSP + 0
   \   00004F   AB..         MOV     R3,?XSP + 1
   \   000051   12....       LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   000054   E9           MOV     A,R1
   3012            //}
   3013          }
   \   000055   740A         MOV     A,#0xa
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F01         MOV     R7,#0x1
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3014          
   3015          /******************************************************************************
   3016           * @fn          ZDSecMgrRemoveDeviceInd
   3017           *
   3018           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   3019           *
   3020           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   3021           *
   3022           * @return      none
   3023           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3024          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   3025          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   3026            ZDSecMgrDevice_t device;
   3027          
   3028            // only accept from Trust Center
   3029            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   49           ORL     A,R1
   \   00001B   7038         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   3030            {
   3031              // look up NWK address
   3032              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   00001D                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00001D   AC..         MOV     R4,?XSP + 0
   \   00001F   AD..         MOV     R5,?XSP + 1
   \   000021   EE           MOV     A,R6
   \   000022   2404         ADD     A,#0x4
   \   000024   FA           MOV     R2,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00002B   E9           MOV     A,R1
   \   00002C   6401         XRL     A,#0x1
   \   00002E   7025         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   3033              {
   3034                device.parentAddr = NLME_GetShortAddr();
   \   000030                ; Setup parameters for call to function NLME_GetShortAddr
   \   000030   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   EA           MOV     A,R2
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   EB           MOV     A,R3
   \   00003C   F0           MOVX    @DPTR,A
   3035                device.extAddr    = ind->childExtAddr;
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   F8           MOV     R0,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   F9           MOV     R1,A
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
   3036          
   3037                // remove device
   3038                ZDSecMgrDeviceRemove( &device );
   \   00004E                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   00004E   AA..         MOV     R2,?XSP + 0
   \   000050   AB..         MOV     R3,?XSP + 1
   \   000052   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   3039              }
   3040            }
   3041          }
   \                     ??ZDSecMgrRemoveDeviceInd_0:
   \   000055   740A         MOV     A,#0xa
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F01         MOV     R7,#0x1
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3042          
   3043          /******************************************************************************
   3044           * @fn          ZDSecMgrRequestKeyInd
   3045           *
   3046           * @brief       Process the ZDO_RequestKeyInd_t message.
   3047           *
   3048           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   3049           *
   3050           * @return      none
   3051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3052          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   3053          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3054            if ( ind->keyType == KEY_TYPE_NWK )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6401         XRL     A,#0x1
   \   000014   6014         JZ      ??ZDSecMgrRequestKeyInd_0
   3055            {
   3056            }
   3057            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   7007         JNZ     ??ZDSecMgrRequestKeyInd_0
   3058            {
   3059              ZDSecMgrAppKeyReq( ind );
   \   000023                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
   3060            }
   3061            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   3062            {
   3063            }
   3064            //else ignore
   3065          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   00002A   7F01         MOV     R7,#0x1
   \   00002C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3066          
   3067          /******************************************************************************
   3068           * @fn          ZDSecMgrSwitchKeyInd
   3069           *
   3070           * @brief       Process the ZDO_SwitchKeyInd_t message.
   3071           *
   3072           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   3073           *
   3074           * @return      none
   3075           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3076          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   3077          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3078            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000009                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   3079          
   3080            // Save if nv
   3081            ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3082          }
   \   000019   7F01         MOV     R7,#0x1
   \   00001B   02....       LJMP    ?BANKED_LEAVE_XDATA
   3083          
   3084          /******************************************************************************
   3085           * @fn          ZDSecMgrAuthenticateInd
   3086           *
   3087           * @brief       Process the ZDO_AuthenticateInd_t message.
   3088           *
   3089           * @param       ind - [in] ZDO_AuthenticateInd_t indication
   3090           *
   3091           * @return      none
   3092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3093          void ZDSecMgrAuthenticateInd( ZDO_AuthenticateInd_t* ind )
   \                     ZDSecMgrAuthenticateInd:
   3094          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   3095            APSME_AuthenticateReq_t req;
   3096            AddrMgrEntry_t          entry;
   3097          
   3098            // update the address manager
   3099            //---------------------------------------------------------------------------
   3100            // note:
   3101            // required for EA processing, but ultimately EA logic could also use the
   3102            // neighbor table to look up addresses -- also(IF using EA) the neighbor
   3103            // table is supposed to have authentication states for neighbors
   3104            //---------------------------------------------------------------------------
   3105            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000E   7407         MOV     A,#0x7
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7402         MOV     A,#0x2
   \   000015   F0           MOVX    @DPTR,A
   3106            entry.nwkAddr = ind->aps.initNwkAddr;
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   7408         MOV     A,#0x8
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E8           MOV     A,R0
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E9           MOV     A,R1
   \   00002A   F0           MOVX    @DPTR,A
   3107            AddrMgrExtAddrSet( entry.extAddr, ind->aps.initExtAddr );
   \   00002B                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00002B   EE           MOV     A,R6
   \   00002C   2404         ADD     A,#0x4
   \   00002E   FC           MOV     R4,A
   \   00002F   E4           CLR     A
   \   000030   3F           ADDC    A,R7
   \   000031   FD           MOV     R5,A
   \   000032   740A         MOV     A,#0xa
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3108          
   3109            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   00003E                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00003E   7407         MOV     A,#0x7
   \   000040   12....       LCALL   ?XSTACK_DISP101_8
   \   000043   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000046   E9           MOV     A,R1
   \   000047   6401         XRL     A,#0x1
   \   000049   7048         JNZ     ??ZDSecMgrAuthenticateInd_0
   3110            {
   3111              // set request fields
   3112              req.nwkAddr   = ind->aps.initNwkAddr;
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F8           MOV     R0,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   E8           MOV     A,R0
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   E9           MOV     A,R1
   \   000060   F0           MOVX    @DPTR,A
   3113              req.extAddr   = ind->aps.initExtAddr;
   \   000061   EE           MOV     A,R6
   \   000062   2404         ADD     A,#0x4
   \   000064   F8           MOV     R0,A
   \   000065   E4           CLR     A
   \   000066   3F           ADDC    A,R7
   \   000067   F9           MOV     R1,A
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
   3114              req.action    = APSME_EA_ACCEPT;
   \   000072   7406         MOV     A,#0x6
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   7401         MOV     A,#0x1
   \   000079   F0           MOVX    @DPTR,A
   3115              req.challenge = ind->aps.challenge;
   \   00007A   EE           MOV     A,R6
   \   00007B   240C         ADD     A,#0xc
   \   00007D   F8           MOV     R0,A
   \   00007E   E4           CLR     A
   \   00007F   3F           ADDC    A,R7
   \   000080   F9           MOV     R1,A
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   E8           MOV     A,R0
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E9           MOV     A,R1
   \   00008A   F0           MOVX    @DPTR,A
   3116          
   3117              // start EA processing
   3118              APSME_AuthenticateReq( &req );
   \   00008B                ; Setup parameters for call to function APSME_AuthenticateReq
   \   00008B   AA..         MOV     R2,?XSP + 0
   \   00008D   AB..         MOV     R3,?XSP + 1
   \   00008F   12....       LCALL   `??APSME_AuthenticateReq::?relay`; Banked call to: APSME_AuthenticateReq
   \   000092   E9           MOV     A,R1
   3119            }
   3120          }
   \                     ??ZDSecMgrAuthenticateInd_0:
   \   000093   7414         MOV     A,#0x14
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   7F01         MOV     R7,#0x1
   \   00009A   02....       LJMP    ?BANKED_LEAVE_XDATA
   3121          
   3122          /******************************************************************************
   3123           * @fn          ZDSecMgrAuthenticateCfm
   3124           *
   3125           * @brief       Process the ZDO_AuthenticateCfm_t message.
   3126           *
   3127           * @param       cfm - [in] ZDO_AuthenticateCfm_t confirmation
   3128           *
   3129           * @return      none
   3130           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3131          void ZDSecMgrAuthenticateCfm( ZDO_AuthenticateCfm_t* cfm )
   \                     ZDSecMgrAuthenticateCfm:
   3132          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3133            if ( cfm->aps.status == ZSuccess )
   \   000009   EE           MOV     A,R6
   \   00000A   240B         ADD     A,#0xb
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   7020         JNZ     ??ZDSecMgrAuthenticateCfm_0
   3134            {
   3135              if ( ( cfm->aps.initiator == TRUE ) && ( devState == DEV_END_DEVICE_UNAUTH ) )
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6401         XRL     A,#0x1
   \   00001E   7015         JNZ     ??ZDSecMgrAuthenticateCfm_0
   \   000020   90....       MOV     DPTR,#devState
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6405         XRL     A,#0x5
   \   000026   700D         JNZ     ??ZDSecMgrAuthenticateCfm_0
   3136              {
   3137                // inform ZDO that device has been authenticated
   3138                osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   000028                ; Setup parameters for call to function osal_set_event
   \   000028   7A80         MOV     R2,#-0x80
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000034   E9           MOV     A,R1
   3139              }
   3140            }
   3141          }
   \                     ??ZDSecMgrAuthenticateCfm_0:
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
   3142          
   3143          #if ( ZG_BUILD_COORDINATOR_TYPE )
   3144          /******************************************************************************
   3145           * @fn          ZDSecMgrUpdateNwkKey
   3146           *
   3147           * @brief       Load a new NWK key and trigger a network wide update.
   3148           *
   3149           * @param       key       - [in] new NWK key
   3150           * @param       keySeqNum - [in] new NWK key sequence number
   3151           *
   3152           * @return      ZStatus_t
   3153           */
   3154          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   3155          {
   3156            ZStatus_t               status;
   3157            APSME_TransportKeyReq_t req;
   3158          
   3159            // initialize common elements of local variables
   3160            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   3161            {
   3162              req.keyType   = KEY_TYPE_NWK_HIGH;
   3163            }
   3164            else
   3165            {
   3166              req.keyType   = KEY_TYPE_NWK;
   3167            }
   3168          
   3169            req.dstAddr   = dstAddr;
   3170            req.keySeqNum = keySeqNum;
   3171            req.key       = key;
   3172            req.extAddr   = NULL;
   3173            req.nwkSecure = TRUE;
   3174            req.apsSecure = TRUE;
   3175            req.tunnel    = NULL;
   3176          
   3177            if (( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
   3178                ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ))
   3179            {
   3180              ZDSecMgrEntry_t*        entry;
   3181              uint16                  index;
   3182              AddrMgrEntry_t          addrEntry;
   3183          
   3184              addrEntry.user = ADDRMGR_USER_SECURITY;
   3185          
   3186              status = ZFailure;
   3187          
   3188              // verify data is available
   3189              if ( ZDSecMgrEntries != NULL )
   3190              {
   3191                // find available entry
   3192                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   3193                {
   3194                  if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
   3195                  {
   3196                    // return successful result
   3197                    entry = &ZDSecMgrEntries[index];
   3198          
   3199                    // get NWK address
   3200                    addrEntry.index = entry->ami;
   3201                    if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
   3202                    {
   3203                      req.dstAddr = addrEntry.nwkAddr;
   3204                      req.extAddr = addrEntry.extAddr;
   3205                      status = APSME_TransportKeyReq( &req );
   3206                    }
   3207                  }
   3208                }
   3209              }
   3210            }
   3211            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   3212            {
   3213              status = APSME_TransportKeyReq( &req );
   3214            }
   3215          
   3216            SSP_UpdateNwkKey( key, keySeqNum );
   3217          
   3218            // Save if nv
   3219            ZDApp_NVUpdate();
   3220          
   3221            return status;
   3222          }
   3223          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   3224          
   3225          #if ( ZG_BUILD_COORDINATOR_TYPE )
   3226          /******************************************************************************
   3227           * @fn          ZDSecMgrSwitchNwkKey
   3228           *
   3229           * @brief       Causes the NWK key to switch via a network wide command.
   3230           *
   3231           * @param       keySeqNum - [in] new NWK key sequence number
   3232           *
   3233           * @return      ZStatus_t
   3234           */
   3235          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   3236          {
   3237            ZStatus_t            status;
   3238            APSME_SwitchKeyReq_t req;
   3239          
   3240            // initialize common elements of local variables
   3241            req.dstAddr = dstAddr;
   3242            req.keySeqNum = keySeqNum;
   3243          
   3244            if (( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH ) ||
   3245                ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ))
   3246            {
   3247              ZDSecMgrEntry_t*     entry;
   3248              uint16               index;
   3249              AddrMgrEntry_t       addrEntry;
   3250          
   3251              addrEntry.user = ADDRMGR_USER_SECURITY;
   3252          
   3253              status = ZFailure;
   3254          
   3255              // verify data is available
   3256              if ( ZDSecMgrEntries != NULL )
   3257              {
   3258                // find available entry
   3259                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   3260                {
   3261                  if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
   3262                  {
   3263                    // return successful result
   3264                    entry = &ZDSecMgrEntries[index];
   3265          
   3266                    // get NWK address
   3267                    addrEntry.index = entry->ami;
   3268          
   3269                    if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
   3270                    {
   3271                      req.dstAddr = addrEntry.nwkAddr;
   3272                      status = APSME_SwitchKeyReq( &req );
   3273                    }
   3274                  }
   3275                }
   3276              }
   3277            }
   3278            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   3279            {
   3280              status = APSME_SwitchKeyReq( &req );
   3281            }
   3282          
   3283            SSP_SwitchNwkKey( keySeqNum );
   3284          
   3285            // Save if nv
   3286            ZDApp_NVUpdate();
   3287          
   3288            return status;
   3289          }
   3290          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   3291          
   3292          /******************************************************************************
   3293           * @fn          ZDSecMgrRequestAppKey
   3294           *
   3295           * @brief       Request an application key with partner.
   3296           *
   3297           * @param       partExtAddr - [in] partner extended address
   3298           *
   3299           * @return      ZStatus_t
   3300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3301          ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
   \                     ZDSecMgrRequestAppKey:
   3302          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   3303            ZStatus_t status;
   3304            APSME_RequestKeyReq_t req;
   3305          
   3306            req.dstAddr = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   3307            req.keyType = KEY_TYPE_APP_MASTER;
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   7402         MOV     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
   3308          
   3309            req.partExtAddr = partExtAddr;
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   EE           MOV     A,R6
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   EF           MOV     A,R7
   \   000028   F0           MOVX    @DPTR,A
   3310            status = APSME_RequestKeyReq( &req );
   \   000029                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000029   AA..         MOV     R2,?XSP + 0
   \   00002B   AB..         MOV     R3,?XSP + 1
   \   00002D   12....       LCALL   `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   000030   E9           MOV     A,R1
   \   000031   F5..         MOV     ?V0,A
   3311          
   3312            return status;
   \   000033   A9..         MOV     R1,?V0
   \   000035   7404         MOV     A,#0x4
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   7F01         MOV     R7,#0x1
   \   00003C   02....       LJMP    ?BANKED_LEAVE_XDATA
   3313          }
   3314          
   3315          #if ( ZG_BUILD_JOINING_TYPE )
   3316          /******************************************************************************
   3317           * @fn          ZDSecMgrSetupPartner
   3318           *
   3319           * @brief       Setup for application key partner.
   3320           *
   3321           * @param       partNwkAddr - [in] partner network address
   3322           *
   3323           * @return      ZStatus_t
   3324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3325          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   \                     ZDSecMgrSetupPartner:
   3326          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   3327            AddrMgrEntry_t entry;
   3328            ZStatus_t      status;
   3329          
   3330            status = ZFailure;
   \   000012   7E01         MOV     R6,#0x1
   3331          
   3332            // update the address manager
   3333            entry.user    = ADDRMGR_USER_SECURITY;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   7402         MOV     A,#0x2
   \   00001C   F0           MOVX    @DPTR,A
   3334            entry.nwkAddr = partNwkAddr;
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E5..         MOV     A,?V0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E5..         MOV     A,?V1
   \   000028   F0           MOVX    @DPTR,A
   3335            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   \   000029                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000029   AC..         MOV     R4,?V2
   \   00002B   AD..         MOV     R5,?V3
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \   000036   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3336          
   3337            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000039                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000039   AA..         MOV     R2,?XSP + 0
   \   00003B   AB..         MOV     R3,?XSP + 1
   \   00003D   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000040   E9           MOV     A,R1
   \   000041   6401         XRL     A,#0x1
   \   000043   7038         JNZ     ??ZDSecMgrSetupPartner_0
   3338            {
   3339              status = ZSuccess;
   \   000045   7E00         MOV     R6,#0x0
   3340          
   3341              // check for address discovery
   3342              if ( partNwkAddr == INVALID_NODE_ADDR )
   \   000047   74FE         MOV     A,#-0x2
   \   000049   65..         XRL     A,?V0
   \   00004B   7004         JNZ     ??ZDSecMgrSetupPartner_1
   \   00004D   74FF         MOV     A,#-0x1
   \   00004F   65..         XRL     A,?V1
   \                     ??ZDSecMgrSetupPartner_1:
   \   000051   7011         JNZ     ??ZDSecMgrSetupPartner_2
   3343              {
   3344                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000053                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7C00         MOV     R4,#0x0
   \   000057   7900         MOV     R1,#0x0
   \   000059   AA..         MOV     R2,?V2
   \   00005B   AB..         MOV     R3,?V3
   \   00005D   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000060   E9           MOV     A,R1
   \   000061   FE           MOV     R6,A
   \   000062   8019         SJMP    ??ZDSecMgrSetupPartner_0
   3345              }
   3346              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   \                     ??ZDSecMgrSetupPartner_2:
   \   000064                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000064   AA..         MOV     R2,?V2
   \   000066   AB..         MOV     R3,?V3
   \   000068   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00006B   E9           MOV     A,R1
   \   00006C   700F         JNZ     ??ZDSecMgrSetupPartner_0
   3347              {
   3348                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00006E                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   7C00         MOV     R4,#0x0
   \   000072   7900         MOV     R1,#0x0
   \   000074   AA..         MOV     R2,?V0
   \   000076   AB..         MOV     R3,?V1
   \   000078   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   00007B   E9           MOV     A,R1
   \   00007C   FE           MOV     R6,A
   3349              }
   3350            }
   3351          
   3352            return status;
   \                     ??ZDSecMgrSetupPartner_0:
   \   00007D   EE           MOV     A,R6
   \   00007E   F9           MOV     R1,A
   \   00007F   740D         MOV     A,#0xd
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   7F04         MOV     R7,#0x4
   \   000086   02....       LJMP    ?BANKED_LEAVE_XDATA
   3353          }
   3354          #endif // ( ZG_BUILD_JOINING_TYPE )
   3355          
   3356          #if ( ZG_BUILD_COORDINATOR_TYPE )
   3357          /******************************************************************************
   3358           * @fn          ZDSecMgrAppKeyTypeSet
   3359           *
   3360           * @brief       Set application key type.
   3361           *
   3362           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   3363           *                                                   KEY_TYPE_APP_LINK@3
   3364           *
   3365           * @return      ZStatus_t
   3366           */
   3367          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   3368          {
   3369            if ( keyType == KEY_TYPE_APP_LINK )
   3370            {
   3371              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   3372            }
   3373            else
   3374            {
   3375              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   3376            }
   3377          
   3378            return ZSuccess;
   3379          }
   3380          #endif
   3381          
   3382          /******************************************************************************
   3383           * ZigBee Device Security Manager - Stub Implementations
   3384           */
   3385          /******************************************************************************
   3386           * @fn          ZDSecMgrMasterKeyGet (stubs APSME_MasterKeyGet)
   3387           *
   3388           * @brief       Get MASTER key for specified EXT address.
   3389           *
   3390           * @param       extAddr - [in] EXT address
   3391           * @param       pKeyNvId - [out] MASTER key NV ID
   3392           *
   3393           * @return      ZStatus_t
   3394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3395          ZStatus_t ZDSecMgrMasterKeyGet( uint8* extAddr, uint16* pKeyNvId )
   \                     APSME_MasterKeyGet:
   3396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   3397            ZStatus_t status;
   3398            uint16 ami;
   3399          
   3400            // lookup entry for specified EXT address
   3401            status = ZDSecMgrExtAddrLookup( extAddr, &ami );
   \   000012                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000012   AC..         MOV     R4,?XSP + 0
   \   000014   AD..         MOV     R5,?XSP + 1
   \   000016   AA..         MOV     R2,?V0
   \   000018   AB..         MOV     R3,?V1
   \   00001A   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00001D   E9           MOV     A,R1
   \   00001E   F5..         MOV     ?V2,A
   3402          
   3403            if ( status == ZSuccess )
   \   000020   E5..         MOV     A,?V2
   \   000022   7015         JNZ     ??APSME_MasterKeyGet_0
   3404            {
   3405              ZDSecMgrMasterKeyLookup( ami, pKeyNvId );
   \   000024                ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
   \   000024   EE           MOV     A,R6
   \   000025   FC           MOV     R4,A
   \   000026   EF           MOV     A,R7
   \   000027   FD           MOV     R5,A
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   `??ZDSecMgrMasterKeyLookup::?relay`; Banked call to: ZDSecMgrMasterKeyLookup
   \   000036   E9           MOV     A,R1
   \   000037   800B         SJMP    ??APSME_MasterKeyGet_1
   3406            }
   3407            else
   3408            {
   3409              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_MasterKeyGet_0:
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   7400         MOV     A,#0x0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   7400         MOV     A,#0x0
   \   000043   F0           MOVX    @DPTR,A
   3410            }
   3411          
   3412            return status;
   \                     ??APSME_MasterKeyGet_1:
   \   000044   A9..         MOV     R1,?V2
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   7F03         MOV     R7,#0x3
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA
   3413          }
   3414          
   3415          /******************************************************************************
   3416           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   3417           *
   3418           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   3419           *
   3420           * @param       extAddr - [in] EXT address
   3421           * @param       data    - [in] APSME_LinkKeyData_t
   3422           *
   3423           * @return      ZStatus_t
   3424           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3425          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   3426          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7406         MOV     A,#0x6
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7404         MOV     A,#0x4
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3427            ZStatus_t status;
   3428            ZDSecMgrEntry_t* entry;
   3429            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   00001E   75..00       MOV     ?V0,#0x0
   \   000021   75..00       MOV     ?V1,#0x0
   3430            uint16 Index;
   3431          
   3432            // lookup entry index for specified EXT address
   3433            status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
   \   000024                ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?XSTACK_DISP100_8
   \   000029   88..         MOV     ?V4,R0
   \   00002B   89..         MOV     ?V5,R1
   \   00002D   78..         MOV     R0,#?V4
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP102_8
   \   000037   7408         MOV     A,#0x8
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FA           MOV     R2,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   \   000049   E9           MOV     A,R1
   \   00004A   F5..         MOV     ?V2,A
   3434          
   3435            if ( status == ZSuccess )
   \   00004C   E5..         MOV     A,?V2
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
   3436            {
   3437              // point to NV item
   3438              entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
   \   000053   7402         MOV     A,#0x2
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E0           MOVX    A,@DPTR
   \   000059   2401         ADD     A,#0x1
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   3402         ADDC    A,#0x2
   \   000060   F9           MOV     R1,A
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F583         MOV     DPH,A
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E8           MOV     A,R0
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   E9           MOV     A,R1
   \   000075   F0           MOVX    @DPTR,A
   3439          
   3440              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000076                ; Setup parameters for call to function osal_mem_alloc
   \   000076   7A18         MOV     R2,#0x18
   \   000078   7B00         MOV     R3,#0x0
   \   00007A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00007D   8A..         MOV     ?V4,R2
   \   00007F   8B..         MOV     ?V5,R3
   \   000081   85....       MOV     ?V0,?V4
   \   000084   85....       MOV     ?V1,?V5
   3441          
   3442              if (pApsLinkKey != NULL)
   \   000087   E5..         MOV     A,?V0
   \   000089   45..         ORL     A,?V1
   \   00008B   7003         JNZ     $+5
   \   00008D   02....       LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
   3443              {
   3444                // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   3445                osal_nv_read( entry->keyNvId, 0,
   3446                             sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000090                ; Setup parameters for call to function osal_nv_read
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   75..18       MOV     ?V4,#0x18
   \   000098   75..00       MOV     ?V5,#0x0
   \   00009B   78..         MOV     R0,#?V4
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   7C00         MOV     R4,#0x0
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   7404         MOV     A,#0x4
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FA           MOV     R2,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FB           MOV     R3,A
   \   0000B8   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000BB   7404         MOV     A,#0x4
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C0   E9           MOV     A,R1
   3447          
   3448                // set new values of the key
   3449                osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
   \   0000C1                ; Setup parameters for call to function osal_memcpy
   \   0000C1   7404         MOV     A,#0x4
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V4,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F5..         MOV     ?V5,A
   \   0000CD   75..00       MOV     ?V6,#0x0
   \   0000D0   78..         MOV     R0,#?V4
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D5   7C10         MOV     R4,#0x10
   \   0000D7   7D00         MOV     R5,#0x0
   \   0000D9   AA..         MOV     R2,?V0
   \   0000DB   AB..         MOV     R3,?V1
   \   0000DD   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E0   7403         MOV     A,#0x3
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
   3450                pApsLinkKey->rxFrmCntr = 0;
   \   0000E5   7C00         MOV     R4,#0x0
   \   0000E7   7D00         MOV     R5,#0x0
   \   0000E9   7E00         MOV     R6,#0x0
   \   0000EB   7F00         MOV     R7,#0x0
   \   0000ED   E5..         MOV     A,?V0
   \   0000EF   2414         ADD     A,#0x14
   \   0000F1   F582         MOV     DPL,A
   \   0000F3   E4           CLR     A
   \   0000F4   35..         ADDC    A,?V1
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   EC           MOV     A,R4
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   ED           MOV     A,R5
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   EE           MOV     A,R6
   \   0000FF   F0           MOVX    @DPTR,A
   \   000100   A3           INC     DPTR
   \   000101   EF           MOV     A,R7
   \   000102   F0           MOVX    @DPTR,A
   3451                pApsLinkKey->txFrmCntr = 0;
   \   000103   7C00         MOV     R4,#0x0
   \   000105   7D00         MOV     R5,#0x0
   \   000107   7E00         MOV     R6,#0x0
   \   000109   7F00         MOV     R7,#0x0
   \   00010B   E5..         MOV     A,?V0
   \   00010D   2410         ADD     A,#0x10
   \   00010F   F582         MOV     DPL,A
   \   000111   E4           CLR     A
   \   000112   35..         ADDC    A,?V1
   \   000114   F583         MOV     DPH,A
   \   000116   EC           MOV     A,R4
   \   000117   F0           MOVX    @DPTR,A
   \   000118   A3           INC     DPTR
   \   000119   ED           MOV     A,R5
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B   A3           INC     DPTR
   \   00011C   EE           MOV     A,R6
   \   00011D   F0           MOVX    @DPTR,A
   \   00011E   A3           INC     DPTR
   \   00011F   EF           MOV     A,R7
   \   000120   F0           MOVX    @DPTR,A
   3452          
   3453                osal_nv_write( entry->keyNvId, 0,
   3454                              sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000121                ; Setup parameters for call to function osal_nv_write
   \   000121   78..         MOV     R0,#?V0
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   75..18       MOV     ?V4,#0x18
   \   000129   75..00       MOV     ?V5,#0x0
   \   00012C   78..         MOV     R0,#?V4
   \   00012E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000131   7C00         MOV     R4,#0x0
   \   000133   7D00         MOV     R5,#0x0
   \   000135   7404         MOV     A,#0x4
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F8           MOV     R0,A
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F583         MOV     DPH,A
   \   000140   8882         MOV     DPL,R0
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   FA           MOV     R2,A
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   FB           MOV     R3,A
   \   000149   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00014C   7404         MOV     A,#0x4
   \   00014E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000151   E9           MOV     A,R1
   3455          
   3456                // clear copy of key in RAM
   3457                osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   000152                ; Setup parameters for call to function osal_memset
   \   000152   7C18         MOV     R4,#0x18
   \   000154   7D00         MOV     R5,#0x0
   \   000156   7900         MOV     R1,#0x0
   \   000158   AA..         MOV     R2,?V0
   \   00015A   AB..         MOV     R3,?V1
   \   00015C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3458          
   3459                osal_mem_free(pApsLinkKey);
   \   00015F                ; Setup parameters for call to function osal_mem_free
   \   00015F   AA..         MOV     R2,?V0
   \   000161   AB..         MOV     R3,?V1
   \   000163   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3460          
   3461                // set initial values for counters in RAM
   3462                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
   \   000166   7C00         MOV     R4,#0x0
   \   000168   7D00         MOV     R5,#0x0
   \   00016A   7E00         MOV     R6,#0x0
   \   00016C   7F00         MOV     R7,#0x0
   \   00016E   85..82       MOV     DPL,?XSP + 0
   \   000171   85..83       MOV     DPH,?XSP + 1
   \   000174   E0           MOVX    A,@DPTR
   \   000175   F8           MOV     R0,A
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F583         MOV     DPH,A
   \   00017A   8882         MOV     DPL,R0
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   F8           MOV     R0,A
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   F9           MOV     R1,A
   \   000183   E8           MOV     A,R0
   \   000184   75F009       MOV     B,#0x9
   \   000187   A4           MUL     AB
   \   000188   C8           XCH     A,R0
   \   000189   AAF0         MOV     R2,B
   \   00018B   75F000       MOV     B,#0x0
   \   00018E   A4           MUL     AB
   \   00018F   2A           ADD     A,R2
   \   000190   FA           MOV     R2,A
   \   000191   75F009       MOV     B,#0x9
   \   000194   E9           MOV     A,R1
   \   000195   A4           MUL     AB
   \   000196   2A           ADD     A,R2
   \   000197   F9           MOV     R1,A
   \   000198   74..         MOV     A,#(ApsLinkKeyFrmCntr + 247) & 0xff
   \   00019A   28           ADD     A,R0
   \   00019B   F582         MOV     DPL,A
   \   00019D   74..         MOV     A,#((ApsLinkKeyFrmCntr - 4617) >> 8) & 0xff
   \   00019F   39           ADDC    A,R1
   \   0001A0   F583         MOV     DPH,A
   \   0001A2   EC           MOV     A,R4
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   ED           MOV     A,R5
   \   0001A6   F0           MOVX    @DPTR,A
   \   0001A7   A3           INC     DPTR
   \   0001A8   EE           MOV     A,R6
   \   0001A9   F0           MOVX    @DPTR,A
   \   0001AA   A3           INC     DPTR
   \   0001AB   EF           MOV     A,R7
   \   0001AC   F0           MOVX    @DPTR,A
   3463                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
   \   0001AD   7C00         MOV     R4,#0x0
   \   0001AF   7D00         MOV     R5,#0x0
   \   0001B1   7E00         MOV     R6,#0x0
   \   0001B3   7F00         MOV     R7,#0x0
   \   0001B5   85..82       MOV     DPL,?XSP + 0
   \   0001B8   85..83       MOV     DPH,?XSP + 1
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   F8           MOV     R0,A
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   F583         MOV     DPH,A
   \   0001C1   8882         MOV     DPL,R0
   \   0001C3   A3           INC     DPTR
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   F8           MOV     R0,A
   \   0001C7   A3           INC     DPTR
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   F9           MOV     R1,A
   \   0001CA   E8           MOV     A,R0
   \   0001CB   75F009       MOV     B,#0x9
   \   0001CE   A4           MUL     AB
   \   0001CF   C8           XCH     A,R0
   \   0001D0   AAF0         MOV     R2,B
   \   0001D2   75F000       MOV     B,#0x0
   \   0001D5   A4           MUL     AB
   \   0001D6   2A           ADD     A,R2
   \   0001D7   FA           MOV     R2,A
   \   0001D8   75F009       MOV     B,#0x9
   \   0001DB   E9           MOV     A,R1
   \   0001DC   A4           MUL     AB
   \   0001DD   2A           ADD     A,R2
   \   0001DE   F9           MOV     R1,A
   \   0001DF   74..         MOV     A,#(ApsLinkKeyFrmCntr + 251) & 0xff
   \   0001E1   28           ADD     A,R0
   \   0001E2   F582         MOV     DPL,A
   \   0001E4   74..         MOV     A,#((ApsLinkKeyFrmCntr - 4613) >> 8) & 0xff
   \   0001E6   39           ADDC    A,R1
   \   0001E7   F583         MOV     DPH,A
   \   0001E9   EC           MOV     A,R4
   \   0001EA   F0           MOVX    @DPTR,A
   \   0001EB   A3           INC     DPTR
   \   0001EC   ED           MOV     A,R5
   \   0001ED   F0           MOVX    @DPTR,A
   \   0001EE   A3           INC     DPTR
   \   0001EF   EE           MOV     A,R6
   \   0001F0   F0           MOVX    @DPTR,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   EF           MOV     A,R7
   \   0001F3   F0           MOVX    @DPTR,A
   3464              }
   3465            }
   3466          
   3467            return status;
   \                     ??APSME_LinkKeySet_0:
   \   0001F4   A9..         MOV     R1,?V2
   \   0001F6   7408         MOV     A,#0x8
   \   0001F8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FB   7F07         MOV     R7,#0x7
   \   0001FD   02....       LJMP    ?BANKED_LEAVE_XDATA
   3468          }
   3469          
   3470          /******************************************************************************
   3471           * @fn          ZDSecMgrAuthenticationSet
   3472           *
   3473           * @brief       Mark the specific device as authenticated or not
   3474           *
   3475           * @param       extAddr - [in] EXT address
   3476           * @param       option  - [in] authenticated or not
   3477           *
   3478           * @return      ZStatus_t
   3479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3480          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   3481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
   3482            ZStatus_t        status;
   3483            ZDSecMgrEntry_t* entry;
   3484          
   3485          
   3486            // lookup entry index for specified EXT address
   3487            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   000010                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000010   AC..         MOV     R4,?XSP + 0
   \   000012   AD..         MOV     R5,?XSP + 1
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00001B   E9           MOV     A,R1
   \   00001C   F5..         MOV     ?V0,A
   3488          
   3489            if ( status == ZSuccess )
   \   00001E   E5..         MOV     A,?V0
   \   000020   7019         JNZ     ??ZDSecMgrAuthenticationSet_0
   3490            {
   3491              entry->authenticateOption = option;
   \   000022   E5..         MOV     A,?V1
   \   000024   C0E0         PUSH    A
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   D0E0         POP     A
   \   00003A   F0           MOVX    @DPTR,A
   3492            }
   3493          
   3494            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   00003B   A9..         MOV     R1,?V0
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   7F02         MOV     R7,#0x2
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   3495          }
   3496          
   3497          /******************************************************************************
   3498           * @fn          ZDSecMgrAuthenticationCheck
   3499           *
   3500           * @brief       Check if the specific device has been authenticated or not
   3501           *              For non-trust center device, always return TRUE
   3502           *
   3503           * @param       shortAddr - [in] short address
   3504           *
   3505           * @return      TRUE @ authenticated with CBKE
   3506           *              FALSE @ not authenticated
   3507           */
   3508          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3509          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   3510          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3511          #if defined (TC_LINKKEY_JOIN)
   3512          
   3513            ZDSecMgrEntry_t* entry;
   3514            uint8 extAddr[Z_EXTADDR_LEN];
   3515          
   3516            // If the local device is not the trust center, always return TRUE
   3517            if ( NLME_GetShortAddr() != zgTrustCenterAddr )
   3518            {
   3519              return TRUE;
   3520            }
   3521            // Otherwise, check the authentication option
   3522            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   3523            {
   3524              // lookup entry index for specified EXT address
   3525              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   3526              {
   3527                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   3528                {
   3529                  return TRUE;
   3530                }
   3531                else
   3532                {
   3533                  return FALSE;
   3534                }
   3535              }
   3536            }
   3537            return FALSE;
   3538          
   3539          #else
   3540            (void)shortAddr;  // Intentionally unreferenced parameter
   3541          
   3542            // For non AMI/SE Profile, perform no check and always return TRUE.
   3543            return TRUE;
   \   000000   7901         MOV     R1,#0x1
   \   000002   02....       LJMP    ?BRET
   3544          
   3545          #endif // TC_LINKKEY_JOIN
   3546          }
   3547          
   3548          /******************************************************************************
   3549           * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
   3550           *
   3551           * @brief       Get Key NV ID for specified NWK address.
   3552           *
   3553           * @param       extAddr - [in] EXT address
   3554           * @param       keyNvId - [out] NV ID
   3555           *
   3556           * @return      ZStatus_t
   3557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3558          ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
   \                     APSME_LinkKeyNVIdGet:
   3559          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   3560            ZStatus_t status;
   3561            ZDSecMgrEntry_t* entry;
   3562          
   3563            // lookup entry index for specified NWK address
   3564            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   000012                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000012   AC..         MOV     R4,?XSP + 0
   \   000014   AD..         MOV     R5,?XSP + 1
   \   000016   AA..         MOV     R2,?V0
   \   000018   AB..         MOV     R3,?V1
   \   00001A   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00001D   E9           MOV     A,R1
   \   00001E   F5..         MOV     ?V2,A
   3565          
   3566            if ( status == ZSuccess )
   \   000020   E5..         MOV     A,?V2
   \   000022   7020         JNZ     ??APSME_LinkKeyNVIdGet_0
   3567            {
   3568              // return the index to the NV table
   3569              *pKeyNvId = entry->keyNvId;
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8882         MOV     DPL,R0
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E8           MOV     A,R0
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   E9           MOV     A,R1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   800B         SJMP    ??APSME_LinkKeyNVIdGet_1
   3570            }
   3571            else
   3572            {
   3573              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_LinkKeyNVIdGet_0:
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   7400         MOV     A,#0x0
   \   00004E   F0           MOVX    @DPTR,A
   3574            }
   3575          
   3576            return status;
   \                     ??APSME_LinkKeyNVIdGet_1:
   \   00004F   A9..         MOV     R1,?V2
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   7F03         MOV     R7,#0x3
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   3577          }
   3578          
   3579          /******************************************************************************
   3580           * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
   3581           *
   3582           * @brief       Verifies if Link Key in NV has been set.
   3583           *
   3584           * @param       extAddr - [in] EXT address
   3585           *
   3586           * @return      TRUE - Link Key has been established
   3587           *              FALSE - Link Key in NV has default value.
   3588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3589          uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
   \                     APSME_IsLinkKeyValid:
   3590          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   3591            APSME_LinkKeyData_t *pKeyData;
   3592            uint16 apsLinkKeyNvId;
   3593            uint8 nullKey[SEC_KEY_LEN];
   3594            uint8 status = FALSE;
   \   00000E   7E00         MOV     R6,#0x0
   3595          
   3596            // initialize default vealue to compare to
   3597            osal_memset(nullKey, 0x00, SEC_KEY_LEN);
   \   000010                ; Setup parameters for call to function osal_memset
   \   000010   7C10         MOV     R4,#0x10
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7900         MOV     R1,#0x0
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?XSTACK_DISP101_8
   \   00001B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3598          
   3599            // check for APS link NV ID
   3600            APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
   \   00001E                ; Setup parameters for call to function APSME_LinkKeyNVIdGet
   \   00001E   AC..         MOV     R4,?XSP + 0
   \   000020   AD..         MOV     R5,?XSP + 1
   \   000022   AA..         MOV     R2,?V6
   \   000024   AB..         MOV     R3,?V7
   \   000026   12....       LCALL   `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
   \   000029   E9           MOV     A,R1
   3601          
   3602            if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   49           ORL     A,R1
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??APSME_IsLinkKeyValid_0 & 0xFFFF
   3603            {
   3604              pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   7A18         MOV     R2,#0x18
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000043   8A..         MOV     ?V0,R2
   \   000045   8B..         MOV     ?V1,R3
   \   000047   85....       MOV     ?V4,?V0
   \   00004A   85....       MOV     ?V5,?V1
   3605          
   3606              if (pKeyData != NULL)
   \   00004D   E5..         MOV     A,?V4
   \   00004F   45..         ORL     A,?V5
   \   000051   606B         JZ      ??APSME_IsLinkKeyValid_0
   3607              {
   3608                // retrieve key from NV
   3609                if ( osal_nv_read( apsLinkKeyNvId, 0,
   3610                                  sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
   \   000053                ; Setup parameters for call to function osal_nv_read
   \   000053   78..         MOV     R0,#?V4
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   75..18       MOV     ?V0,#0x18
   \   00005B   75..00       MOV     ?V1,#0x0
   \   00005E   78..         MOV     R0,#?V0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   7C00         MOV     R4,#0x0
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7404         MOV     A,#0x4
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   FA           MOV     R2,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   702E         JNZ     ??APSME_IsLinkKeyValid_1
   3611                {
   3612                  // if stored key is different than default value, then a key has been established
   3613                  if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
   \   00007C                ; Setup parameters for call to function osal_memcmp
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?XSTACK_DISP100_8
   \   000081   88..         MOV     ?V0,R0
   \   000083   89..         MOV     ?V1,R1
   \   000085   75..00       MOV     ?V2,#0x0
   \   000088   78..         MOV     R0,#?V0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008D   7C10         MOV     R4,#0x10
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   85..82       MOV     DPL,?V4
   \   000094   85..83       MOV     DPH,?V5
   \   000097   A982         MOV     R1,DPL
   \   000099   AA83         MOV     R2,DPH
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV     A,R1
   \   0000A6   7002         JNZ     ??APSME_IsLinkKeyValid_1
   3614                  {
   3615                    status = TRUE;
   \   0000A8   7E01         MOV     R6,#0x1
   3616                  }
   3617                }
   3618          
   3619                // clear copy of key in RAM
   3620                osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
   \                     ??APSME_IsLinkKeyValid_1:
   \   0000AA                ; Setup parameters for call to function osal_memset
   \   0000AA   7C18         MOV     R4,#0x18
   \   0000AC   7D00         MOV     R5,#0x0
   \   0000AE   7900         MOV     R1,#0x0
   \   0000B0   AA..         MOV     R2,?V4
   \   0000B2   AB..         MOV     R3,?V5
   \   0000B4   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3621          
   3622                osal_mem_free(pKeyData);
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   AA..         MOV     R2,?V4
   \   0000B9   AB..         MOV     R3,?V5
   \   0000BB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3623              }
   3624            }
   3625          
   3626            return status;
   \                     ??APSME_IsLinkKeyValid_0:
   \   0000BE   EE           MOV     A,R6
   \   0000BF   F9           MOV     R1,A
   \   0000C0   7412         MOV     A,#0x12
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   7F08         MOV     R7,#0x8
   \   0000C7   02....       LJMP    ?BANKED_LEAVE_XDATA
   3627          }
   3628          
   3629          /******************************************************************************
   3630           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   3631           *
   3632           * @brief       Verify and process key transportation to child.
   3633           *
   3634           * @param       ind - [in] APSME_TransportKeyInd_t
   3635           *
   3636           * @return      uint8 - success(TRUE:FALSE)
   3637           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3638          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   3639          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3640            // verify from Trust Center
   3641            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   703A         JNZ     ??APSME_KeyFwdToChild_0
   3642            {
   3643              // check for initial NWK key
   3644              if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
   3645                   ( ind->keyType == 6                 ) ||
   3646                   ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   6016         JZ      ??APSME_KeyFwdToChild_1
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6406         XRL     A,#0x6
   \   00002A   600B         JZ      ??APSME_KeyFwdToChild_1
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6405         XRL     A,#0x5
   \   000035   7015         JNZ     ??APSME_KeyFwdToChild_2
   3647              {
   3648                // set association status to authenticated
   3649                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_1:
   \   000037                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000037                ; Setup parameters for call to function AssocGetWithExt
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FA           MOV     R2,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000049   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   3650              }
   3651          
   3652              return TRUE;
   \                     ??APSME_KeyFwdToChild_2:
   \   00004C   7901         MOV     R1,#0x1
   \   00004E   8002         SJMP    ??APSME_KeyFwdToChild_3
   3653            }
   3654          
   3655            return FALSE;
   \                     ??APSME_KeyFwdToChild_0:
   \   000050   7900         MOV     R1,#0x0
   \                     ??APSME_KeyFwdToChild_3:
   \   000052   7F01         MOV     R7,#0x1
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
   3656          }
   3657          
   3658          /******************************************************************************
   3659           * @fn          ZDSecMgrAddLinkKey
   3660           *
   3661           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   3662           *              as authenticated in the authenticateOption. Note that this function
   3663           *              is hardwared to CBKE right now.
   3664           *
   3665           * @param       shortAddr - short address of the partner device
   3666           * @param       extAddr - extended address of the partner device
   3667           * @param       key - link key
   3668           *
   3669           * @return      ZStatus_t
   3670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3671          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   3672          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   7412         MOV     A,#0x12
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V3,A
   3673            uint16           ami;
   3674            ZDSecMgrEntry_t* entry;
   3675          
   3676            /* Store the device address in the addr manager */
   3677            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00001E                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP100_8
   \   000023   88..         MOV     ?V4,R0
   \   000025   89..         MOV     ?V5,R1
   \   000027   78..         MOV     R0,#?V4
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   EE           MOV     A,R6
   \   00002D   FC           MOV     R4,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FD           MOV     R5,A
   \   000030   AA..         MOV     R2,?V0
   \   000032   AB..         MOV     R3,?V1
   \   000034   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   E9           MOV     A,R1
   \   00003D   6004         JZ      ??ZDSecMgrAddLinkKey_0
   3678            {
   3679              /* Adding to Addr Manager fails */
   3680              return ZFailure;
   \   00003F   7901         MOV     R1,#0x1
   \   000041   805C         SJMP    ??ZDSecMgrAddLinkKey_1
   3681            }
   3682          
   3683            /* Lookup entry using specified address index */
   3684            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   000043                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000043   AC..         MOV     R4,?XSP + 0
   \   000045   AD..         MOV     R5,?XSP + 1
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FA           MOV     R2,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000054   E9           MOV     A,R1
   3685          
   3686            // If no existing entry, create one
   3687            if ( entry == NULL )
   \   000055   85..82       MOV     DPL,?XSP + 0
   \   000058   85..83       MOV     DPH,?XSP + 1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   49           ORL     A,R1
   \   000062   702D         JNZ     ??ZDSecMgrAddLinkKey_2
   3688            {
   3689              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000064                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000064   AA..         MOV     R2,?XSP + 0
   \   000066   AB..         MOV     R3,?XSP + 1
   \   000068   12....       LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   00006B   E9           MOV     A,R1
   \   00006C   701F         JNZ     ??ZDSecMgrAddLinkKey_3
   3690              {
   3691                entry->ami = ami;
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FB           MOV     R3,A
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F583         MOV     DPH,A
   \   000084   8882         MOV     DPL,R0
   \   000086   EA           MOV     A,R2
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   EB           MOV     A,R3
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   8004         SJMP    ??ZDSecMgrAddLinkKey_2
   3692              }
   3693              else
   3694              {
   3695                /* Security Manager full */
   3696                return ZBufferFull;
   \                     ??ZDSecMgrAddLinkKey_3:
   \   00008D   7911         MOV     R1,#0x11
   \   00008F   800E         SJMP    ??ZDSecMgrAddLinkKey_1
   3697              }
   3698            }
   3699            // Write the link key
   3700            APSME_LinkKeySet( extAddr, key );
   \                     ??ZDSecMgrAddLinkKey_2:
   \   000091                ; Setup parameters for call to function APSME_LinkKeySet
   \   000091   AC..         MOV     R4,?V2
   \   000093   AD..         MOV     R5,?V3
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   \   00009C   E9           MOV     A,R1
   3701          
   3702          #if defined (TC_LINKKEY_JOIN)
   3703            // Mark the device as authenticated.
   3704            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   3705          #endif
   3706          
   3707          #if defined NV_RESTORE
   3708            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   3709          #endif
   3710          
   3711            return ZSuccess;
   \   00009D   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4   7F06         MOV     R7,#0x6
   \   0000A6   02....       LJMP    ?BANKED_LEAVE_XDATA
   3712          }
   3713          
   3714          #if defined ( NV_RESTORE )
   3715          /******************************************************************************
   3716           * @fn          ZDSecMgrInitNV
   3717           *
   3718           * @brief       Initialize the SecMgr entry data in NV with all values set to 0
   3719           *
   3720           * @param       none
   3721           *
   3722           * @return      uint8 - <osal_nv_item_init> return codes
   3723           */
   3724          uint8 ZDSecMgrInitNV(void)
   3725          {
   3726          
   3727            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
   3728                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   3729          
   3730            // If the item does not already exist, set all values to 0
   3731            if (rtrn != SUCCESS)
   3732            {
   3733              nvDeviceListHdr_t hdr;
   3734              hdr.numRecs = 0;
   3735              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   3736            }
   3737          
   3738            return rtrn;
   3739          }
   3740          #endif // NV_RESTORE
   3741          
   3742          #if defined ( NV_RESTORE )
   3743          /*********************************************************************
   3744           * @fn      ZDSecMgrWriteNV()
   3745           *
   3746           * @brief   Save off the APS link key list to NV
   3747           *
   3748           * @param   none
   3749           *
   3750           * @return  none
   3751           */
   3752          static void ZDSecMgrWriteNV( void )
   3753          {
   3754            uint16 i;
   3755            nvDeviceListHdr_t hdr;
   3756          
   3757            hdr.numRecs = 0;
   3758          
   3759            if (ZDSecMgrEntries != NULL)
   3760            {
   3761              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   3762              {
   3763                // Save off the record
   3764                osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   3765                              (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   3766                              sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   3767          
   3768                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   3769                {
   3770                  hdr.numRecs++;
   3771                }
   3772              }
   3773            }
   3774          
   3775            // Save off the header
   3776            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   3777          }
   3778          #endif // NV_RESTORE
   3779          
   3780          #if defined ( NV_RESTORE )
   3781          /******************************************************************************
   3782           * @fn          ZDSecMgrRestoreFromNV
   3783           *
   3784           * @brief       Restore the APS Link Key entry data from NV. It does not restore
   3785           *              the key data itself as they remain in NV until they are used.
   3786           *              Only list data is restored.
   3787           *
   3788           * @param       none
   3789           *
   3790           * @return      None.
   3791           */
   3792          static void ZDSecMgrRestoreFromNV( void )
   3793          {
   3794            nvDeviceListHdr_t hdr;
   3795            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   3796          
   3797            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   3798                ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
   3799            {
   3800              uint8 x;
   3801          
   3802              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   3803          
   3804              for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
   3805              {
   3806                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   3807                                  (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   3808                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
   3809                {
   3810                  // update data only for valid entries
   3811                  if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
   3812                  {
   3813                    if (pApsLinkKey != NULL)
   3814                    {
   3815                      // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   3816                      osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
   3817                                   sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   3818          
   3819                      // set new values for the counter
   3820                      pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   3821          
   3822                      // restore values for counters in RAM
   3823                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
   3824                                                      pApsLinkKey->txFrmCntr;
   3825          
   3826                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
   3827                                                      pApsLinkKey->rxFrmCntr;
   3828          
   3829                      osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
   3830                                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   3831          
   3832                      // clear copy of key in RAM
   3833                      osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   3834                    }
   3835                  }
   3836                }
   3837              }
   3838          
   3839              if (pApsLinkKey != NULL)
   3840              {
   3841                osal_mem_free(pApsLinkKey);
   3842              }
   3843            }
   3844          }
   3845          #endif // NV_RESTORE
   3846          
   3847          /*********************************************************************
   3848           * @fn          ZDSecMgrSetDefaultNV
   3849           *
   3850           * @brief       Write the defaults to NV for Entry table and for APS key data table
   3851           *
   3852           * @param       none
   3853           *
   3854           * @return      none
   3855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3856          void ZDSecMgrSetDefaultNV( void )
   \                     ZDSecMgrSetDefaultNV:
   3857          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3858            uint16 i;
   3859            nvDeviceListHdr_t hdr;
   3860            ZDSecMgrEntry_t secMgrEntry;
   3861            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   75..00       MOV     ?V1,#0x0
   3862          
   3863            // Initialize the header
   3864            hdr.numRecs = 0;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   7400         MOV     A,#0x0
   \   00001C   F0           MOVX    @DPTR,A
   3865          
   3866            // clear the header
   3867            osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   A8..         MOV     R0,?XSP + 0
   \   00001F   A9..         MOV     R1,?XSP + 1
   \   000021   88..         MOV     ?V2,R0
   \   000023   89..         MOV     ?V3,R1
   \   000025   78..         MOV     R0,#?V2
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..02       MOV     ?V2,#0x2
   \   00002D   75..00       MOV     ?V3,#0x0
   \   000030   78..         MOV     R0,#?V2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A4C         MOV     R2,#0x4c
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   3868          
   3869            osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
   \   000046                ; Setup parameters for call to function osal_memset
   \   000046   7C05         MOV     R4,#0x5
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?XSTACK_DISP101_8
   \   000051   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3870          
   3871            for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000054   7E00         MOV     R6,#0x0
   \   000056   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrSetDefaultNV_0:
   \   000058   C3           CLR     C
   \   000059   EE           MOV     A,R6
   \   00005A   9403         SUBB    A,#0x3
   \   00005C   EF           MOV     A,R7
   \   00005D   9400         SUBB    A,#0x0
   \   00005F   504D         JNC     ??ZDSecMgrSetDefaultNV_1
   3872            {
   3873              // Clear the record
   3874              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   3875                          (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   3876                                  sizeof(ZDSecMgrEntry_t), &secMgrEntry );
   \   000061                ; Setup parameters for call to function osal_nv_write
   \   000061   7402         MOV     A,#0x2
   \   000063   12....       LCALL   ?XSTACK_DISP100_8
   \   000066   88..         MOV     ?V2,R0
   \   000068   89..         MOV     ?V3,R1
   \   00006A   78..         MOV     R0,#?V2
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   75..05       MOV     ?V2,#0x5
   \   000072   75..00       MOV     ?V3,#0x0
   \   000075   78..         MOV     R0,#?V2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   EE           MOV     A,R6
   \   00007B   F8           MOV     R0,A
   \   00007C   EF           MOV     A,R7
   \   00007D   F9           MOV     R1,A
   \   00007E   E8           MOV     A,R0
   \   00007F   75F005       MOV     B,#0x5
   \   000082   A4           MUL     AB
   \   000083   C8           XCH     A,R0
   \   000084   AAF0         MOV     R2,B
   \   000086   75F000       MOV     B,#0x0
   \   000089   A4           MUL     AB
   \   00008A   2A           ADD     A,R2
   \   00008B   FA           MOV     R2,A
   \   00008C   75F005       MOV     B,#0x5
   \   00008F   E9           MOV     A,R1
   \   000090   A4           MUL     AB
   \   000091   2A           ADD     A,R2
   \   000092   F9           MOV     R1,A
   \   000093   E8           MOV     A,R0
   \   000094   2402         ADD     A,#0x2
   \   000096   FC           MOV     R4,A
   \   000097   E4           CLR     A
   \   000098   39           ADDC    A,R1
   \   000099   FD           MOV     R5,A
   \   00009A   7A4C         MOV     R2,#0x4c
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV     A,R1
   3877            }
   \   0000A7   0E           INC     R6
   \   0000A8   EE           MOV     A,R6
   \   0000A9   70AD         JNZ     ??ZDSecMgrSetDefaultNV_0
   \   0000AB   0F           INC     R7
   \   0000AC   80AA         SJMP    ??ZDSecMgrSetDefaultNV_0
   3878          
   3879            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \                     ??ZDSecMgrSetDefaultNV_1:
   \   0000AE                ; Setup parameters for call to function osal_mem_alloc
   \   0000AE   7A18         MOV     R2,#0x18
   \   0000B0   7B00         MOV     R3,#0x0
   \   0000B2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B5   8A..         MOV     ?V2,R2
   \   0000B7   8B..         MOV     ?V3,R3
   \   0000B9   85....       MOV     ?V0,?V2
   \   0000BC   85....       MOV     ?V1,?V3
   3880          
   3881            if (pApsLinkKey != NULL)
   \   0000BF   E5..         MOV     A,?V0
   \   0000C1   45..         ORL     A,?V1
   \   0000C3   604D         JZ      ??ZDSecMgrSetDefaultNV_2
   3882            {
   3883              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   0000C5                ; Setup parameters for call to function osal_memset
   \   0000C5   7C18         MOV     R4,#0x18
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   7900         MOV     R1,#0x0
   \   0000CB   AA..         MOV     R2,?V0
   \   0000CD   AB..         MOV     R3,?V1
   \   0000CF   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3884          
   3885              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   0000D2   7E00         MOV     R6,#0x0
   \   0000D4   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrSetDefaultNV_3:
   \   0000D6   C3           CLR     C
   \   0000D7   EE           MOV     A,R6
   \   0000D8   9403         SUBB    A,#0x3
   \   0000DA   EF           MOV     A,R7
   \   0000DB   9400         SUBB    A,#0x0
   \   0000DD   502C         JNC     ??ZDSecMgrSetDefaultNV_4
   3886              {
   3887                // Clear the record
   3888                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3889                              sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   0000DF                ; Setup parameters for call to function osal_nv_write
   \   0000DF   78..         MOV     R0,#?V0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   75..18       MOV     ?V2,#0x18
   \   0000E7   75..00       MOV     ?V3,#0x0
   \   0000EA   78..         MOV     R0,#?V2
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EF   7C00         MOV     R4,#0x0
   \   0000F1   7D00         MOV     R5,#0x0
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2401         ADD     A,#0x1
   \   0000F6   FA           MOV     R2,A
   \   0000F7   EF           MOV     A,R7
   \   0000F8   3402         ADDC    A,#0x2
   \   0000FA   FB           MOV     R3,A
   \   0000FB   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FE   7404         MOV     A,#0x4
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   \   000103   E9           MOV     A,R1
   3890              }
   \   000104   0E           INC     R6
   \   000105   EE           MOV     A,R6
   \   000106   70CE         JNZ     ??ZDSecMgrSetDefaultNV_3
   \   000108   0F           INC     R7
   \   000109   80CB         SJMP    ??ZDSecMgrSetDefaultNV_3
   3891          
   3892              osal_mem_free(pApsLinkKey);
   \                     ??ZDSecMgrSetDefaultNV_4:
   \   00010B                ; Setup parameters for call to function osal_mem_free
   \   00010B   AA..         MOV     R2,?V0
   \   00010D   AB..         MOV     R3,?V1
   \   00010F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3893            }
   3894          }
   \                     ??ZDSecMgrSetDefaultNV_2:
   \   000112   7407         MOV     A,#0x7
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   7F04         MOV     R7,#0x4
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA
   3895          
   3896          #if defined ( NV_RESTORE )
   3897          /*********************************************************************
   3898           * @fn      ZDSecMgrUpdateNV()
   3899           *
   3900           * @brief   Updates one entry of the APS link key table to NV
   3901           *
   3902           * @param   index - to the entry in security manager table
   3903           *
   3904           * @return  none
   3905           */
   3906          static void ZDSecMgrUpdateNV( uint16 index )
   3907          {
   3908            nvDeviceListHdr_t hdr;
   3909          
   3910            if (ZDSecMgrEntries != NULL)
   3911            {
   3912              // Save off the record
   3913              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   3914                             (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
   3915                             sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
   3916            }
   3917          
   3918            if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
   3919            {
   3920              if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   3921              {
   3922                if (hdr.numRecs > 0)
   3923                {
   3924                  hdr.numRecs--;
   3925                }
   3926              }
   3927              else
   3928              {
   3929                hdr.numRecs++;
   3930              }
   3931          
   3932              // Save off the header
   3933              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   3934            }
   3935          }
   3936          #endif // NV_RESTORE
   3937          
   3938          /******************************************************************************
   3939           * @fn          ZDSecMgrAPSRemove
   3940           *
   3941           * @brief       Remove device from network.
   3942           *
   3943           * @param       nwkAddr - device's NWK address
   3944           * @param       extAddr - device's Extended address
   3945           * @param       parentAddr - parent's NWK address
   3946           *
   3947           * @return      ZStatus_t
   3948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3949          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   3950          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   7416         MOV     A,#0x16
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   3951            ZDSecMgrDevice_t device;
   3952          
   3953            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   3954                 ( extAddr == NULL )              ||
   3955                 ( parentAddr == INVALID_NODE_ADDR ) )
   \   00001C   74FE         MOV     A,#-0x2
   \   00001E   65..         XRL     A,?V0
   \   000020   7004         JNZ     ??ZDSecMgrAPSRemove_0
   \   000022   74FF         MOV     A,#-0x1
   \   000024   65..         XRL     A,?V1
   \                     ??ZDSecMgrAPSRemove_0:
   \   000026   6010         JZ      ??ZDSecMgrAPSRemove_1
   \   000028   E5..         MOV     A,?V2
   \   00002A   45..         ORL     A,?V3
   \   00002C   600A         JZ      ??ZDSecMgrAPSRemove_1
   \   00002E   74FE         MOV     A,#-0x2
   \   000030   6E           XRL     A,R6
   \   000031   7003         JNZ     ??ZDSecMgrAPSRemove_2
   \   000033   74FF         MOV     A,#-0x1
   \   000035   6F           XRL     A,R7
   \                     ??ZDSecMgrAPSRemove_2:
   \   000036   7004         JNZ     ??ZDSecMgrAPSRemove_3
   3956            {
   3957              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   000038   7901         MOV     R1,#0x1
   \   00003A   802C         SJMP    ??ZDSecMgrAPSRemove_4
   3958            }
   3959          
   3960            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_3:
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E5..         MOV     A,?V0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   E5..         MOV     A,?V1
   \   000048   F0           MOVX    @DPTR,A
   3961            device.extAddr = extAddr;
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E5..         MOV     A,?V2
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   E5..         MOV     A,?V3
   \   000054   F0           MOVX    @DPTR,A
   3962            device.parentAddr = parentAddr;
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   EE           MOV     A,R6
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   EF           MOV     A,R7
   \   00005E   F0           MOVX    @DPTR,A
   3963          
   3964            // remove device
   3965            ZDSecMgrDeviceRemove( &device );
   \   00005F                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   00005F   AA..         MOV     R2,?XSP + 0
   \   000061   AB..         MOV     R3,?XSP + 1
   \   000063   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   3966          
   3967            return ( ZSuccess );
   \   000066   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAPSRemove_4:
   \   000068   740A         MOV     A,#0xa
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006D   7F04         MOV     R7,#0x4
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
   3968          }
   3969          
   3970          /******************************************************************************
   3971           * @fn          APSME_TCLinkKeyInit
   3972           *
   3973           * @brief       Initialize the NV table for preconfigured TC link key
   3974           *
   3975           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   3976           *              Trust Center Link Key is written to NV. A single tclk is used
   3977           *              by all devices joining the network.
   3978           *
   3979           * @param       setDefault - TRUE to set default values
   3980           *
   3981           * @return      none
   3982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3983          void APSME_TCLinkKeyInit(uint8 setDefault)
   \                     APSME_TCLinkKeyInit:
   3984          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V3,R1
   3985            uint8             i;
   3986            APSME_TCLinkKey_t tcLinkKey;
   3987            uint8             rtrn;
   3988          
   3989            // Initialize all NV items for preconfigured TCLK
   3990            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   00000C   7E00         MOV     R6,#0x0
   \                     ??APSME_TCLinkKeyInit_0:
   \   00000E   EE           MOV     A,R6
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??APSME_TCLinkKeyInit_1 & 0xFFFF
   3991            {
   3992              // Making sure data is cleared for every key all the time
   3993              osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C20         MOV     R4,#0x20
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3994          
   3995              // Initialize first element of the table with the default TCLK
   3996              if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
   \   000021   EE           MOV     A,R6
   \   000022   7038         JNZ     ??APSME_TCLinkKeyInit_2
   \   000024   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   7030         JNZ     ??APSME_TCLinkKeyInit_2
   3997              {
   3998                osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   00002C                ; Setup parameters for call to function osal_memset
   \   00002C   7C08         MOV     R4,#0x8
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   79FF         MOV     R1,#-0x1
   \   000032   AA..         MOV     R2,?XSP + 0
   \   000034   AB..         MOV     R3,?XSP + 1
   \   000036   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3999                osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
   \   000039                ; Setup parameters for call to function osal_memcpy
   \   000039   75....       MOV     ?V0,#defaultTCLinkKey & 0xff
   \   00003C   75....       MOV     ?V1,#(defaultTCLinkKey >> 8) & 0xff
   \   00003F   75..80       MOV     ?V2,#-0x80
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000047   7C10         MOV     R4,#0x10
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   740B         MOV     A,#0xb
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   AA82         MOV     R2,DPL
   \   000052   AB83         MOV     R3,DPH
   \   000054   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000057   7403         MOV     A,#0x3
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   4000              }
   4001          
   4002              // If the item doesn't exist in NV memory, create and initialize
   4003              // it with the default value passed in, either defaultTCLK or 0
   4004              rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
   4005                                         sizeof(APSME_TCLinkKey_t), &tcLinkKey);
   \                     ??APSME_TCLinkKeyInit_2:
   \   00005C                ; Setup parameters for call to function osal_nv_item_init
   \   00005C   A8..         MOV     R0,?XSP + 0
   \   00005E   A9..         MOV     R1,?XSP + 1
   \   000060   88..         MOV     ?V0,R0
   \   000062   89..         MOV     ?V1,R1
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C20         MOV     R4,#0x20
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   EE           MOV     A,R6
   \   00006E   F8           MOV     R0,A
   \   00006F   7900         MOV     R1,#0x0
   \   000071   E8           MOV     A,R0
   \   000072   2401         ADD     A,#0x1
   \   000074   FA           MOV     R2,A
   \   000075   E9           MOV     A,R1
   \   000076   3401         ADDC    A,#0x1
   \   000078   FB           MOV     R3,A
   \   000079   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081   E9           MOV     A,R1
   \   000082   FF           MOV     R7,A
   4006          
   4007              if (rtrn == SUCCESS)
   \   000083   EF           MOV     A,R7
   \   000084   6003         JZ      $+5
   \   000086   02....       LJMP    ??APSME_TCLinkKeyInit_3 & 0xFFFF
   4008              {
   4009                // set the Frame counters to 0 to existing keys in NV
   4010                osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   4011                               sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   000089                ; Setup parameters for call to function osal_nv_read
   \   000089   A8..         MOV     R0,?XSP + 0
   \   00008B   A9..         MOV     R1,?XSP + 1
   \   00008D   88..         MOV     ?V0,R0
   \   00008F   89..         MOV     ?V1,R1
   \   000091   78..         MOV     R0,#?V0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   75..20       MOV     ?V0,#0x20
   \   000099   75..00       MOV     ?V1,#0x0
   \   00009C   78..         MOV     R0,#?V0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   7C00         MOV     R4,#0x0
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   EE           MOV     A,R6
   \   0000A6   F8           MOV     R0,A
   \   0000A7   7900         MOV     R1,#0x0
   \   0000A9   E8           MOV     A,R0
   \   0000AA   2401         ADD     A,#0x1
   \   0000AC   FA           MOV     R2,A
   \   0000AD   E9           MOV     A,R1
   \   0000AE   3401         ADDC    A,#0x1
   \   0000B0   FB           MOV     R3,A
   \   0000B1   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000B4   7404         MOV     A,#0x4
   \   0000B6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B9   E9           MOV     A,R1
   4012          
   4013          #if defined ( NV_RESTORE )
   4014                if (setDefault == TRUE)
   4015                {
   4016                  // clear the value stored in NV
   4017                  tcLinkKey.txFrmCntr = 0;
   4018                }
   4019                else
   4020                {
   4021                  // increase the value stored in NV
   4022                  tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
   4023                }
   4024          #else
   4025                // Clear the counters if NV_RESTORE is not enabled and this NV item
   4026                // already existed in the NV memory
   4027                tcLinkKey.txFrmCntr = 0;
   \   0000BA   7A00         MOV     R2,#0x0
   \   0000BC   7B00         MOV     R3,#0x0
   \   0000BE   7C00         MOV     R4,#0x0
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7418         MOV     A,#0x18
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   EA           MOV     A,R2
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   EB           MOV     A,R3
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   EC           MOV     A,R4
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   ED           MOV     A,R5
   \   0000D1   F0           MOVX    @DPTR,A
   4028                tcLinkKey.rxFrmCntr = 0;
   \   0000D2   7A00         MOV     R2,#0x0
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   7C00         MOV     R4,#0x0
   \   0000D8   7D00         MOV     R5,#0x0
   \   0000DA   741C         MOV     A,#0x1c
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   EA           MOV     A,R2
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   EB           MOV     A,R3
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   EC           MOV     A,R4
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   ED           MOV     A,R5
   \   0000E9   F0           MOVX    @DPTR,A
   4029          #endif  // NV_RESTORE
   4030          
   4031                osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   4032                                sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   0000EA                ; Setup parameters for call to function osal_nv_write
   \   0000EA   A8..         MOV     R0,?XSP + 0
   \   0000EC   A9..         MOV     R1,?XSP + 1
   \   0000EE   88..         MOV     ?V0,R0
   \   0000F0   89..         MOV     ?V1,R1
   \   0000F2   78..         MOV     R0,#?V0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   75..20       MOV     ?V0,#0x20
   \   0000FA   75..00       MOV     ?V1,#0x0
   \   0000FD   78..         MOV     R0,#?V0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   7C00         MOV     R4,#0x0
   \   000104   7D00         MOV     R5,#0x0
   \   000106   EE           MOV     A,R6
   \   000107   F8           MOV     R0,A
   \   000108   7900         MOV     R1,#0x0
   \   00010A   E8           MOV     A,R0
   \   00010B   2401         ADD     A,#0x1
   \   00010D   FA           MOV     R2,A
   \   00010E   E9           MOV     A,R1
   \   00010F   3401         ADDC    A,#0x1
   \   000111   FB           MOV     R3,A
   \   000112   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000115   7404         MOV     A,#0x4
   \   000117   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011A   E9           MOV     A,R1
   4033          
   4034                // set initial values for counters in RAM
   4035                TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
   \   00011B   7418         MOV     A,#0x18
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   12....       LCALL   ?XLOAD_R0123
   \   000123   EE           MOV     A,R6
   \   000124   FC           MOV     R4,A
   \   000125   7D00         MOV     R5,#0x0
   \   000127   EC           MOV     A,R4
   \   000128   75F009       MOV     B,#0x9
   \   00012B   A4           MUL     AB
   \   00012C   CC           XCH     A,R4
   \   00012D   85F0..       MOV     ?V0,B
   \   000130   75F000       MOV     B,#0x0
   \   000133   A4           MUL     AB
   \   000134   25..         ADD     A,?V0
   \   000136   F5..         MOV     ?V0,A
   \   000138   75F009       MOV     B,#0x9
   \   00013B   ED           MOV     A,R5
   \   00013C   A4           MUL     AB
   \   00013D   25..         ADD     A,?V0
   \   00013F   FD           MOV     R5,A
   \   000140   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   000142   2C           ADD     A,R4
   \   000143   F582         MOV     DPL,A
   \   000145   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000147   3D           ADDC    A,R5
   \   000148   F583         MOV     DPH,A
   \   00014A   12....       LCALL   ?XSTORE_R0123
   4036                TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;
   \   00014D   741C         MOV     A,#0x1c
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   12....       LCALL   ?XLOAD_R0123
   \   000155   EE           MOV     A,R6
   \   000156   FC           MOV     R4,A
   \   000157   7D00         MOV     R5,#0x0
   \   000159   EC           MOV     A,R4
   \   00015A   75F009       MOV     B,#0x9
   \   00015D   A4           MUL     AB
   \   00015E   CC           XCH     A,R4
   \   00015F   85F0..       MOV     ?V0,B
   \   000162   75F000       MOV     B,#0x0
   \   000165   A4           MUL     AB
   \   000166   25..         ADD     A,?V0
   \   000168   F5..         MOV     ?V0,A
   \   00016A   75F009       MOV     B,#0x9
   \   00016D   ED           MOV     A,R5
   \   00016E   A4           MUL     AB
   \   00016F   25..         ADD     A,?V0
   \   000171   FD           MOV     R5,A
   \   000172   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   000174   2C           ADD     A,R4
   \   000175   F582         MOV     DPL,A
   \   000177   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   000179   3D           ADDC    A,R5
   \   00017A   F583         MOV     DPH,A
   \   00017C   12....       LCALL   ?XSTORE_R0123
   4037              }
   4038            }
   \                     ??APSME_TCLinkKeyInit_3:
   \   00017F   0E           INC     R6
   \   000180   02....       LJMP    ??APSME_TCLinkKeyInit_0 & 0xFFFF
   4039          
   4040            // clear copy of key in RAM
   4041            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyInit_1:
   \   000183                ; Setup parameters for call to function osal_memset
   \   000183   7C20         MOV     R4,#0x20
   \   000185   7D00         MOV     R5,#0x0
   \   000187   7900         MOV     R1,#0x0
   \   000189   AA..         MOV     R2,?XSP + 0
   \   00018B   AB..         MOV     R3,?XSP + 1
   \   00018D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   4042          
   4043          }
   \   000190   7420         MOV     A,#0x20
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   \   000195   7F04         MOV     R7,#0x4
   \   000197   02....       LJMP    ?BANKED_LEAVE_XDATA
   4044          
   4045          /******************************************************************************
   4046           * @fn          APSME_TCLinkKeySync
   4047           *
   4048           * @brief       Sync Trust Center LINK key data.
   4049           *
   4050           * @param       srcAddr - [in] srcAddr
   4051           * @param       si      - [in, out] SSP_Info_t
   4052           *
   4053           * @return      ZStatus_t
   4054           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4055          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   4056          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV     A,#-0x22
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8C..         MOV     ?V4,R4
   \   000017   8D..         MOV     ?V5,R5
   4057            uint8 i;
   4058            ZStatus_t status = ZSecNoKey;
   \   000019   7EA1         MOV     R6,#-0x5f
   4059            APSME_TCLinkKey_t tcLinkKey;
   4060            uint32 *tclkRxFrmCntr;
   4061          
   4062            // Look up the IEEE address of the trust center if it's available
   4063            if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
   \   00001B                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001B   E5..         MOV     A,?V4
   \   00001D   2406         ADD     A,#0x6
   \   00001F   FA           MOV     R2,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V5
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000027   E9           MOV     A,R1
   \   000028   7018         JNZ     ??APSME_TCLinkKeySync_0
   4064            {
   4065              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   00002A                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00002A   E5..         MOV     A,?V4
   \   00002C   2406         ADD     A,#0x6
   \   00002E   FC           MOV     R4,A
   \   00002F   E4           CLR     A
   \   000030   35..         ADDC    A,?V5
   \   000032   FD           MOV     R5,A
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000041   E9           MOV     A,R1
   4066            }
   4067          
   4068            // Look up the TC link key associated with the device
   4069            // or the default TC link key (extAddr is all FFs), whichever is found
   4070            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \                     ??APSME_TCLinkKeySync_0:
   \   000042   7F00         MOV     R7,#0x0
   \                     ??APSME_TCLinkKeySync_1:
   \   000044   EF           MOV     A,R7
   \   000045   6003         JZ      $+5
   \   000047   02....       LJMP    ??APSME_TCLinkKeySync_2 & 0xFFFF
   4071            {
   4072              // Read entry i of the TC link key table from NV
   4073              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   4074                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   00004A                ; Setup parameters for call to function osal_nv_read
   \   00004A   7402         MOV     A,#0x2
   \   00004C   12....       LCALL   ?XSTACK_DISP100_8
   \   00004F   88..         MOV     ?V0,R0
   \   000051   89..         MOV     ?V1,R1
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   75..20       MOV     ?V0,#0x20
   \   00005B   75..00       MOV     ?V1,#0x0
   \   00005E   78..         MOV     R0,#?V0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   7C00         MOV     R4,#0x0
   \   000065   7D00         MOV     R5,#0x0
   \   000067   EF           MOV     A,R7
   \   000068   F8           MOV     R0,A
   \   000069   7900         MOV     R1,#0x0
   \   00006B   E8           MOV     A,R0
   \   00006C   2401         ADD     A,#0x1
   \   00006E   FA           MOV     R2,A
   \   00006F   E9           MOV     A,R1
   \   000070   3401         ADDC    A,#0x1
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   4075          
   4076              if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) ||
   4077                  APSME_IsDefaultTCLK(tcLinkKey.extAddr))
   \   00007C                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?XSTACK_DISP102_8
   \   000081   E5..         MOV     A,?V4
   \   000083   2406         ADD     A,#0x6
   \   000085   FA           MOV     R2,A
   \   000086   E4           CLR     A
   \   000087   35..         ADDC    A,?V5
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   00008D   E9           MOV     A,R1
   \   00008E   700E         JNZ     ??APSME_TCLinkKeySync_3
   \   000090                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?XSTACK_DISP101_8
   \   000095   12....       LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   000098   E9           MOV     A,R1
   \   000099   7003         JNZ     $+5
   \   00009B   02....       LJMP    ??APSME_TCLinkKeySync_4 & 0xFFFF
   4078              {
   4079                tclkRxFrmCntr = &TCLinkKeyFrmCntr[i].rxFrmCntr;
   \                     ??APSME_TCLinkKeySync_3:
   \   00009E   EF           MOV     A,R7
   \   00009F   F8           MOV     R0,A
   \   0000A0   7900         MOV     R1,#0x0
   \   0000A2   E8           MOV     A,R0
   \   0000A3   75F009       MOV     B,#0x9
   \   0000A6   A4           MUL     AB
   \   0000A7   C8           XCH     A,R0
   \   0000A8   AAF0         MOV     R2,B
   \   0000AA   75F000       MOV     B,#0x0
   \   0000AD   A4           MUL     AB
   \   0000AE   2A           ADD     A,R2
   \   0000AF   FA           MOV     R2,A
   \   0000B0   75F009       MOV     B,#0x9
   \   0000B3   E9           MOV     A,R1
   \   0000B4   A4           MUL     AB
   \   0000B5   2A           ADD     A,R2
   \   0000B6   F9           MOV     R1,A
   \   0000B7   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000B9   28           ADD     A,R0
   \   0000BA   F8           MOV     R0,A
   \   0000BB   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000BD   39           ADDC    A,R1
   \   0000BE   F9           MOV     R1,A
   \   0000BF   88..         MOV     ?V6,R0
   \   0000C1   89..         MOV     ?V7,R1
   4080          
   4081                // verify that the incoming frame counter is valid
   4082                if ( si->frmCntr >= *tclkRxFrmCntr )
   \   0000C3   85..82       MOV     DPL,?V6
   \   0000C6   85..83       MOV     DPH,?V7
   \   0000C9   78..         MOV     R0,#?V0
   \   0000CB   12....       LCALL   ?L_MOV_X
   \   0000CE   E5..         MOV     A,?V4
   \   0000D0   2412         ADD     A,#0x12
   \   0000D2   F582         MOV     DPL,A
   \   0000D4   E4           CLR     A
   \   0000D5   35..         ADDC    A,?V5
   \   0000D7   F583         MOV     DPH,A
   \   0000D9   78..         MOV     R0,#?V0
   \   0000DB   12....       LCALL   ?UL_GT_X
   \   0000DE   4051         JC      ??APSME_TCLinkKeySync_5
   4083                {
   4084                  // set the keyNvId to use
   4085                  si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
   \   0000E0   EF           MOV     A,R7
   \   0000E1   F8           MOV     R0,A
   \   0000E2   7900         MOV     R1,#0x0
   \   0000E4   E8           MOV     A,R0
   \   0000E5   2401         ADD     A,#0x1
   \   0000E7   F8           MOV     R0,A
   \   0000E8   E9           MOV     A,R1
   \   0000E9   3401         ADDC    A,#0x1
   \   0000EB   F9           MOV     R1,A
   \   0000EC   E5..         MOV     A,?V4
   \   0000EE   240F         ADD     A,#0xf
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   E4           CLR     A
   \   0000F3   35..         ADDC    A,?V5
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   E8           MOV     A,R0
   \   0000F8   F0           MOVX    @DPTR,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E9           MOV     A,R1
   \   0000FB   F0           MOVX    @DPTR,A
   4086          
   4087                  // update the rx frame counter
   4088                  *tclkRxFrmCntr = si->frmCntr + 1;
   \   0000FC   E5..         MOV     A,?V4
   \   0000FE   2412         ADD     A,#0x12
   \   000100   F582         MOV     DPL,A
   \   000102   E4           CLR     A
   \   000103   35..         ADDC    A,?V5
   \   000105   F583         MOV     DPH,A
   \   000107   78..         MOV     R0,#?V0
   \   000109   12....       LCALL   ?L_MOV_X
   \   00010C   90....       MOV     DPTR,#__Constant_1
   \   00010F   78..         MOV     R0,#?V0
   \   000111   12....       LCALL   ?L_ADD_X
   \   000114   AA..         MOV     R2,?V0
   \   000116   AB..         MOV     R3,?V1
   \   000118   AC..         MOV     R4,?V2
   \   00011A   AD..         MOV     R5,?V3
   \   00011C   85..82       MOV     DPL,?V6
   \   00011F   85..83       MOV     DPH,?V7
   \   000122   EA           MOV     A,R2
   \   000123   F0           MOVX    @DPTR,A
   \   000124   A3           INC     DPTR
   \   000125   EB           MOV     A,R3
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   EC           MOV     A,R4
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A3           INC     DPTR
   \   00012B   ED           MOV     A,R5
   \   00012C   F0           MOVX    @DPTR,A
   4089          
   4090                  status = ZSuccess;
   \   00012D   7E00         MOV     R6,#0x0
   \   00012F   8008         SJMP    ??APSME_TCLinkKeySync_2
   4091                }
   4092                else
   4093                {
   4094                  status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_5:
   \   000131   7EA2         MOV     R6,#-0x5e
   4095                }
   4096                // break from the loop
   4097                break;
   \   000133   8004         SJMP    ??APSME_TCLinkKeySync_2
   4098              }
   4099            }
   \                     ??APSME_TCLinkKeySync_4:
   \   000135   0F           INC     R7
   \   000136   02....       LJMP    ??APSME_TCLinkKeySync_1 & 0xFFFF
   4100          
   4101            // clear copy of key in RAM
   4102            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeySync_2:
   \   000139                ; Setup parameters for call to function osal_memset
   \   000139   7C20         MOV     R4,#0x20
   \   00013B   7D00         MOV     R5,#0x0
   \   00013D   7900         MOV     R1,#0x0
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ?XSTACK_DISP101_8
   \   000144   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   4103          
   4104            return status;
   \   000147   EE           MOV     A,R6
   \   000148   F9           MOV     R1,A
   \   000149   7422         MOV     A,#0x22
   \   00014B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014E   7F08         MOV     R7,#0x8
   \   000150   02....       LJMP    ?BANKED_LEAVE_XDATA
   4105          }
   4106          
   4107          /******************************************************************************
   4108           * @fn          APSME_TCLinkKeyLoad
   4109           *
   4110           * @brief       Load Trust Center LINK key data.
   4111           *
   4112           * @param       dstAddr - [in] dstAddr
   4113           * @param       si      - [in, out] SSP_Info_t
   4114           *
   4115           * @return      ZStatus_t
   4116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4117          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   4118          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 49
   \   000005   74CF         MOV     A,#-0x31
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8C..         MOV     ?V6,R4
   \   000016   8D..         MOV     ?V7,R5
   4119            uint8 i;
   4120            ZStatus_t status = ZSecNoKey;
   \   000018   7EA1         MOV     R6,#-0x5f
   4121            APSME_TCLinkKey_t tcLinkKey;
   4122            AddrMgrEntry_t addrEntry;
   4123            uint32 *tclkTxFrmCntr;
   4124            uint8 extAddrFound;
   4125            uint8 defaultTCLKIdx = ZDSECMGR_TC_DEVICE_MAX;
   \   00001A   75..01       MOV     ?V4,#0x1
   4126          
   4127            // Look up the ami of the srcAddr if available
   4128            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   7400         MOV     A,#0x0
   \   000024   F0           MOVX    @DPTR,A
   4129            addrEntry.nwkAddr = dstAddr;
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   7405         MOV     A,#0x5
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
   4130          
   4131            APSME_LookupExtAddr( dstAddr, si->extAddr );
   \   000039                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000039   E5..         MOV     A,?V6
   \   00003B   2406         ADD     A,#0x6
   \   00003D   FC           MOV     R4,A
   \   00003E   E4           CLR     A
   \   00003F   35..         ADDC    A,?V7
   \   000041   FD           MOV     R5,A
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   00004F   E9           MOV     A,R1
   4132          
   4133            extAddrFound = AddrMgrExtAddrValid( si->extAddr );
   \   000050                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000050   E5..         MOV     A,?V6
   \   000052   2406         ADD     A,#0x6
   \   000054   FA           MOV     R2,A
   \   000055   E4           CLR     A
   \   000056   35..         ADDC    A,?V7
   \   000058   FB           MOV     R3,A
   \   000059   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00005C   E9           MOV     A,R1
   \   00005D   F5..         MOV     ?V5,A
   4134          
   4135            // Look up the TC link key associated with the device
   4136            // or the master TC link key (ami = 0xFFFF), whichever is found
   4137            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   00005F   7F00         MOV     R7,#0x0
   \                     ??APSME_TCLinkKeyLoad_0:
   \   000061   EF           MOV     A,R7
   \   000062   7066         JNZ     ??APSME_TCLinkKeyLoad_1
   4138            {
   4139              // Read entry i of the TC link key table from NV
   4140              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   4141                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \   000064                ; Setup parameters for call to function osal_nv_read
   \   000064   7411         MOV     A,#0x11
   \   000066   12....       LCALL   ?XSTACK_DISP100_8
   \   000069   88..         MOV     ?V0,R0
   \   00006B   89..         MOV     ?V1,R1
   \   00006D   78..         MOV     R0,#?V0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   75..20       MOV     ?V0,#0x20
   \   000075   75..00       MOV     ?V1,#0x0
   \   000078   78..         MOV     R0,#?V0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7C00         MOV     R4,#0x0
   \   00007F   7D00         MOV     R5,#0x0
   \   000081   EF           MOV     A,R7
   \   000082   F8           MOV     R0,A
   \   000083   7900         MOV     R1,#0x0
   \   000085   E8           MOV     A,R0
   \   000086   2401         ADD     A,#0x1
   \   000088   FA           MOV     R2,A
   \   000089   E9           MOV     A,R1
   \   00008A   3401         ADDC    A,#0x1
   \   00008C   FB           MOV     R3,A
   \   00008D   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000090   7404         MOV     A,#0x4
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   \   000095   E9           MOV     A,R1
   4142          
   4143              if( extAddrFound && AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   \   000096   E5..         MOV     A,?V5
   \   000098   6018         JZ      ??APSME_TCLinkKeyLoad_2
   \   00009A                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   00009A   7411         MOV     A,#0x11
   \   00009C   12....       LCALL   ?XSTACK_DISP102_8
   \   00009F   E5..         MOV     A,?V6
   \   0000A1   2406         ADD     A,#0x6
   \   0000A3   FA           MOV     R2,A
   \   0000A4   E4           CLR     A
   \   0000A5   35..         ADDC    A,?V7
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   0000AB   E9           MOV     A,R1
   \   0000AC   6004         JZ      ??APSME_TCLinkKeyLoad_2
   4144              {
   4145                status = ZSuccess;
   \   0000AE   7E00         MOV     R6,#0x0
   4146          
   4147                break; // break from the loop
   \   0000B0   8018         SJMP    ??APSME_TCLinkKeyLoad_1
   4148              }
   4149          
   4150              if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   \                     ??APSME_TCLinkKeyLoad_2:
   \   0000B2                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   0000B2   7411         MOV     A,#0x11
   \   0000B4   12....       LCALL   ?XSTACK_DISP101_8
   \   0000B7   12....       LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   0000BA   E9           MOV     A,R1
   \   0000BB   600A         JZ      ??APSME_TCLinkKeyLoad_3
   4151              {
   4152                if ( !extAddrFound )
   \   0000BD   E5..         MOV     A,?V5
   \   0000BF   7004         JNZ     ??APSME_TCLinkKeyLoad_4
   4153                {
   4154                  status = ZSuccess;
   \   0000C1   7E00         MOV     R6,#0x0
   4155          
   4156                  break; // break from the loop
   \   0000C3   8005         SJMP    ??APSME_TCLinkKeyLoad_1
   4157                }
   4158          
   4159                // Remember the default TCLK index
   4160                defaultTCLKIdx = i;
   \                     ??APSME_TCLinkKeyLoad_4:
   \   0000C5   8F..         MOV     ?V4,R7
   4161              }
   4162            }
   \                     ??APSME_TCLinkKeyLoad_3:
   \   0000C7   0F           INC     R7
   \   0000C8   8097         SJMP    ??APSME_TCLinkKeyLoad_0
   4163          
   4164            if ( (status != ZSuccess) && (defaultTCLKIdx < ZDSECMGR_TC_DEVICE_MAX) )
   \                     ??APSME_TCLinkKeyLoad_1:
   \   0000CA   EE           MOV     A,R6
   \   0000CB   6008         JZ      ??APSME_TCLinkKeyLoad_5
   \   0000CD   E5..         MOV     A,?V4
   \   0000CF   7004         JNZ     ??APSME_TCLinkKeyLoad_5
   4165            {
   4166              // Exact match was not found; use the default TC Link Key
   4167              i = defaultTCLKIdx;
   \   0000D1   AF..         MOV     R7,?V4
   4168              status = ZSuccess;
   \   0000D3   7E00         MOV     R6,#0x0
   4169            }
   4170          
   4171            if ( status == ZSuccess )
   \                     ??APSME_TCLinkKeyLoad_5:
   \   0000D5   EE           MOV     A,R6
   \   0000D6   6003         JZ      $+5
   \   0000D8   02....       LJMP    ??APSME_TCLinkKeyLoad_6 & 0xFFFF
   4172            {
   4173              tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
   \   0000DB   EF           MOV     A,R7
   \   0000DC   F8           MOV     R0,A
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   E8           MOV     A,R0
   \   0000E0   75F009       MOV     B,#0x9
   \   0000E3   A4           MUL     AB
   \   0000E4   C8           XCH     A,R0
   \   0000E5   AAF0         MOV     R2,B
   \   0000E7   75F000       MOV     B,#0x0
   \   0000EA   A4           MUL     AB
   \   0000EB   2A           ADD     A,R2
   \   0000EC   FA           MOV     R2,A
   \   0000ED   75F009       MOV     B,#0x9
   \   0000F0   E9           MOV     A,R1
   \   0000F1   A4           MUL     AB
   \   0000F2   2A           ADD     A,R2
   \   0000F3   F9           MOV     R1,A
   \   0000F4   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   0000F6   28           ADD     A,R0
   \   0000F7   F8           MOV     R0,A
   \   0000F8   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000FA   39           ADDC    A,R1
   \   0000FB   F9           MOV     R1,A
   \   0000FC   85..82       MOV     DPL,?XSP + 0
   \   0000FF   85..83       MOV     DPH,?XSP + 1
   \   000102   E8           MOV     A,R0
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A3           INC     DPTR
   \   000105   E9           MOV     A,R1
   \   000106   F0           MOVX    @DPTR,A
   4174          
   4175              // set the keyNvId to use
   4176              si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
   \   000107   EF           MOV     A,R7
   \   000108   F8           MOV     R0,A
   \   000109   7900         MOV     R1,#0x0
   \   00010B   E8           MOV     A,R0
   \   00010C   2401         ADD     A,#0x1
   \   00010E   F8           MOV     R0,A
   \   00010F   E9           MOV     A,R1
   \   000110   3401         ADDC    A,#0x1
   \   000112   F9           MOV     R1,A
   \   000113   E5..         MOV     A,?V6
   \   000115   240F         ADD     A,#0xf
   \   000117   F582         MOV     DPL,A
   \   000119   E4           CLR     A
   \   00011A   35..         ADDC    A,?V7
   \   00011C   F583         MOV     DPH,A
   \   00011E   E8           MOV     A,R0
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   E9           MOV     A,R1
   \   000122   F0           MOVX    @DPTR,A
   4177          
   4178              // update link key related fields
   4179              si->keyID   = SEC_KEYID_LINK;
   \   000123   E5..         MOV     A,?V6
   \   000125   240E         ADD     A,#0xe
   \   000127   F582         MOV     DPL,A
   \   000129   E4           CLR     A
   \   00012A   35..         ADDC    A,?V7
   \   00012C   F583         MOV     DPH,A
   \   00012E   7400         MOV     A,#0x0
   \   000130   F0           MOVX    @DPTR,A
   4180              si->frmCntr = *tclkTxFrmCntr;
   \   000131   85..82       MOV     DPL,?XSP + 0
   \   000134   85..83       MOV     DPH,?XSP + 1
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F8           MOV     R0,A
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F583         MOV     DPH,A
   \   00013D   8882         MOV     DPL,R0
   \   00013F   12....       LCALL   ?XLOAD_R0123
   \   000142   E5..         MOV     A,?V6
   \   000144   2412         ADD     A,#0x12
   \   000146   F582         MOV     DPL,A
   \   000148   E4           CLR     A
   \   000149   35..         ADDC    A,?V7
   \   00014B   F583         MOV     DPH,A
   \   00014D   12....       LCALL   ?XSTORE_R0123
   4181          
   4182              // update outgoing frame counter
   4183              (*tclkTxFrmCntr)++;
   \   000150   90....       MOV     DPTR,#__Constant_1
   \   000153   78..         MOV     R0,#?V0
   \   000155   12....       LCALL   ?L_MOV_X
   \   000158   85..82       MOV     DPL,?XSP + 0
   \   00015B   85..83       MOV     DPH,?XSP + 1
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F8           MOV     R0,A
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   F583         MOV     DPH,A
   \   000164   8882         MOV     DPL,R0
   \   000166   78..         MOV     R0,#?V0
   \   000168   12....       LCALL   ?L_ADD_TO_X
   4184          
   4185          #if defined ( NV_RESTORE )
   4186              // write periodically to NV
   4187              if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
   4188              {
   4189                // set the flag to write key to NV
   4190                TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
   4191          
   4192                // Notify the ZDApp that the frame counter has changed.
   4193                osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
   4194              }
   4195          #endif
   4196            }
   4197          
   4198            // If no TC link key found, remove the device from the address manager
   4199            if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
   \                     ??APSME_TCLinkKeyLoad_6:
   \   00016B   EE           MOV     A,R6
   \   00016C   6016         JZ      ??APSME_TCLinkKeyLoad_7
   \   00016E                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00016E   7404         MOV     A,#0x4
   \   000170   12....       LCALL   ?XSTACK_DISP101_8
   \   000173   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000176   E9           MOV     A,R1
   \   000177   6401         XRL     A,#0x1
   \   000179   7009         JNZ     ??APSME_TCLinkKeyLoad_7
   4200            {
   4201              AddrMgrEntryRelease( &addrEntry );
   \   00017B                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00017B   7404         MOV     A,#0x4
   \   00017D   12....       LCALL   ?XSTACK_DISP101_8
   \   000180   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000183   E9           MOV     A,R1
   4202            }
   4203          
   4204              // clear copy of key in RAM
   4205            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyLoad_7:
   \   000184                ; Setup parameters for call to function osal_memset
   \   000184   7C20         MOV     R4,#0x20
   \   000186   7D00         MOV     R5,#0x0
   \   000188   7900         MOV     R1,#0x0
   \   00018A   7411         MOV     A,#0x11
   \   00018C   12....       LCALL   ?XSTACK_DISP101_8
   \   00018F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   4206          
   4207            return status;
   \   000192   EE           MOV     A,R6
   \   000193   F9           MOV     R1,A
   \   000194   7431         MOV     A,#0x31
   \   000196   12....       LCALL   ?DEALLOC_XSTACK8
   \   000199   7F08         MOV     R7,#0x8
   \   00019B   02....       LJMP    ?BANKED_LEAVE_XDATA
   4208          }
   4209          
   4210          /******************************************************************************
   4211           * @fn          APSME_IsDefaultTCLK
   4212           *
   4213           * @brief       Return TRUE or FALSE based on the extended address.  If the
   4214           *              input ext address is all FFs, it means the trust center link
   4215           *              assoiciated with the address is the default trust center link key
   4216           *
   4217           * @param       extAddr - [in] extended address
   4218           *
   4219           * @return      uint8 TRUE/FALSE
   4220           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4221          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   4222          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   4223            uint8 i = 0;
   \   000005   7C00         MOV     R4,#0x0
   4224          
   4225            if( extAddr == NULL )
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   7004         JNZ     ??APSME_IsDefaultTCLK_0
   4226            {
   4227              return FALSE;
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   8028         SJMP    ??APSME_IsDefaultTCLK_1
   4228            }
   4229          
   4230            while( i++ < Z_EXTADDR_LEN )
   \                     ??APSME_IsDefaultTCLK_0:
   \   00000F   EC           MOV     A,R4
   \   000010   FD           MOV     R5,A
   \   000011   7401         MOV     A,#0x1
   \   000013   2D           ADD     A,R5
   \   000014   FC           MOV     R4,A
   \   000015   ED           MOV     A,R5
   \   000016   C3           CLR     C
   \   000017   9408         SUBB    A,#0x8
   \   000019   501A         JNC     ??APSME_IsDefaultTCLK_2
   4231            {
   4232              if( *extAddr++ != 0xFF )
   \   00001B   EA           MOV     A,R2
   \   00001C   F8           MOV     R0,A
   \   00001D   EB           MOV     A,R3
   \   00001E   F9           MOV     R1,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   A3           INC     DPTR
   \   000024   AA82         MOV     R2,DPL
   \   000026   AB83         MOV     R3,DPH
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   64FF         XRL     A,#0xff
   \   00002F   60DE         JZ      ??APSME_IsDefaultTCLK_0
   4233              {
   4234                return FALSE;
   \   000031   7900         MOV     R1,#0x0
   \   000033   8002         SJMP    ??APSME_IsDefaultTCLK_1
   4235              }
   4236            }
   4237          
   4238            return TRUE;
   \                     ??APSME_IsDefaultTCLK_2:
   \   000035   7901         MOV     R1,#0x1
   \                     ??APSME_IsDefaultTCLK_1:
   \   000037   7F01         MOV     R7,#0x1
   \   000039   02....       LJMP    ?BANKED_LEAVE_XDATA
   4239          }
   4240          
   4241          /******************************************************************************
   4242           * @fn          ZDSecMgrNwkKeyInit
   4243           *
   4244           * @brief       Initialize the NV items for
   4245           *                  ZCD_NV_NWKKEY,
   4246           *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
   4247           *                  ZCD_NV_NWK_ALTERN_KEY_INFO
   4248           *
   4249           * @param       setDefault
   4250           *
   4251           * @return      none
   4252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4253          void ZDSecMgrNwkKeyInit(uint8 setDefault)
   \                     ZDSecMgrNwkKeyInit:
   4254          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   4255            uint8 status;
   4256            nwkKeyDesc nwkKey;
   4257          
   4258            // Initialize NV items for NWK key, this structure contains the frame counter
   4259            // and is only used when NV_RESTORE is enabled
   4260            nwkActiveKeyItems keyItems;
   4261          
   4262            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C15         MOV     R4,#0x15
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   7900         MOV     R1,#0x0
   \   000012   7411         MOV     A,#0x11
   \   000014   12....       LCALL   ?XSTACK_DISP101_8
   \   000017   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   4263          
   4264            status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
   \   00001A                ; Setup parameters for call to function osal_nv_item_init
   \   00001A   7411         MOV     A,#0x11
   \   00001C   12....       LCALL   ?XSTACK_DISP100_8
   \   00001F   88..         MOV     ?V0,R0
   \   000021   89..         MOV     ?V1,R1
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C15         MOV     R4,#0x15
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A82         MOV     R2,#-0x7e
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   FE           MOV     R6,A
   4265          
   4266          #if defined ( NV_RESTORE )
   4267            // reset the values of NV items if NV_RESTORE is not enabled
   4268            if ((status == SUCCESS) && (setDefault == TRUE))
   4269            {
   4270              // clear NV data to default values
   4271              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   4272            }
   4273          #else
   4274            (void)setDefault;   // to eliminate compiler warning
   4275          
   4276            // reset the values of NV items if NV_RESTORE is not enabled
   4277            if (status == SUCCESS)
   \   00003A   EE           MOV     A,R6
   \   00003B   702A         JNZ     ??ZDSecMgrNwkKeyInit_0
   4278            {
   4279              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   \   00003D                ; Setup parameters for call to function osal_nv_write
   \   00003D   7411         MOV     A,#0x11
   \   00003F   12....       LCALL   ?XSTACK_DISP100_8
   \   000042   88..         MOV     ?V0,R0
   \   000044   89..         MOV     ?V1,R1
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   75..15       MOV     ?V0,#0x15
   \   00004E   75..00       MOV     ?V1,#0x0
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   7C00         MOV     R4,#0x0
   \   000058   7D00         MOV     R5,#0x0
   \   00005A   7A82         MOV     R2,#-0x7e
   \   00005C   7B00         MOV     R3,#0x0
   \   00005E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
   \   000066   E9           MOV     A,R1
   4280            }
   4281          #endif // defined (NV_RESTORE)
   4282          
   4283            // Initialize NV items for NWK Active and Alternate keys. These items are used
   4284            // all the time, independently of NV_RESTORE being set or not
   4285            osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
   \                     ??ZDSecMgrNwkKeyInit_0:
   \   000067                ; Setup parameters for call to function osal_memset
   \   000067   7C11         MOV     R4,#0x11
   \   000069   7D00         MOV     R5,#0x0
   \   00006B   7900         MOV     R1,#0x0
   \   00006D   AA..         MOV     R2,?XSP + 0
   \   00006F   AB..         MOV     R3,?XSP + 1
   \   000071   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   4286          
   4287            status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
   \   000074                ; Setup parameters for call to function osal_nv_item_init
   \   000074   A8..         MOV     R0,?XSP + 0
   \   000076   A9..         MOV     R1,?XSP + 1
   \   000078   88..         MOV     ?V0,R0
   \   00007A   89..         MOV     ?V1,R1
   \   00007C   78..         MOV     R0,#?V0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   7C11         MOV     R4,#0x11
   \   000083   7D00         MOV     R5,#0x0
   \   000085   7A3A         MOV     R2,#0x3a
   \   000087   7B00         MOV     R3,#0x0
   \   000089   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00008C   7402         MOV     A,#0x2
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   FE           MOV     R6,A
   4288          
   4289          #if defined ( NV_RESTORE )
   4290            // reset the values of NV items if NV_RESTORE is not enabled
   4291            if ((status == SUCCESS) && (setDefault == TRUE))
   4292            {
   4293              // clear NV data to default values
   4294              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   4295            }
   4296          #else
   4297            // reset the values of NV items if NV_RESTORE is not enabled
   4298            if (status == SUCCESS)
   \   000093   EE           MOV     A,R6
   \   000094   7029         JNZ     ??ZDSecMgrNwkKeyInit_1
   4299            {
   4300              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   000096                ; Setup parameters for call to function osal_nv_write
   \   000096   A8..         MOV     R0,?XSP + 0
   \   000098   A9..         MOV     R1,?XSP + 1
   \   00009A   88..         MOV     ?V0,R0
   \   00009C   89..         MOV     ?V1,R1
   \   00009E   78..         MOV     R0,#?V0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   75..11       MOV     ?V0,#0x11
   \   0000A6   75..00       MOV     ?V1,#0x0
   \   0000A9   78..         MOV     R0,#?V0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   7C00         MOV     R4,#0x0
   \   0000B0   7D00         MOV     R5,#0x0
   \   0000B2   7A3A         MOV     R2,#0x3a
   \   0000B4   7B00         MOV     R3,#0x0
   \   0000B6   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B9   7404         MOV     A,#0x4
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BE   E9           MOV     A,R1
   4301            }
   4302          #endif // defined (NV_RESTORE)
   4303          
   4304            status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
   \                     ??ZDSecMgrNwkKeyInit_1:
   \   0000BF                ; Setup parameters for call to function osal_nv_item_init
   \   0000BF   A8..         MOV     R0,?XSP + 0
   \   0000C1   A9..         MOV     R1,?XSP + 1
   \   0000C3   88..         MOV     ?V0,R0
   \   0000C5   89..         MOV     ?V1,R1
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   7C11         MOV     R4,#0x11
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   7A3B         MOV     R2,#0x3b
   \   0000D2   7B00         MOV     R3,#0x0
   \   0000D4   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV     A,R1
   \   0000DD   FE           MOV     R6,A
   4305          
   4306          #if defined ( NV_RESTORE )
   4307            // reset the values of NV items if NV_RESTORE is not enabled
   4308            if ((status == SUCCESS) && (setDefault == TRUE))
   4309            {
   4310              // clear NV data to default values
   4311              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   4312            }
   4313          #else
   4314            // reset the values of NV items if NV_RESTORE is not enabled
   4315            if (status == SUCCESS)
   \   0000DE   EE           MOV     A,R6
   \   0000DF   7029         JNZ     ??ZDSecMgrNwkKeyInit_2
   4316            {
   4317              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   0000E1                ; Setup parameters for call to function osal_nv_write
   \   0000E1   A8..         MOV     R0,?XSP + 0
   \   0000E3   A9..         MOV     R1,?XSP + 1
   \   0000E5   88..         MOV     ?V0,R0
   \   0000E7   89..         MOV     ?V1,R1
   \   0000E9   78..         MOV     R0,#?V0
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   75..11       MOV     ?V0,#0x11
   \   0000F1   75..00       MOV     ?V1,#0x0
   \   0000F4   78..         MOV     R0,#?V0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   7C00         MOV     R4,#0x0
   \   0000FB   7D00         MOV     R5,#0x0
   \   0000FD   7A3B         MOV     R2,#0x3b
   \   0000FF   7B00         MOV     R3,#0x0
   \   000101   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000104   7404         MOV     A,#0x4
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
   \   000109   E9           MOV     A,R1
   4318            }
   4319          #endif // defined (NV_RESTORE)
   4320          
   4321          }
   \                     ??ZDSecMgrNwkKeyInit_2:
   \   00010A   7426         MOV     A,#0x26
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010F   7F02         MOV     R7,#0x2
   \   000111   02....       LJMP    ?BANKED_LEAVE_XDATA
   4322          
   4323          /*********************************************************************
   4324           * @fn          ZDSecMgrReadKeyFromNv
   4325           *
   4326           * @brief       Looks for a specific key in NV based on Index value
   4327           *
   4328           * @param   keyNvId - Index of key to look in NV
   4329           *                    valid values are:
   4330           *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
   4331           *                    ZCD_NV_NWK_ALTERN_KEY_INFO
   4332           *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   4333           *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   4334           *                    ZCD_NV_MASTER_KEY_DATA_START + <offset_in_table>
   4335           *                    ZCD_NV_PRECFGKEY
   4336           *
   4337           * @param  *keyinfo - Data is read into this buffer.
   4338           *
   4339           * @return  SUCCESS if NV data was copied to the keyinfo parameter .
   4340           *          Otherwise, NV_OPER_FAILED for failure.
   4341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4342          ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
   \                     ZDSecMgrReadKeyFromNv:
   4343          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   4344            if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
   4345                (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
   \   00000D   743A         MOV     A,#0x3a
   \   00000F   6E           XRL     A,R6
   \   000010   7003         JNZ     ??ZDSecMgrReadKeyFromNv_0
   \   000012   7400         MOV     A,#0x0
   \   000014   6F           XRL     A,R7
   \                     ??ZDSecMgrReadKeyFromNv_0:
   \   000015   600A         JZ      ??ZDSecMgrReadKeyFromNv_1
   \   000017   743B         MOV     A,#0x3b
   \   000019   6E           XRL     A,R6
   \   00001A   7003         JNZ     ??ZDSecMgrReadKeyFromNv_2
   \   00001C   7400         MOV     A,#0x0
   \   00001E   6F           XRL     A,R7
   \                     ??ZDSecMgrReadKeyFromNv_2:
   \   00001F   7023         JNZ     ??ZDSecMgrReadKeyFromNv_3
   4346            {
   4347              // get NWK active or alternate key from NV
   4348              return (osal_nv_read(keyNvId,
   4349                                   osal_offsetof(nwkKeyDesc, key),
   4350                                   SEC_KEY_LEN,
   4351                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_1:
   \   000021                ; Setup parameters for call to function osal_nv_read
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75..10       MOV     ?V2,#0x10
   \   000029   75..00       MOV     ?V3,#0x0
   \   00002C   78..         MOV     R0,#?V2
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C01         MOV     R4,#0x1
   \   000033   7D00         MOV     R5,#0x0
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   EF           MOV     A,R7
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   02....       LJMP    ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
   4352            }
   4353            else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
   4354                     (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_3:
   \   000044   C3           CLR     C
   \   000045   EE           MOV     A,R6
   \   000046   9401         SUBB    A,#0x1
   \   000048   EF           MOV     A,R7
   \   000049   9401         SUBB    A,#0x1
   \   00004B   402C         JC      ??ZDSecMgrReadKeyFromNv_5
   \   00004D   C3           CLR     C
   \   00004E   EE           MOV     A,R6
   \   00004F   9402         SUBB    A,#0x2
   \   000051   EF           MOV     A,R7
   \   000052   9401         SUBB    A,#0x1
   \   000054   5023         JNC     ??ZDSecMgrReadKeyFromNv_5
   4355            {
   4356              // Read entry keyNvId of the TC link key table from NV. keyNvId should be
   4357              // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   4358              return (osal_nv_read(keyNvId,
   4359                                   osal_offsetof(APSME_TCLinkKey_t, key),
   4360                                   SEC_KEY_LEN,
   4361                                   keyinfo));
   \   000056                ; Setup parameters for call to function osal_nv_read
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   75..10       MOV     ?V2,#0x10
   \   00005E   75..00       MOV     ?V3,#0x0
   \   000061   78..         MOV     R0,#?V2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   7C08         MOV     R4,#0x8
   \   000068   7D00         MOV     R5,#0x0
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000071   7404         MOV     A,#0x4
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   02....       LJMP    ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
   4362            }
   4363            else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
   4364                     (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_5:
   \   000079   C3           CLR     C
   \   00007A   EE           MOV     A,R6
   \   00007B   9401         SUBB    A,#0x1
   \   00007D   EF           MOV     A,R7
   \   00007E   9402         SUBB    A,#0x2
   \   000080   402B         JC      ??ZDSecMgrReadKeyFromNv_6
   \   000082   C3           CLR     C
   \   000083   EE           MOV     A,R6
   \   000084   9404         SUBB    A,#0x4
   \   000086   EF           MOV     A,R7
   \   000087   9402         SUBB    A,#0x2
   \   000089   5022         JNC     ??ZDSecMgrReadKeyFromNv_6
   4365            {
   4366              // Read entry keyNvId of the APS link key table from NV. keyNvId should be
   4367              // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   4368              return (osal_nv_read(keyNvId,
   4369                                   osal_offsetof(APSME_LinkKeyData_t, key),
   4370                                   SEC_KEY_LEN,
   4371                                   keyinfo));
   \   00008B                ; Setup parameters for call to function osal_nv_read
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   75..10       MOV     ?V2,#0x10
   \   000093   75..00       MOV     ?V3,#0x0
   \   000096   78..         MOV     R0,#?V2
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   7C00         MOV     R4,#0x0
   \   00009D   7D00         MOV     R5,#0x0
   \   00009F   EE           MOV     A,R6
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A6   7404         MOV     A,#0x4
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   8062         SJMP    ??ZDSecMgrReadKeyFromNv_4
   4372            }
   4373            else if ((keyNvId >= ZCD_NV_MASTER_KEY_DATA_START) &&
   4374                     (keyNvId < (ZCD_NV_MASTER_KEY_DATA_START + ZDSECMGR_MASTERKEY_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_6:
   \   0000AD   C3           CLR     C
   \   0000AE   EE           MOV     A,R6
   \   0000AF   9401         SUBB    A,#0x1
   \   0000B1   EF           MOV     A,R7
   \   0000B2   9403         SUBB    A,#0x3
   \   0000B4   402B         JC      ??ZDSecMgrReadKeyFromNv_7
   \   0000B6   C3           CLR     C
   \   0000B7   EE           MOV     A,R6
   \   0000B8   9404         SUBB    A,#0x4
   \   0000BA   EF           MOV     A,R7
   \   0000BB   9403         SUBB    A,#0x3
   \   0000BD   5022         JNC     ??ZDSecMgrReadKeyFromNv_7
   4375            {
   4376              // Read entry keyNvId of the MASTER key table from NV. keyNvId should be
   4377              // ZCD_NV_MASTER_KEY_DATA_START + <offset_in_table>
   4378              return (osal_nv_read(keyNvId,
   4379                                   osal_offsetof(ZDSecMgrMasterKeyData_t, key),
   4380                                   SEC_KEY_LEN,
   4381                                   keyinfo));
   \   0000BF                ; Setup parameters for call to function osal_nv_read
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   75..10       MOV     ?V2,#0x10
   \   0000C7   75..00       MOV     ?V3,#0x0
   \   0000CA   78..         MOV     R0,#?V2
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   7C02         MOV     R4,#0x2
   \   0000D1   7D00         MOV     R5,#0x0
   \   0000D3   EE           MOV     A,R6
   \   0000D4   FA           MOV     R2,A
   \   0000D5   EF           MOV     A,R7
   \   0000D6   FB           MOV     R3,A
   \   0000D7   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000DA   7404         MOV     A,#0x4
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DF   802E         SJMP    ??ZDSecMgrReadKeyFromNv_4
   4382            }
   4383            else if (keyNvId == ZCD_NV_PRECFGKEY)
   \                     ??ZDSecMgrReadKeyFromNv_7:
   \   0000E1   7462         MOV     A,#0x62
   \   0000E3   6E           XRL     A,R6
   \   0000E4   7003         JNZ     ??ZDSecMgrReadKeyFromNv_8
   \   0000E6   7400         MOV     A,#0x0
   \   0000E8   6F           XRL     A,R7
   \                     ??ZDSecMgrReadKeyFromNv_8:
   \   0000E9   7022         JNZ     ??ZDSecMgrReadKeyFromNv_9
   4384            {
   4385              // Read entry keyNvId of the Preconfig key from NV.
   4386              return (osal_nv_read(keyNvId,
   4387                                   0,
   4388                                   SEC_KEY_LEN,
   4389                                   keyinfo));
   \   0000EB                ; Setup parameters for call to function osal_nv_read
   \   0000EB   78..         MOV     R0,#?V0
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F0   75..10       MOV     ?V2,#0x10
   \   0000F3   75..00       MOV     ?V3,#0x0
   \   0000F6   78..         MOV     R0,#?V2
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   7C00         MOV     R4,#0x0
   \   0000FD   7D00         MOV     R5,#0x0
   \   0000FF   EE           MOV     A,R6
   \   000100   FA           MOV     R2,A
   \   000101   EF           MOV     A,R7
   \   000102   FB           MOV     R3,A
   \   000103   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000106   7404         MOV     A,#0x4
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010B   8002         SJMP    ??ZDSecMgrReadKeyFromNv_4
   4390            }
   4391          
   4392            return NV_OPER_FAILED;
   \                     ??ZDSecMgrReadKeyFromNv_9:
   \   00010D   790A         MOV     R1,#0xa
   \                     ??ZDSecMgrReadKeyFromNv_4:
   \   00010F   7F04         MOV     R7,#0x4
   \   000111   02....       LJMP    ?BANKED_LEAVE_XDATA
   4393          }
   4394          
   4395          /******************************************************************************
   4396           * @fn          ZDSecMgrApsLinkKeyInit
   4397           *
   4398           * @brief       Initialize the NV table for Application link keys
   4399           *
   4400           * @param       none
   4401           *
   4402           * @return      none
   4403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4404          void ZDSecMgrApsLinkKeyInit(void)
   \                     ZDSecMgrApsLinkKeyInit:
   4405          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   4406            APSME_LinkKeyData_t pApsLinkKey;
   4407            uint8 i;
   4408            uint8 status;
   4409          
   4410            // Initialize all NV items for APS link key, if not exist already.
   4411            osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C18         MOV     R4,#0x18
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   4412          
   4413            for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000017   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrApsLinkKeyInit_0:
   \   000019   EF           MOV     A,R7
   \   00001A   C3           CLR     C
   \   00001B   9403         SUBB    A,#0x3
   \   00001D   505E         JNC     ??ZDSecMgrApsLinkKeyInit_1
   4414            {
   4415              status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
   4416                                         sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   00001F                ; Setup parameters for call to function osal_nv_item_init
   \   00001F   A8..         MOV     R0,?XSP + 0
   \   000021   A9..         MOV     R1,?XSP + 1
   \   000023   88..         MOV     ?V0,R0
   \   000025   89..         MOV     ?V1,R1
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7C18         MOV     R4,#0x18
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   EF           MOV     A,R7
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E8           MOV     A,R0
   \   000035   2401         ADD     A,#0x1
   \   000037   FA           MOV     R2,A
   \   000038   E9           MOV     A,R1
   \   000039   3402         ADDC    A,#0x2
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   E9           MOV     A,R1
   \   000045   FE           MOV     R6,A
   4417          
   4418          #if defined ( NV_RESTORE )
   4419              (void)status;   // to eliminate compiler warning
   4420          #else
   4421              // reset the values of NV items if NV_RESTORE is not enabled
   4422              if (status == SUCCESS)
   \   000046   EE           MOV     A,R6
   \   000047   7031         JNZ     ??ZDSecMgrApsLinkKeyInit_2
   4423              {
   4424                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   4425                              sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   000049                ; Setup parameters for call to function osal_nv_write
   \   000049   A8..         MOV     R0,?XSP + 0
   \   00004B   A9..         MOV     R1,?XSP + 1
   \   00004D   88..         MOV     ?V0,R0
   \   00004F   89..         MOV     ?V1,R1
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   75..18       MOV     ?V0,#0x18
   \   000059   75..00       MOV     ?V1,#0x0
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C00         MOV     R4,#0x0
   \   000063   7D00         MOV     R5,#0x0
   \   000065   EF           MOV     A,R7
   \   000066   F8           MOV     R0,A
   \   000067   7900         MOV     R1,#0x0
   \   000069   E8           MOV     A,R0
   \   00006A   2401         ADD     A,#0x1
   \   00006C   FA           MOV     R2,A
   \   00006D   E9           MOV     A,R1
   \   00006E   3402         ADDC    A,#0x2
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   4426          
   4427              }
   4428          #endif // defined (NV_RESTORE)
   4429            }
   \                     ??ZDSecMgrApsLinkKeyInit_2:
   \   00007A   0F           INC     R7
   \   00007B   809C         SJMP    ??ZDSecMgrApsLinkKeyInit_0
   4430          }
   \                     ??ZDSecMgrApsLinkKeyInit_1:
   \   00007D   7418         MOV     A,#0x18
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7F02         MOV     R7,#0x2
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   4431          
   4432          /******************************************************************************
   4433           * @fn          ZDSecMgrInitNVKeyTables
   4434           *
   4435           * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
   4436           *
   4437           * @param       setDefault - TRUE to set default values
   4438           *
   4439           * @return      none
   4440           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4441          void ZDSecMgrInitNVKeyTables(uint8 setDefault)
   \                     ZDSecMgrInitNVKeyTables:
   4442          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   4443            ZDSecMgrNwkKeyInit(setDefault);
   \   000007                ; Setup parameters for call to function ZDSecMgrNwkKeyInit
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
   4444            ZDSecMgrMasterKeyInit();
   \   00000C                ; Setup parameters for call to function ZDSecMgrMasterKeyInit
   \   00000C   12....       LCALL   `??ZDSecMgrMasterKeyInit::?relay`; Banked call to: ZDSecMgrMasterKeyInit
   4445            ZDSecMgrApsLinkKeyInit();
   \   00000F                ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
   \   00000F   12....       LCALL   `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
   4446            APSME_TCLinkKeyInit(setDefault);
   \   000012                ; Setup parameters for call to function APSME_TCLinkKeyInit
   \   000012   EE           MOV     A,R6
   \   000013   F9           MOV     R1,A
   \   000014   12....       LCALL   `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
   4447          }
   \   000017   7F01         MOV     R7,#0x1
   \   000019   02....       LJMP    ?BANKED_LEAVE_XDATA
   4448          
   4449          /******************************************************************************
   4450           * @fn          ZDSecMgrSaveApsLinkKey
   4451           *
   4452           * @brief       Save APS Link Key to NV. It will loop through all the keys
   4453           *              to see which one to save.
   4454           *
   4455           * @param       none
   4456           *
   4457           * @return      none
   4458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4459          void ZDSecMgrSaveApsLinkKey(void)
   \                     ZDSecMgrSaveApsLinkKey:
   4460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4461            APSME_LinkKeyData_t *pKeyData = NULL;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   4462            int i;
   4463          
   4464            pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A18         MOV     R2,#0x18
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   85....       MOV     ?V0,?V2
   \   000019   85....       MOV     ?V1,?V3
   4465          
   4466            if (pKeyData != NULL)
   \   00001C   E5..         MOV     A,?V0
   \   00001E   45..         ORL     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
   4467            {
   4468              // checks all pending flags to know which one to save
   4469              for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
   \   000025   7E00         MOV     R6,#0x0
   \   000027   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrSaveApsLinkKey_1:
   \   000029   C3           CLR     C
   \   00002A   EE           MOV     A,R6
   \   00002B   9403         SUBB    A,#0x3
   \   00002D   EF           MOV     A,R7
   \   00002E   9400         SUBB    A,#0x0
   \   000030   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000032   65D0         XRL     A,PSW
   \   000034   33           RLC     A
   \   000035   4003         JC      $+5
   \   000037   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
   4470              {
   4471                if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \   00003A   EE           MOV     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   EF           MOV     A,R7
   \   00003D   F9           MOV     R1,A
   \   00003E   E8           MOV     A,R0
   \   00003F   75F009       MOV     B,#0x9
   \   000042   A4           MUL     AB
   \   000043   C8           XCH     A,R0
   \   000044   AAF0         MOV     R2,B
   \   000046   75F000       MOV     B,#0x0
   \   000049   A4           MUL     AB
   \   00004A   2A           ADD     A,R2
   \   00004B   FA           MOV     R2,A
   \   00004C   75F009       MOV     B,#0x9
   \   00004F   E9           MOV     A,R1
   \   000050   A4           MUL     AB
   \   000051   2A           ADD     A,R2
   \   000052   F9           MOV     R1,A
   \   000053   74..         MOV     A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000055   28           ADD     A,R0
   \   000056   F582         MOV     DPL,A
   \   000058   74..         MOV     A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00005A   39           ADDC    A,R1
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6401         XRL     A,#0x1
   \   000060   6003         JZ      $+5
   \   000062   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_3 & 0xFFFF
   4472                {
   4473                  // retrieve key from NV
   4474                  if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   4475                                   sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
   \   000065                ; Setup parameters for call to function osal_nv_read
   \   000065   78..         MOV     R0,#?V0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   75..18       MOV     ?V2,#0x18
   \   00006D   75..00       MOV     ?V3,#0x0
   \   000070   78..         MOV     R0,#?V2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   7C00         MOV     R4,#0x0
   \   000077   7D00         MOV     R5,#0x0
   \   000079   EE           MOV     A,R6
   \   00007A   2401         ADD     A,#0x1
   \   00007C   FA           MOV     R2,A
   \   00007D   EF           MOV     A,R7
   \   00007E   3402         ADDC    A,#0x2
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   E9           MOV     A,R1
   \   00008A   6003         JZ      $+5
   \   00008C   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_3 & 0xFFFF
   4476                  {
   4477                    pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
   \   00008F   EE           MOV     A,R6
   \   000090   F8           MOV     R0,A
   \   000091   EF           MOV     A,R7
   \   000092   F9           MOV     R1,A
   \   000093   E8           MOV     A,R0
   \   000094   75F009       MOV     B,#0x9
   \   000097   A4           MUL     AB
   \   000098   C8           XCH     A,R0
   \   000099   AAF0         MOV     R2,B
   \   00009B   75F000       MOV     B,#0x0
   \   00009E   A4           MUL     AB
   \   00009F   2A           ADD     A,R2
   \   0000A0   FA           MOV     R2,A
   \   0000A1   75F009       MOV     B,#0x9
   \   0000A4   E9           MOV     A,R1
   \   0000A5   A4           MUL     AB
   \   0000A6   2A           ADD     A,R2
   \   0000A7   F9           MOV     R1,A
   \   0000A8   74..         MOV     A,#ApsLinkKeyFrmCntr & 0xff
   \   0000AA   28           ADD     A,R0
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   74..         MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   0000AF   39           ADDC    A,R1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   12....       LCALL   ?XLOAD_R0123
   \   0000B5   E5..         MOV     A,?V0
   \   0000B7   2410         ADD     A,#0x10
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   E4           CLR     A
   \   0000BC   35..         ADDC    A,?V1
   \   0000BE   F583         MOV     DPH,A
   \   0000C0   12....       LCALL   ?XSTORE_R0123
   4478                    pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F8           MOV     R0,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   F9           MOV     R1,A
   \   0000C7   E8           MOV     A,R0
   \   0000C8   75F009       MOV     B,#0x9
   \   0000CB   A4           MUL     AB
   \   0000CC   C8           XCH     A,R0
   \   0000CD   AAF0         MOV     R2,B
   \   0000CF   75F000       MOV     B,#0x0
   \   0000D2   A4           MUL     AB
   \   0000D3   2A           ADD     A,R2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   75F009       MOV     B,#0x9
   \   0000D8   E9           MOV     A,R1
   \   0000D9   A4           MUL     AB
   \   0000DA   2A           ADD     A,R2
   \   0000DB   F9           MOV     R1,A
   \   0000DC   74..         MOV     A,#(ApsLinkKeyFrmCntr + 4) & 0xff
   \   0000DE   28           ADD     A,R0
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   74..         MOV     A,#((ApsLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000E3   39           ADDC    A,R1
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   12....       LCALL   ?XLOAD_R0123
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   2414         ADD     A,#0x14
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V1
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   12....       LCALL   ?XSTORE_R0123
   4479          
   4480                    // Write the APS link key back to the NV
   4481                    osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   4482                                  sizeof(APSME_LinkKeyData_t), pKeyData);
   \   0000F7                ; Setup parameters for call to function osal_nv_write
   \   0000F7   78..         MOV     R0,#?V0
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FC   75..18       MOV     ?V2,#0x18
   \   0000FF   75..00       MOV     ?V3,#0x0
   \   000102   78..         MOV     R0,#?V2
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   7C00         MOV     R4,#0x0
   \   000109   7D00         MOV     R5,#0x0
   \   00010B   EE           MOV     A,R6
   \   00010C   2401         ADD     A,#0x1
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   3402         ADDC    A,#0x2
   \   000112   FB           MOV     R3,A
   \   000113   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000116   7404         MOV     A,#0x4
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011B   E9           MOV     A,R1
   4483          
   4484                    // clear the pending write flag
   4485                    ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   00011C   EE           MOV     A,R6
   \   00011D   F8           MOV     R0,A
   \   00011E   EF           MOV     A,R7
   \   00011F   F9           MOV     R1,A
   \   000120   E8           MOV     A,R0
   \   000121   75F009       MOV     B,#0x9
   \   000124   A4           MUL     AB
   \   000125   C8           XCH     A,R0
   \   000126   AAF0         MOV     R2,B
   \   000128   75F000       MOV     B,#0x0
   \   00012B   A4           MUL     AB
   \   00012C   2A           ADD     A,R2
   \   00012D   FA           MOV     R2,A
   \   00012E   75F009       MOV     B,#0x9
   \   000131   E9           MOV     A,R1
   \   000132   A4           MUL     AB
   \   000133   2A           ADD     A,R2
   \   000134   F9           MOV     R1,A
   \   000135   74..         MOV     A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000137   28           ADD     A,R0
   \   000138   F582         MOV     DPL,A
   \   00013A   74..         MOV     A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00013C   39           ADDC    A,R1
   \   00013D   F583         MOV     DPH,A
   \   00013F   7400         MOV     A,#0x0
   \   000141   F0           MOVX    @DPTR,A
   4486                  }
   4487                }
   4488              }
   \                     ??ZDSecMgrSaveApsLinkKey_3:
   \   000142   0E           INC     R6
   \   000143   EE           MOV     A,R6
   \   000144   7001         JNZ     ??ZDSecMgrSaveApsLinkKey_4
   \   000146   0F           INC     R7
   \                     ??ZDSecMgrSaveApsLinkKey_4:
   \   000147   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
   4489          
   4490              // clear copy of key in RAM
   4491              osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
   \                     ??ZDSecMgrSaveApsLinkKey_2:
   \   00014A                ; Setup parameters for call to function osal_memset
   \   00014A   7C18         MOV     R4,#0x18
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   7900         MOV     R1,#0x0
   \   000150   AA..         MOV     R2,?V0
   \   000152   AB..         MOV     R3,?V1
   \   000154   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   4492          
   4493              osal_mem_free(pKeyData);
   \   000157                ; Setup parameters for call to function osal_mem_free
   \   000157   AA..         MOV     R2,?V0
   \   000159   AB..         MOV     R3,?V1
   \   00015B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4494            }
   4495          }
   \                     ??ZDSecMgrSaveApsLinkKey_0:
   \   00015E   7F04         MOV     R7,#0x4
   \   000160   02....       LJMP    ?BANKED_LEAVE_XDATA
   4496          
   4497          /******************************************************************************
   4498           * @fn          ZDSecMgrSaveTCLinkKey
   4499           *
   4500           * @brief       Save TC Link Key to NV. It will loop through all the keys
   4501           *              to see which one to save.
   4502           *
   4503           * @param       none
   4504           *
   4505           * @return      none
   4506           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4507          void ZDSecMgrSaveTCLinkKey(void)
   \                     ZDSecMgrSaveTCLinkKey:
   4508          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4509            APSME_TCLinkKey_t *pKeyData = NULL;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   4510            uint16 i;
   4511          
   4512            pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A20         MOV     R2,#0x20
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   85....       MOV     ?V0,?V2
   \   000019   85....       MOV     ?V1,?V3
   4513          
   4514            if (pKeyData != NULL)
   \   00001C   E5..         MOV     A,?V0
   \   00001E   45..         ORL     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
   4515            {
   4516              for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000025   7E00         MOV     R6,#0x0
   \   000027   7F00         MOV     R7,#0x0
   \                     ??ZDSecMgrSaveTCLinkKey_1:
   \   000029   EE           MOV     A,R6
   \   00002A   4F           ORL     A,R7
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_2 & 0xFFFF
   4517              {
   4518                if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \   000030   EE           MOV     A,R6
   \   000031   F8           MOV     R0,A
   \   000032   EF           MOV     A,R7
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   75F009       MOV     B,#0x9
   \   000038   A4           MUL     AB
   \   000039   C8           XCH     A,R0
   \   00003A   AAF0         MOV     R2,B
   \   00003C   75F000       MOV     B,#0x0
   \   00003F   A4           MUL     AB
   \   000040   2A           ADD     A,R2
   \   000041   FA           MOV     R2,A
   \   000042   75F009       MOV     B,#0x9
   \   000045   E9           MOV     A,R1
   \   000046   A4           MUL     AB
   \   000047   2A           ADD     A,R2
   \   000048   F9           MOV     R1,A
   \   000049   74..         MOV     A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   00004B   28           ADD     A,R0
   \   00004C   F582         MOV     DPL,A
   \   00004E   74..         MOV     A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   000050   39           ADDC    A,R1
   \   000051   F583         MOV     DPH,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6401         XRL     A,#0x1
   \   000056   6003         JZ      $+5
   \   000058   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_3 & 0xFFFF
   4519                {
   4520                  if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
   4521                                   sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
   \   00005B                ; Setup parameters for call to function osal_nv_read
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   75..20       MOV     ?V2,#0x20
   \   000063   75..00       MOV     ?V3,#0x0
   \   000066   78..         MOV     R0,#?V2
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   7C00         MOV     R4,#0x0
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   EE           MOV     A,R6
   \   000070   2401         ADD     A,#0x1
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   3401         ADDC    A,#0x1
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007A   7404         MOV     A,#0x4
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   E9           MOV     A,R1
   \   000080   6003         JZ      $+5
   \   000082   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_3 & 0xFFFF
   4522                  {
   4523                    pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   000085   EE           MOV     A,R6
   \   000086   F8           MOV     R0,A
   \   000087   EF           MOV     A,R7
   \   000088   F9           MOV     R1,A
   \   000089   E8           MOV     A,R0
   \   00008A   75F009       MOV     B,#0x9
   \   00008D   A4           MUL     AB
   \   00008E   C8           XCH     A,R0
   \   00008F   AAF0         MOV     R2,B
   \   000091   75F000       MOV     B,#0x0
   \   000094   A4           MUL     AB
   \   000095   2A           ADD     A,R2
   \   000096   FA           MOV     R2,A
   \   000097   75F009       MOV     B,#0x9
   \   00009A   E9           MOV     A,R1
   \   00009B   A4           MUL     AB
   \   00009C   2A           ADD     A,R2
   \   00009D   F9           MOV     R1,A
   \   00009E   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   0000A0   28           ADD     A,R0
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000A5   39           ADDC    A,R1
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   12....       LCALL   ?XLOAD_R0123
   \   0000AB   E5..         MOV     A,?V0
   \   0000AD   2418         ADD     A,#0x18
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   E4           CLR     A
   \   0000B2   35..         ADDC    A,?V1
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   12....       LCALL   ?XSTORE_R0123
   4524                    pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F8           MOV     R0,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   F9           MOV     R1,A
   \   0000BD   E8           MOV     A,R0
   \   0000BE   75F009       MOV     B,#0x9
   \   0000C1   A4           MUL     AB
   \   0000C2   C8           XCH     A,R0
   \   0000C3   AAF0         MOV     R2,B
   \   0000C5   75F000       MOV     B,#0x0
   \   0000C8   A4           MUL     AB
   \   0000C9   2A           ADD     A,R2
   \   0000CA   FA           MOV     R2,A
   \   0000CB   75F009       MOV     B,#0x9
   \   0000CE   E9           MOV     A,R1
   \   0000CF   A4           MUL     AB
   \   0000D0   2A           ADD     A,R2
   \   0000D1   F9           MOV     R1,A
   \   0000D2   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000D4   28           ADD     A,R0
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000D9   39           ADDC    A,R1
   \   0000DA   F583         MOV     DPH,A
   \   0000DC   12....       LCALL   ?XLOAD_R0123
   \   0000DF   E5..         MOV     A,?V0
   \   0000E1   241C         ADD     A,#0x1c
   \   0000E3   F582         MOV     DPL,A
   \   0000E5   E4           CLR     A
   \   0000E6   35..         ADDC    A,?V1
   \   0000E8   F583         MOV     DPH,A
   \   0000EA   12....       LCALL   ?XSTORE_R0123
   4525          
   4526                    // Write the TC link key back to the NV
   4527                    osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
   4528                                  sizeof(APSME_TCLinkKey_t), pKeyData);
   \   0000ED                ; Setup parameters for call to function osal_nv_write
   \   0000ED   78..         MOV     R0,#?V0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F2   75..20       MOV     ?V2,#0x20
   \   0000F5   75..00       MOV     ?V3,#0x0
   \   0000F8   78..         MOV     R0,#?V2
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   7C00         MOV     R4,#0x0
   \   0000FF   7D00         MOV     R5,#0x0
   \   000101   EE           MOV     A,R6
   \   000102   2401         ADD     A,#0x1
   \   000104   FA           MOV     R2,A
   \   000105   EF           MOV     A,R7
   \   000106   3401         ADDC    A,#0x1
   \   000108   FB           MOV     R3,A
   \   000109   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00010C   7404         MOV     A,#0x4
   \   00010E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000111   E9           MOV     A,R1
   4529          
   4530                    // clear the pending write flag
   4531                    TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   000112   EE           MOV     A,R6
   \   000113   F8           MOV     R0,A
   \   000114   EF           MOV     A,R7
   \   000115   F9           MOV     R1,A
   \   000116   E8           MOV     A,R0
   \   000117   75F009       MOV     B,#0x9
   \   00011A   A4           MUL     AB
   \   00011B   C8           XCH     A,R0
   \   00011C   AAF0         MOV     R2,B
   \   00011E   75F000       MOV     B,#0x0
   \   000121   A4           MUL     AB
   \   000122   2A           ADD     A,R2
   \   000123   FA           MOV     R2,A
   \   000124   75F009       MOV     B,#0x9
   \   000127   E9           MOV     A,R1
   \   000128   A4           MUL     AB
   \   000129   2A           ADD     A,R2
   \   00012A   F9           MOV     R1,A
   \   00012B   74..         MOV     A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   00012D   28           ADD     A,R0
   \   00012E   F582         MOV     DPL,A
   \   000130   74..         MOV     A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   000132   39           ADDC    A,R1
   \   000133   F583         MOV     DPH,A
   \   000135   7400         MOV     A,#0x0
   \   000137   F0           MOVX    @DPTR,A
   4532                  }
   4533                }
   4534              }
   \                     ??ZDSecMgrSaveTCLinkKey_3:
   \   000138   0E           INC     R6
   \   000139   EE           MOV     A,R6
   \   00013A   7001         JNZ     ??ZDSecMgrSaveTCLinkKey_4
   \   00013C   0F           INC     R7
   \                     ??ZDSecMgrSaveTCLinkKey_4:
   \   00013D   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_1 & 0xFFFF
   4535                // clear copy of key in RAM
   4536              osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??ZDSecMgrSaveTCLinkKey_2:
   \   000140                ; Setup parameters for call to function osal_memset
   \   000140   7C20         MOV     R4,#0x20
   \   000142   7D00         MOV     R5,#0x0
   \   000144   7900         MOV     R1,#0x0
   \   000146   AA..         MOV     R2,?V0
   \   000148   AB..         MOV     R3,?V1
   \   00014A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   4537          
   4538              osal_mem_free(pKeyData);
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   AA..         MOV     R2,?V0
   \   00014F   AB..         MOV     R3,?V1
   \   000151   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4539            }
   4540          }
   \                     ??ZDSecMgrSaveTCLinkKey_0:
   \   000154   7F04         MOV     R7,#0x4
   \   000156   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrMasterKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrMasterKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrMasterKeyLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrMasterKeyLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrMasterKeyStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrMasterKeyStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMI::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMI

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExtGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExtGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMIGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryFree::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryFree

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrCtrlRelease::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlRelease

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrCtrlLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrCtrlAdd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlAdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrCtrlTerm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlTerm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrMasterKeyLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrMasterKeyLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEstablishKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEstablishKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSendMasterKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSendMasterKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSendNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSendNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceEntryRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceEntryRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemoveByExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrMgrUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrMgrUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceEntryAdd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceEntryAdd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceCtrlHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceCtrlHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceCtrlSetup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceCtrlSetup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceCtrlUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceCtrlUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_SKA_TimerExpired::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_SKA_TimerExpired

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidateSKKE::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateSKKE

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidateRM::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateRM

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidateCM::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateCM

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinDirect::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinDirect

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinFwd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinFwd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAssocDeviceAuth::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAssocDeviceAuth

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthInitiate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthInitiate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoining::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoining

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNewDeviceEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNewDeviceEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEstablishKeyCfm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEstablishKeyCfm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCExtAddrCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCExtAddrCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCDataLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCDataLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEstablishKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEstablishKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTransportKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTransportKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRemoveDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRemoveDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSwitchKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticateInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticateInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticateCfm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticateCfm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestAppKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestAppKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetupPartner::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetupPartner

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_MasterKeyGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_MasterKeyGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeySet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeySet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeyNVIdGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeyNVIdGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsLinkKeyValid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsLinkKeyValid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_KeyFwdToChild::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_KeyFwdToChild

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAPSRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAPSRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeySync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeySync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsDefaultTCLK::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsDefaultTCLK

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNwkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNwkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrReadKeyFromNv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrReadKeyFromNv

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrApsLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrApsLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNVKeyTables::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNVKeyTables

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveApsLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveApsLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveTCLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveTCLinkKey
   4541          
   4542          #if defined ( ZBA_FALLBACK_NWKKEY )
   4543          /******************************************************************************
   4544           * @fn          ZDSecMgrFallbackNwkKey
   4545           *
   4546           * @brief       Use the ZBA fallback network key.
   4547           *
   4548           * @param       none
   4549           *
   4550           * @return      none
   4551           */
   4552          void ZDSecMgrFallbackNwkKey( void )
   4553          {
   4554            if ( !_NIB.nwkKeyLoaded )
   4555            {
   4556              uint8 fallbackKey[SEC_KEY_LEN];
   4557          
   4558              ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
   4559              SSP_UpdateNwkKey( fallbackKey, 0);
   4560              SSP_SwitchNwkKey( 0 );
   4561          
   4562              // clear local copy of key
   4563              osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
   4564          
   4565              // handle next step in authentication process
   4566              ZDSecMgrAuthNwkKey();
   4567            }
   4568          }
   4569          #endif // defined ( ZBA_FALLBACK_NWKKEY )
   4570          
   4571          #if defined ( NV_RESTORE )
   4572          /******************************************************************************
   4573           * @fn          ZDSecMgrClearNVKeyValues
   4574           *
   4575           * @brief       If NV_RESTORE is enabled and the status of the network needs
   4576           *              default values this fuction clears ZCD_NV_NWKKEY,
   4577           *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
   4578           *
   4579           * @param       none
   4580           *
   4581           * @return      none
   4582           */
   4583          void ZDSecMgrClearNVKeyValues(void)
   4584          {
   4585            nwkActiveKeyItems keyItems;
   4586            nwkKeyDesc nwkKey;
   4587          
   4588            osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
   4589          
   4590            osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
   4591          
   4592            // Initialize NV items for NWK Active and Alternate keys.
   4593            osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
   4594          
   4595            osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   4596          
   4597            osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   4598          }
   4599          #endif // defined ( NV_RESTORE )
   4600          
   4601          /******************************************************************************
   4602          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     74   APSME_IsDefaultTCLK
      0     38   APSME_IsLinkKeyValid
        0     34   -> APSME_LinkKeyNVIdGet
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcmp
        0     34   -> osal_memset
        0     38   -> osal_nv_read
      0      9   APSME_KeyFwdToChild
        0      9   -> AssocGetWithExt
        0      9   -> ZDSecMgrAssocDeviceAuth
      0     47   APSME_LinkKeyNVIdGet
        0     13   -> ZDSecMgrEntryLookupExt
      0     45   APSME_LinkKeySet
        0     25   -> ZDSecMgrEntryLookupExtGetIndex
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_memset
        0     27   -> osal_nv_read
        0     27   -> osal_nv_write
      0     13   APSME_MasterKeyGet
        0     13   -> ZDSecMgrExtAddrLookup
        0     13   -> ZDSecMgrMasterKeyLookup
      0      0   APSME_SKA_TimerExpired
      0     57   APSME_TCLinkKeyInit
        0     47   -> osal_memcpy
        0     44   -> osal_memset
        0     46   -> osal_nv_item_init
        0     48   -> osal_nv_read
        0     48   -> osal_nv_write
      0     69   APSME_TCLinkKeyLoad
        0     65   -> APSME_IsDefaultTCLK
        0     65   -> APSME_LookupExtAddr
        0     65   -> AddrMgrEntryLookupNwk
        0     65   -> AddrMgrEntryRelease
        0     65   -> AddrMgrExtAddrEqual
        0     65   -> AddrMgrExtAddrValid
        0     65   -> osal_memset
        0     69   -> osal_nv_read
      0     54   APSME_TCLinkKeySync
        0     50   -> APSME_IsDefaultTCLK
        0     50   -> APSME_LookupExtAddr
        0     50   -> AddrMgrExtAddrEqual
        0     50   -> AddrMgrExtAddrValid
        0     50   -> osal_memset
        0     54   -> osal_nv_read
      0     24   ZDSecMgrAPSRemove
        0     22   -> ZDSecMgrDeviceRemove
      0     22   ZDSecMgrAddLinkKey
        0     18   -> APSME_LinkKeySet
        0     20   -> ZDSecMgrAddrStore
        0     18   -> ZDSecMgrEntryLookupAMI
        0     18   -> ZDSecMgrEntryNew
      0     24   ZDSecMgrAddrClear
        0     24   -> AddrMgrEntryRelease
        0     24   -> ZDSecMgrExtAddrLookup
      0     37   ZDSecMgrAddrMgrUpdate
        0     23   -> AddrMgrEntryGet
        0     23   -> AddrMgrEntryUpdate
      0     73   ZDSecMgrAddrStore
        0     27   -> AddrMgrEntryUpdate
        0     27   -> AddrMgrExtAddrSet
      1     71   ZDSecMgrAppKeyGet
        0     14   -> SSP_GetTrueRand
      0     66   ZDSecMgrAppKeyReq
        0     49   -> APSME_LookupExtAddr
        0     49   -> APSME_LookupNwkAddr
        0     49   -> APSME_TransportKeyReq
        0     57   -> ZDSecMgrAppKeyGet
        0     49   -> osal_memset
      0     47   ZDSecMgrApsLinkKeyInit
        0     34   -> osal_memset
        0     36   -> osal_nv_item_init
        0     38   -> osal_nv_write
      2     35   ZDSecMgrAssocDeviceAuth
      0     16   ZDSecMgrAuthInitiate
        0     16   -> APSME_AuthenticateReq
        0     16   -> APSME_LookupNwkAddr
      2     25   ZDSecMgrAuthNwkKey
        2      0   -> osal_set_event
      0      9   ZDSecMgrAuthenticateCfm
        0      9   -> osal_set_event
      0     29   ZDSecMgrAuthenticateInd
        0     29   -> APSME_AuthenticateReq
        0     29   -> AddrMgrEntryUpdate
        0     29   -> AddrMgrExtAddrSet
      0      0   ZDSecMgrAuthenticationCheck
      1     12   ZDSecMgrAuthenticationSet
        0     12   -> ZDSecMgrEntryLookupExt
      2      9   ZDSecMgrConfig
        2      0   -> APSME_SecurityNM
      0     29   ZDSecMgrCtrlAdd
        0     16   -> ZDSecMgrCtrlSet
      0     10   ZDSecMgrCtrlInit
        0     10   -> osal_mem_alloc
      0     22   ZDSecMgrCtrlLookup
      2     11   ZDSecMgrCtrlRelease
      0     15   ZDSecMgrCtrlReset
        0     13   -> ZDSecMgrCtrlAdd
        0     13   -> ZDSecMgrCtrlLookup
        0     15   -> ZDSecMgrCtrlSet
      1     25   ZDSecMgrCtrlSet
      0     11   ZDSecMgrCtrlTerm
        0     11   -> ZDSecMgrCtrlLookup
        0     11   -> ZDSecMgrCtrlRelease
      1     43   ZDSecMgrDeviceCtrlHandler
        0     10   -> ZDSecMgrCtrlRelease
        0     10   -> ZDSecMgrEstablishKey
        0     10   -> ZDSecMgrSendMasterKey
        0     10   -> ZDSecMgrSendNwkKey
        0     10   -> osal_start_timerEx
      0      9   ZDSecMgrDeviceCtrlSetup
        0      9   -> ZDSecMgrDeviceCtrlHandler
      0     13   ZDSecMgrDeviceCtrlUpdate
        0     13   -> ZDSecMgrCtrlLookup
        0     13   -> ZDSecMgrEntryLookupExt
      0     46   ZDSecMgrDeviceEntryAdd
        0     14   -> ZDSecMgrAddrMgrUpdate
        0     14   -> ZDSecMgrDeviceEntryRemove
        0     14   -> ZDSecMgrEntryLookup
        0     14   -> ZDSecMgrEntryLookupAMI
        0     14   -> ZDSecMgrEntryNew
      0     23   ZDSecMgrDeviceEntryRemove
        0      9   -> ZDSecMgrEntryFree
      0     35   ZDSecMgrDeviceJoin
        0     16   -> ZDSecMgrAddrStore
        0     14   -> ZDSecMgrDeviceRemove
        0     14   -> ZDSecMgrDeviceValidate
        0     14   -> ZDSecMgrSendNwkKey
      0      9   ZDSecMgrDeviceJoinDirect
        0      9   -> AssocGetWithShort
        0      9   -> ZDSecMgrAssocDeviceAuth
        0      9   -> ZDSecMgrDeviceJoin
      0     26   ZDSecMgrDeviceJoinFwd
        0     17   -> APSME_UpdateDeviceReq
      0     44   ZDSecMgrDeviceNew
        0      9   -> ZDSecMgrDeviceJoinFwd
      0     43   ZDSecMgrDeviceRemove
        0     21   -> APSME_RemoveDeviceReq
        0     21   -> AssocGetWithExt
        0     21   -> NLME_GetShortAddr
        0     21   -> NLME_LeaveReq
      0     11   ZDSecMgrDeviceRemoveByExtAddr
        0     11   -> ZDSecMgrDeviceEntryRemove
        0     11   -> ZDSecMgrEntryLookupExt
      0     23   ZDSecMgrDeviceValidate
        0      9   -> ZDSecMgrDeviceValidateRM
      0     35   ZDSecMgrDeviceValidateCM
        0     34   -> ZDSecMgrAddrStore
        0     32   -> ZDSecMgrDeviceEntryAdd
        0     32   -> ZDSecMgrMasterKeyLoad
        0     35   -> osal_memcpy
        0     32   -> osal_memset
      2      9   ZDSecMgrDeviceValidateRM
      0     39   ZDSecMgrDeviceValidateSKKE
        0     13   -> ZDSecMgrDeviceEntryAdd
        0     13   -> ZDSecMgrExtAddrLookup
        0     13   -> ZDSecMgrMasterKeyLookup
      0     25   ZDSecMgrEntryFree
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_write
      0      9   ZDSecMgrEntryInit
        0      9   -> osal_mem_alloc
      0     39   ZDSecMgrEntryLookup
        0     25   -> AddrMgrEntryLookupNwk
      0     27   ZDSecMgrEntryLookupAMI
      0      9   ZDSecMgrEntryLookupAMIGetIndex
      0     26   ZDSecMgrEntryLookupExt
        0     13   -> ZDSecMgrEntryLookupAMI
        0     13   -> ZDSecMgrExtAddrLookup
      0     41   ZDSecMgrEntryLookupExtGetIndex
        0     16   -> ZDSecMgrExtAddrLookup
      0     27   ZDSecMgrEntryNew
      0     29   ZDSecMgrEstablishKey
        0     19   -> APSME_EstablishKeyReq
        0     19   -> NLME_GetShortAddr
      0      0   ZDSecMgrEstablishKeyCfm
      1     26   ZDSecMgrEstablishKeyInd
        0     26   -> APSME_EstablishKeyRsp
        0     26   -> ZDSecMgrDeviceValidateSKKE
        0     26   -> ZDSecMgrTCDataLoad
        0     26   -> ZDSecMgrTCExtAddrCheck
      1     33   ZDSecMgrEvent
        0     33   -> AddrMgrEntryGet
        0     33   -> ZDSecMgrDeviceCtrlHandler
        0     33   -> osal_start_timerEx
      0     48   ZDSecMgrExtAddrLookup
        0     24   -> AddrMgrEntryLookupExt
        0     24   -> AddrMgrExtAddrSet
      0     29   ZDSecMgrExtAddrStore
        0     27   -> AddrMgrEntryUpdate
        0     27   -> AddrMgrExtAddrSet
      0      9   ZDSecMgrInit
        0      9   -> ZDSecMgrConfig
      0      9   ZDSecMgrInitNVKeyTables
        0      9   -> APSME_TCLinkKeyInit
        0      9   -> ZDSecMgrApsLinkKeyInit
        0      9   -> ZDSecMgrMasterKeyInit
        0      9   -> ZDSecMgrNwkKeyInit
      0     41   ZDSecMgrMasterKeyInit
        0     28   -> osal_memset
        0     30   -> osal_nv_item_init
        0     32   -> osal_nv_write
      0     54   ZDSecMgrMasterKeyLoad
        0     18   -> ZDSecMgrExtAddrLookup
        0     18   -> ZDSecMgrMasterKeyLookup
        0     18   -> ZDSecMgrMasterKeyStore
        0     22   -> osal_nv_write
      0     80   ZDSecMgrMasterKeyLookup
        0     32   -> osal_memset
        0     36   -> osal_nv_read
      0     82   ZDSecMgrMasterKeyStore
        0     37   -> osal_memcpy
        0     34   -> osal_memset
        0     38   -> osal_nv_read
        0     38   -> osal_nv_write
      1     35   ZDSecMgrNewDeviceEvent
        0     35   -> AddrMgrEntryGet
        0     35   -> AssocMatchDeviceStatus
        0     35   -> AssocRemove
        0     35   -> NLME_GetShortAddr
        0     35   -> ZDSecMgrAssocDeviceAuth
        0     35   -> ZDSecMgrDeviceNew
      0     61   ZDSecMgrNwkKeyInit
        0     48   -> osal_memset
        0     50   -> osal_nv_item_init
        0     52   -> osal_nv_write
      2      0   ZDSecMgrPermitJoining
      2      0   ZDSecMgrPermitJoiningTimeout
      0     41   ZDSecMgrReadKeyFromNv
        0     16   -> osal_nv_read
      0     19   ZDSecMgrRemoveDeviceInd
        0     19   -> APSME_LookupNwkAddr
        0     19   -> NLME_GetShortAddr
        0     19   -> ZDSecMgrDeviceRemove
      0     13   ZDSecMgrRequestAppKey
        0     13   -> APSME_RequestKeyReq
      0      9   ZDSecMgrRequestKeyInd
        0      9   -> ZDSecMgrAppKeyReq
      0     16   ZDSecMgrSaveApsLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      0     16   ZDSecMgrSaveTCLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      0     57   ZDSecMgrSendMasterKey
        0     43   -> APSME_TransportKeyReq
        0     43   -> NLME_GetShortAddr
        0     43   -> ZDSecMgrMasterKeyLookup
        0     43   -> osal_memset
        0     47   -> osal_nv_read
      1     60   ZDSecMgrSendNwkKey
        0     42   -> APSME_TransportKeyReq
        0     42   -> NLME_GetShortAddr
        0     46   -> NLME_ReadNwkKeyInfo
        0     42   -> osal_memset
      0     23   ZDSecMgrSetDefaultNV
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     19   -> osal_memset
        0     23   -> osal_nv_write
      0     25   ZDSecMgrSetupPartner
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> AddrMgrExtAddrValid
        0     25   -> ZDP_IEEEAddrReq
        0     25   -> ZDP_NwkAddrReq
      0      9   ZDSecMgrSwitchKeyInd
        0      9   -> SSP_SwitchNwkKey
        0      9   -> ZDApp_NVUpdate
      0     73   ZDSecMgrTCDataLoad
        0     44   -> AddrMgrEntryLookupNwk
        0     46   -> ZDSecMgrAddrStore
        0     44   -> ZDSecMgrMasterKeyLookup
        0     44   -> ZDSecMgrMasterKeyStore
        0     47   -> osal_memcpy
        0     44   -> osal_memset
      0     43   ZDSecMgrTCExtAddrCheck
        0     17   -> AddrMgrExtAddrEqual
        0     17   -> AddrMgrExtAddrLookup
      0     25   ZDSecMgrTransportKeyInd
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrAuthNwkKey
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> ZDSecMgrTCDataLoad
        0     25   -> osal_memset
      0     19   ZDSecMgrUpdateDeviceInd
        0     19   -> ZDSecMgrDeviceJoin


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for ZDSecMgrAppKeyType>
      60  APSME_IsDefaultTCLK
       6  APSME_IsDefaultTCLK::?relay
     202  APSME_IsLinkKeyValid
       6  APSME_IsLinkKeyValid::?relay
      87  APSME_KeyFwdToChild
       6  APSME_KeyFwdToChild::?relay
      91  APSME_LinkKeyNVIdGet
       6  APSME_LinkKeyNVIdGet::?relay
     512  APSME_LinkKeySet
       6  APSME_LinkKeySet::?relay
      80  APSME_MasterKeyGet
       6  APSME_MasterKeyGet::?relay
       3  APSME_SKA_TimerExpired
       6  APSME_SKA_TimerExpired::?relay
     410  APSME_TCLinkKeyInit
       6  APSME_TCLinkKeyInit::?relay
     414  APSME_TCLinkKeyLoad
       6  APSME_TCLinkKeyLoad::?relay
     339  APSME_TCLinkKeySync
       6  APSME_TCLinkKeySync::?relay
      27  ApsLinkKeyFrmCntr
       9  TCLinkKeyFrmCntr
      32  TrustCenterLinkKey
     114  ZDSecMgrAPSRemove
       6  ZDSecMgrAPSRemove::?relay
     169  ZDSecMgrAddLinkKey
       6  ZDSecMgrAddLinkKey::?relay
      89  ZDSecMgrAddrClear
       6  ZDSecMgrAddrClear::?relay
      89  ZDSecMgrAddrMgrUpdate
       6  ZDSecMgrAddrMgrUpdate::?relay
     135  ZDSecMgrAddrStore
       6  ZDSecMgrAddrStore::?relay
      71  ZDSecMgrAppKeyGet
       6  ZDSecMgrAppKeyGet::?relay
     322  ZDSecMgrAppKeyReq
       6  ZDSecMgrAppKeyReq::?relay
       1  ZDSecMgrAppKeyType
     135  ZDSecMgrApsLinkKeyInit
       6  ZDSecMgrApsLinkKeyInit::?relay
      28  ZDSecMgrAssocDeviceAuth
       6  ZDSecMgrAssocDeviceAuth::?relay
      76  ZDSecMgrAuthInitiate
       6  ZDSecMgrAuthInitiate::?relay
      32  ZDSecMgrAuthNwkKey
       6  ZDSecMgrAuthNwkKey::?relay
      58  ZDSecMgrAuthenticateCfm
       6  ZDSecMgrAuthenticateCfm::?relay
     157  ZDSecMgrAuthenticateInd
       6  ZDSecMgrAuthenticateInd::?relay
       5  ZDSecMgrAuthenticationCheck
       6  ZDSecMgrAuthenticationCheck::?relay
      71  ZDSecMgrAuthenticationSet
       6  ZDSecMgrAuthenticationSet::?relay
      14  ZDSecMgrConfig
       6  ZDSecMgrConfig::?relay
     163  ZDSecMgrCtrlAdd
       6  ZDSecMgrCtrlAdd::?relay
       2  ZDSecMgrCtrlData
     114  ZDSecMgrCtrlInit
       6  ZDSecMgrCtrlInit::?relay
     223  ZDSecMgrCtrlLookup
       6  ZDSecMgrCtrlLookup::?relay
      23  ZDSecMgrCtrlRelease
       6  ZDSecMgrCtrlRelease::?relay
     103  ZDSecMgrCtrlReset
       6  ZDSecMgrCtrlReset::?relay
     119  ZDSecMgrCtrlSet
       6  ZDSecMgrCtrlSet::?relay
      64  ZDSecMgrCtrlTerm
       6  ZDSecMgrCtrlTerm::?relay
     219  ZDSecMgrDeviceCtrlHandler
       6  ZDSecMgrDeviceCtrlHandler::?relay
     113  ZDSecMgrDeviceCtrlSetup
       6  ZDSecMgrDeviceCtrlSetup::?relay
     220  ZDSecMgrDeviceCtrlUpdate
       6  ZDSecMgrDeviceCtrlUpdate::?relay
     248  ZDSecMgrDeviceEntryAdd
       6  ZDSecMgrDeviceEntryAdd::?relay
      21  ZDSecMgrDeviceEntryRemove
       6  ZDSecMgrDeviceEntryRemove::?relay
     101  ZDSecMgrDeviceJoin
       6  ZDSecMgrDeviceJoin::?relay
      45  ZDSecMgrDeviceJoinDirect
       6  ZDSecMgrDeviceJoinDirect::?relay
     236  ZDSecMgrDeviceJoinFwd
       6  ZDSecMgrDeviceJoinFwd::?relay
      26  ZDSecMgrDeviceNew
       6  ZDSecMgrDeviceNew::?relay
     249  ZDSecMgrDeviceRemove
       6  ZDSecMgrDeviceRemove::?relay
      58  ZDSecMgrDeviceRemoveByExtAddr
       6  ZDSecMgrDeviceRemoveByExtAddr::?relay
      75  ZDSecMgrDeviceValidate
       6  ZDSecMgrDeviceValidate::?relay
     165  ZDSecMgrDeviceValidateCM
       6  ZDSecMgrDeviceValidateCM::?relay
      21  ZDSecMgrDeviceValidateRM
       6  ZDSecMgrDeviceValidateRM::?relay
      98  ZDSecMgrDeviceValidateSKKE
       6  ZDSecMgrDeviceValidateSKKE::?relay
       2  ZDSecMgrEntries
     138  ZDSecMgrEntryFree
       6  ZDSecMgrEntryFree::?relay
     166  ZDSecMgrEntryInit
       6  ZDSecMgrEntryInit::?relay
     218  ZDSecMgrEntryLookup
       6  ZDSecMgrEntryLookup::?relay
     164  ZDSecMgrEntryLookupAMI
       6  ZDSecMgrEntryLookupAMI::?relay
     114  ZDSecMgrEntryLookupAMIGetIndex
       6  ZDSecMgrEntryLookupAMIGetIndex::?relay
      79  ZDSecMgrEntryLookupExt
       6  ZDSecMgrEntryLookupExt::?relay
     214  ZDSecMgrEntryLookupExtGetIndex
       6  ZDSecMgrEntryLookupExtGetIndex::?relay
     208  ZDSecMgrEntryNew
       6  ZDSecMgrEntryNew::?relay
     171  ZDSecMgrEstablishKey
       6  ZDSecMgrEstablishKey::?relay
       3  ZDSecMgrEstablishKeyCfm
       6  ZDSecMgrEstablishKeyCfm::?relay
     268  ZDSecMgrEstablishKeyInd
       6  ZDSecMgrEstablishKeyInd::?relay
     575  ZDSecMgrEvent
       6  ZDSecMgrEvent::?relay
     113  ZDSecMgrExtAddrLookup
       6  ZDSecMgrExtAddrLookup::?relay
     135  ZDSecMgrExtAddrStore
       6  ZDSecMgrExtAddrStore::?relay
      15  ZDSecMgrInit
       6  ZDSecMgrInit::?relay
      28  ZDSecMgrInitNVKeyTables
       6  ZDSecMgrInitNVKeyTables::?relay
     152  ZDSecMgrMasterKeyInit
       6  ZDSecMgrMasterKeyInit::?relay
     132  ZDSecMgrMasterKeyLoad
       6  ZDSecMgrMasterKeyLoad::?relay
     174  ZDSecMgrMasterKeyLookup
       6  ZDSecMgrMasterKeyLookup::?relay
     268  ZDSecMgrMasterKeyStore
       6  ZDSecMgrMasterKeyStore::?relay
     229  ZDSecMgrNewDeviceEvent
       6  ZDSecMgrNewDeviceEvent::?relay
     276  ZDSecMgrNwkKeyInit
       6  ZDSecMgrNwkKeyInit::?relay
      49  ZDSecMgrPermitJoining
       6  ZDSecMgrPermitJoining::?relay
       1  ZDSecMgrPermitJoiningEnabled
       1  ZDSecMgrPermitJoiningTimed
      31  ZDSecMgrPermitJoiningTimeout
       6  ZDSecMgrPermitJoiningTimeout::?relay
     276  ZDSecMgrReadKeyFromNv
       6  ZDSecMgrReadKeyFromNv::?relay
      95  ZDSecMgrRemoveDeviceInd
       6  ZDSecMgrRemoveDeviceInd::?relay
      63  ZDSecMgrRequestAppKey
       6  ZDSecMgrRequestAppKey::?relay
      47  ZDSecMgrRequestKeyInd
       6  ZDSecMgrRequestKeyInd::?relay
     355  ZDSecMgrSaveApsLinkKey
       6  ZDSecMgrSaveApsLinkKey::?relay
     345  ZDSecMgrSaveTCLinkKey
       6  ZDSecMgrSaveTCLinkKey::?relay
     318  ZDSecMgrSendMasterKey
       6  ZDSecMgrSendMasterKey::?relay
     343  ZDSecMgrSendNwkKey
       6  ZDSecMgrSendNwkKey::?relay
     284  ZDSecMgrSetDefaultNV
       6  ZDSecMgrSetDefaultNV::?relay
     137  ZDSecMgrSetupPartner
       6  ZDSecMgrSetupPartner::?relay
      30  ZDSecMgrSwitchKeyInd
       6  ZDSecMgrSwitchKeyInd::?relay
       1  ZDSecMgrTCAuthenticated
     197  ZDSecMgrTCDataLoad
       6  ZDSecMgrTCDataLoad::?relay
       8  ZDSecMgrTCExtAddr
      57  ZDSecMgrTCExtAddrCheck
       6  ZDSecMgrTCExtAddrCheck::?relay
      16  ZDSecMgrTCMasterKey
     261  ZDSecMgrTransportKeyInd
       6  ZDSecMgrTransportKeyInd::?relay
      95  ZDSecMgrUpdateDeviceInd
       6  ZDSecMgrUpdateDeviceInd::?relay
       4  __Constant_1

 
 13 290 bytes in segment BANKED_CODE
    522 bytes in segment BANK_RELAYS
     16 bytes in segment CODE_C
      1 byte  in segment XDATA_I
      1 byte  in segment XDATA_ID
      4 bytes in segment XDATA_ROM_C
     83 bytes in segment XDATA_Z
 
 13 829 bytes of CODE  memory
      0 bytes of CONST memory (+ 4 bytes shared)
     84 bytes of XDATA memory

Errors: none
Warnings: none
