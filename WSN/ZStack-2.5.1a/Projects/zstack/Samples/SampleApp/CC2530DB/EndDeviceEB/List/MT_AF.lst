###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:21
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  D:\design\ZStack-2.5.1a\Components\mt\MT_AF.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000 D:\design\ZStack-2.5.1a\Components\mt\MT_AF.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\MT_AF.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\MT_AF.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2011-05-27 16:00:27 -0700 (Fri, 27 May 2011) $
      4            Revision:       $Revision: 26145 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "MT.h"
     49          #include "MT_AF.h"
     50          #include "MT_ZDO.h"
     51          #include "nwk.h"
     52          #include "OnBoard.h"
     53          #include "MT_UART.h"
     54          
     55          #if defined INTER_PAN
     56          #include "stub_aps.h"
     57          #endif
     58          
     59          /* ------------------------------------------------------------------------------------------------
     60           *                                          Constants
     61           * ------------------------------------------------------------------------------------------------
     62           */
     63          
     64          #if !defined MT_AF_EXEC_CNT
     65          #define MT_AF_EXEC_CNT  15
     66          #endif
     67          
     68          #if !defined MT_AF_EXEC_DLY
     69          #define MT_AF_EXEC_DLY  1000
     70          #endif
     71          
     72          /* ------------------------------------------------------------------------------------------------
     73           *                                           Typedefs
     74           * ------------------------------------------------------------------------------------------------
     75           */
     76          
     77          typedef struct
     78          {
     79            uint8 *data;
     80            afAddrType_t dstAddr;
     81            endPointDesc_t *epDesc;
     82            uint16 cId;
     83            uint16 dataLen;
     84            uint8 transId;
     85            uint8 txOpts;
     86            uint8 radius;
     87            uint8 tick;
     88          } mtAfDataReq_t;
     89          
     90          typedef struct _mtAfInMsgList_t
     91          {
     92            struct _mtAfInMsgList_t *next;
     93            uint8 *data;
     94            uint32 timestamp;         // Receipt timestamp from MAC.
     95            uint8 tick;
     96          } mtAfInMsgList_t;
     97          
     98          /* ------------------------------------------------------------------------------------------------
     99           *                                        Local Variables
    100           * ------------------------------------------------------------------------------------------------
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /* ------------------------------------------------------------------------------------------------
    107           *                                        Global Variables
    108           * ------------------------------------------------------------------------------------------------
    109           */
    110          
    111          #if defined ( MT_AF_CB_FUNC )
    112          uint16 _afCallbackSub;
    113          #endif
    114          
    115          /* ------------------------------------------------------------------------------------------------
    116           *                                        Local Functions
    117           * ------------------------------------------------------------------------------------------------
    118           */
    119          
    120          void MT_AfRegister(uint8 *pBuf);
    121          void MT_AfDataRequest(uint8 *pBuf);
    122          
    123          #if defined ( ZIGBEE_SOURCE_ROUTING )
    124          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    125          #endif
    126          
    127          #if defined INTER_PAN
    128          static void MT_AfInterPanCtl(uint8 *pBuf);
    129          #endif
    130          
    131          static void MT_AfDataRetrieve(uint8 *pBuf);
    132          static void MT_AfDataStore(uint8 *pBuf);
    133          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    134          
    135          /**************************************************************************************************
    136           * @fn          MT_AfExec
    137           *
    138           * @brief       This function is invoked by an MT timer event.
    139           *
    140           * input parameters
    141           *
    142           * None.
    143           *
    144           * output parameters
    145           *
    146           * None.
    147           *
    148           * @return      None.
    149           **************************************************************************************************
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void MT_AfExec(void)
   \                     MT_AfExec:
    152          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    153            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FF           MOV     R7,A
    154          
    155            while (pItem != NULL)
   \                     ??MT_AfExec_0:
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   7003         JNZ     $+5
   \   000011   02....       LJMP    ??MT_AfExec_1 & 0xFFFF
    156            {
    157              if (--(pItem->tick) == 0)
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   24FF         ADD     A,#-0x1
   \   000023   F0           MOVX    @DPTR,A
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   7063         JNZ     ??MT_AfExec_2
    158              {
    159                if (pMtAfInMsgList == pItem)
   \   000033   90....       MOV     DPTR,#pMtAfInMsgList
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   EE           MOV     A,R6
   \   00003C   68           XRL     A,R0
   \   00003D   7002         JNZ     ??MT_AfExec_3
   \   00003F   EF           MOV     A,R7
   \   000040   69           XRL     A,R1
   \                     ??MT_AfExec_3:
   \   000041   7026         JNZ     ??MT_AfExec_4
    160                {
    161                  pMtAfInMsgList = pItem->next;
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   90....       MOV     DPTR,#pMtAfInMsgList
   \   00004F   E8           MOV     A,R0
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   E9           MOV     A,R1
   \   000053   F0           MOVX    @DPTR,A
    162                  (void)osal_mem_free(pItem);
   \   000054                ; Setup parameters for call to function osal_mem_free
   \   000054   EE           MOV     A,R6
   \   000055   FA           MOV     R2,A
   \   000056   EF           MOV     A,R7
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    163                  pItem = pMtAfInMsgList;
   \   00005B   90....       MOV     DPTR,#pMtAfInMsgList
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   E8           MOV     A,R0
   \   000064   FE           MOV     R6,A
   \   000065   E9           MOV     A,R1
   \   000066   FF           MOV     R7,A
   \   000067   80A4         SJMP    ??MT_AfExec_0
    164                }
    165                else
    166                {
    167                  pPrev->next = pItem->next;
   \                     ??MT_AfExec_4:
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F8           MOV     R0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   E8           MOV     A,R0
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   E9           MOV     A,R1
   \   00007C   F0           MOVX    @DPTR,A
    168                  (void)osal_mem_free(pItem);
   \   00007D                ; Setup parameters for call to function osal_mem_free
   \   00007D   EE           MOV     A,R6
   \   00007E   FA           MOV     R2,A
   \   00007F   EF           MOV     A,R7
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    169                  pItem = pPrev->next;
   \   000084   85..82       MOV     DPL,?V0
   \   000087   85..83       MOV     DPH,?V1
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   E8           MOV     A,R0
   \   000090   FE           MOV     R6,A
   \   000091   E9           MOV     A,R1
   \   000092   FF           MOV     R7,A
   \   000093   02....       LJMP    ??MT_AfExec_0 & 0xFFFF
    170                }
    171              }
    172              else
    173              {
    174                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   000096   8E..         MOV     ?V0,R6
   \   000098   8F..         MOV     ?V1,R7
    175                pItem = pItem->next;
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FE           MOV     R6,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FF           MOV     R7,A
   \   0000A3   02....       LJMP    ??MT_AfExec_0 & 0xFFFF
    176              }
    177            }
    178          
    179            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_1:
   \   0000A6   90....       MOV     DPTR,#pMtAfDataReq
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   E8           MOV     A,R0
   \   0000AF   49           ORL     A,R1
   \   0000B0   603E         JZ      ??MT_AfExec_5
    180            {
    181              if (--(pMtAfDataReq->tick) == 0)
   \   0000B2   90....       MOV     DPTR,#pMtAfDataReq
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F8           MOV     R0,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   C8           XCH     A,R0
   \   0000BA   2417         ADD     A,#0x17
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   C8           XCH     A,R0
   \   0000BF   3400         ADDC    A,#0x0
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   24FF         ADD     A,#-0x1
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   90....       MOV     DPTR,#pMtAfDataReq
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F8           MOV     R0,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   C8           XCH     A,R0
   \   0000CF   2417         ADD     A,#0x17
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   C8           XCH     A,R0
   \   0000D4   3400         ADDC    A,#0x0
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   7015         JNZ     ??MT_AfExec_5
    182              {
    183                (void)osal_mem_free(pMtAfDataReq);
   \   0000DB                ; Setup parameters for call to function osal_mem_free
   \   0000DB   90....       MOV     DPTR,#pMtAfDataReq
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FA           MOV     R2,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   FB           MOV     R3,A
   \   0000E3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    184                pMtAfDataReq = NULL;
   \   0000E6   90....       MOV     DPTR,#pMtAfDataReq
   \   0000E9   7400         MOV     A,#0x0
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   7400         MOV     A,#0x0
   \   0000EF   F0           MOVX    @DPTR,A
    185              }
    186            }
    187          
    188            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_5:
   \   0000F0   90....       MOV     DPTR,#pMtAfInMsgList
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F8           MOV     R0,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F9           MOV     R1,A
   \   0000F8   E8           MOV     A,R0
   \   0000F9   49           ORL     A,R1
   \   0000FA   700C         JNZ     ??MT_AfExec_6
   \   0000FC   90....       MOV     DPTR,#pMtAfDataReq
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F8           MOV     R0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F9           MOV     R1,A
   \   000104   E8           MOV     A,R0
   \   000105   49           ORL     A,R1
   \   000106   6020         JZ      ??MT_AfExec_7
    189            {
    190              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_6:
   \   000108                ; Setup parameters for call to function osal_start_timerEx
   \   000108   7CE8         MOV     R4,#-0x18
   \   00010A   7D03         MOV     R5,#0x3
   \   00010C   7A08         MOV     R2,#0x8
   \   00010E   7B00         MOV     R3,#0x0
   \   000110   90....       MOV     DPTR,#MT_TaskID
   \   000113   E0           MOVX    A,@DPTR
   \   000114   F9           MOV     R1,A
   \   000115   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000118   E9           MOV     A,R1
   \   000119   600D         JZ      ??MT_AfExec_7
    191              {
    192                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00011B                ; Setup parameters for call to function osal_set_event
   \   00011B   7A08         MOV     R2,#0x8
   \   00011D   7B00         MOV     R3,#0x0
   \   00011F   90....       MOV     DPTR,#MT_TaskID
   \   000122   E0           MOVX    A,@DPTR
   \   000123   F9           MOV     R1,A
   \   000124   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000127   E9           MOV     A,R1
    193              }
    194            }
    195          }
   \                     ??MT_AfExec_7:
   \   000128   7F02         MOV     R7,#0x2
   \   00012A   02....       LJMP    ?BANKED_LEAVE_XDATA
    196          
    197          /***************************************************************************************************
    198           * @fn      MT_AfCommandProcessing
    199           *
    200           * @brief   Process all the AF commands that are issued by test tool
    201           *
    202           * @param   pBuf - pointer to the received buffer
    203           *
    204           * @return  status
    205           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    207          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    208            uint8 status = MT_RPC_SUCCESS;
   \   000009   75..00       MOV     ?V0,#0x0
    209          
    210            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6015         JZ      ??MT_AfCommandProcessing_0
   \   000015   14           DEC     A
   \   000016   601B         JZ      ??MT_AfCommandProcessing_1
   \   000018   14           DEC     A
   \   000019   6018         JZ      ??MT_AfCommandProcessing_1
   \   00001B   14           DEC     A
   \   00001C   601E         JZ      ??MT_AfCommandProcessing_2
   \   00001E   24F2         ADD     A,#-0xe
   \   000020   602C         JZ      ??MT_AfCommandProcessing_3
   \   000022   14           DEC     A
   \   000023   6020         JZ      ??MT_AfCommandProcessing_4
   \   000025   14           DEC     A
   \   000026   602F         JZ      ??MT_AfCommandProcessing_5
   \   000028   8036         SJMP    ??MT_AfCommandProcessing_6
    211            {
    212              case MT_AF_REGISTER:
    213                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   00002A                ; Setup parameters for call to function MT_AfRegister
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    214                break;
   \   000031   8030         SJMP    ??MT_AfCommandProcessing_7
    215          
    216              case MT_AF_DATA_REQUEST:
    217              case MT_AF_DATA_REQUEST_EXT:
    218                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000033                ; Setup parameters for call to function MT_AfDataRequest
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    219                break;
   \   00003A   8027         SJMP    ??MT_AfCommandProcessing_7
    220          
    221          #if defined ( ZIGBEE_SOURCE_ROUTING )
    222              case MT_AF_DATA_REQUEST_SRCRTG:
    223                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   00003C                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    224                break;
   \   000043   801E         SJMP    ??MT_AfCommandProcessing_7
    225          #endif
    226          
    227          #if defined INTER_PAN
    228              case MT_AF_INTER_PAN_CTL:
    229                MT_AfInterPanCtl(pBuf);
    230                break;
    231          #endif
    232          
    233              case MT_AF_DATA_RETRIEVE:
    234                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   000045                ; Setup parameters for call to function MT_AfDataRetrieve
   \   000045   EE           MOV     A,R6
   \   000046   FA           MOV     R2,A
   \   000047   EF           MOV     A,R7
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    235                break;
   \   00004C   8015         SJMP    ??MT_AfCommandProcessing_7
    236          
    237              case MT_AF_DATA_STORE:
    238                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_3:
   \   00004E                ; Setup parameters for call to function MT_AfDataStore
   \   00004E   EE           MOV     A,R6
   \   00004F   FA           MOV     R2,A
   \   000050   EF           MOV     A,R7
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    239                break;
   \   000055   800C         SJMP    ??MT_AfCommandProcessing_7
    240          
    241              case MT_AF_APSF_CONFIG_SET:
    242                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   000057                ; Setup parameters for call to function MT_AfAPSF_ConfigSet
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   FB           MOV     R3,A
   \   00005B   12....       LCALL   `??MT_AfAPSF_ConfigSet::?relay`; Banked call to: MT_AfAPSF_ConfigSet
    243                break;
   \   00005E   8003         SJMP    ??MT_AfCommandProcessing_7
    244          
    245              default:
    246                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_6:
   \   000060   75..02       MOV     ?V0,#0x2
    247                break;
    248            }
    249          
    250            return status;
   \                     ??MT_AfCommandProcessing_7:
   \   000063   A9..         MOV     R1,?V0
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
    251          }
    252          
    253          /***************************************************************************************************
    254           * @fn      MT_AfRegister
    255           *
    256           * @brief   Process AF Register command
    257           *
    258           * @param   pBuf - pointer to the received buffer
    259           *
    260           * @return  none
    261           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    264            uint8 cmdId;
    265            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7410         MOV     A,#0x10
   \   000016   F0           MOVX    @DPTR,A
    266            endPointDesc_t *epDesc;
    267          
    268            /* parse header */
    269            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   85..83       MOV     DPH,?V1
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V2,A
    270            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000022   E5..         MOV     A,?V0
   \   000024   2403         ADD     A,#0x3
   \   000026   F5..         MOV     ?V0,A
   \   000028   5002         JNC     ??MT_AfRegister_0
   \   00002A   05..         INC     ?V1
    271          
    272            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \                     ??MT_AfRegister_0:
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   7A06         MOV     R2,#0x6
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV     ?V4,R2
   \   000035   8B..         MOV     ?V5,R3
   \   000037   AE..         MOV     R6,?V4
   \   000039   AF..         MOV     R7,?V5
    273            if ( epDesc )
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   604F         JZ      ??MT_AfRegister_1
    274            {
    275              epDesc->task_id = &MT_TaskID;
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   74..         MOV     A,#MT_TaskID & 0xff
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   00004A   F0           MOVX    @DPTR,A
    276              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00004B                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00004B   EE           MOV     A,R6
   \   00004C   FC           MOV     R4,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FD           MOV     R5,A
   \   00004F   AA..         MOV     R2,?V0
   \   000051   AB..         MOV     R3,?V1
   \   000053   12....       LCALL   `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   000056   E9           MOV     A,R1
   \   000057   C0E0         PUSH    A
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
    277              if ( retValue == ZSuccess )
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   7013         JNZ     ??MT_AfRegister_2
    278              {
    279                retValue = afRegister( epDesc );
   \   00006B                ; Setup parameters for call to function afRegister
   \   00006B   EE           MOV     A,R6
   \   00006C   FA           MOV     R2,A
   \   00006D   EF           MOV     A,R7
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   000072   E9           MOV     A,R1
   \   000073   C0E0         PUSH    A
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
    280              }
    281          
    282              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_2:
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6007         JZ      ??MT_AfRegister_1
    283              {
    284                osal_mem_free( epDesc );
   \   000087                ; Setup parameters for call to function osal_mem_free
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    285              }
    286            }
    287          
    288            /* Build and send back the response */
    289            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_1:
   \   00008E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008E   AC..         MOV     R4,?XSP + 0
   \   000090   AD..         MOV     R5,?XSP + 1
   \   000092   7B01         MOV     R3,#0x1
   \   000094   AA..         MOV     R2,?V2
   \   000096   7964         MOV     R1,#0x64
   \   000098   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    290          }
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   7F06         MOV     R7,#0x6
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    291          
    292          /***************************************************************************************************
    293           * @fn      MT_AfDataRequest
    294           *
    295           * @brief   Process AF Register command
    296           *
    297           * @param   pBuf - pointer to the received buffer
    298           *
    299           * @return  none
    300           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    302          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    303            #define MT_AF_REQ_MSG_LEN  10
    304            #define MT_AF_REQ_MSG_EXT  10
    305          
    306            endPointDesc_t *epDesc;
    307            afAddrType_t dstAddr;
    308            cId_t cId;
    309            uint8 transId, txOpts, radius;
    310            uint8 cmd0, cmd1;
    311            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    312            uint16 dataLen, tempLen;
    313          
    314            /* Parse header */
    315            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C0E0         PUSH    A
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    316            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V3,A
    317            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000030   EE           MOV     A,R6
   \   000031   2403         ADD     A,#0x3
   \   000033   FE           MOV     R6,A
   \   000034   5001         JNC     ??MT_AfDataRequest_0
   \   000036   0F           INC     R7
    318          
    319            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   000037   7402         MOV     A,#0x2
   \   000039   65..         XRL     A,?V3
   \   00003B   6003         JZ      $+5
   \   00003D   02....       LJMP    ??MT_AfDataRequest_1 & 0xFFFF
    320            {
    321              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C0E0         PUSH    A
   \   000047   7412         MOV     A,#0x12
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   AE82         MOV     R6,DPL
   \   000056   AF83         MOV     R7,DPH
    322          
    323              if (dstAddr.addrMode == afAddr64Bit)
   \   000058   7412         MOV     A,#0x12
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6403         XRL     A,#0x3
   \   000060   7029         JNZ     ??MT_AfDataRequest_2
    324              {
    325                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000062                ; Setup parameters for call to function osal_memcpy
   \   000062   8E..         MOV     ?V0,R6
   \   000064   8F..         MOV     ?V1,R7
   \   000066   75..00       MOV     ?V2,#0x0
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006E   7C08         MOV     R4,#0x8
   \   000070   7D00         MOV     R5,#0x0
   \   000072   740D         MOV     A,#0xd
   \   000074   12....       LCALL   ?XSTACK_DISP101_8
   \   000077   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007A   7403         MOV     A,#0x3
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   8A..         MOV     ?V0,R2
   \   000081   8B..         MOV     ?V1,R3
   \   000083   85..82       MOV     DPL,?V0
   \   000086   85..83       MOV     DPH,?V1
   \   000089   8024         SJMP    ??MT_AfDataRequest_3
    326              }
    327              else
    328              {
    329                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FA           MOV     R2,A
   \   000091   7B00         MOV     R3,#0x0
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F8           MOV     R0,A
   \   00009A   7900         MOV     R1,#0x0
   \   00009C   E4           CLR     A
   \   00009D   C8           XCH     A,R0
   \   00009E   F9           MOV     R1,A
   \   00009F   EA           MOV     A,R2
   \   0000A0   28           ADD     A,R0
   \   0000A1   F8           MOV     R0,A
   \   0000A2   EB           MOV     A,R3
   \   0000A3   39           ADDC    A,R1
   \   0000A4   F9           MOV     R1,A
   \   0000A5   740A         MOV     A,#0xa
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   E8           MOV     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E9           MOV     A,R1
   \   0000AE   F0           MOVX    @DPTR,A
    330              }
    331              pBuf += Z_EXTADDR_LEN;
   \                     ??MT_AfDataRequest_3:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   2408         ADD     A,#0x8
   \   0000B2   FE           MOV     R6,A
   \   0000B3   5001         JNC     ??MT_AfDataRequest_4
   \   0000B5   0F           INC     R7
    332          
    333              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_4:
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C0E0         PUSH    A
   \   0000BD   7413         MOV     A,#0x13
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   D0E0         POP     A
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   A3           INC     DPTR
   \   0000CA   AE82         MOV     R6,DPL
   \   0000CC   AF83         MOV     R7,DPH
    334              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   FA           MOV     R2,A
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   E4           CLR     A
   \   0000E0   C8           XCH     A,R0
   \   0000E1   F9           MOV     R1,A
   \   0000E2   EA           MOV     A,R2
   \   0000E3   28           ADD     A,R0
   \   0000E4   F8           MOV     R0,A
   \   0000E5   EB           MOV     A,R3
   \   0000E6   39           ADDC    A,R1
   \   0000E7   F9           MOV     R1,A
   \   0000E8   7414         MOV     A,#0x14
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E8           MOV     A,R0
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E9           MOV     A,R1
   \   0000F1   F0           MOVX    @DPTR,A
    335              pBuf += 2;
   \   0000F2   EE           MOV     A,R6
   \   0000F3   2402         ADD     A,#0x2
   \   0000F5   FE           MOV     R6,A
   \   0000F6   505A         JNC     ??MT_AfDataRequest_5
   \   0000F8   0F           INC     R7
   \   0000F9   8057         SJMP    ??MT_AfDataRequest_5
    336            }
    337            else
    338            {
    339              /* Destination address */
    340              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000FB   7412         MOV     A,#0x12
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   7402         MOV     A,#0x2
   \   000102   F0           MOVX    @DPTR,A
    341              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000103   8E82         MOV     DPL,R6
   \   000105   8F83         MOV     DPH,R7
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FA           MOV     R2,A
   \   000109   7B00         MOV     R3,#0x0
   \   00010B   8E82         MOV     DPL,R6
   \   00010D   8F83         MOV     DPH,R7
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F8           MOV     R0,A
   \   000112   7900         MOV     R1,#0x0
   \   000114   E4           CLR     A
   \   000115   C8           XCH     A,R0
   \   000116   F9           MOV     R1,A
   \   000117   EA           MOV     A,R2
   \   000118   28           ADD     A,R0
   \   000119   F8           MOV     R0,A
   \   00011A   EB           MOV     A,R3
   \   00011B   39           ADDC    A,R1
   \   00011C   F9           MOV     R1,A
   \   00011D   740A         MOV     A,#0xa
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   E8           MOV     A,R0
   \   000123   F0           MOVX    @DPTR,A
   \   000124   A3           INC     DPTR
   \   000125   E9           MOV     A,R1
   \   000126   F0           MOVX    @DPTR,A
    342              pBuf += 2;
   \   000127   EE           MOV     A,R6
   \   000128   2402         ADD     A,#0x2
   \   00012A   FE           MOV     R6,A
   \   00012B   5001         JNC     ??MT_AfDataRequest_6
   \   00012D   0F           INC     R7
    343          
    344              /* Destination endpoint */
    345              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_6:
   \   00012E   8E82         MOV     DPL,R6
   \   000130   8F83         MOV     DPH,R7
   \   000132   E0           MOVX    A,@DPTR
   \   000133   C0E0         PUSH    A
   \   000135   7413         MOV     A,#0x13
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   D0E0         POP     A
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   8E82         MOV     DPL,R6
   \   00013F   8F83         MOV     DPH,R7
   \   000141   A3           INC     DPTR
   \   000142   AE82         MOV     R6,DPL
   \   000144   AF83         MOV     R7,DPH
    346              dstAddr.panId = 0;
   \   000146   7414         MOV     A,#0x14
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   7400         MOV     A,#0x0
   \   00014D   F0           MOVX    @DPTR,A
   \   00014E   A3           INC     DPTR
   \   00014F   7400         MOV     A,#0x0
   \   000151   F0           MOVX    @DPTR,A
    347            }
    348          
    349            /* Source endpoint */
    350            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_5:
   \   000152                ; Setup parameters for call to function afFindEndPointDesc
   \   000152   8E82         MOV     DPL,R6
   \   000154   8F83         MOV     DPH,R7
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F9           MOV     R1,A
   \   000158   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00015B   7405         MOV     A,#0x5
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   EA           MOV     A,R2
   \   000161   F0           MOVX    @DPTR,A
   \   000162   A3           INC     DPTR
   \   000163   EB           MOV     A,R3
   \   000164   F0           MOVX    @DPTR,A
   \   000165   8E82         MOV     DPL,R6
   \   000167   8F83         MOV     DPH,R7
   \   000169   A3           INC     DPTR
   \   00016A   AE82         MOV     R6,DPL
   \   00016C   AF83         MOV     R7,DPH
    351          
    352            /* ClusterId */
    353            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00016E   8E82         MOV     DPL,R6
   \   000170   8F83         MOV     DPH,R7
   \   000172   E0           MOVX    A,@DPTR
   \   000173   FA           MOV     R2,A
   \   000174   7B00         MOV     R3,#0x0
   \   000176   8E82         MOV     DPL,R6
   \   000178   8F83         MOV     DPH,R7
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F8           MOV     R0,A
   \   00017D   7900         MOV     R1,#0x0
   \   00017F   E4           CLR     A
   \   000180   C8           XCH     A,R0
   \   000181   F9           MOV     R1,A
   \   000182   EA           MOV     A,R2
   \   000183   28           ADD     A,R0
   \   000184   F8           MOV     R0,A
   \   000185   EB           MOV     A,R3
   \   000186   39           ADDC    A,R1
   \   000187   F9           MOV     R1,A
   \   000188   88..         MOV     ?V6,R0
   \   00018A   89..         MOV     ?V7,R1
    354            pBuf +=2;
   \   00018C   EE           MOV     A,R6
   \   00018D   2402         ADD     A,#0x2
   \   00018F   FE           MOV     R6,A
   \   000190   5001         JNC     ??MT_AfDataRequest_7
   \   000192   0F           INC     R7
    355          
    356            /* TransId */
    357            transId = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   000193   8E82         MOV     DPL,R6
   \   000195   8F83         MOV     DPH,R7
   \   000197   E0           MOVX    A,@DPTR
   \   000198   C0E0         PUSH    A
   \   00019A   7403         MOV     A,#0x3
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   D0E0         POP     A
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   8E82         MOV     DPL,R6
   \   0001A4   8F83         MOV     DPH,R7
   \   0001A6   A3           INC     DPTR
   \   0001A7   AE82         MOV     R6,DPL
   \   0001A9   AF83         MOV     R7,DPH
    358          
    359            /* TxOption */
    360            txOpts = *pBuf++;
   \   0001AB   8E82         MOV     DPL,R6
   \   0001AD   8F83         MOV     DPH,R7
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   C0E0         PUSH    A
   \   0001B2   7402         MOV     A,#0x2
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   D0E0         POP     A
   \   0001B9   F0           MOVX    @DPTR,A
   \   0001BA   8E82         MOV     DPL,R6
   \   0001BC   8F83         MOV     DPH,R7
   \   0001BE   A3           INC     DPTR
   \   0001BF   AE82         MOV     R6,DPL
   \   0001C1   AF83         MOV     R7,DPH
    361          
    362            /* Radius */
    363            radius = *pBuf++;
   \   0001C3   8E82         MOV     DPL,R6
   \   0001C5   8F83         MOV     DPH,R7
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   C0E0         PUSH    A
   \   0001CA   7401         MOV     A,#0x1
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   D0E0         POP     A
   \   0001D1   F0           MOVX    @DPTR,A
   \   0001D2   8E82         MOV     DPL,R6
   \   0001D4   8F83         MOV     DPH,R7
   \   0001D6   A3           INC     DPTR
   \   0001D7   AE82         MOV     R6,DPL
   \   0001D9   AF83         MOV     R7,DPH
    364          
    365            /* Length */
    366            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   0001DB   7402         MOV     A,#0x2
   \   0001DD   65..         XRL     A,?V3
   \   0001DF   703A         JNZ     ??MT_AfDataRequest_8
    367            {
    368              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0001E1   8E82         MOV     DPL,R6
   \   0001E3   8F83         MOV     DPH,R7
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   FA           MOV     R2,A
   \   0001E7   7B00         MOV     R3,#0x0
   \   0001E9   8E82         MOV     DPL,R6
   \   0001EB   8F83         MOV     DPH,R7
   \   0001ED   A3           INC     DPTR
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   F8           MOV     R0,A
   \   0001F0   7900         MOV     R1,#0x0
   \   0001F2   E4           CLR     A
   \   0001F3   C8           XCH     A,R0
   \   0001F4   F9           MOV     R1,A
   \   0001F5   EA           MOV     A,R2
   \   0001F6   28           ADD     A,R0
   \   0001F7   F8           MOV     R0,A
   \   0001F8   EB           MOV     A,R3
   \   0001F9   39           ADDC    A,R1
   \   0001FA   F9           MOV     R1,A
   \   0001FB   88..         MOV     ?V4,R0
   \   0001FD   89..         MOV     ?V5,R1
    369              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   0001FF   E5..         MOV     A,?V4
   \   000201   2414         ADD     A,#0x14
   \   000203   F8           MOV     R0,A
   \   000204   E4           CLR     A
   \   000205   35..         ADDC    A,?V5
   \   000207   F9           MOV     R1,A
   \   000208   7407         MOV     A,#0x7
   \   00020A   12....       LCALL   ?XSTACK_DISP0_8
   \   00020D   E8           MOV     A,R0
   \   00020E   F0           MOVX    @DPTR,A
   \   00020F   A3           INC     DPTR
   \   000210   E9           MOV     A,R1
   \   000211   F0           MOVX    @DPTR,A
    370              pBuf += 2;
   \   000212   EE           MOV     A,R6
   \   000213   2402         ADD     A,#0x2
   \   000215   FE           MOV     R6,A
   \   000216   502B         JNC     ??MT_AfDataRequest_9
   \   000218   0F           INC     R7
   \   000219   8028         SJMP    ??MT_AfDataRequest_9
    371            }
    372            else
    373            {
    374              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_8:
   \   00021B   8E82         MOV     DPL,R6
   \   00021D   8F83         MOV     DPH,R7
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F8           MOV     R0,A
   \   000221   7900         MOV     R1,#0x0
   \   000223   88..         MOV     ?V4,R0
   \   000225   89..         MOV     ?V5,R1
   \   000227   8E82         MOV     DPL,R6
   \   000229   8F83         MOV     DPH,R7
   \   00022B   A3           INC     DPTR
   \   00022C   AE82         MOV     R6,DPL
   \   00022E   AF83         MOV     R7,DPH
    375              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000230   E5..         MOV     A,?V4
   \   000232   240A         ADD     A,#0xa
   \   000234   F8           MOV     R0,A
   \   000235   E4           CLR     A
   \   000236   35..         ADDC    A,?V5
   \   000238   F9           MOV     R1,A
   \   000239   7407         MOV     A,#0x7
   \   00023B   12....       LCALL   ?XSTACK_DISP0_8
   \   00023E   E8           MOV     A,R0
   \   00023F   F0           MOVX    @DPTR,A
   \   000240   A3           INC     DPTR
   \   000241   E9           MOV     A,R1
   \   000242   F0           MOVX    @DPTR,A
    376            }
    377          
    378            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_9:
   \   000243   7405         MOV     A,#0x5
   \   000245   12....       LCALL   ?XSTACK_DISP0_8
   \   000248   E0           MOVX    A,@DPTR
   \   000249   F8           MOV     R0,A
   \   00024A   A3           INC     DPTR
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   F9           MOV     R1,A
   \   00024D   E8           MOV     A,R0
   \   00024E   49           ORL     A,R1
   \   00024F   700C         JNZ     ??MT_AfDataRequest_10
    379            {
    380              retValue = afStatus_INVALID_PARAMETER;
   \   000251   85..82       MOV     DPL,?XSP + 0
   \   000254   85..83       MOV     DPH,?XSP + 1
   \   000257   7402         MOV     A,#0x2
   \   000259   F0           MOVX    @DPTR,A
   \   00025A   02....       LJMP    ??MT_AfDataRequest_11 & 0xFFFF
    381            }
    382            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfDataRequest_10:
   \   00025D   7407         MOV     A,#0x7
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   C3           CLR     C
   \   000263   E0           MOVX    A,@DPTR
   \   000264   94FB         SUBB    A,#-0x5
   \   000266   A3           INC     DPTR
   \   000267   E0           MOVX    A,@DPTR
   \   000268   9400         SUBB    A,#0x0
   \   00026A   5003         JNC     $+5
   \   00026C   02....       LJMP    ??MT_AfDataRequest_12 & 0xFFFF
    383            {
    384              if (pMtAfDataReq != NULL)
   \   00026F   90....       MOV     DPTR,#pMtAfDataReq
   \   000272   E0           MOVX    A,@DPTR
   \   000273   F8           MOV     R0,A
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   F9           MOV     R1,A
   \   000277   E8           MOV     A,R0
   \   000278   49           ORL     A,R1
   \   000279   600C         JZ      ??MT_AfDataRequest_13
    385              {
    386                retValue = afStatus_INVALID_PARAMETER;
   \   00027B   85..82       MOV     DPL,?XSP + 0
   \   00027E   85..83       MOV     DPH,?XSP + 1
   \   000281   7402         MOV     A,#0x2
   \   000283   F0           MOVX    @DPTR,A
   \   000284   02....       LJMP    ??MT_AfDataRequest_11 & 0xFFFF
    387              }
    388              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_13:
   \   000287                ; Setup parameters for call to function osal_mem_alloc
   \   000287   E5..         MOV     A,?V4
   \   000289   2418         ADD     A,#0x18
   \   00028B   FA           MOV     R2,A
   \   00028C   E4           CLR     A
   \   00028D   35..         ADDC    A,?V5
   \   00028F   FB           MOV     R3,A
   \   000290   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000293   90....       MOV     DPTR,#pMtAfDataReq
   \   000296   EA           MOV     A,R2
   \   000297   F0           MOVX    @DPTR,A
   \   000298   A3           INC     DPTR
   \   000299   EB           MOV     A,R3
   \   00029A   F0           MOVX    @DPTR,A
   \   00029B   90....       MOV     DPTR,#pMtAfDataReq
   \   00029E   E0           MOVX    A,@DPTR
   \   00029F   F8           MOV     R0,A
   \   0002A0   A3           INC     DPTR
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   F9           MOV     R1,A
   \   0002A3   E8           MOV     A,R0
   \   0002A4   49           ORL     A,R1
   \   0002A5   700C         JNZ     ??MT_AfDataRequest_14
    389              {
    390                retValue = afStatus_MEM_FAIL;
   \   0002A7   85..82       MOV     DPL,?XSP + 0
   \   0002AA   85..83       MOV     DPH,?XSP + 1
   \   0002AD   7410         MOV     A,#0x10
   \   0002AF   F0           MOVX    @DPTR,A
   \   0002B0   02....       LJMP    ??MT_AfDataRequest_11 & 0xFFFF
    391              }
    392              else
    393              {
    394                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_14:
   \   0002B3   85..82       MOV     DPL,?XSP + 0
   \   0002B6   85..83       MOV     DPH,?XSP + 1
   \   0002B9   7400         MOV     A,#0x0
   \   0002BB   F0           MOVX    @DPTR,A
    395          
    396                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0002BC   90....       MOV     DPTR,#pMtAfDataReq
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   2418         ADD     A,#0x18
   \   0002C2   FA           MOV     R2,A
   \   0002C3   A3           INC     DPTR
   \   0002C4   E0           MOVX    A,@DPTR
   \   0002C5   3400         ADDC    A,#0x0
   \   0002C7   FB           MOV     R3,A
   \   0002C8   90....       MOV     DPTR,#pMtAfDataReq
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F8           MOV     R0,A
   \   0002CD   A3           INC     DPTR
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   F583         MOV     DPH,A
   \   0002D1   8882         MOV     DPL,R0
   \   0002D3   EA           MOV     A,R2
   \   0002D4   F0           MOVX    @DPTR,A
   \   0002D5   A3           INC     DPTR
   \   0002D6   EB           MOV     A,R3
   \   0002D7   F0           MOVX    @DPTR,A
    397                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0002D8                ; Setup parameters for call to function osal_memcpy
   \   0002D8   740A         MOV     A,#0xa
   \   0002DA   12....       LCALL   ?XSTACK_DISP100_8
   \   0002DD   88..         MOV     ?V0,R0
   \   0002DF   89..         MOV     ?V1,R1
   \   0002E1   75..00       MOV     ?V2,#0x0
   \   0002E4   78..         MOV     R0,#?V0
   \   0002E6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002E9   7C0C         MOV     R4,#0xc
   \   0002EB   7D00         MOV     R5,#0x0
   \   0002ED   90....       MOV     DPTR,#pMtAfDataReq
   \   0002F0   E0           MOVX    A,@DPTR
   \   0002F1   2402         ADD     A,#0x2
   \   0002F3   FA           MOV     R2,A
   \   0002F4   A3           INC     DPTR
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   3400         ADDC    A,#0x0
   \   0002F8   FB           MOV     R3,A
   \   0002F9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002FC   7403         MOV     A,#0x3
   \   0002FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000301   7416         MOV     A,#0x16
   \   000303   12....       LCALL   ?XSTACK_DISP0_8
   \   000306   EA           MOV     A,R2
   \   000307   F0           MOVX    @DPTR,A
   \   000308   A3           INC     DPTR
   \   000309   EB           MOV     A,R3
   \   00030A   F0           MOVX    @DPTR,A
    398                pMtAfDataReq->epDesc = epDesc;
   \   00030B   7405         MOV     A,#0x5
   \   00030D   12....       LCALL   ?XSTACK_DISP0_8
   \   000310   E0           MOVX    A,@DPTR
   \   000311   FA           MOV     R2,A
   \   000312   A3           INC     DPTR
   \   000313   E0           MOVX    A,@DPTR
   \   000314   FB           MOV     R3,A
   \   000315   90....       MOV     DPTR,#pMtAfDataReq
   \   000318   E0           MOVX    A,@DPTR
   \   000319   F8           MOV     R0,A
   \   00031A   A3           INC     DPTR
   \   00031B   E0           MOVX    A,@DPTR
   \   00031C   C8           XCH     A,R0
   \   00031D   240E         ADD     A,#0xe
   \   00031F   F582         MOV     DPL,A
   \   000321   C8           XCH     A,R0
   \   000322   3400         ADDC    A,#0x0
   \   000324   F583         MOV     DPH,A
   \   000326   EA           MOV     A,R2
   \   000327   F0           MOVX    @DPTR,A
   \   000328   A3           INC     DPTR
   \   000329   EB           MOV     A,R3
   \   00032A   F0           MOVX    @DPTR,A
    399                pMtAfDataReq->cId = cId;
   \   00032B   90....       MOV     DPTR,#pMtAfDataReq
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F8           MOV     R0,A
   \   000330   A3           INC     DPTR
   \   000331   E0           MOVX    A,@DPTR
   \   000332   C8           XCH     A,R0
   \   000333   2410         ADD     A,#0x10
   \   000335   F582         MOV     DPL,A
   \   000337   C8           XCH     A,R0
   \   000338   3400         ADDC    A,#0x0
   \   00033A   F583         MOV     DPH,A
   \   00033C   E5..         MOV     A,?V6
   \   00033E   F0           MOVX    @DPTR,A
   \   00033F   A3           INC     DPTR
   \   000340   E5..         MOV     A,?V7
   \   000342   F0           MOVX    @DPTR,A
    400                pMtAfDataReq->dataLen = dataLen;
   \   000343   90....       MOV     DPTR,#pMtAfDataReq
   \   000346   E0           MOVX    A,@DPTR
   \   000347   F8           MOV     R0,A
   \   000348   A3           INC     DPTR
   \   000349   E0           MOVX    A,@DPTR
   \   00034A   C8           XCH     A,R0
   \   00034B   2412         ADD     A,#0x12
   \   00034D   F582         MOV     DPL,A
   \   00034F   C8           XCH     A,R0
   \   000350   3400         ADDC    A,#0x0
   \   000352   F583         MOV     DPH,A
   \   000354   E5..         MOV     A,?V4
   \   000356   F0           MOVX    @DPTR,A
   \   000357   A3           INC     DPTR
   \   000358   E5..         MOV     A,?V5
   \   00035A   F0           MOVX    @DPTR,A
    401                pMtAfDataReq->transId = transId;
   \   00035B   7403         MOV     A,#0x3
   \   00035D   12....       LCALL   ?XSTACK_DISP0_8
   \   000360   E0           MOVX    A,@DPTR
   \   000361   C0E0         PUSH    A
   \   000363   90....       MOV     DPTR,#pMtAfDataReq
   \   000366   E0           MOVX    A,@DPTR
   \   000367   F8           MOV     R0,A
   \   000368   A3           INC     DPTR
   \   000369   E0           MOVX    A,@DPTR
   \   00036A   C8           XCH     A,R0
   \   00036B   2414         ADD     A,#0x14
   \   00036D   F582         MOV     DPL,A
   \   00036F   C8           XCH     A,R0
   \   000370   3400         ADDC    A,#0x0
   \   000372   F583         MOV     DPH,A
   \   000374   D0E0         POP     A
   \   000376   F0           MOVX    @DPTR,A
    402                pMtAfDataReq->txOpts = txOpts;
   \   000377   7402         MOV     A,#0x2
   \   000379   12....       LCALL   ?XSTACK_DISP0_8
   \   00037C   E0           MOVX    A,@DPTR
   \   00037D   C0E0         PUSH    A
   \   00037F   90....       MOV     DPTR,#pMtAfDataReq
   \   000382   E0           MOVX    A,@DPTR
   \   000383   F8           MOV     R0,A
   \   000384   A3           INC     DPTR
   \   000385   E0           MOVX    A,@DPTR
   \   000386   C8           XCH     A,R0
   \   000387   2415         ADD     A,#0x15
   \   000389   F582         MOV     DPL,A
   \   00038B   C8           XCH     A,R0
   \   00038C   3400         ADDC    A,#0x0
   \   00038E   F583         MOV     DPH,A
   \   000390   D0E0         POP     A
   \   000392   F0           MOVX    @DPTR,A
    403                pMtAfDataReq->radius = radius;
   \   000393   7401         MOV     A,#0x1
   \   000395   12....       LCALL   ?XSTACK_DISP0_8
   \   000398   E0           MOVX    A,@DPTR
   \   000399   C0E0         PUSH    A
   \   00039B   90....       MOV     DPTR,#pMtAfDataReq
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   F8           MOV     R0,A
   \   0003A0   A3           INC     DPTR
   \   0003A1   E0           MOVX    A,@DPTR
   \   0003A2   C8           XCH     A,R0
   \   0003A3   2416         ADD     A,#0x16
   \   0003A5   F582         MOV     DPL,A
   \   0003A7   C8           XCH     A,R0
   \   0003A8   3400         ADDC    A,#0x0
   \   0003AA   F583         MOV     DPH,A
   \   0003AC   D0E0         POP     A
   \   0003AE   F0           MOVX    @DPTR,A
    404          
    405                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    406                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \   0003AF   90....       MOV     DPTR,#pMtAfDataReq
   \   0003B2   E0           MOVX    A,@DPTR
   \   0003B3   F8           MOV     R0,A
   \   0003B4   A3           INC     DPTR
   \   0003B5   E0           MOVX    A,@DPTR
   \   0003B6   C8           XCH     A,R0
   \   0003B7   2417         ADD     A,#0x17
   \   0003B9   F582         MOV     DPL,A
   \   0003BB   C8           XCH     A,R0
   \   0003BC   3400         ADDC    A,#0x0
   \   0003BE   F583         MOV     DPH,A
   \   0003C0   740F         MOV     A,#0xf
   \   0003C2   F0           MOVX    @DPTR,A
    407                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   0003C3                ; Setup parameters for call to function osal_start_timerEx
   \   0003C3   7CE8         MOV     R4,#-0x18
   \   0003C5   7D03         MOV     R5,#0x3
   \   0003C7   7A08         MOV     R2,#0x8
   \   0003C9   7B00         MOV     R3,#0x0
   \   0003CB   90....       MOV     DPTR,#MT_TaskID
   \   0003CE   E0           MOVX    A,@DPTR
   \   0003CF   F9           MOV     R1,A
   \   0003D0   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0003D3   E9           MOV     A,R1
   \   0003D4   6071         JZ      ??MT_AfDataRequest_11
    408                {
    409                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   0003D6                ; Setup parameters for call to function osal_set_event
   \   0003D6   7A08         MOV     R2,#0x8
   \   0003D8   7B00         MOV     R3,#0x0
   \   0003DA   90....       MOV     DPTR,#MT_TaskID
   \   0003DD   E0           MOVX    A,@DPTR
   \   0003DE   F9           MOV     R1,A
   \   0003DF   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0003E2   E9           MOV     A,R1
   \   0003E3   C0E0         PUSH    A
   \   0003E5   7409         MOV     A,#0x9
   \   0003E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EA   D0E0         POP     A
   \   0003EC   F0           MOVX    @DPTR,A
   \   0003ED   8058         SJMP    ??MT_AfDataRequest_11
    410                }
    411              }
    412            }
    413            else
    414            {
    415              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_12:
   \   0003EF                ; Setup parameters for call to function AF_DataRequest
   \   0003EF   7401         MOV     A,#0x1
   \   0003F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F4   E0           MOVX    A,@DPTR
   \   0003F5   F5..         MOV     ?V0,A
   \   0003F7   78..         MOV     R0,#?V0
   \   0003F9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003FC   7404         MOV     A,#0x4
   \   0003FE   12....       LCALL   ?XSTACK_DISP100_8
   \   000401   88..         MOV     ?V0,R0
   \   000403   89..         MOV     ?V1,R1
   \   000405   78..         MOV     R0,#?V0
   \   000407   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040A   8E..         MOV     ?V0,R6
   \   00040C   8F..         MOV     ?V1,R7
   \   00040E   78..         MOV     R0,#?V0
   \   000410   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000413   78..         MOV     R0,#?V4
   \   000415   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000418   78..         MOV     R0,#?V6
   \   00041A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00041D   740B         MOV     A,#0xb
   \   00041F   12....       LCALL   ?XSTACK_DISP0_8
   \   000422   E0           MOVX    A,@DPTR
   \   000423   F9           MOV     R1,A
   \   000424   740E         MOV     A,#0xe
   \   000426   12....       LCALL   ?XSTACK_DISP0_8
   \   000429   E0           MOVX    A,@DPTR
   \   00042A   FC           MOV     R4,A
   \   00042B   A3           INC     DPTR
   \   00042C   E0           MOVX    A,@DPTR
   \   00042D   FD           MOV     R5,A
   \   00042E   7413         MOV     A,#0x13
   \   000430   12....       LCALL   ?XSTACK_DISP101_8
   \   000433   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000436   7409         MOV     A,#0x9
   \   000438   12....       LCALL   ?DEALLOC_XSTACK8
   \   00043B   E9           MOV     A,R1
   \   00043C   C0E0         PUSH    A
   \   00043E   85..82       MOV     DPL,?XSP + 0
   \   000441   85..83       MOV     DPH,?XSP + 1
   \   000444   D0E0         POP     A
   \   000446   F0           MOVX    @DPTR,A
    416            }
    417          
    418            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_11:
   \   000447   7404         MOV     A,#0x4
   \   000449   12....       LCALL   ?XSTACK_DISP0_8
   \   00044C   E0           MOVX    A,@DPTR
   \   00044D   54E0         ANL     A,#0xe0
   \   00044F   6420         XRL     A,#0x20
   \   000451   700D         JNZ     ??MT_AfDataRequest_15
    419            {
    420              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   000453                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000453   AC..         MOV     R4,?XSP + 0
   \   000455   AD..         MOV     R5,?XSP + 1
   \   000457   7B01         MOV     R3,#0x1
   \   000459   AA..         MOV     R2,?V3
   \   00045B   7964         MOV     R1,#0x64
   \   00045D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    421            }
    422          }
   \                     ??MT_AfDataRequest_15:
   \   000460   7418         MOV     A,#0x18
   \   000462   12....       LCALL   ?DEALLOC_XSTACK8
   \   000465   7F08         MOV     R7,#0x8
   \   000467   02....       LJMP    ?BANKED_LEAVE_XDATA
    423          
    424          #if defined ( ZIGBEE_SOURCE_ROUTING )
    425          
    426          /***************************************************************************************************
    427           * @fn      MT_AfDataRequestSrcRtg
    428           *
    429           * @brief   Process AF Register command
    430           *
    431           * @param   pBuf - pointer to the received buffer
    432           *
    433           * @return  none
    434           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    437            uint8 cmdId, dataLen = 0;
   \   00000E   75..00       MOV     ?V3,#0x0
    438            uint8 retValue = ZFailure;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   7401         MOV     A,#0x1
   \   000019   F0           MOVX    @DPTR,A
    439            endPointDesc_t *epDesc;
    440            byte transId;
    441            afAddrType_t dstAddr;
    442            cId_t cId;
    443            byte txOpts, radius, srcEP, relayCnt;
    444            uint16 *pRelayList;
    445            uint8 i;
    446          
    447            /* parse header */
    448            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V7,A
    449            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000023   EE           MOV     A,R6
   \   000024   2403         ADD     A,#0x3
   \   000026   FE           MOV     R6,A
   \   000027   5001         JNC     ??MT_AfDataRequestSrcRtg_0
   \   000029   0F           INC     R7
    450          
    451            /* Destination address */
    452            /* Initialize the panID field to zero to avoid inter-pan */
    453            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   00002A                ; Setup parameters for call to function osal_memset
   \   00002A   7C0C         MOV     R4,#0xc
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   7900         MOV     R1,#0x0
   \   000030   7409         MOV     A,#0x9
   \   000032   12....       LCALL   ?XSTACK_DISP101_8
   \   000035   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    454            dstAddr.addrMode = afAddr16Bit;
   \   000038   7411         MOV     A,#0x11
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7402         MOV     A,#0x2
   \   00003F   F0           MOVX    @DPTR,A
    455            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   7B00         MOV     R3,#0x0
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   7900         MOV     R1,#0x0
   \   000051   E4           CLR     A
   \   000052   C8           XCH     A,R0
   \   000053   F9           MOV     R1,A
   \   000054   EA           MOV     A,R2
   \   000055   28           ADD     A,R0
   \   000056   F8           MOV     R0,A
   \   000057   EB           MOV     A,R3
   \   000058   39           ADDC    A,R1
   \   000059   F9           MOV     R1,A
   \   00005A   7409         MOV     A,#0x9
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    456            pBuf += 2;
   \   000064   EE           MOV     A,R6
   \   000065   2402         ADD     A,#0x2
   \   000067   FE           MOV     R6,A
   \   000068   5001         JNC     ??MT_AfDataRequestSrcRtg_1
   \   00006A   0F           INC     R7
    457          
    458            /* Destination endpoint */
    459            dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   C0E0         PUSH    A
   \   000072   7412         MOV     A,#0x12
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   A3           INC     DPTR
   \   00007F   AE82         MOV     R6,DPL
   \   000081   AF83         MOV     R7,DPH
    460          
    461            /* Source endpoint */
    462            srcEP = *pBuf++;
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   E0           MOVX    A,@DPTR
   \   000088   C0E0         PUSH    A
   \   00008A   7403         MOV     A,#0x3
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   D0E0         POP     A
   \   000091   F0           MOVX    @DPTR,A
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   AE82         MOV     R6,DPL
   \   000099   AF83         MOV     R7,DPH
    463            epDesc = afFindEndPointDesc( srcEP );
   \   00009B                ; Setup parameters for call to function afFindEndPointDesc
   \   00009B   7403         MOV     A,#0x3
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000A5   7407         MOV     A,#0x7
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   EA           MOV     A,R2
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   EB           MOV     A,R3
   \   0000AE   F0           MOVX    @DPTR,A
    464          
    465            /* ClusterId */
    466            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FA           MOV     R2,A
   \   0000B5   7B00         MOV     R3,#0x0
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F8           MOV     R0,A
   \   0000BE   7900         MOV     R1,#0x0
   \   0000C0   E4           CLR     A
   \   0000C1   C8           XCH     A,R0
   \   0000C2   F9           MOV     R1,A
   \   0000C3   EA           MOV     A,R2
   \   0000C4   28           ADD     A,R0
   \   0000C5   F8           MOV     R0,A
   \   0000C6   EB           MOV     A,R3
   \   0000C7   39           ADDC    A,R1
   \   0000C8   F9           MOV     R1,A
   \   0000C9   88..         MOV     ?V0,R0
   \   0000CB   89..         MOV     ?V1,R1
    467            pBuf +=2;
   \   0000CD   EE           MOV     A,R6
   \   0000CE   2402         ADD     A,#0x2
   \   0000D0   FE           MOV     R6,A
   \   0000D1   5001         JNC     ??MT_AfDataRequestSrcRtg_2
   \   0000D3   0F           INC     R7
    468          
    469            /* TransId */
    470            transId = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   C0E0         PUSH    A
   \   0000DB   7406         MOV     A,#0x6
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   A3           INC     DPTR
   \   0000E8   AE82         MOV     R6,DPL
   \   0000EA   AF83         MOV     R7,DPH
    471          
    472            /* TxOption */
    473            txOpts = *pBuf++;
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   C0E0         PUSH    A
   \   0000F3   7405         MOV     A,#0x5
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   8E82         MOV     DPL,R6
   \   0000FD   8F83         MOV     DPH,R7
   \   0000FF   A3           INC     DPTR
   \   000100   AE82         MOV     R6,DPL
   \   000102   AF83         MOV     R7,DPH
    474          
    475            /* Radius */
    476            radius = *pBuf++;
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   E0           MOVX    A,@DPTR
   \   000109   C0E0         PUSH    A
   \   00010B   7404         MOV     A,#0x4
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   D0E0         POP     A
   \   000112   F0           MOVX    @DPTR,A
   \   000113   8E82         MOV     DPL,R6
   \   000115   8F83         MOV     DPH,R7
   \   000117   A3           INC     DPTR
   \   000118   AE82         MOV     R6,DPL
   \   00011A   AF83         MOV     R7,DPH
    477          
    478            /* Source route relay count */
    479            relayCnt = *pBuf++;
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F5..         MOV     ?V6,A
   \   000123   8E82         MOV     DPL,R6
   \   000125   8F83         MOV     DPH,R7
   \   000127   A3           INC     DPTR
   \   000128   AE82         MOV     R6,DPL
   \   00012A   AF83         MOV     R7,DPH
    480          
    481            /* Convert the source route relay list */
    482            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \   00012C                ; Setup parameters for call to function osal_mem_alloc
   \   00012C   AA..         MOV     R2,?V6
   \   00012E   7B00         MOV     R3,#0x0
   \   000130   EA           MOV     A,R2
   \   000131   75F002       MOV     B,#0x2
   \   000134   A4           MUL     AB
   \   000135   CA           XCH     A,R2
   \   000136   A8F0         MOV     R0,B
   \   000138   75F000       MOV     B,#0x0
   \   00013B   A4           MUL     AB
   \   00013C   28           ADD     A,R0
   \   00013D   F8           MOV     R0,A
   \   00013E   75F002       MOV     B,#0x2
   \   000141   EB           MOV     A,R3
   \   000142   A4           MUL     AB
   \   000143   28           ADD     A,R0
   \   000144   FB           MOV     R3,A
   \   000145   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000148   7401         MOV     A,#0x1
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   EA           MOV     A,R2
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   EB           MOV     A,R3
   \   000151   F0           MOVX    @DPTR,A
   \   000152   7401         MOV     A,#0x1
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   E0           MOVX    A,@DPTR
   \   000158   F8           MOV     R0,A
   \   000159   A3           INC     DPTR
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F9           MOV     R1,A
   \   00015C   E8           MOV     A,R0
   \   00015D   49           ORL     A,R1
   \   00015E   7003         JNZ     $+5
   \   000160   02....       LJMP    ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    483            {
    484              for( i = 0; i < relayCnt; i++ )
   \   000163   75..00       MOV     ?V2,#0x0
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   000166   E5..         MOV     A,?V2
   \   000168   C3           CLR     C
   \   000169   95..         SUBB    A,?V6
   \   00016B   5052         JNC     ??MT_AfDataRequestSrcRtg_5
    485              {
    486                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00016D   8E82         MOV     DPL,R6
   \   00016F   8F83         MOV     DPH,R7
   \   000171   E0           MOVX    A,@DPTR
   \   000172   FA           MOV     R2,A
   \   000173   7B00         MOV     R3,#0x0
   \   000175   8E82         MOV     DPL,R6
   \   000177   8F83         MOV     DPH,R7
   \   000179   A3           INC     DPTR
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   F8           MOV     R0,A
   \   00017C   7900         MOV     R1,#0x0
   \   00017E   E4           CLR     A
   \   00017F   C8           XCH     A,R0
   \   000180   F9           MOV     R1,A
   \   000181   EA           MOV     A,R2
   \   000182   28           ADD     A,R0
   \   000183   FA           MOV     R2,A
   \   000184   EB           MOV     A,R3
   \   000185   39           ADDC    A,R1
   \   000186   FB           MOV     R3,A
   \   000187   A8..         MOV     R0,?V2
   \   000189   7900         MOV     R1,#0x0
   \   00018B   E8           MOV     A,R0
   \   00018C   75F002       MOV     B,#0x2
   \   00018F   A4           MUL     AB
   \   000190   C8           XCH     A,R0
   \   000191   ACF0         MOV     R4,B
   \   000193   75F000       MOV     B,#0x0
   \   000196   A4           MUL     AB
   \   000197   2C           ADD     A,R4
   \   000198   FC           MOV     R4,A
   \   000199   75F002       MOV     B,#0x2
   \   00019C   E9           MOV     A,R1
   \   00019D   A4           MUL     AB
   \   00019E   2C           ADD     A,R4
   \   00019F   F9           MOV     R1,A
   \   0001A0   7401         MOV     A,#0x1
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   28           ADD     A,R0
   \   0001A7   FC           MOV     R4,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   39           ADDC    A,R1
   \   0001AB   8C82         MOV     DPL,R4
   \   0001AD   F583         MOV     DPH,A
   \   0001AF   EA           MOV     A,R2
   \   0001B0   F0           MOVX    @DPTR,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   EB           MOV     A,R3
   \   0001B3   F0           MOVX    @DPTR,A
    487                pBuf += 2;
   \   0001B4   EE           MOV     A,R6
   \   0001B5   2402         ADD     A,#0x2
   \   0001B7   FE           MOV     R6,A
   \   0001B8   5001         JNC     ??MT_AfDataRequestSrcRtg_6
   \   0001BA   0F           INC     R7
    488              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0001BB   05..         INC     ?V2
   \   0001BD   80A7         SJMP    ??MT_AfDataRequestSrcRtg_4
    489          
    490              /* Data payload Length */
    491              dataLen = *pBuf++;
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0001BF   8E82         MOV     DPL,R6
   \   0001C1   8F83         MOV     DPH,R7
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F5..         MOV     ?V3,A
   \   0001C6   8E82         MOV     DPL,R6
   \   0001C8   8F83         MOV     DPH,R7
   \   0001CA   A3           INC     DPTR
   \   0001CB   AE82         MOV     R6,DPL
   \   0001CD   AF83         MOV     R7,DPH
    492          
    493              if ( epDesc == NULL )
   \   0001CF   7407         MOV     A,#0x7
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   F8           MOV     R0,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F9           MOV     R1,A
   \   0001D9   E8           MOV     A,R0
   \   0001DA   49           ORL     A,R1
   \   0001DB   700B         JNZ     ??MT_AfDataRequestSrcRtg_7
    494              {
    495                retValue = afStatus_INVALID_PARAMETER;
   \   0001DD   85..82       MOV     DPL,?XSP + 0
   \   0001E0   85..83       MOV     DPH,?XSP + 1
   \   0001E3   7402         MOV     A,#0x2
   \   0001E5   F0           MOVX    @DPTR,A
   \   0001E6   806F         SJMP    ??MT_AfDataRequestSrcRtg_8
    496              }
    497              else
    498              {
    499                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    500                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   0001E8                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0001E8   7401         MOV     A,#0x1
   \   0001EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001ED   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001F0   E5..         MOV     A,?V6
   \   0001F2   F5..         MOV     ?V4,A
   \   0001F4   78..         MOV     R0,#?V4
   \   0001F6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F9   7407         MOV     A,#0x7
   \   0001FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   F5..         MOV     ?V4,A
   \   000201   78..         MOV     R0,#?V4
   \   000203   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000206   740A         MOV     A,#0xa
   \   000208   12....       LCALL   ?XSTACK_DISP100_8
   \   00020B   88..         MOV     ?V4,R0
   \   00020D   89..         MOV     ?V5,R1
   \   00020F   78..         MOV     R0,#?V4
   \   000211   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000214   8E..         MOV     ?V4,R6
   \   000216   8F..         MOV     ?V5,R7
   \   000218   78..         MOV     R0,#?V4
   \   00021A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021D   85....       MOV     ?V4,?V3
   \   000220   75..00       MOV     ?V5,#0x0
   \   000223   78..         MOV     R0,#?V4
   \   000225   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000228   78..         MOV     R0,#?V0
   \   00022A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022D   7411         MOV     A,#0x11
   \   00022F   12....       LCALL   ?XSTACK_DISP0_8
   \   000232   E0           MOVX    A,@DPTR
   \   000233   F9           MOV     R1,A
   \   000234   7413         MOV     A,#0x13
   \   000236   12....       LCALL   ?XSTACK_DISP0_8
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   FC           MOV     R4,A
   \   00023B   A3           INC     DPTR
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   FD           MOV     R5,A
   \   00023E   7415         MOV     A,#0x15
   \   000240   12....       LCALL   ?XSTACK_DISP101_8
   \   000243   12....       LCALL   `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   000246   740C         MOV     A,#0xc
   \   000248   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024B   E9           MOV     A,R1
   \   00024C   C0E0         PUSH    A
   \   00024E   85..82       MOV     DPL,?XSP + 0
   \   000251   85..83       MOV     DPH,?XSP + 1
   \   000254   D0E0         POP     A
   \   000256   F0           MOVX    @DPTR,A
    501              }
    502          
    503              /* Free the memory allocated */
    504              osal_mem_free( pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   000257                ; Setup parameters for call to function osal_mem_free
   \   000257   7401         MOV     A,#0x1
   \   000259   12....       LCALL   ?XSTACK_DISP0_8
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   FA           MOV     R2,A
   \   00025E   A3           INC     DPTR
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   FB           MOV     R3,A
   \   000261   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000264   8009         SJMP    ??MT_AfDataRequestSrcRtg_9
    505            }
    506            else
    507            {
    508              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000266   85..82       MOV     DPL,?XSP + 0
   \   000269   85..83       MOV     DPH,?XSP + 1
   \   00026C   7410         MOV     A,#0x10
   \   00026E   F0           MOVX    @DPTR,A
    509            }
    510          
    511          
    512            /* Build and send back the response */
    513            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   00026F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00026F   AC..         MOV     R4,?XSP + 0
   \   000271   AD..         MOV     R5,?XSP + 1
   \   000273   7B01         MOV     R3,#0x1
   \   000275   AA..         MOV     R2,?V7
   \   000277   7964         MOV     R1,#0x64
   \   000279   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    514          }
   \   00027C   7415         MOV     A,#0x15
   \   00027E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000281   7F08         MOV     R7,#0x8
   \   000283   02....       LJMP    ?BANKED_LEAVE_XDATA
    515          #endif
    516          
    517          #if defined INTER_PAN
    518          /***************************************************************************************************
    519           * @fn      MT_AfInterPanCtl
    520           *
    521           * @brief   Process the AF Inter Pan control command.
    522           *
    523           * @param   pBuf - pointer to the received buffer
    524           *
    525           * @return  none
    526           ***************************************************************************************************/
    527          static void MT_AfInterPanCtl(uint8 *pBuf)
    528          {
    529            uint8 cmd, rtrn;
    530            uint16 panId;
    531            endPointDesc_t *pEP;
    532          
    533            cmd = pBuf[MT_RPC_POS_CMD1];
    534            pBuf += MT_RPC_FRAME_HDR_SZ;
    535          
    536            switch (*pBuf++)  // Inter-pan request parameter.
    537            {
    538            case InterPanClr:
    539              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    540              break;
    541          
    542            case InterPanSet:
    543              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    544              break;
    545          
    546            case InterPanReg:
    547              if ((pEP = afFindEndPointDesc(*pBuf)))
    548              {
    549                StubAPS_RegisterApp(pEP);
    550                rtrn = SUCCESS;
    551              }
    552              else
    553              {
    554                rtrn = FAILURE;
    555              }
    556              break;
    557          
    558            case InterPanChk:
    559              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    560              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    561              break;
    562          
    563            default:
    564              rtrn = afStatus_INVALID_PARAMETER;
    565              break;
    566            }
    567          
    568            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    569          }
    570          #endif
    571          
    572          /***************************************************************************************************
    573           * @fn      MT_AfDataConfirm
    574           *
    575           * @brief   Process
    576           *
    577           * @param   pBuf - pointer to the received buffer
    578           *
    579           * @return  none
    580           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    581          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    582          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    583            uint8 retArray[3];
    584          
    585            retArray[0] = pMsg->hdr.status;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   C0E0         PUSH    A
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   D0E0         POP     A
   \   00001E   F0           MOVX    @DPTR,A
    586            retArray[1] = pMsg->endpoint;
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   D0E0         POP     A
   \   00002F   F0           MOVX    @DPTR,A
    587            retArray[2] = pMsg->transID;
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
    588          
    589            /* Build and send back the response */
    590            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   000042                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000042   AC..         MOV     R4,?XSP + 0
   \   000044   AD..         MOV     R5,?XSP + 1
   \   000046   7B03         MOV     R3,#0x3
   \   000048   7A80         MOV     R2,#-0x80
   \   00004A   7944         MOV     R1,#0x44
   \   00004C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    591          }
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   7F01         MOV     R7,#0x1
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    592          
    593          /***************************************************************************************************
    594           * @fn          MT_AfIncomingMsg
    595           *
    596           * @brief       Process the callback subscription for AF Incoming data.
    597           *
    598           * @param       pkt - Incoming AF data.
    599           *
    600           * @return      none
    601           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    602          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    603          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    604            #define MT_AF_INC_MSG_LEN  17
    605            #define MT_AF_INC_MSG_EXT  10
    606          
    607            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C8           XCH     A,R0
   \   000020   2420         ADD     A,#0x20
   \   000022   F582         MOV     DPL,A
   \   000024   C8           XCH     A,R0
   \   000025   3400         ADDC    A,#0x0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V7,A
    608            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000030   E5..         MOV     A,?V6
   \   000032   2411         ADD     A,#0x11
   \   000034   F5..         MOV     ?V4,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V7
   \   000039   F5..         MOV     ?V5,A
    609            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   7481         MOV     A,#-0x7f
   \   000042   F0           MOVX    @DPTR,A
    610            uint8 *pRsp, *pTmp;
    611            mtAfInMsgList_t *pItem = NULL;
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   7400         MOV     A,#0x0
   \   00004E   F0           MOVX    @DPTR,A
    612          
    613          #if defined INTER_PAN
    614            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    615            {
    616              cmd = MT_AF_INCOMING_MSG_EXT;
    617            }
    618            else
    619          #endif
    620            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    621                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C8           XCH     A,R0
   \   00005A   240E         ADD     A,#0xe
   \   00005C   F582         MOV     DPL,A
   \   00005E   C8           XCH     A,R0
   \   00005F   3400         ADDC    A,#0x0
   \   000061   F583         MOV     DPH,A
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6403         XRL     A,#0x3
   \   000066   600B         JZ      ??MT_AfIncomingMsg_0
   \   000068   C3           CLR     C
   \   000069   E5..         MOV     A,?V4
   \   00006B   94F1         SUBB    A,#-0xf
   \   00006D   E5..         MOV     A,?V5
   \   00006F   9400         SUBB    A,#0x0
   \   000071   4008         JC      ??MT_AfIncomingMsg_1
    622            {
    623              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   000073   7404         MOV     A,#0x4
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   7482         MOV     A,#-0x7e
   \   00007A   F0           MOVX    @DPTR,A
    624            }
    625          
    626            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??MT_AfIncomingMsg_1:
   \   00007B   7404         MOV     A,#0x4
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6482         XRL     A,#0x82
   \   000083   700C         JNZ     ??MT_AfIncomingMsg_2
    627            {
    628              respLen += MT_AF_INC_MSG_EXT;
   \   000085   E5..         MOV     A,?V4
   \   000087   240A         ADD     A,#0xa
   \   000089   F5..         MOV     ?V4,A
   \   00008B   E5..         MOV     A,?V5
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   F5..         MOV     ?V5,A
    629            }
    630          
    631            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_2:
   \   000091   C3           CLR     C
   \   000092   E5..         MOV     A,?V4
   \   000094   94FB         SUBB    A,#-0x5
   \   000096   E5..         MOV     A,?V5
   \   000098   9400         SUBB    A,#0x0
   \   00009A   4056         JC      ??MT_AfIncomingMsg_3
    632            {
    633              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   00009C                ; Setup parameters for call to function osal_mem_alloc
   \   00009C   E5..         MOV     A,?V6
   \   00009E   2409         ADD     A,#0x9
   \   0000A0   FA           MOV     R2,A
   \   0000A1   E4           CLR     A
   \   0000A2   35..         ADDC    A,?V7
   \   0000A4   FB           MOV     R3,A
   \   0000A5   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A8   7402         MOV     A,#0x2
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   EA           MOV     A,R2
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   EB           MOV     A,R3
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F8           MOV     R0,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   E8           MOV     A,R0
   \   0000BD   49           ORL     A,R1
   \   0000BE   7003         JNZ     $+5
   \   0000C0   02....       LJMP    ??MT_AfIncomingMsg_4 & 0xFFFF
    634              {
    635                return;  // If cannot hold a huge message, cannot give indication at all.
    636              }
    637          
    638              pItem->data = (uint8 *)(pItem+1);
   \   0000C3   7402         MOV     A,#0x2
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   2409         ADD     A,#0x9
   \   0000CB   FA           MOV     R2,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   3400         ADDC    A,#0x0
   \   0000D0   FB           MOV     R3,A
   \   0000D1   7402         MOV     A,#0x2
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F8           MOV     R0,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F583         MOV     DPH,A
   \   0000DC   8882         MOV     DPL,R0
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   EA           MOV     A,R2
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   EB           MOV     A,R3
   \   0000E4   F0           MOVX    @DPTR,A
    639              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   0000E5   C3           CLR     C
   \   0000E6   E5..         MOV     A,?V4
   \   0000E8   95..         SUBB    A,?V6
   \   0000EA   F5..         MOV     ?V4,A
   \   0000EC   E5..         MOV     A,?V5
   \   0000EE   95..         SUBB    A,?V7
   \   0000F0   F5..         MOV     ?V5,A
    640            }
    641          
    642            // Attempt to allocate memory for the response packet.
    643            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_3:
   \   0000F2                ; Setup parameters for call to function osal_mem_alloc
   \   0000F2   AA..         MOV     R2,?V4
   \   0000F4   AB..         MOV     R3,?V5
   \   0000F6   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000F9   7405         MOV     A,#0x5
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   EA           MOV     A,R2
   \   0000FF   F0           MOVX    @DPTR,A
   \   000100   A3           INC     DPTR
   \   000101   EB           MOV     A,R3
   \   000102   F0           MOVX    @DPTR,A
   \   000103   7405         MOV     A,#0x5
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F8           MOV     R0,A
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F9           MOV     R1,A
   \   00010D   E8           MOV     A,R0
   \   00010E   49           ORL     A,R1
   \   00010F   701E         JNZ     ??MT_AfIncomingMsg_5
    644            {
    645              if (pItem != NULL)
   \   000111   7402         MOV     A,#0x2
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F8           MOV     R0,A
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F9           MOV     R1,A
   \   00011B   E8           MOV     A,R0
   \   00011C   49           ORL     A,R1
   \   00011D   600D         JZ      ??MT_AfIncomingMsg_6
    646              {
    647                (void)osal_mem_free(pItem);
   \   00011F                ; Setup parameters for call to function osal_mem_free
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E0           MOVX    A,@DPTR
   \   000125   FA           MOV     R2,A
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   FB           MOV     R3,A
   \   000129   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    648              }
    649              return;
   \                     ??MT_AfIncomingMsg_6:
   \   00012C   02....       LJMP    ??MT_AfIncomingMsg_4 & 0xFFFF
    650            }
    651            pTmp = pRsp;
   \                     ??MT_AfIncomingMsg_5:
   \   00012F   7405         MOV     A,#0x5
   \   000131   12....       LCALL   ?XSTACK_DISP0_8
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F8           MOV     R0,A
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F9           MOV     R1,A
   \   000139   E8           MOV     A,R0
   \   00013A   FE           MOV     R6,A
   \   00013B   E9           MOV     A,R1
   \   00013C   FF           MOV     R7,A
    652          
    653            /* Group ID */
    654            *pTmp++ = LO_UINT16(pMsg->groupId);
   \   00013D   85..82       MOV     DPL,?XSP + 0
   \   000140   85..83       MOV     DPH,?XSP + 1
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F8           MOV     R0,A
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   F583         MOV     DPH,A
   \   000149   8882         MOV     DPL,R0
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   F8           MOV     R0,A
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F9           MOV     R1,A
   \   000152   E8           MOV     A,R0
   \   000153   C0E0         PUSH    A
   \   000155   8E82         MOV     DPL,R6
   \   000157   8F83         MOV     DPH,R7
   \   000159   D0E0         POP     A
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   8E82         MOV     DPL,R6
   \   00015E   8F83         MOV     DPH,R7
   \   000160   A3           INC     DPTR
   \   000161   AE82         MOV     R6,DPL
   \   000163   AF83         MOV     R7,DPH
    655            *pTmp++ = HI_UINT16(pMsg->groupId);
   \   000165   85..82       MOV     DPL,?XSP + 0
   \   000168   85..83       MOV     DPH,?XSP + 1
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   F8           MOV     R0,A
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F583         MOV     DPH,A
   \   000171   8882         MOV     DPL,R0
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F8           MOV     R0,A
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F9           MOV     R1,A
   \   00017A   E4           CLR     A
   \   00017B   C9           XCH     A,R1
   \   00017C   F8           MOV     R0,A
   \   00017D   E8           MOV     A,R0
   \   00017E   C0E0         PUSH    A
   \   000180   8E82         MOV     DPL,R6
   \   000182   8F83         MOV     DPH,R7
   \   000184   D0E0         POP     A
   \   000186   F0           MOVX    @DPTR,A
   \   000187   8E82         MOV     DPL,R6
   \   000189   8F83         MOV     DPH,R7
   \   00018B   A3           INC     DPTR
   \   00018C   AE82         MOV     R6,DPL
   \   00018E   AF83         MOV     R7,DPH
    656          
    657            /* Cluster ID */
    658            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   000190   85..82       MOV     DPL,?XSP + 0
   \   000193   85..83       MOV     DPH,?XSP + 1
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F8           MOV     R0,A
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F583         MOV     DPH,A
   \   00019C   8882         MOV     DPL,R0
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   F8           MOV     R0,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   F9           MOV     R1,A
   \   0001A7   E8           MOV     A,R0
   \   0001A8   C0E0         PUSH    A
   \   0001AA   8E82         MOV     DPL,R6
   \   0001AC   8F83         MOV     DPH,R7
   \   0001AE   D0E0         POP     A
   \   0001B0   F0           MOVX    @DPTR,A
   \   0001B1   8E82         MOV     DPL,R6
   \   0001B3   8F83         MOV     DPH,R7
   \   0001B5   A3           INC     DPTR
   \   0001B6   AE82         MOV     R6,DPL
   \   0001B8   AF83         MOV     R7,DPH
    659            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \   0001BA   85..82       MOV     DPL,?XSP + 0
   \   0001BD   85..83       MOV     DPH,?XSP + 1
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F8           MOV     R0,A
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F583         MOV     DPH,A
   \   0001C6   8882         MOV     DPL,R0
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   A3           INC     DPTR
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   F9           MOV     R1,A
   \   0001D1   E4           CLR     A
   \   0001D2   C9           XCH     A,R1
   \   0001D3   F8           MOV     R0,A
   \   0001D4   E8           MOV     A,R0
   \   0001D5   C0E0         PUSH    A
   \   0001D7   8E82         MOV     DPL,R6
   \   0001D9   8F83         MOV     DPH,R7
   \   0001DB   D0E0         POP     A
   \   0001DD   F0           MOVX    @DPTR,A
   \   0001DE   8E82         MOV     DPL,R6
   \   0001E0   8F83         MOV     DPH,R7
   \   0001E2   A3           INC     DPTR
   \   0001E3   AE82         MOV     R6,DPL
   \   0001E5   AF83         MOV     R7,DPH
    660          
    661            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0001E7   7404         MOV     A,#0x4
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   6482         XRL     A,#0x82
   \   0001EF   6003         JZ      $+5
   \   0001F1   02....       LJMP    ??MT_AfIncomingMsg_7 & 0xFFFF
    662            {
    663              *pTmp++ = pMsg->srcAddr.addrMode;
   \   0001F4   85..82       MOV     DPL,?XSP + 0
   \   0001F7   85..83       MOV     DPH,?XSP + 1
   \   0001FA   E0           MOVX    A,@DPTR
   \   0001FB   F8           MOV     R0,A
   \   0001FC   A3           INC     DPTR
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   C8           XCH     A,R0
   \   0001FF   240E         ADD     A,#0xe
   \   000201   F582         MOV     DPL,A
   \   000203   C8           XCH     A,R0
   \   000204   3400         ADDC    A,#0x0
   \   000206   F583         MOV     DPH,A
   \   000208   E0           MOVX    A,@DPTR
   \   000209   C0E0         PUSH    A
   \   00020B   8E82         MOV     DPL,R6
   \   00020D   8F83         MOV     DPH,R7
   \   00020F   D0E0         POP     A
   \   000211   F0           MOVX    @DPTR,A
   \   000212   8E82         MOV     DPL,R6
   \   000214   8F83         MOV     DPH,R7
   \   000216   A3           INC     DPTR
   \   000217   AE82         MOV     R6,DPL
   \   000219   AF83         MOV     R7,DPH
    664          
    665              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   00021B   85..82       MOV     DPL,?XSP + 0
   \   00021E   85..83       MOV     DPH,?XSP + 1
   \   000221   E0           MOVX    A,@DPTR
   \   000222   F8           MOV     R0,A
   \   000223   A3           INC     DPTR
   \   000224   E0           MOVX    A,@DPTR
   \   000225   C8           XCH     A,R0
   \   000226   240E         ADD     A,#0xe
   \   000228   F582         MOV     DPL,A
   \   00022A   C8           XCH     A,R0
   \   00022B   3400         ADDC    A,#0x0
   \   00022D   F583         MOV     DPH,A
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   6403         XRL     A,#0x3
   \   000232   7035         JNZ     ??MT_AfIncomingMsg_8
    666              {
    667                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000234                ; Setup parameters for call to function osal_memcpy
   \   000234   85..82       MOV     DPL,?XSP + 0
   \   000237   85..83       MOV     DPH,?XSP + 1
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   2406         ADD     A,#0x6
   \   00023D   F5..         MOV     ?V0,A
   \   00023F   A3           INC     DPTR
   \   000240   E0           MOVX    A,@DPTR
   \   000241   3400         ADDC    A,#0x0
   \   000243   F5..         MOV     ?V1,A
   \   000245   75..00       MOV     ?V2,#0x0
   \   000248   78..         MOV     R0,#?V0
   \   00024A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00024D   7C08         MOV     R4,#0x8
   \   00024F   7D00         MOV     R5,#0x0
   \   000251   EE           MOV     A,R6
   \   000252   FA           MOV     R2,A
   \   000253   EF           MOV     A,R7
   \   000254   FB           MOV     R3,A
   \   000255   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000258   7403         MOV     A,#0x3
   \   00025A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025D   8A..         MOV     ?V0,R2
   \   00025F   8B..         MOV     ?V1,R3
   \   000261   85..82       MOV     DPL,?V0
   \   000264   85..83       MOV     DPH,?V1
   \   000267   804A         SJMP    ??MT_AfIncomingMsg_9
    668              }
    669              else
    670              {
    671                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_8:
   \   000269   85..82       MOV     DPL,?XSP + 0
   \   00026C   85..83       MOV     DPH,?XSP + 1
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   F8           MOV     R0,A
   \   000271   A3           INC     DPTR
   \   000272   E0           MOVX    A,@DPTR
   \   000273   C8           XCH     A,R0
   \   000274   2406         ADD     A,#0x6
   \   000276   F582         MOV     DPL,A
   \   000278   C8           XCH     A,R0
   \   000279   3400         ADDC    A,#0x0
   \   00027B   F583         MOV     DPH,A
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   F8           MOV     R0,A
   \   00027F   A3           INC     DPTR
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F9           MOV     R1,A
   \   000282   E8           MOV     A,R0
   \   000283   C0E0         PUSH    A
   \   000285   8E82         MOV     DPL,R6
   \   000287   8F83         MOV     DPH,R7
   \   000289   D0E0         POP     A
   \   00028B   F0           MOVX    @DPTR,A
    672                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   00028C   85..82       MOV     DPL,?XSP + 0
   \   00028F   85..83       MOV     DPH,?XSP + 1
   \   000292   E0           MOVX    A,@DPTR
   \   000293   F8           MOV     R0,A
   \   000294   A3           INC     DPTR
   \   000295   E0           MOVX    A,@DPTR
   \   000296   C8           XCH     A,R0
   \   000297   2406         ADD     A,#0x6
   \   000299   F582         MOV     DPL,A
   \   00029B   C8           XCH     A,R0
   \   00029C   3400         ADDC    A,#0x0
   \   00029E   F583         MOV     DPH,A
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   F8           MOV     R0,A
   \   0002A2   A3           INC     DPTR
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   F9           MOV     R1,A
   \   0002A5   E4           CLR     A
   \   0002A6   C9           XCH     A,R1
   \   0002A7   F8           MOV     R0,A
   \   0002A8   E8           MOV     A,R0
   \   0002A9   C0E0         PUSH    A
   \   0002AB   8E82         MOV     DPL,R6
   \   0002AD   8F83         MOV     DPH,R7
   \   0002AF   A3           INC     DPTR
   \   0002B0   D0E0         POP     A
   \   0002B2   F0           MOVX    @DPTR,A
    673              }
    674              pTmp += Z_EXTADDR_LEN;
   \                     ??MT_AfIncomingMsg_9:
   \   0002B3   EE           MOV     A,R6
   \   0002B4   2408         ADD     A,#0x8
   \   0002B6   FE           MOV     R6,A
   \   0002B7   5001         JNC     ??MT_AfIncomingMsg_10
   \   0002B9   0F           INC     R7
    675          
    676              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??MT_AfIncomingMsg_10:
   \   0002BA   85..82       MOV     DPL,?XSP + 0
   \   0002BD   85..83       MOV     DPH,?XSP + 1
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   F8           MOV     R0,A
   \   0002C2   A3           INC     DPTR
   \   0002C3   E0           MOVX    A,@DPTR
   \   0002C4   C8           XCH     A,R0
   \   0002C5   240F         ADD     A,#0xf
   \   0002C7   F582         MOV     DPL,A
   \   0002C9   C8           XCH     A,R0
   \   0002CA   3400         ADDC    A,#0x0
   \   0002CC   F583         MOV     DPH,A
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   C0E0         PUSH    A
   \   0002D1   8E82         MOV     DPL,R6
   \   0002D3   8F83         MOV     DPH,R7
   \   0002D5   D0E0         POP     A
   \   0002D7   F0           MOVX    @DPTR,A
   \   0002D8   8E82         MOV     DPL,R6
   \   0002DA   8F83         MOV     DPH,R7
   \   0002DC   A3           INC     DPTR
   \   0002DD   AE82         MOV     R6,DPL
   \   0002DF   AF83         MOV     R7,DPH
    677          #if defined INTER_PAN
    678              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    679              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    680          #else
    681              *pTmp++ = 0;
   \   0002E1   8E82         MOV     DPL,R6
   \   0002E3   8F83         MOV     DPH,R7
   \   0002E5   7400         MOV     A,#0x0
   \   0002E7   F0           MOVX    @DPTR,A
   \   0002E8   8E82         MOV     DPL,R6
   \   0002EA   8F83         MOV     DPH,R7
   \   0002EC   A3           INC     DPTR
   \   0002ED   AE82         MOV     R6,DPL
   \   0002EF   AF83         MOV     R7,DPH
    682              *pTmp++ = 0;
   \   0002F1   8E82         MOV     DPL,R6
   \   0002F3   8F83         MOV     DPH,R7
   \   0002F5   7400         MOV     A,#0x0
   \   0002F7   F0           MOVX    @DPTR,A
   \   0002F8   8E82         MOV     DPL,R6
   \   0002FA   8F83         MOV     DPH,R7
   \   0002FC   A3           INC     DPTR
   \   0002FD   AE82         MOV     R6,DPL
   \   0002FF   AF83         MOV     R7,DPH
   \   000301   02....       LJMP    ??MT_AfIncomingMsg_11 & 0xFFFF
    683          #endif
    684            }
    685            else
    686            {
    687              /* Source Address */
    688              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   000304   85..82       MOV     DPL,?XSP + 0
   \   000307   85..83       MOV     DPH,?XSP + 1
   \   00030A   E0           MOVX    A,@DPTR
   \   00030B   F8           MOV     R0,A
   \   00030C   A3           INC     DPTR
   \   00030D   E0           MOVX    A,@DPTR
   \   00030E   C8           XCH     A,R0
   \   00030F   2406         ADD     A,#0x6
   \   000311   F582         MOV     DPL,A
   \   000313   C8           XCH     A,R0
   \   000314   3400         ADDC    A,#0x0
   \   000316   F583         MOV     DPH,A
   \   000318   E0           MOVX    A,@DPTR
   \   000319   F8           MOV     R0,A
   \   00031A   A3           INC     DPTR
   \   00031B   E0           MOVX    A,@DPTR
   \   00031C   F9           MOV     R1,A
   \   00031D   E8           MOV     A,R0
   \   00031E   C0E0         PUSH    A
   \   000320   8E82         MOV     DPL,R6
   \   000322   8F83         MOV     DPH,R7
   \   000324   D0E0         POP     A
   \   000326   F0           MOVX    @DPTR,A
   \   000327   8E82         MOV     DPL,R6
   \   000329   8F83         MOV     DPH,R7
   \   00032B   A3           INC     DPTR
   \   00032C   AE82         MOV     R6,DPL
   \   00032E   AF83         MOV     R7,DPH
    689              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000330   85..82       MOV     DPL,?XSP + 0
   \   000333   85..83       MOV     DPH,?XSP + 1
   \   000336   E0           MOVX    A,@DPTR
   \   000337   F8           MOV     R0,A
   \   000338   A3           INC     DPTR
   \   000339   E0           MOVX    A,@DPTR
   \   00033A   C8           XCH     A,R0
   \   00033B   2406         ADD     A,#0x6
   \   00033D   F582         MOV     DPL,A
   \   00033F   C8           XCH     A,R0
   \   000340   3400         ADDC    A,#0x0
   \   000342   F583         MOV     DPH,A
   \   000344   E0           MOVX    A,@DPTR
   \   000345   F8           MOV     R0,A
   \   000346   A3           INC     DPTR
   \   000347   E0           MOVX    A,@DPTR
   \   000348   F9           MOV     R1,A
   \   000349   E4           CLR     A
   \   00034A   C9           XCH     A,R1
   \   00034B   F8           MOV     R0,A
   \   00034C   E8           MOV     A,R0
   \   00034D   C0E0         PUSH    A
   \   00034F   8E82         MOV     DPL,R6
   \   000351   8F83         MOV     DPH,R7
   \   000353   D0E0         POP     A
   \   000355   F0           MOVX    @DPTR,A
   \   000356   8E82         MOV     DPL,R6
   \   000358   8F83         MOV     DPH,R7
   \   00035A   A3           INC     DPTR
   \   00035B   AE82         MOV     R6,DPL
   \   00035D   AF83         MOV     R7,DPH
    690          
    691              /* Source EP */
    692              *pTmp++ = pMsg->srcAddr.endPoint;
   \   00035F   85..82       MOV     DPL,?XSP + 0
   \   000362   85..83       MOV     DPH,?XSP + 1
   \   000365   E0           MOVX    A,@DPTR
   \   000366   F8           MOV     R0,A
   \   000367   A3           INC     DPTR
   \   000368   E0           MOVX    A,@DPTR
   \   000369   C8           XCH     A,R0
   \   00036A   240F         ADD     A,#0xf
   \   00036C   F582         MOV     DPL,A
   \   00036E   C8           XCH     A,R0
   \   00036F   3400         ADDC    A,#0x0
   \   000371   F583         MOV     DPH,A
   \   000373   E0           MOVX    A,@DPTR
   \   000374   C0E0         PUSH    A
   \   000376   8E82         MOV     DPL,R6
   \   000378   8F83         MOV     DPH,R7
   \   00037A   D0E0         POP     A
   \   00037C   F0           MOVX    @DPTR,A
   \   00037D   8E82         MOV     DPL,R6
   \   00037F   8F83         MOV     DPH,R7
   \   000381   A3           INC     DPTR
   \   000382   AE82         MOV     R6,DPL
   \   000384   AF83         MOV     R7,DPH
    693            }
    694          
    695            /* Destination EP */
    696            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_11:
   \   000386   85..82       MOV     DPL,?XSP + 0
   \   000389   85..83       MOV     DPH,?XSP + 1
   \   00038C   E0           MOVX    A,@DPTR
   \   00038D   F8           MOV     R0,A
   \   00038E   A3           INC     DPTR
   \   00038F   E0           MOVX    A,@DPTR
   \   000390   C8           XCH     A,R0
   \   000391   2414         ADD     A,#0x14
   \   000393   F582         MOV     DPL,A
   \   000395   C8           XCH     A,R0
   \   000396   3400         ADDC    A,#0x0
   \   000398   F583         MOV     DPH,A
   \   00039A   E0           MOVX    A,@DPTR
   \   00039B   C0E0         PUSH    A
   \   00039D   8E82         MOV     DPL,R6
   \   00039F   8F83         MOV     DPH,R7
   \   0003A1   D0E0         POP     A
   \   0003A3   F0           MOVX    @DPTR,A
   \   0003A4   8E82         MOV     DPL,R6
   \   0003A6   8F83         MOV     DPH,R7
   \   0003A8   A3           INC     DPTR
   \   0003A9   AE82         MOV     R6,DPL
   \   0003AB   AF83         MOV     R7,DPH
    697          
    698            /* WasBroadCast */
    699            *pTmp++ = pMsg->wasBroadcast;
   \   0003AD   85..82       MOV     DPL,?XSP + 0
   \   0003B0   85..83       MOV     DPH,?XSP + 1
   \   0003B3   E0           MOVX    A,@DPTR
   \   0003B4   F8           MOV     R0,A
   \   0003B5   A3           INC     DPTR
   \   0003B6   E0           MOVX    A,@DPTR
   \   0003B7   C8           XCH     A,R0
   \   0003B8   2415         ADD     A,#0x15
   \   0003BA   F582         MOV     DPL,A
   \   0003BC   C8           XCH     A,R0
   \   0003BD   3400         ADDC    A,#0x0
   \   0003BF   F583         MOV     DPH,A
   \   0003C1   E0           MOVX    A,@DPTR
   \   0003C2   C0E0         PUSH    A
   \   0003C4   8E82         MOV     DPL,R6
   \   0003C6   8F83         MOV     DPH,R7
   \   0003C8   D0E0         POP     A
   \   0003CA   F0           MOVX    @DPTR,A
   \   0003CB   8E82         MOV     DPL,R6
   \   0003CD   8F83         MOV     DPH,R7
   \   0003CF   A3           INC     DPTR
   \   0003D0   AE82         MOV     R6,DPL
   \   0003D2   AF83         MOV     R7,DPH
    700          
    701            /* LinkQuality */
    702            *pTmp++ = pMsg->LinkQuality;
   \   0003D4   85..82       MOV     DPL,?XSP + 0
   \   0003D7   85..83       MOV     DPH,?XSP + 1
   \   0003DA   E0           MOVX    A,@DPTR
   \   0003DB   F8           MOV     R0,A
   \   0003DC   A3           INC     DPTR
   \   0003DD   E0           MOVX    A,@DPTR
   \   0003DE   C8           XCH     A,R0
   \   0003DF   2416         ADD     A,#0x16
   \   0003E1   F582         MOV     DPL,A
   \   0003E3   C8           XCH     A,R0
   \   0003E4   3400         ADDC    A,#0x0
   \   0003E6   F583         MOV     DPH,A
   \   0003E8   E0           MOVX    A,@DPTR
   \   0003E9   C0E0         PUSH    A
   \   0003EB   8E82         MOV     DPL,R6
   \   0003ED   8F83         MOV     DPH,R7
   \   0003EF   D0E0         POP     A
   \   0003F1   F0           MOVX    @DPTR,A
   \   0003F2   8E82         MOV     DPL,R6
   \   0003F4   8F83         MOV     DPH,R7
   \   0003F6   A3           INC     DPTR
   \   0003F7   AE82         MOV     R6,DPL
   \   0003F9   AF83         MOV     R7,DPH
    703          
    704            /* SecurityUse */
    705            *pTmp++ = pMsg->SecurityUse;
   \   0003FB   85..82       MOV     DPL,?XSP + 0
   \   0003FE   85..83       MOV     DPH,?XSP + 1
   \   000401   E0           MOVX    A,@DPTR
   \   000402   F8           MOV     R0,A
   \   000403   A3           INC     DPTR
   \   000404   E0           MOVX    A,@DPTR
   \   000405   C8           XCH     A,R0
   \   000406   2419         ADD     A,#0x19
   \   000408   F582         MOV     DPL,A
   \   00040A   C8           XCH     A,R0
   \   00040B   3400         ADDC    A,#0x0
   \   00040D   F583         MOV     DPH,A
   \   00040F   E0           MOVX    A,@DPTR
   \   000410   C0E0         PUSH    A
   \   000412   8E82         MOV     DPL,R6
   \   000414   8F83         MOV     DPH,R7
   \   000416   D0E0         POP     A
   \   000418   F0           MOVX    @DPTR,A
   \   000419   8E82         MOV     DPL,R6
   \   00041B   8F83         MOV     DPH,R7
   \   00041D   A3           INC     DPTR
   \   00041E   AE82         MOV     R6,DPL
   \   000420   AF83         MOV     R7,DPH
    706          
    707            /* Timestamp */
    708            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   000422   85..82       MOV     DPL,?XSP + 0
   \   000425   85..83       MOV     DPH,?XSP + 1
   \   000428   E0           MOVX    A,@DPTR
   \   000429   F8           MOV     R0,A
   \   00042A   A3           INC     DPTR
   \   00042B   E0           MOVX    A,@DPTR
   \   00042C   C8           XCH     A,R0
   \   00042D   241A         ADD     A,#0x1a
   \   00042F   F582         MOV     DPL,A
   \   000431   C8           XCH     A,R0
   \   000432   3400         ADDC    A,#0x0
   \   000434   F583         MOV     DPH,A
   \   000436   78..         MOV     R0,#?V0
   \   000438   12....       LCALL   ?L_MOV_X
   \   00043B   E5..         MOV     A,?V0
   \   00043D   C0E0         PUSH    A
   \   00043F   8E82         MOV     DPL,R6
   \   000441   8F83         MOV     DPH,R7
   \   000443   D0E0         POP     A
   \   000445   F0           MOVX    @DPTR,A
   \   000446   8E82         MOV     DPL,R6
   \   000448   8F83         MOV     DPH,R7
   \   00044A   A3           INC     DPTR
   \   00044B   AE82         MOV     R6,DPL
   \   00044D   AF83         MOV     R7,DPH
    709            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \   00044F   85..82       MOV     DPL,?XSP + 0
   \   000452   85..83       MOV     DPH,?XSP + 1
   \   000455   E0           MOVX    A,@DPTR
   \   000456   F8           MOV     R0,A
   \   000457   A3           INC     DPTR
   \   000458   E0           MOVX    A,@DPTR
   \   000459   C8           XCH     A,R0
   \   00045A   241A         ADD     A,#0x1a
   \   00045C   F582         MOV     DPL,A
   \   00045E   C8           XCH     A,R0
   \   00045F   3400         ADDC    A,#0x0
   \   000461   F583         MOV     DPH,A
   \   000463   78..         MOV     R0,#?V0
   \   000465   12....       LCALL   ?L_MOV_X
   \   000468   E4           CLR     A
   \   000469   C5..         XCH     A,?V1
   \   00046B   F5..         MOV     ?V0,A
   \   00046D   E5..         MOV     A,?V0
   \   00046F   C0E0         PUSH    A
   \   000471   8E82         MOV     DPL,R6
   \   000473   8F83         MOV     DPH,R7
   \   000475   D0E0         POP     A
   \   000477   F0           MOVX    @DPTR,A
   \   000478   8E82         MOV     DPL,R6
   \   00047A   8F83         MOV     DPH,R7
   \   00047C   A3           INC     DPTR
   \   00047D   AE82         MOV     R6,DPL
   \   00047F   AF83         MOV     R7,DPH
    710            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \   000481   85..82       MOV     DPL,?XSP + 0
   \   000484   85..83       MOV     DPH,?XSP + 1
   \   000487   E0           MOVX    A,@DPTR
   \   000488   F8           MOV     R0,A
   \   000489   A3           INC     DPTR
   \   00048A   E0           MOVX    A,@DPTR
   \   00048B   C8           XCH     A,R0
   \   00048C   241A         ADD     A,#0x1a
   \   00048E   F582         MOV     DPL,A
   \   000490   C8           XCH     A,R0
   \   000491   3400         ADDC    A,#0x0
   \   000493   F583         MOV     DPH,A
   \   000495   78..         MOV     R0,#?V0
   \   000497   12....       LCALL   ?L_MOV_X
   \   00049A   7410         MOV     A,#0x10
   \   00049C   78..         MOV     R0,#?V0
   \   00049E   12....       LCALL   ?UL_SHR
   \   0004A1   E5..         MOV     A,?V0
   \   0004A3   C0E0         PUSH    A
   \   0004A5   8E82         MOV     DPL,R6
   \   0004A7   8F83         MOV     DPH,R7
   \   0004A9   D0E0         POP     A
   \   0004AB   F0           MOVX    @DPTR,A
   \   0004AC   8E82         MOV     DPL,R6
   \   0004AE   8F83         MOV     DPH,R7
   \   0004B0   A3           INC     DPTR
   \   0004B1   AE82         MOV     R6,DPL
   \   0004B3   AF83         MOV     R7,DPH
    711            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \   0004B5   85..82       MOV     DPL,?XSP + 0
   \   0004B8   85..83       MOV     DPH,?XSP + 1
   \   0004BB   E0           MOVX    A,@DPTR
   \   0004BC   F8           MOV     R0,A
   \   0004BD   A3           INC     DPTR
   \   0004BE   E0           MOVX    A,@DPTR
   \   0004BF   C8           XCH     A,R0
   \   0004C0   241A         ADD     A,#0x1a
   \   0004C2   F582         MOV     DPL,A
   \   0004C4   C8           XCH     A,R0
   \   0004C5   3400         ADDC    A,#0x0
   \   0004C7   F583         MOV     DPH,A
   \   0004C9   78..         MOV     R0,#?V0
   \   0004CB   12....       LCALL   ?L_MOV_X
   \   0004CE   7418         MOV     A,#0x18
   \   0004D0   78..         MOV     R0,#?V0
   \   0004D2   12....       LCALL   ?UL_SHR
   \   0004D5   E5..         MOV     A,?V0
   \   0004D7   C0E0         PUSH    A
   \   0004D9   8E82         MOV     DPL,R6
   \   0004DB   8F83         MOV     DPH,R7
   \   0004DD   D0E0         POP     A
   \   0004DF   F0           MOVX    @DPTR,A
   \   0004E0   8E82         MOV     DPL,R6
   \   0004E2   8F83         MOV     DPH,R7
   \   0004E4   A3           INC     DPTR
   \   0004E5   AE82         MOV     R6,DPL
   \   0004E7   AF83         MOV     R7,DPH
    712          
    713          
    714            /* Data Length */
    715            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0004E9   7404         MOV     A,#0x4
   \   0004EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EE   E0           MOVX    A,@DPTR
   \   0004EF   6482         XRL     A,#0x82
   \   0004F1   7040         JNZ     ??MT_AfIncomingMsg_12
    716            {
    717              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    718               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    719               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    720               */
    721              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0004F3   8E82         MOV     DPL,R6
   \   0004F5   8F83         MOV     DPH,R7
   \   0004F7   7400         MOV     A,#0x0
   \   0004F9   F0           MOVX    @DPTR,A
   \   0004FA   8E82         MOV     DPL,R6
   \   0004FC   8F83         MOV     DPH,R7
   \   0004FE   A3           INC     DPTR
   \   0004FF   AE82         MOV     R6,DPL
   \   000501   AF83         MOV     R7,DPH
    722              *pTmp++ = LO_UINT16(dataLen);
   \   000503   E5..         MOV     A,?V6
   \   000505   C0E0         PUSH    A
   \   000507   8E82         MOV     DPL,R6
   \   000509   8F83         MOV     DPH,R7
   \   00050B   D0E0         POP     A
   \   00050D   F0           MOVX    @DPTR,A
   \   00050E   8E82         MOV     DPL,R6
   \   000510   8F83         MOV     DPH,R7
   \   000512   A3           INC     DPTR
   \   000513   AE82         MOV     R6,DPL
   \   000515   AF83         MOV     R7,DPH
    723              *pTmp++ = HI_UINT16(dataLen);
   \   000517   A8..         MOV     R0,?V6
   \   000519   A9..         MOV     R1,?V7
   \   00051B   E4           CLR     A
   \   00051C   C9           XCH     A,R1
   \   00051D   F8           MOV     R0,A
   \   00051E   E8           MOV     A,R0
   \   00051F   C0E0         PUSH    A
   \   000521   8E82         MOV     DPL,R6
   \   000523   8F83         MOV     DPH,R7
   \   000525   D0E0         POP     A
   \   000527   F0           MOVX    @DPTR,A
   \   000528   8E82         MOV     DPL,R6
   \   00052A   8F83         MOV     DPH,R7
   \   00052C   A3           INC     DPTR
   \   00052D   AE82         MOV     R6,DPL
   \   00052F   AF83         MOV     R7,DPH
   \   000531   803B         SJMP    ??MT_AfIncomingMsg_13
    724            }
    725            else
    726            {
    727              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_12:
   \   000533   85..82       MOV     DPL,?XSP + 0
   \   000536   85..83       MOV     DPH,?XSP + 1
   \   000539   E0           MOVX    A,@DPTR
   \   00053A   F8           MOV     R0,A
   \   00053B   A3           INC     DPTR
   \   00053C   E0           MOVX    A,@DPTR
   \   00053D   C8           XCH     A,R0
   \   00053E   241F         ADD     A,#0x1f
   \   000540   F582         MOV     DPL,A
   \   000542   C8           XCH     A,R0
   \   000543   3400         ADDC    A,#0x0
   \   000545   F583         MOV     DPH,A
   \   000547   E0           MOVX    A,@DPTR
   \   000548   C0E0         PUSH    A
   \   00054A   8E82         MOV     DPL,R6
   \   00054C   8F83         MOV     DPH,R7
   \   00054E   D0E0         POP     A
   \   000550   F0           MOVX    @DPTR,A
   \   000551   8E82         MOV     DPL,R6
   \   000553   8F83         MOV     DPH,R7
   \   000555   A3           INC     DPTR
   \   000556   AE82         MOV     R6,DPL
   \   000558   AF83         MOV     R7,DPH
    728              *pTmp++ = dataLen;
   \   00055A   E5..         MOV     A,?V6
   \   00055C   C0E0         PUSH    A
   \   00055E   8E82         MOV     DPL,R6
   \   000560   8F83         MOV     DPH,R7
   \   000562   D0E0         POP     A
   \   000564   F0           MOVX    @DPTR,A
   \   000565   8E82         MOV     DPL,R6
   \   000567   8F83         MOV     DPH,R7
   \   000569   A3           INC     DPTR
   \   00056A   AE82         MOV     R6,DPL
   \   00056C   AF83         MOV     R7,DPH
    729            }
    730          
    731            /* Data */
    732            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_13:
   \   00056E   7402         MOV     A,#0x2
   \   000570   12....       LCALL   ?XSTACK_DISP0_8
   \   000573   E0           MOVX    A,@DPTR
   \   000574   F8           MOV     R0,A
   \   000575   A3           INC     DPTR
   \   000576   E0           MOVX    A,@DPTR
   \   000577   F9           MOV     R1,A
   \   000578   E8           MOV     A,R0
   \   000579   49           ORL     A,R1
   \   00057A   7003         JNZ     $+5
   \   00057C   02....       LJMP    ??MT_AfIncomingMsg_14 & 0xFFFF
    733            {
    734              // Enqueue the new huge incoming item.
    735              pItem->next = pMtAfInMsgList;
   \   00057F   90....       MOV     DPTR,#pMtAfInMsgList
   \   000582   E0           MOVX    A,@DPTR
   \   000583   FA           MOV     R2,A
   \   000584   A3           INC     DPTR
   \   000585   E0           MOVX    A,@DPTR
   \   000586   FB           MOV     R3,A
   \   000587   7402         MOV     A,#0x2
   \   000589   12....       LCALL   ?XSTACK_DISP0_8
   \   00058C   E0           MOVX    A,@DPTR
   \   00058D   F8           MOV     R0,A
   \   00058E   A3           INC     DPTR
   \   00058F   E0           MOVX    A,@DPTR
   \   000590   F583         MOV     DPH,A
   \   000592   8882         MOV     DPL,R0
   \   000594   EA           MOV     A,R2
   \   000595   F0           MOVX    @DPTR,A
   \   000596   A3           INC     DPTR
   \   000597   EB           MOV     A,R3
   \   000598   F0           MOVX    @DPTR,A
    736              pMtAfInMsgList = pItem;
   \   000599   7402         MOV     A,#0x2
   \   00059B   12....       LCALL   ?XSTACK_DISP0_8
   \   00059E   E0           MOVX    A,@DPTR
   \   00059F   F8           MOV     R0,A
   \   0005A0   A3           INC     DPTR
   \   0005A1   E0           MOVX    A,@DPTR
   \   0005A2   F9           MOV     R1,A
   \   0005A3   90....       MOV     DPTR,#pMtAfInMsgList
   \   0005A6   E8           MOV     A,R0
   \   0005A7   F0           MOVX    @DPTR,A
   \   0005A8   A3           INC     DPTR
   \   0005A9   E9           MOV     A,R1
   \   0005AA   F0           MOVX    @DPTR,A
    737          
    738              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    739              pItem->tick = MT_AF_EXEC_CNT;
   \   0005AB   7402         MOV     A,#0x2
   \   0005AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0005B0   E0           MOVX    A,@DPTR
   \   0005B1   F8           MOV     R0,A
   \   0005B2   A3           INC     DPTR
   \   0005B3   E0           MOVX    A,@DPTR
   \   0005B4   C8           XCH     A,R0
   \   0005B5   2408         ADD     A,#0x8
   \   0005B7   F582         MOV     DPL,A
   \   0005B9   C8           XCH     A,R0
   \   0005BA   3400         ADDC    A,#0x0
   \   0005BC   F583         MOV     DPH,A
   \   0005BE   740F         MOV     A,#0xf
   \   0005C0   F0           MOVX    @DPTR,A
    740              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   0005C1                ; Setup parameters for call to function osal_start_timerEx
   \   0005C1   7CE8         MOV     R4,#-0x18
   \   0005C3   7D03         MOV     R5,#0x3
   \   0005C5   7A08         MOV     R2,#0x8
   \   0005C7   7B00         MOV     R3,#0x0
   \   0005C9   90....       MOV     DPTR,#MT_TaskID
   \   0005CC   E0           MOVX    A,@DPTR
   \   0005CD   F9           MOV     R1,A
   \   0005CE   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0005D1   E9           MOV     A,R1
   \   0005D2   6017         JZ      ??MT_AfIncomingMsg_15
    741              {
    742                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   0005D4                ; Setup parameters for call to function osal_set_event
   \   0005D4   7A08         MOV     R2,#0x8
   \   0005D6   7B00         MOV     R3,#0x0
   \   0005D8   90....       MOV     DPTR,#MT_TaskID
   \   0005DB   E0           MOVX    A,@DPTR
   \   0005DC   F9           MOV     R1,A
   \   0005DD   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0005E0   E9           MOV     A,R1
   \   0005E1   C0E0         PUSH    A
   \   0005E3   7407         MOV     A,#0x7
   \   0005E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0005E8   D0E0         POP     A
   \   0005EA   F0           MOVX    @DPTR,A
    743              }
    744          
    745              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_15:
   \   0005EB   85..82       MOV     DPL,?XSP + 0
   \   0005EE   85..83       MOV     DPH,?XSP + 1
   \   0005F1   E0           MOVX    A,@DPTR
   \   0005F2   F8           MOV     R0,A
   \   0005F3   A3           INC     DPTR
   \   0005F4   E0           MOVX    A,@DPTR
   \   0005F5   C8           XCH     A,R0
   \   0005F6   241A         ADD     A,#0x1a
   \   0005F8   F582         MOV     DPL,A
   \   0005FA   C8           XCH     A,R0
   \   0005FB   3400         ADDC    A,#0x0
   \   0005FD   F583         MOV     DPH,A
   \   0005FF   12....       LCALL   ?XLOAD_R0123
   \   000602   7402         MOV     A,#0x2
   \   000604   12....       LCALL   ?XSTACK_DISP0_8
   \   000607   E0           MOVX    A,@DPTR
   \   000608   FC           MOV     R4,A
   \   000609   A3           INC     DPTR
   \   00060A   E0           MOVX    A,@DPTR
   \   00060B   F583         MOV     DPH,A
   \   00060D   8C82         MOV     DPL,R4
   \   00060F   A3           INC     DPTR
   \   000610   A3           INC     DPTR
   \   000611   A3           INC     DPTR
   \   000612   A3           INC     DPTR
   \   000613   12....       LCALL   ?XSTORE_R0123
    746              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000616                ; Setup parameters for call to function osal_memcpy
   \   000616   85..82       MOV     DPL,?XSP + 0
   \   000619   85..83       MOV     DPH,?XSP + 1
   \   00061C   E0           MOVX    A,@DPTR
   \   00061D   F8           MOV     R0,A
   \   00061E   A3           INC     DPTR
   \   00061F   E0           MOVX    A,@DPTR
   \   000620   C8           XCH     A,R0
   \   000621   2422         ADD     A,#0x22
   \   000623   F582         MOV     DPL,A
   \   000625   C8           XCH     A,R0
   \   000626   3400         ADDC    A,#0x0
   \   000628   F583         MOV     DPH,A
   \   00062A   E0           MOVX    A,@DPTR
   \   00062B   F5..         MOV     ?V0,A
   \   00062D   A3           INC     DPTR
   \   00062E   E0           MOVX    A,@DPTR
   \   00062F   F5..         MOV     ?V1,A
   \   000631   75..00       MOV     ?V2,#0x0
   \   000634   78..         MOV     R0,#?V0
   \   000636   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000639   AC..         MOV     R4,?V6
   \   00063B   AD..         MOV     R5,?V7
   \   00063D   7405         MOV     A,#0x5
   \   00063F   12....       LCALL   ?XSTACK_DISP0_8
   \   000642   E0           MOVX    A,@DPTR
   \   000643   F8           MOV     R0,A
   \   000644   A3           INC     DPTR
   \   000645   E0           MOVX    A,@DPTR
   \   000646   F583         MOV     DPH,A
   \   000648   8882         MOV     DPL,R0
   \   00064A   A3           INC     DPTR
   \   00064B   A3           INC     DPTR
   \   00064C   E0           MOVX    A,@DPTR
   \   00064D   FA           MOV     R2,A
   \   00064E   A3           INC     DPTR
   \   00064F   E0           MOVX    A,@DPTR
   \   000650   FB           MOV     R3,A
   \   000651   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000654   7403         MOV     A,#0x3
   \   000656   12....       LCALL   ?DEALLOC_XSTACK8
   \   000659   8A..         MOV     ?V0,R2
   \   00065B   8B..         MOV     ?V1,R3
   \   00065D   85..82       MOV     DPL,?V0
   \   000660   85..83       MOV     DPH,?V1
   \   000663   803D         SJMP    ??MT_AfIncomingMsg_16
    747            }
    748            else
    749            {
    750              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_14:
   \   000665                ; Setup parameters for call to function osal_memcpy
   \   000665   85..82       MOV     DPL,?XSP + 0
   \   000668   85..83       MOV     DPH,?XSP + 1
   \   00066B   E0           MOVX    A,@DPTR
   \   00066C   F8           MOV     R0,A
   \   00066D   A3           INC     DPTR
   \   00066E   E0           MOVX    A,@DPTR
   \   00066F   C8           XCH     A,R0
   \   000670   2422         ADD     A,#0x22
   \   000672   F582         MOV     DPL,A
   \   000674   C8           XCH     A,R0
   \   000675   3400         ADDC    A,#0x0
   \   000677   F583         MOV     DPH,A
   \   000679   E0           MOVX    A,@DPTR
   \   00067A   F5..         MOV     ?V0,A
   \   00067C   A3           INC     DPTR
   \   00067D   E0           MOVX    A,@DPTR
   \   00067E   F5..         MOV     ?V1,A
   \   000680   75..00       MOV     ?V2,#0x0
   \   000683   78..         MOV     R0,#?V0
   \   000685   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000688   AC..         MOV     R4,?V6
   \   00068A   AD..         MOV     R5,?V7
   \   00068C   EE           MOV     A,R6
   \   00068D   FA           MOV     R2,A
   \   00068E   EF           MOV     A,R7
   \   00068F   FB           MOV     R3,A
   \   000690   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000693   7403         MOV     A,#0x3
   \   000695   12....       LCALL   ?DEALLOC_XSTACK8
   \   000698   8A..         MOV     ?V0,R2
   \   00069A   8B..         MOV     ?V1,R3
   \   00069C   85..82       MOV     DPL,?V0
   \   00069F   85..83       MOV     DPH,?V1
    751            }
    752          
    753            /* Build and send back the response */
    754            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??MT_AfIncomingMsg_16:
   \   0006A2                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0006A2   7405         MOV     A,#0x5
   \   0006A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0006A7   E0           MOVX    A,@DPTR
   \   0006A8   FC           MOV     R4,A
   \   0006A9   A3           INC     DPTR
   \   0006AA   E0           MOVX    A,@DPTR
   \   0006AB   FD           MOV     R5,A
   \   0006AC   AB..         MOV     R3,?V4
   \   0006AE   7404         MOV     A,#0x4
   \   0006B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0006B3   E0           MOVX    A,@DPTR
   \   0006B4   FA           MOV     R2,A
   \   0006B5   7944         MOV     R1,#0x44
   \   0006B7   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    755          
    756            (void)osal_mem_free(pRsp);
   \   0006BA                ; Setup parameters for call to function osal_mem_free
   \   0006BA   7405         MOV     A,#0x5
   \   0006BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0006BF   E0           MOVX    A,@DPTR
   \   0006C0   FA           MOV     R2,A
   \   0006C1   A3           INC     DPTR
   \   0006C2   E0           MOVX    A,@DPTR
   \   0006C3   FB           MOV     R3,A
   \   0006C4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    757          }
   \                     ??MT_AfIncomingMsg_4:
   \   0006C7   7408         MOV     A,#0x8
   \   0006C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0006CC   7F08         MOV     R7,#0x8
   \   0006CE   02....       LJMP    ?BANKED_LEAVE_XDATA
    758          
    759          /**************************************************************************************************
    760           * @fn          MT_AfDataRetrieve
    761           *
    762           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    763           *          incoming AF message.
    764           *
    765           * input parameters
    766           *
    767           * @param pBuf - pointer to the received buffer
    768           *
    769           * output parameters
    770           *
    771           * @param rtrn - AF-Status of the operation.
    772           *
    773           * @return      None.
    774           **************************************************************************************************
    775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    776          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    778            #define MT_AF_RTV_HDR_SZ  2
    779          
    780            uint32 timestamp;
    781            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   00000E   90....       MOV     DPTR,#pMtAfInMsgList
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E8           MOV     A,R0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E9           MOV     A,R1
   \   00001F   F0           MOVX    @DPTR,A
    782            uint8 rtrn = afStatus_FAILED;
   \   000020   7403         MOV     A,#0x3
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
    783            uint8 len = 0;
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   7400         MOV     A,#0x0
   \   000030   F0           MOVX    @DPTR,A
    784          
    785            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000031   EE           MOV     A,R6
   \   000032   2403         ADD     A,#0x3
   \   000034   FE           MOV     R6,A
   \   000035   5001         JNC     ??MT_AfDataRetrieve_0
   \   000037   0F           INC     R7
    786            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??MT_AfDataRetrieve_0:
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0,A
   \   00003F   E4           CLR     A
   \   000040   F5..         MOV     ?V1,A
   \   000042   F5..         MOV     ?V2,A
   \   000044   F5..         MOV     ?V3,A
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V4,A
   \   00004E   E4           CLR     A
   \   00004F   F5..         MOV     ?V5,A
   \   000051   F5..         MOV     ?V6,A
   \   000053   F5..         MOV     ?V7,A
   \   000055   7408         MOV     A,#0x8
   \   000057   78..         MOV     R0,#?V4
   \   000059   12....       LCALL   ?L_SHL
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   79..         MOV     R1,#?V4
   \   000060   12....       LCALL   ?L_ADD
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F5..         MOV     ?V4,A
   \   00006C   E4           CLR     A
   \   00006D   F5..         MOV     ?V5,A
   \   00006F   F5..         MOV     ?V6,A
   \   000071   F5..         MOV     ?V7,A
   \   000073   7410         MOV     A,#0x10
   \   000075   78..         MOV     R0,#?V4
   \   000077   12....       LCALL   ?L_SHL
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   79..         MOV     R1,#?V4
   \   00007E   12....       LCALL   ?L_ADD
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F5..         MOV     ?V4,A
   \   00008B   E4           CLR     A
   \   00008C   F5..         MOV     ?V5,A
   \   00008E   F5..         MOV     ?V6,A
   \   000090   F5..         MOV     ?V7,A
   \   000092   7418         MOV     A,#0x18
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?L_SHL
   \   000099   78..         MOV     R0,#?V0
   \   00009B   79..         MOV     R1,#?V4
   \   00009D   12....       LCALL   ?L_ADD
   \   0000A0   7406         MOV     A,#0x6
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?L_MOV_TO_X
    787          
    788            while (pItem != NULL)
   \                     ??MT_AfDataRetrieve_1:
   \   0000AA   7401         MOV     A,#0x1
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   E8           MOV     A,R0
   \   0000B5   49           ORL     A,R1
   \   0000B6   6054         JZ      ??MT_AfDataRetrieve_2
    789            {
    790              pPrev = pItem;
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   7404         MOV     A,#0x4
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   E8           MOV     A,R0
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E9           MOV     A,R1
   \   0000CB   F0           MOVX    @DPTR,A
    791              if (pItem->timestamp == timestamp)
   \   0000CC   7406         MOV     A,#0x6
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   78..         MOV     R0,#?V0
   \   0000D3   12....       LCALL   ?L_MOV_X
   \   0000D6   7401         MOV     A,#0x1
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   8882         MOV     DPL,R0
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   78..         MOV     R0,#?V0
   \   0000E9   12....       LCALL   ?L_EQ_X
   \   0000EC   601E         JZ      ??MT_AfDataRetrieve_2
    792              {
    793                break;
    794              }
    795              pItem = pItem->next;
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F8           MOV     R0,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F583         MOV     DPH,A
   \   0000F9   8882         MOV     DPL,R0
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   7401         MOV     A,#0x1
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E8           MOV     A,R0
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   E9           MOV     A,R1
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   809E         SJMP    ??MT_AfDataRetrieve_1
    796            }
    797          
    798            if (pItem != NULL)
   \                     ??MT_AfDataRetrieve_2:
   \   00010C   7401         MOV     A,#0x1
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F8           MOV     R0,A
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F9           MOV     R1,A
   \   000116   E8           MOV     A,R0
   \   000117   49           ORL     A,R1
   \   000118   7003         JNZ     $+5
   \   00011A   02....       LJMP    ??MT_AfDataRetrieve_3 & 0xFFFF
    799            {
    800              uint16 idx;
    801              uint8 *pRsp;
    802          
    803              pBuf += 4;
   \   00011D   EE           MOV     A,R6
   \   00011E   2404         ADD     A,#0x4
   \   000120   FE           MOV     R6,A
   \   000121   5001         JNC     ??MT_AfDataRetrieve_4
   \   000123   0F           INC     R7
    804              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRetrieve_4:
   \   000124   8E82         MOV     DPL,R6
   \   000126   8F83         MOV     DPH,R7
   \   000128   E0           MOVX    A,@DPTR
   \   000129   FA           MOV     R2,A
   \   00012A   7B00         MOV     R3,#0x0
   \   00012C   8E82         MOV     DPL,R6
   \   00012E   8F83         MOV     DPH,R7
   \   000130   A3           INC     DPTR
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F8           MOV     R0,A
   \   000133   7900         MOV     R1,#0x0
   \   000135   E4           CLR     A
   \   000136   C8           XCH     A,R0
   \   000137   F9           MOV     R1,A
   \   000138   EA           MOV     A,R2
   \   000139   28           ADD     A,R0
   \   00013A   F8           MOV     R0,A
   \   00013B   EB           MOV     A,R3
   \   00013C   39           ADDC    A,R1
   \   00013D   F9           MOV     R1,A
   \   00013E   88..         MOV     ?V6,R0
   \   000140   89..         MOV     ?V7,R1
    805              len = pBuf[2];
   \   000142   8E82         MOV     DPL,R6
   \   000144   8F83         MOV     DPH,R7
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   C0E0         PUSH    A
   \   00014B   85..82       MOV     DPL,?XSP + 0
   \   00014E   85..83       MOV     DPH,?XSP + 1
   \   000151   D0E0         POP     A
   \   000153   F0           MOVX    @DPTR,A
    806          
    807              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   000154   85..82       MOV     DPL,?XSP + 0
   \   000157   85..83       MOV     DPH,?XSP + 1
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   706E         JNZ     ??MT_AfDataRetrieve_5
    808              {
    809                if (pMtAfInMsgList == pItem)
   \   00015D   90....       MOV     DPTR,#pMtAfInMsgList
   \   000160   E0           MOVX    A,@DPTR
   \   000161   F8           MOV     R0,A
   \   000162   A3           INC     DPTR
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F9           MOV     R1,A
   \   000165   7401         MOV     A,#0x1
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   68           XRL     A,R0
   \   00016C   7003         JNZ     ??MT_AfDataRetrieve_6
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   69           XRL     A,R1
   \                     ??MT_AfDataRetrieve_6:
   \   000171   701C         JNZ     ??MT_AfDataRetrieve_7
    810                {
    811                  pMtAfInMsgList = pItem->next;
   \   000173   7401         MOV     A,#0x1
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F8           MOV     R0,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F583         MOV     DPH,A
   \   00017E   8882         MOV     DPL,R0
   \   000180   E0           MOVX    A,@DPTR
   \   000181   F8           MOV     R0,A
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   F9           MOV     R1,A
   \   000185   90....       MOV     DPTR,#pMtAfInMsgList
   \   000188   E8           MOV     A,R0
   \   000189   F0           MOVX    @DPTR,A
   \   00018A   A3           INC     DPTR
   \   00018B   E9           MOV     A,R1
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   8024         SJMP    ??MT_AfDataRetrieve_8
    812                }
    813                else
    814                {
    815                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_7:
   \   00018F   7401         MOV     A,#0x1
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   E0           MOVX    A,@DPTR
   \   000195   F8           MOV     R0,A
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   F583         MOV     DPH,A
   \   00019A   8882         MOV     DPL,R0
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   FA           MOV     R2,A
   \   00019E   A3           INC     DPTR
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   FB           MOV     R3,A
   \   0001A1   7404         MOV     A,#0x4
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   F8           MOV     R0,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   F583         MOV     DPH,A
   \   0001AC   8882         MOV     DPL,R0
   \   0001AE   EA           MOV     A,R2
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   EB           MOV     A,R3
   \   0001B2   F0           MOVX    @DPTR,A
    816                }
    817                (void)osal_mem_free(pItem);
   \                     ??MT_AfDataRetrieve_8:
   \   0001B3                ; Setup parameters for call to function osal_mem_free
   \   0001B3   7401         MOV     A,#0x1
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   FA           MOV     R2,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   FB           MOV     R3,A
   \   0001BD   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    818                rtrn = afStatus_SUCCESS;
   \   0001C0   7403         MOV     A,#0x3
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   7400         MOV     A,#0x0
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   02....       LJMP    ??MT_AfDataRetrieve_3 & 0xFFFF
    819              }
    820              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
   \                     ??MT_AfDataRetrieve_5:
   \   0001CB                ; Setup parameters for call to function osal_mem_alloc
   \   0001CB   85..82       MOV     DPL,?XSP + 0
   \   0001CE   85..83       MOV     DPH,?XSP + 1
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F8           MOV     R0,A
   \   0001D3   7900         MOV     R1,#0x0
   \   0001D5   E8           MOV     A,R0
   \   0001D6   2402         ADD     A,#0x2
   \   0001D8   FA           MOV     R2,A
   \   0001D9   E4           CLR     A
   \   0001DA   39           ADDC    A,R1
   \   0001DB   FB           MOV     R3,A
   \   0001DC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001DF   8A..         MOV     ?V0,R2
   \   0001E1   8B..         MOV     ?V1,R3
   \   0001E3   85....       MOV     ?V4,?V0
   \   0001E6   85....       MOV     ?V5,?V1
   \   0001E9   E5..         MOV     A,?V4
   \   0001EB   45..         ORL     A,?V5
   \   0001ED   7014         JNZ     ??MT_AfDataRetrieve_9
    821              {
    822                rtrn = afStatus_MEM_FAIL;
   \   0001EF   7403         MOV     A,#0x3
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   7410         MOV     A,#0x10
   \   0001F6   F0           MOVX    @DPTR,A
    823                len = 0;
   \   0001F7   85..82       MOV     DPL,?XSP + 0
   \   0001FA   85..83       MOV     DPH,?XSP + 1
   \   0001FD   7400         MOV     A,#0x0
   \   0001FF   F0           MOVX    @DPTR,A
   \   000200   02....       LJMP    ??MT_AfDataRetrieve_3 & 0xFFFF
    824              }
    825              else
    826              {
    827                pRsp[0] = ZSuccess;
   \                     ??MT_AfDataRetrieve_9:
   \   000203   85..82       MOV     DPL,?V4
   \   000206   85..83       MOV     DPH,?V5
   \   000209   7400         MOV     A,#0x0
   \   00020B   F0           MOVX    @DPTR,A
    828                pRsp[1] = len;
   \   00020C   85..82       MOV     DPL,?XSP + 0
   \   00020F   85..83       MOV     DPH,?XSP + 1
   \   000212   E0           MOVX    A,@DPTR
   \   000213   C0E0         PUSH    A
   \   000215   85..82       MOV     DPL,?V4
   \   000218   85..83       MOV     DPH,?V5
   \   00021B   A3           INC     DPTR
   \   00021C   D0E0         POP     A
   \   00021E   F0           MOVX    @DPTR,A
    829                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
   \   00021F                ; Setup parameters for call to function osal_memcpy
   \   00021F   7401         MOV     A,#0x1
   \   000221   12....       LCALL   ?XSTACK_DISP0_8
   \   000224   E0           MOVX    A,@DPTR
   \   000225   F8           MOV     R0,A
   \   000226   A3           INC     DPTR
   \   000227   E0           MOVX    A,@DPTR
   \   000228   F583         MOV     DPH,A
   \   00022A   8882         MOV     DPL,R0
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   E0           MOVX    A,@DPTR
   \   00022F   25..         ADD     A,?V6
   \   000231   F5..         MOV     ?V0,A
   \   000233   A3           INC     DPTR
   \   000234   E0           MOVX    A,@DPTR
   \   000235   35..         ADDC    A,?V7
   \   000237   F5..         MOV     ?V1,A
   \   000239   75..00       MOV     ?V2,#0x0
   \   00023C   78..         MOV     R0,#?V0
   \   00023E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000241   7403         MOV     A,#0x3
   \   000243   12....       LCALL   ?XSTACK_DISP0_8
   \   000246   E0           MOVX    A,@DPTR
   \   000247   FC           MOV     R4,A
   \   000248   7D00         MOV     R5,#0x0
   \   00024A   E5..         MOV     A,?V4
   \   00024C   2402         ADD     A,#0x2
   \   00024E   FA           MOV     R2,A
   \   00024F   E4           CLR     A
   \   000250   35..         ADDC    A,?V5
   \   000252   FB           MOV     R3,A
   \   000253   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000256   7403         MOV     A,#0x3
   \   000258   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025B   8A..         MOV     ?V0,R2
   \   00025D   8B..         MOV     ?V1,R3
   \   00025F   85....       MOV     ?V2,?V0
   \   000262   85....       MOV     ?V3,?V1
    830                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    831                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
   \   000265                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000265   AC..         MOV     R4,?V4
   \   000267   AD..         MOV     R5,?V5
   \   000269   85..82       MOV     DPL,?XSP + 0
   \   00026C   85..83       MOV     DPH,?XSP + 1
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   2402         ADD     A,#0x2
   \   000272   FB           MOV     R3,A
   \   000273   7A12         MOV     R2,#0x12
   \   000275   7964         MOV     R1,#0x64
   \   000277   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    832                (void)osal_mem_free(pRsp);
   \   00027A                ; Setup parameters for call to function osal_mem_free
   \   00027A   AA..         MOV     R2,?V4
   \   00027C   AB..         MOV     R3,?V5
   \   00027E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    833                return;
   \   000281   802D         SJMP    ??MT_AfDataRetrieve_10
    834              }
    835            }
    836          
    837            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3:
   \   000283   7403         MOV     A,#0x3
   \   000285   12....       LCALL   ?XSTACK_DISP0_8
   \   000288   E0           MOVX    A,@DPTR
   \   000289   C0E0         PUSH    A
   \   00028B   8E82         MOV     DPL,R6
   \   00028D   8F83         MOV     DPH,R7
   \   00028F   D0E0         POP     A
   \   000291   F0           MOVX    @DPTR,A
    838            pBuf[1] = len;
   \   000292   85..82       MOV     DPL,?XSP + 0
   \   000295   85..83       MOV     DPH,?XSP + 1
   \   000298   E0           MOVX    A,@DPTR
   \   000299   C0E0         PUSH    A
   \   00029B   8E82         MOV     DPL,R6
   \   00029D   8F83         MOV     DPH,R7
   \   00029F   A3           INC     DPTR
   \   0002A0   D0E0         POP     A
   \   0002A2   F0           MOVX    @DPTR,A
    839            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    840                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0002A3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002A3   EE           MOV     A,R6
   \   0002A4   FC           MOV     R4,A
   \   0002A5   EF           MOV     A,R7
   \   0002A6   FD           MOV     R5,A
   \   0002A7   7B02         MOV     R3,#0x2
   \   0002A9   7A12         MOV     R2,#0x12
   \   0002AB   7964         MOV     R1,#0x64
   \   0002AD   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    841          }
   \                     ??MT_AfDataRetrieve_10:
   \   0002B0   740A         MOV     A,#0xa
   \   0002B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B5   7F08         MOV     R7,#0x8
   \   0002B7   02....       LJMP    ?BANKED_LEAVE_XDATA
    842          
    843          /**************************************************************************************************
    844           * @fn          MT_AfDataStore
    845           *
    846           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    847           *          outgoing AF message.
    848           *
    849           * input parameters
    850           *
    851           * @param pBuf - pointer to the received buffer
    852           *
    853           * output parameters
    854           *
    855           * @param rtrn - AF-Status of the operation.
    856           *
    857           * @return      None.
    858           **************************************************************************************************
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    861          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    862            uint16 idx;
    863            uint8 len, rtrn = afStatus_FAILED;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
    864          
    865            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_AfDataStore_0
   \   00001D   0F           INC     R7
    866            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   7B00         MOV     R3,#0x0
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   E4           CLR     A
   \   000030   C8           XCH     A,R0
   \   000031   F9           MOV     R1,A
   \   000032   EA           MOV     A,R2
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   39           ADDC    A,R1
   \   000037   F9           MOV     R1,A
   \   000038   88..         MOV     ?V4,R0
   \   00003A   89..         MOV     ?V5,R1
    867            len = pBuf[2];
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V3,A
    868            pBuf += 3;
   \   000045   EE           MOV     A,R6
   \   000046   2403         ADD     A,#0x3
   \   000048   FE           MOV     R6,A
   \   000049   5001         JNC     ??MT_AfDataStore_1
   \   00004B   0F           INC     R7
    869          
    870            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   00004C   90....       MOV     DPTR,#pMtAfDataReq
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   E8           MOV     A,R0
   \   000055   49           ORL     A,R1
   \   000056   700C         JNZ     ??MT_AfDataStore_2
    871            {
    872              rtrn = afStatus_MEM_FAIL;
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   7410         MOV     A,#0x10
   \   000060   F0           MOVX    @DPTR,A
   \   000061   02....       LJMP    ??MT_AfDataStore_3 & 0xFFFF
    873            }
    874            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000064   E5..         MOV     A,?V3
   \   000066   6003         JZ      $+5
   \   000068   02....       LJMP    ??MT_AfDataStore_4 & 0xFFFF
    875            {
    876              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    877                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    878                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00006B                ; Setup parameters for call to function AF_DataRequest
   \   00006B   90....       MOV     DPTR,#pMtAfDataReq
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   C8           XCH     A,R0
   \   000073   2416         ADD     A,#0x16
   \   000075   F582         MOV     DPL,A
   \   000077   C8           XCH     A,R0
   \   000078   3400         ADDC    A,#0x0
   \   00007A   F583         MOV     DPH,A
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F5..         MOV     ?V0,A
   \   00007F   78..         MOV     R0,#?V0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000084   90....       MOV     DPTR,#pMtAfDataReq
   \   000087   E0           MOVX    A,@DPTR
   \   000088   2414         ADD     A,#0x14
   \   00008A   F5..         MOV     ?V0,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   3400         ADDC    A,#0x0
   \   000090   F5..         MOV     ?V1,A
   \   000092   78..         MOV     R0,#?V0
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   90....       MOV     DPTR,#pMtAfDataReq
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F8           MOV     R0,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F583         MOV     DPH,A
   \   0000A0   8882         MOV     DPL,R0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A5   90....       MOV     DPTR,#pMtAfDataReq
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F8           MOV     R0,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C8           XCH     A,R0
   \   0000AD   2412         ADD     A,#0x12
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   C8           XCH     A,R0
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B9   90....       MOV     DPTR,#pMtAfDataReq
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F8           MOV     R0,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   C8           XCH     A,R0
   \   0000C1   2410         ADD     A,#0x10
   \   0000C3   F582         MOV     DPL,A
   \   0000C5   C8           XCH     A,R0
   \   0000C6   3400         ADDC    A,#0x0
   \   0000C8   F583         MOV     DPH,A
   \   0000CA   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000CD   90....       MOV     DPTR,#pMtAfDataReq
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   C8           XCH     A,R0
   \   0000D5   2415         ADD     A,#0x15
   \   0000D7   F582         MOV     DPL,A
   \   0000D9   C8           XCH     A,R0
   \   0000DA   3400         ADDC    A,#0x0
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   90....       MOV     DPTR,#pMtAfDataReq
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F8           MOV     R0,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   C8           XCH     A,R0
   \   0000E8   240E         ADD     A,#0xe
   \   0000EA   F582         MOV     DPL,A
   \   0000EC   C8           XCH     A,R0
   \   0000ED   3400         ADDC    A,#0x0
   \   0000EF   F583         MOV     DPH,A
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FC           MOV     R4,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   FD           MOV     R5,A
   \   0000F6   90....       MOV     DPTR,#pMtAfDataReq
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   2402         ADD     A,#0x2
   \   0000FC   FA           MOV     R2,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   3400         ADDC    A,#0x0
   \   000101   FB           MOV     R3,A
   \   000102   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000105   7409         MOV     A,#0x9
   \   000107   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010A   E9           MOV     A,R1
   \   00010B   C0E0         PUSH    A
   \   00010D   85..82       MOV     DPL,?XSP + 0
   \   000110   85..83       MOV     DPH,?XSP + 1
   \   000113   D0E0         POP     A
   \   000115   F0           MOVX    @DPTR,A
    879              (void)osal_mem_free(pMtAfDataReq);
   \   000116                ; Setup parameters for call to function osal_mem_free
   \   000116   90....       MOV     DPTR,#pMtAfDataReq
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   FA           MOV     R2,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FB           MOV     R3,A
   \   00011E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    880              pMtAfDataReq = NULL;
   \   000121   90....       MOV     DPTR,#pMtAfDataReq
   \   000124   7400         MOV     A,#0x0
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   7400         MOV     A,#0x0
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   803D         SJMP    ??MT_AfDataStore_3
    881            }
    882            else
    883            {
    884              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   00012D                ; Setup parameters for call to function osal_memcpy
   \   00012D   8E..         MOV     ?V0,R6
   \   00012F   8F..         MOV     ?V1,R7
   \   000131   75..00       MOV     ?V2,#0x0
   \   000134   78..         MOV     R0,#?V0
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000139   AC..         MOV     R4,?V3
   \   00013B   7D00         MOV     R5,#0x0
   \   00013D   90....       MOV     DPTR,#pMtAfDataReq
   \   000140   E0           MOVX    A,@DPTR
   \   000141   F8           MOV     R0,A
   \   000142   A3           INC     DPTR
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F583         MOV     DPH,A
   \   000146   8882         MOV     DPL,R0
   \   000148   E0           MOVX    A,@DPTR
   \   000149   25..         ADD     A,?V4
   \   00014B   FA           MOV     R2,A
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   35..         ADDC    A,?V5
   \   000150   FB           MOV     R3,A
   \   000151   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000154   7403         MOV     A,#0x3
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   \   000159   8A..         MOV     ?V0,R2
   \   00015B   8B..         MOV     ?V1,R3
   \   00015D   A8..         MOV     R0,?V0
   \   00015F   A9..         MOV     R1,?V1
    885              rtrn = afStatus_SUCCESS;
   \   000161   85..82       MOV     DPL,?XSP + 0
   \   000164   85..83       MOV     DPH,?XSP + 1
   \   000167   7400         MOV     A,#0x0
   \   000169   F0           MOVX    @DPTR,A
    886            }
    887          
    888            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    889                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??MT_AfDataStore_3:
   \   00016A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00016A   AC..         MOV     R4,?XSP + 0
   \   00016C   AD..         MOV     R5,?XSP + 1
   \   00016E   7B01         MOV     R3,#0x1
   \   000170   7A11         MOV     R2,#0x11
   \   000172   7964         MOV     R1,#0x64
   \   000174   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    890          }
   \   000177   7401         MOV     A,#0x1
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017C   7F06         MOV     R7,#0x6
   \   00017E   02....       LJMP    ?BANKED_LEAVE_XDATA
    891          
    892          /**************************************************************************************************
    893           * @fn          MT_AfAPSF_ConfigSet
    894           *
    895           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    896           *
    897           * input parameters
    898           *
    899           * @param       pBuf - Pointer to the received buffer.
    900           *
    901           * output parameters
    902           *
    903           * None.
    904           *
    905           * @return      None.
    906           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    907          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
   \                     MT_AfAPSF_ConfigSet:
    908          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    909            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C0E0         PUSH    A
   \   000019   7401         MOV     A,#0x1
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C0E0         PUSH    A
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
    910            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
   \   000035                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000035   7401         MOV     A,#0x1
   \   000037   12....       LCALL   ?XSTACK_DISP101_8
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   000046   E9           MOV     A,R1
   \   000047   C0E0         PUSH    A
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   D0E0         POP     A
   \   000051   F0           MOVX    @DPTR,A
    911          
    912            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    913                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
   \   000052                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000052   AC..         MOV     R4,?XSP + 0
   \   000054   AD..         MOV     R5,?XSP + 1
   \   000056   7B01         MOV     R3,#0x1
   \   000058   7A13         MOV     R2,#0x13
   \   00005A   7964         MOV     R1,#0x64
   \   00005C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    914          }
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   \   000064   7F01         MOV     R7,#0x1
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfExec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRetrieve::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfAPSF_ConfigSet
    915          
    916          /***************************************************************************************************
    917          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     21   MT_AfAPSF_ConfigSet
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> afAPSF_ConfigSet
      0      9   MT_AfCommandProcessing
        0      9   -> MT_AfAPSF_ConfigSet
        0      9   -> MT_AfDataRequest
        0      9   -> MT_AfDataRequestSrcRtg
        0      9   -> MT_AfDataRetrieve
        0      9   -> MT_AfDataStore
        0      9   -> MT_AfRegister
      1     12   MT_AfDataConfirm
        0     12   -> MT_BuildAndSendZToolResponse
      1     58   MT_AfDataRequest
        0     49   -> AF_DataRequest
        0     40   -> MT_BuildAndSendZToolResponse
        0     40   -> afFindEndPointDesc
        0     40   -> osal_mem_alloc
        0     43   -> osal_memcpy
        0     40   -> osal_set_event
        0     40   -> osal_start_timerEx
      1     58   MT_AfDataRequestSrcRtg
        0     49   -> AF_DataRequestSrcRtg
        0     37   -> MT_BuildAndSendZToolResponse
        0     37   -> afFindEndPointDesc
        0     37   -> osal_mem_alloc
        0     37   -> osal_mem_free
        0     37   -> osal_memset
      1     38   MT_AfDataRetrieve
        0     26   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
      1     33   MT_AfDataStore
        0     24   -> AF_DataRequest
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      0     10   MT_AfExec
        0     10   -> osal_mem_free
        0     10   -> osal_set_event
        0     10   -> osal_start_timerEx
      1     27   MT_AfIncomingMsg
        0     24   -> MT_BuildAndSendZToolResponse
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     27   -> osal_memcpy
        0     24   -> osal_set_event
        0     24   -> osal_start_timerEx
      1     24   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     105  MT_AfAPSF_ConfigSet
       6  MT_AfAPSF_ConfigSet::?relay
     106  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      89  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
    1130  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     646  MT_AfDataRequestSrcRtg
       6  MT_AfDataRequestSrcRtg::?relay
     698  MT_AfDataRetrieve
       6  MT_AfDataRetrieve::?relay
     385  MT_AfDataStore
       6  MT_AfDataStore::?relay
     301  MT_AfExec
       6  MT_AfExec::?relay
    1745  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
     165  MT_AfRegister
       6  MT_AfRegister::?relay
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 5 370 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
 5 430 bytes of CODE  memory
     4 bytes of XDATA memory

Errors: none
Warnings: none
