###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                22/May/2018  20:40:33
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\design\ZStack-2.5.1a\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        D:\design\ZStack-2.5.1a\Components\zmac\f8w\zmac_cb.c -D NWK_AUTO_POLL
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D POWER_SAVING -lC
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -On --require_prototypes
#    List file          =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\zmac_cb.lst
#    Object file        =  
#        D:\design\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\zmac_cb.r51
#
###############################################################################

D:\design\ZStack-2.5.1a\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2012-03-08 17:10:16 -0800 (Thu, 08 Mar 2012) $
      4            Revision:       $Revision: 29685 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_security.h"
     61          
     62          #include "mac_main.h"
     63          extern void *ZMac_ScanBuf;
     64          
     65          /********************************************************************************************************
     66           *                                               CONSTANTS
     67           ********************************************************************************************************/
     68          
     69          #if !defined NONWK
     70          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     71          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     72            0,
     73            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     74            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     75            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     76            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     77            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     78            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     79            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     80            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     81            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     82            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     83            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     84            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     85            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     86            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     87            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     88            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     89          };
     90          #endif /* !defined NONWK */
     91          
     92          /********************************************************************************************************
     93           *                                               LOCALS
     94           ********************************************************************************************************/
     95          
     96          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     98          
     99          #if !defined NONWK
    100          /* LQI Adjustment Function */
    101          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    102          #endif
    103          
    104          /*********************************************************************
    105           * ZMAC Function Pointers
    106           */
    107          
    108          /*
    109           * ZMac Application callback function. This function will be called
    110           * for every MAC message that is received over-the-air or generated
    111           * locally by MAC for the application.
    112           *
    113           * The callback function should return TRUE if it has handled the
    114           * MAC message and no further action should be taken with it. It
    115           * should return FALSE if it has not handled the MAC message and
    116           * normal processing should take place.
    117           *
    118           * NOTE: The processing in this function should be kept to the
    119           *       minimum.
    120           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122          
    123          
    124          /*********************************************************************
    125           * ZMAC Functions
    126           */
    127          
    128          /**************************************************************************************************
    129           * @fn       MAC_CbackEvent()
    130           *
    131           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    132           *
    133           * @param    pData - pointer to macCbackEvent_t
    134           *
    135           * @return   none
    136           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    138          #ifndef MT_MAC_CB_FUNC
    139          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    140          #if !defined NONWK
    141            uint8 event = pData->hdr.event;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8882         MOV     DPL,R0
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V3,A
    142            uint16 tmp = zmacCBSizeTable[event];
   \   000026   A8..         MOV     R0,?V3
   \   000028   7900         MOV     R1,#0x0
   \   00002A   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   00002C   28           ADD     A,R0
   \   00002D   F582         MOV     DPL,A
   \   00002F   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   000031   39           ADDC    A,R1
   \   000032   F583         MOV     DPH,A
   \   000034   E4           CLR     A
   \   000035   93           MOVC    A,@A+DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E8           MOV     A,R0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E9           MOV     A,R1
   \   000042   F0           MOVX    @DPTR,A
    143            macCbackEvent_t *msgPtr;
    144          
    145            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    146             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    147             */
    148            if (tmp == 0)
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   E8           MOV     A,R0
   \   00004E   49           ORL     A,R1
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    149            {
    150              return;
    151            }
    152          
    153            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    154            if ( event == MAC_MCPS_DATA_IND )
   \   000054   740D         MOV     A,#0xd
   \   000056   65..         XRL     A,?V3
   \   000058   705C         JNZ     ??MAC_CbackEvent_1
    155            {
    156              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   00005A                ; Setup parameters for call to function MAC_MlmeGetReq
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP101_8
   \   00005F   7953         MOV     R1,#0x53
   \   000061   12....       LCALL   `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
   \   000064   E9           MOV     A,R1
    157              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    158                  (pData->dataInd.msdu.len == 0))
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   64FE         XRL     A,#0xfe
   \   00006D   7004         JNZ     ??MAC_CbackEvent_2
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_2:
   \   000073   6025         JZ      ??MAC_CbackEvent_3
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   64FF         XRL     A,#0xff
   \   00007D   7004         JNZ     ??MAC_CbackEvent_4
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_4:
   \   000083   6015         JZ      ??MAC_CbackEvent_3
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F583         MOV     DPH,A
   \   000091   8882         MOV     DPL,R0
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   700A         JNZ     ??MAC_CbackEvent_5
    159              {
    160                mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_3:
   \   00009A                ; Setup parameters for call to function mac_msg_deallocate
   \   00009A   AA..         MOV     R2,?XSP + 0
   \   00009C   AB..         MOV     R3,?XSP + 1
   \   00009E   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    161                return;
   \   0000A1   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    162              }
    163              msgPtr = pData;
   \                     ??MAC_CbackEvent_5:
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F8           MOV     R0,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F9           MOV     R1,A
   \   0000AF   E8           MOV     A,R0
   \   0000B0   FE           MOV     R6,A
   \   0000B1   E9           MOV     A,R1
   \   0000B2   FF           MOV     R7,A
   \   0000B3   02....       LJMP    ??MAC_CbackEvent_6 & 0xFFFF
    164            }
    165            else
    166            {
    167              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   0000B6   7405         MOV     A,#0x5
   \   0000B8   65..         XRL     A,?V3
   \   0000BA   702D         JNZ     ??MAC_CbackEvent_7
    168              {
    169                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   0000BC   85..82       MOV     DPL,?XSP + 0
   \   0000BF   85..83       MOV     DPH,?XSP + 1
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C8           XCH     A,R0
   \   0000C7   2408         ADD     A,#0x8
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   C8           XCH     A,R0
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   7900         MOV     R1,#0x0
   \   0000D4   E8           MOV     A,R0
   \   0000D5   2421         ADD     A,#0x21
   \   0000D7   F8           MOV     R0,A
   \   0000D8   5001         JNC     ??MAC_CbackEvent_8
   \   0000DA   09           INC     R1
   \                     ??MAC_CbackEvent_8:
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   28           ADD     A,R0
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   39           ADDC    A,R1
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   8062         SJMP    ??MAC_CbackEvent_9
    170              }
    171              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_7:
   \   0000E9   7407         MOV     A,#0x7
   \   0000EB   65..         XRL     A,?V3
   \   0000ED   705C         JNZ     ??MAC_CbackEvent_9
    172              {
    173                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000EF   85..82       MOV     DPL,?XSP + 0
   \   0000F2   85..83       MOV     DPH,?XSP + 1
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F8           MOV     R0,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F583         MOV     DPH,A
   \   0000FB   8882         MOV     DPL,R0
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   7010         JNZ     ??MAC_CbackEvent_10
    174                {
    175                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   241B         ADD     A,#0x1b
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   3400         ADDC    A,#0x0
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   8039         SJMP    ??MAC_CbackEvent_9
    176                }
    177                else
    178                {
    179                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_10:
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F8           MOV     R0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   C8           XCH     A,R0
   \   00011D   2408         ADD     A,#0x8
   \   00011F   F582         MOV     DPL,A
   \   000121   C8           XCH     A,R0
   \   000122   3400         ADDC    A,#0x0
   \   000124   F583         MOV     DPH,A
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F8           MOV     R0,A
   \   000128   7900         MOV     R1,#0x0
   \   00012A   E8           MOV     A,R0
   \   00012B   75F021       MOV     B,#0x21
   \   00012E   A4           MUL     AB
   \   00012F   C8           XCH     A,R0
   \   000130   AAF0         MOV     R2,B
   \   000132   75F000       MOV     B,#0x0
   \   000135   A4           MUL     AB
   \   000136   2A           ADD     A,R2
   \   000137   FA           MOV     R2,A
   \   000138   75F021       MOV     B,#0x21
   \   00013B   E9           MOV     A,R1
   \   00013C   A4           MUL     AB
   \   00013D   2A           ADD     A,R2
   \   00013E   F9           MOV     R1,A
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E0           MOVX    A,@DPTR
   \   000145   28           ADD     A,R0
   \   000146   F0           MOVX    @DPTR,A
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   39           ADDC    A,R1
   \   00014A   F0           MOVX    @DPTR,A
    180                }
    181              }
    182          
    183              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_9:
   \   00014B                ; Setup parameters for call to function osal_msg_allocate
   \   00014B   7402         MOV     A,#0x2
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   FA           MOV     R2,A
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   FB           MOV     R3,A
   \   000155   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000158   8A..         MOV     ?V0,R2
   \   00015A   8B..         MOV     ?V1,R3
   \   00015C   AE..         MOV     R6,?V0
   \   00015E   AF..         MOV     R7,?V1
   \   000160   EE           MOV     A,R6
   \   000161   4F           ORL     A,R7
   \   000162   707F         JNZ     ??MAC_CbackEvent_11
    184              {
    185                // Not enough memory. If data confirm - try again
    186                if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \   000164   740C         MOV     A,#0xc
   \   000166   65..         XRL     A,?V3
   \   000168   7076         JNZ     ??MAC_CbackEvent_12
   \   00016A   85..82       MOV     DPL,?XSP + 0
   \   00016D   85..83       MOV     DPH,?XSP + 1
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F8           MOV     R0,A
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   F583         MOV     DPH,A
   \   000176   8882         MOV     DPL,R0
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F8           MOV     R0,A
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   F9           MOV     R1,A
   \   000180   E8           MOV     A,R0
   \   000181   49           ORL     A,R1
   \   000182   605C         JZ      ??MAC_CbackEvent_12
    187                {
    188                  halIntState_t intState;
    189          
    190                  // This is not normally deallocated here because the pZMac_AppCallback()
    191                  // application may need it.
    192                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000184   A2AF         MOV     C,0xa8.7
   \   000186   E4           CLR     A
   \   000187   33           RLC     A
   \   000188   F5..         MOV     ?V0,A
   \   00018A   C2AF         CLR     0xa8.7
    193          
    194                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00018C                ; Setup parameters for call to function mac_msg_deallocate
   \   00018C   85..82       MOV     DPL,?XSP + 0
   \   00018F   85..83       MOV     DPH,?XSP + 1
   \   000192   E0           MOVX    A,@DPTR
   \   000193   2403         ADD     A,#0x3
   \   000195   FA           MOV     R2,A
   \   000196   A3           INC     DPTR
   \   000197   E0           MOVX    A,@DPTR
   \   000198   3400         ADDC    A,#0x0
   \   00019A   FB           MOV     R3,A
   \   00019B   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    195                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   00019E                ; Setup parameters for call to function osal_msg_allocate
   \   00019E   7402         MOV     A,#0x2
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   FA           MOV     R2,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FB           MOV     R3,A
   \   0001A8   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0001AB   8A..         MOV     ?V4,R2
   \   0001AD   8B..         MOV     ?V5,R3
   \   0001AF   AE..         MOV     R6,?V4
   \   0001B1   AF..         MOV     R7,?V5
   \   0001B3   EE           MOV     A,R6
   \   0001B4   4F           ORL     A,R7
   \   0001B5   7015         JNZ     ??MAC_CbackEvent_13
    196                  {
    197                    // Still no allocation, something is wrong
    198                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   0001B7   E5..         MOV     A,?V0
   \   0001B9   C0E0         PUSH    A
   \   0001BB   7404         MOV     A,#0x4
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   D0E0         POP     A
   \   0001C2   F0           MOVX    @DPTR,A
   \   0001C3   E5..         MOV     A,?V0
   \   0001C5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001C7   92AF         MOV     0xa8.7,C
    199                    return;
   \   0001C9   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    200                  }
    201                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_13:
   \   0001CC   E5..         MOV     A,?V0
   \   0001CE   C0E0         PUSH    A
   \   0001D0   7404         MOV     A,#0x4
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   D0E0         POP     A
   \   0001D7   F0           MOVX    @DPTR,A
   \   0001D8   E5..         MOV     A,?V0
   \   0001DA   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001DC   92AF         MOV     0xa8.7,C
   \   0001DE   8003         SJMP    ??MAC_CbackEvent_11
    202                }
    203                else
    204                {
    205                  // This message is dropped
    206                  return;
   \                     ??MAC_CbackEvent_12:
   \   0001E0   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    207                }
    208              }
    209              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   0001E3                ; Setup parameters for call to function osal_memcpy
   \   0001E3   85..82       MOV     DPL,?XSP + 0
   \   0001E6   85..83       MOV     DPH,?XSP + 1
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   F5..         MOV     ?V0,A
   \   0001EC   A3           INC     DPTR
   \   0001ED   E0           MOVX    A,@DPTR
   \   0001EE   F5..         MOV     ?V1,A
   \   0001F0   75..00       MOV     ?V2,#0x0
   \   0001F3   78..         MOV     R0,#?V0
   \   0001F5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001F8   A8..         MOV     R0,?V3
   \   0001FA   7900         MOV     R1,#0x0
   \   0001FC   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   0001FE   28           ADD     A,R0
   \   0001FF   F582         MOV     DPL,A
   \   000201   74..         MOV     A,#(zmacCBSizeTable >> 8) & 0xff
   \   000203   39           ADDC    A,R1
   \   000204   F583         MOV     DPH,A
   \   000206   E4           CLR     A
   \   000207   93           MOVC    A,@A+DPTR
   \   000208   FC           MOV     R4,A
   \   000209   7D00         MOV     R5,#0x0
   \   00020B   EE           MOV     A,R6
   \   00020C   FA           MOV     R2,A
   \   00020D   EF           MOV     A,R7
   \   00020E   FB           MOV     R3,A
   \   00020F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000212   7403         MOV     A,#0x3
   \   000214   12....       LCALL   ?DEALLOC_XSTACK8
    210            }
    211          
    212            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_6:
   \   000217   7405         MOV     A,#0x5
   \   000219   65..         XRL     A,?V3
   \   00021B   6003         JZ      $+5
   \   00021D   02....       LJMP    ??MAC_CbackEvent_14 & 0xFFFF
    213            {
    214              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
   \   000220   8E..         MOV     ?V4,R6
   \   000222   8F..         MOV     ?V5,R7
    215          
    216              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   000224                ; Setup parameters for call to function osal_memcpy
   \   000224   85..82       MOV     DPL,?V4
   \   000227   85..83       MOV     DPH,?V5
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   F5..         MOV     ?V0,A
   \   000230   A3           INC     DPTR
   \   000231   E0           MOVX    A,@DPTR
   \   000232   F5..         MOV     ?V1,A
   \   000234   75..00       MOV     ?V2,#0x0
   \   000237   78..         MOV     R0,#?V0
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00023C   7C21         MOV     R4,#0x21
   \   00023E   7D00         MOV     R5,#0x0
   \   000240   E5..         MOV     A,?V4
   \   000242   240B         ADD     A,#0xb
   \   000244   FA           MOV     R2,A
   \   000245   E4           CLR     A
   \   000246   35..         ADDC    A,?V5
   \   000248   FB           MOV     R3,A
   \   000249   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00024C   7403         MOV     A,#0x3
   \   00024E   12....       LCALL   ?DEALLOC_XSTACK8
    217              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   000251   E5..         MOV     A,?V4
   \   000253   240B         ADD     A,#0xb
   \   000255   F8           MOV     R0,A
   \   000256   E4           CLR     A
   \   000257   35..         ADDC    A,?V5
   \   000259   F9           MOV     R1,A
   \   00025A   85..82       MOV     DPL,?V4
   \   00025D   85..83       MOV     DPH,?V5
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   E8           MOV     A,R0
   \   000264   F0           MOVX    @DPTR,A
   \   000265   A3           INC     DPTR
   \   000266   E9           MOV     A,R1
   \   000267   F0           MOVX    @DPTR,A
    218              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000268                ; Setup parameters for call to function osal_memcpy
   \   000268   85..82       MOV     DPL,?V4
   \   00026B   85..83       MOV     DPH,?V5
   \   00026E   A3           INC     DPTR
   \   00026F   A3           INC     DPTR
   \   000270   A3           INC     DPTR
   \   000271   A3           INC     DPTR
   \   000272   A3           INC     DPTR
   \   000273   A3           INC     DPTR
   \   000274   A3           INC     DPTR
   \   000275   A3           INC     DPTR
   \   000276   A3           INC     DPTR
   \   000277   E0           MOVX    A,@DPTR
   \   000278   F5..         MOV     ?V0,A
   \   00027A   A3           INC     DPTR
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   F5..         MOV     ?V1,A
   \   00027E   75..00       MOV     ?V2,#0x0
   \   000281   78..         MOV     R0,#?V0
   \   000283   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000286   85..82       MOV     DPL,?V4
   \   000289   85..83       MOV     DPH,?V5
   \   00028C   A3           INC     DPTR
   \   00028D   A3           INC     DPTR
   \   00028E   A3           INC     DPTR
   \   00028F   A3           INC     DPTR
   \   000290   A3           INC     DPTR
   \   000291   A3           INC     DPTR
   \   000292   A3           INC     DPTR
   \   000293   A3           INC     DPTR
   \   000294   E0           MOVX    A,@DPTR
   \   000295   FC           MOV     R4,A
   \   000296   7D00         MOV     R5,#0x0
   \   000298   85..82       MOV     DPL,?V4
   \   00029B   85..83       MOV     DPH,?V5
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   2421         ADD     A,#0x21
   \   0002A4   FA           MOV     R2,A
   \   0002A5   A3           INC     DPTR
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   3400         ADDC    A,#0x0
   \   0002A9   FB           MOV     R3,A
   \   0002AA   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002AD   7403         MOV     A,#0x3
   \   0002AF   12....       LCALL   ?DEALLOC_XSTACK8
    219              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0002B2   85..82       MOV     DPL,?V4
   \   0002B5   85..83       MOV     DPH,?V5
   \   0002B8   A3           INC     DPTR
   \   0002B9   A3           INC     DPTR
   \   0002BA   A3           INC     DPTR
   \   0002BB   E0           MOVX    A,@DPTR
   \   0002BC   2421         ADD     A,#0x21
   \   0002BE   F8           MOV     R0,A
   \   0002BF   A3           INC     DPTR
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   3400         ADDC    A,#0x0
   \   0002C3   F9           MOV     R1,A
   \   0002C4   85..82       MOV     DPL,?V4
   \   0002C7   85..83       MOV     DPH,?V5
   \   0002CA   A3           INC     DPTR
   \   0002CB   A3           INC     DPTR
   \   0002CC   A3           INC     DPTR
   \   0002CD   A3           INC     DPTR
   \   0002CE   A3           INC     DPTR
   \   0002CF   A3           INC     DPTR
   \   0002D0   A3           INC     DPTR
   \   0002D1   A3           INC     DPTR
   \   0002D2   A3           INC     DPTR
   \   0002D3   E8           MOV     A,R0
   \   0002D4   F0           MOVX    @DPTR,A
   \   0002D5   A3           INC     DPTR
   \   0002D6   E9           MOV     A,R1
   \   0002D7   F0           MOVX    @DPTR,A
   \   0002D8   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    220            }
    221            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_14:
   \   0002DB   7407         MOV     A,#0x7
   \   0002DD   65..         XRL     A,?V3
   \   0002DF   6003         JZ      $+5
   \   0002E1   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    222            {
    223              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
   \   0002E4   8E..         MOV     ?V4,R6
   \   0002E6   8F..         MOV     ?V5,R7
    224          
    225              if (ZMac_ScanBuf != NULL)
   \   0002E8   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   F8           MOV     R0,A
   \   0002ED   A3           INC     DPTR
   \   0002EE   E0           MOVX    A,@DPTR
   \   0002EF   F9           MOV     R1,A
   \   0002F0   E8           MOV     A,R0
   \   0002F1   49           ORL     A,R1
   \   0002F2   7003         JNZ     $+5
   \   0002F4   02....       LJMP    ??MAC_CbackEvent_15 & 0xFFFF
    226              {
    227                void *pTmp = ZMac_ScanBuf;
   \   0002F7   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0002FA   E0           MOVX    A,@DPTR
   \   0002FB   F5..         MOV     ?V6,A
   \   0002FD   A3           INC     DPTR
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   F5..         MOV     ?V7,A
    228                ZMac_ScanBuf = NULL;
   \   000301   90....       MOV     DPTR,#ZMac_ScanBuf
   \   000304   7400         MOV     A,#0x0
   \   000306   F0           MOVX    @DPTR,A
   \   000307   A3           INC     DPTR
   \   000308   7400         MOV     A,#0x0
   \   00030A   F0           MOVX    @DPTR,A
    229          
    230                if (pScan->scanType == ZMAC_ED_SCAN)
   \   00030B   85..82       MOV     DPL,?V4
   \   00030E   85..83       MOV     DPH,?V5
   \   000311   A3           INC     DPTR
   \   000312   A3           INC     DPTR
   \   000313   E0           MOVX    A,@DPTR
   \   000314   704D         JNZ     ??MAC_CbackEvent_16
    231                {
    232                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   000316   E5..         MOV     A,?V4
   \   000318   240B         ADD     A,#0xb
   \   00031A   F8           MOV     R0,A
   \   00031B   E4           CLR     A
   \   00031C   35..         ADDC    A,?V5
   \   00031E   F9           MOV     R1,A
   \   00031F   85..82       MOV     DPL,?V4
   \   000322   85..83       MOV     DPH,?V5
   \   000325   A3           INC     DPTR
   \   000326   A3           INC     DPTR
   \   000327   A3           INC     DPTR
   \   000328   A3           INC     DPTR
   \   000329   A3           INC     DPTR
   \   00032A   A3           INC     DPTR
   \   00032B   A3           INC     DPTR
   \   00032C   A3           INC     DPTR
   \   00032D   A3           INC     DPTR
   \   00032E   E8           MOV     A,R0
   \   00032F   F0           MOVX    @DPTR,A
   \   000330   A3           INC     DPTR
   \   000331   E9           MOV     A,R1
   \   000332   F0           MOVX    @DPTR,A
    233                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   000333                ; Setup parameters for call to function osal_memcpy
   \   000333   85....       MOV     ?V0,?V6
   \   000336   85....       MOV     ?V1,?V7
   \   000339   75..00       MOV     ?V2,#0x0
   \   00033C   78..         MOV     R0,#?V0
   \   00033E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000341   7C1B         MOV     R4,#0x1b
   \   000343   7D00         MOV     R5,#0x0
   \   000345   85..82       MOV     DPL,?V4
   \   000348   85..83       MOV     DPH,?V5
   \   00034B   A3           INC     DPTR
   \   00034C   A3           INC     DPTR
   \   00034D   A3           INC     DPTR
   \   00034E   A3           INC     DPTR
   \   00034F   A3           INC     DPTR
   \   000350   A3           INC     DPTR
   \   000351   A3           INC     DPTR
   \   000352   A3           INC     DPTR
   \   000353   A3           INC     DPTR
   \   000354   E0           MOVX    A,@DPTR
   \   000355   FA           MOV     R2,A
   \   000356   A3           INC     DPTR
   \   000357   E0           MOVX    A,@DPTR
   \   000358   FB           MOV     R3,A
   \   000359   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00035C   7403         MOV     A,#0x3
   \   00035E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000361   8063         SJMP    ??MAC_CbackEvent_17
    234                }
    235                else
    236                {
    237                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_16:
   \   000363   E5..         MOV     A,?V4
   \   000365   240B         ADD     A,#0xb
   \   000367   F8           MOV     R0,A
   \   000368   E4           CLR     A
   \   000369   35..         ADDC    A,?V5
   \   00036B   F9           MOV     R1,A
   \   00036C   85..82       MOV     DPL,?V4
   \   00036F   85..83       MOV     DPH,?V5
   \   000372   A3           INC     DPTR
   \   000373   A3           INC     DPTR
   \   000374   A3           INC     DPTR
   \   000375   A3           INC     DPTR
   \   000376   A3           INC     DPTR
   \   000377   A3           INC     DPTR
   \   000378   A3           INC     DPTR
   \   000379   A3           INC     DPTR
   \   00037A   A3           INC     DPTR
   \   00037B   E8           MOV     A,R0
   \   00037C   F0           MOVX    @DPTR,A
   \   00037D   A3           INC     DPTR
   \   00037E   E9           MOV     A,R1
   \   00037F   F0           MOVX    @DPTR,A
    238                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000380                ; Setup parameters for call to function osal_memcpy
   \   000380   85....       MOV     ?V0,?V6
   \   000383   85....       MOV     ?V1,?V7
   \   000386   75..00       MOV     ?V2,#0x0
   \   000389   78..         MOV     R0,#?V0
   \   00038B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00038E   85..82       MOV     DPL,?V4
   \   000391   85..83       MOV     DPH,?V5
   \   000394   A3           INC     DPTR
   \   000395   A3           INC     DPTR
   \   000396   A3           INC     DPTR
   \   000397   A3           INC     DPTR
   \   000398   A3           INC     DPTR
   \   000399   A3           INC     DPTR
   \   00039A   A3           INC     DPTR
   \   00039B   A3           INC     DPTR
   \   00039C   E0           MOVX    A,@DPTR
   \   00039D   FC           MOV     R4,A
   \   00039E   7D00         MOV     R5,#0x0
   \   0003A0   EC           MOV     A,R4
   \   0003A1   75F021       MOV     B,#0x21
   \   0003A4   A4           MUL     AB
   \   0003A5   CC           XCH     A,R4
   \   0003A6   A8F0         MOV     R0,B
   \   0003A8   75F000       MOV     B,#0x0
   \   0003AB   A4           MUL     AB
   \   0003AC   28           ADD     A,R0
   \   0003AD   F8           MOV     R0,A
   \   0003AE   75F021       MOV     B,#0x21
   \   0003B1   ED           MOV     A,R5
   \   0003B2   A4           MUL     AB
   \   0003B3   28           ADD     A,R0
   \   0003B4   FD           MOV     R5,A
   \   0003B5   E5..         MOV     A,?V4
   \   0003B7   240B         ADD     A,#0xb
   \   0003B9   FA           MOV     R2,A
   \   0003BA   E4           CLR     A
   \   0003BB   35..         ADDC    A,?V5
   \   0003BD   FB           MOV     R3,A
   \   0003BE   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003C1   7403         MOV     A,#0x3
   \   0003C3   12....       LCALL   ?DEALLOC_XSTACK8
    239                }
    240          
    241                osal_mem_free(pTmp);
   \                     ??MAC_CbackEvent_17:
   \   0003C6                ; Setup parameters for call to function osal_mem_free
   \   0003C6   AA..         MOV     R2,?V6
   \   0003C8   AB..         MOV     R3,?V7
   \   0003CA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    242              }
    243            }
    244          
    245            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_15:
   \   0003CD   90....       MOV     DPTR,#pZMac_AppCallback
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   F8           MOV     R0,A
   \   0003D2   A3           INC     DPTR
   \   0003D3   E0           MOVX    A,@DPTR
   \   0003D4   F9           MOV     R1,A
   \   0003D5   E8           MOV     A,R0
   \   0003D6   49           ORL     A,R1
   \   0003D7   6018         JZ      ??MAC_CbackEvent_18
   \   0003D9                ; Setup parameters for indirect call
   \   0003D9   EE           MOV     A,R6
   \   0003DA   FA           MOV     R2,A
   \   0003DB   EF           MOV     A,R7
   \   0003DC   FB           MOV     R3,A
   \   0003DD   90....       MOV     DPTR,#pZMac_AppCallback
   \   0003E0   E0           MOVX    A,@DPTR
   \   0003E1   F8           MOV     R0,A
   \   0003E2   A3           INC     DPTR
   \   0003E3   E0           MOVX    A,@DPTR
   \   0003E4   F583         MOV     DPH,A
   \   0003E6   8882         MOV     DPL,R0
   \   0003E8   12....       LCALL   ?CALL_IND
   \   0003EB   E9           MOV     A,R1
   \   0003EC   6003         JZ      $+5
   \   0003EE   02....       LJMP    ??MAC_CbackEvent_19 & 0xFFFF
    246            {
    247              // Filter out non-zigbee packets
    248              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_18:
   \   0003F1   740D         MOV     A,#0xd
   \   0003F3   65..         XRL     A,?V3
   \   0003F5   6003         JZ      $+5
   \   0003F7   02....       LJMP    ??MAC_CbackEvent_20 & 0xFFFF
    249              {
    250                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
   \   0003FA   85..82       MOV     DPL,?XSP + 0
   \   0003FD   85..83       MOV     DPH,?XSP + 1
   \   000400   E0           MOVX    A,@DPTR
   \   000401   F8           MOV     R0,A
   \   000402   A3           INC     DPTR
   \   000403   E0           MOVX    A,@DPTR
   \   000404   F583         MOV     DPH,A
   \   000406   8882         MOV     DPL,R0
   \   000408   A3           INC     DPTR
   \   000409   A3           INC     DPTR
   \   00040A   E0           MOVX    A,@DPTR
   \   00040B   F8           MOV     R0,A
   \   00040C   A3           INC     DPTR
   \   00040D   E0           MOVX    A,@DPTR
   \   00040E   F583         MOV     DPH,A
   \   000410   8882         MOV     DPL,R0
   \   000412   E0           MOVX    A,@DPTR
   \   000413   5403         ANL     A,#0x3
   \   000415   F5..         MOV     ?V0,A
    251                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
   \   000417   85..82       MOV     DPL,?XSP + 0
   \   00041A   85..83       MOV     DPH,?XSP + 1
   \   00041D   E0           MOVX    A,@DPTR
   \   00041E   F8           MOV     R0,A
   \   00041F   A3           INC     DPTR
   \   000420   E0           MOVX    A,@DPTR
   \   000421   F583         MOV     DPH,A
   \   000423   8882         MOV     DPL,R0
   \   000425   A3           INC     DPTR
   \   000426   A3           INC     DPTR
   \   000427   E0           MOVX    A,@DPTR
   \   000428   F8           MOV     R0,A
   \   000429   A3           INC     DPTR
   \   00042A   E0           MOVX    A,@DPTR
   \   00042B   F583         MOV     DPH,A
   \   00042D   8882         MOV     DPL,R0
   \   00042F   E0           MOVX    A,@DPTR
   \   000430   13           RRC     A
   \   000431   13           RRC     A
   \   000432   543F         ANL     A,#0x3f
   \   000434   540F         ANL     A,#0xf
   \   000436   F5..         MOV     ?V1,A
    252                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   000438   85..82       MOV     DPL,?XSP + 0
   \   00043B   85..83       MOV     DPH,?XSP + 1
   \   00043E   E0           MOVX    A,@DPTR
   \   00043F   F8           MOV     R0,A
   \   000440   A3           INC     DPTR
   \   000441   E0           MOVX    A,@DPTR
   \   000442   F583         MOV     DPH,A
   \   000444   8882         MOV     DPL,R0
   \   000446   A3           INC     DPTR
   \   000447   A3           INC     DPTR
   \   000448   E0           MOVX    A,@DPTR
   \   000449   F8           MOV     R0,A
   \   00044A   A3           INC     DPTR
   \   00044B   E0           MOVX    A,@DPTR
   \   00044C   F583         MOV     DPH,A
   \   00044E   8882         MOV     DPL,R0
   \   000450   A3           INC     DPTR
   \   000451   E0           MOVX    A,@DPTR
   \   000452   54E0         ANL     A,#0xe0
   \   000454   F5..         MOV     ?V2,A
    253                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    254                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   000456   E5..         MOV     A,?V0
   \   000458   C3           CLR     C
   \   000459   9402         SUBB    A,#0x2
   \   00045B   5025         JNC     ??MAC_CbackEvent_21
   \   00045D   90....       MOV     DPTR,#_NIB + 17
   \   000460   E0           MOVX    A,@DPTR
   \   000461   65..         XRL     A,?V1
   \   000463   701D         JNZ     ??MAC_CbackEvent_21
   \   000465   E5..         MOV     A,?V2
   \   000467   7019         JNZ     ??MAC_CbackEvent_21
   \   000469   85..82       MOV     DPL,?XSP + 0
   \   00046C   85..83       MOV     DPH,?XSP + 1
   \   00046F   E0           MOVX    A,@DPTR
   \   000470   F8           MOV     R0,A
   \   000471   A3           INC     DPTR
   \   000472   E0           MOVX    A,@DPTR
   \   000473   C8           XCH     A,R0
   \   000474   241A         ADD     A,#0x1a
   \   000476   F582         MOV     DPL,A
   \   000478   C8           XCH     A,R0
   \   000479   3400         ADDC    A,#0x0
   \   00047B   F583         MOV     DPH,A
   \   00047D   E0           MOVX    A,@DPTR
   \   00047E   6402         XRL     A,#0x2
   \   000480   600A         JZ      ??MAC_CbackEvent_22
    255                {
    256                  // Drop the message
    257                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_21:
   \   000482                ; Setup parameters for call to function mac_msg_deallocate
   \   000482   AA..         MOV     R2,?XSP + 0
   \   000484   AB..         MOV     R3,?XSP + 1
   \   000486   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    258                  return;
   \   000489   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    259                }
    260                else
    261                {
    262                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_22:
   \   00048C   EE           MOV     A,R6
   \   00048D   2412         ADD     A,#0x12
   \   00048F   F5..         MOV     ?V4,A
   \   000491   E4           CLR     A
   \   000492   3F           ADDC    A,R7
   \   000493   F5..         MOV     ?V5,A
    263                  // See if LQI needs adjustment due to frame correlation
    264                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   000495                ; Setup parameters for call to function ZMacLqiAdjust
   \   000495   E5..         MOV     A,?V4
   \   000497   241C         ADD     A,#0x1c
   \   000499   FA           MOV     R2,A
   \   00049A   E4           CLR     A
   \   00049B   35..         ADDC    A,?V5
   \   00049D   FB           MOV     R3,A
   \   00049E   E5..         MOV     A,?V4
   \   0004A0   241D         ADD     A,#0x1d
   \   0004A2   F582         MOV     DPL,A
   \   0004A4   E4           CLR     A
   \   0004A5   35..         ADDC    A,?V5
   \   0004A7   F583         MOV     DPH,A
   \   0004A9   E0           MOVX    A,@DPTR
   \   0004AA   F9           MOV     R1,A
   \   0004AB   12....       LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    265          
    266                  // Look for broadcast message that has a radius of greater 1
    267                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    268                         && (pData->dataInd.msdu.p[6] > 1) )
   \   0004AE   85..82       MOV     DPL,?XSP + 0
   \   0004B1   85..83       MOV     DPH,?XSP + 1
   \   0004B4   E0           MOVX    A,@DPTR
   \   0004B5   F8           MOV     R0,A
   \   0004B6   A3           INC     DPTR
   \   0004B7   E0           MOVX    A,@DPTR
   \   0004B8   C8           XCH     A,R0
   \   0004B9   241B         ADD     A,#0x1b
   \   0004BB   F582         MOV     DPL,A
   \   0004BD   C8           XCH     A,R0
   \   0004BE   3400         ADDC    A,#0x0
   \   0004C0   F583         MOV     DPH,A
   \   0004C2   E0           MOVX    A,@DPTR
   \   0004C3   64FF         XRL     A,#0xff
   \   0004C5   7004         JNZ     ??MAC_CbackEvent_23
   \   0004C7   A3           INC     DPTR
   \   0004C8   E0           MOVX    A,@DPTR
   \   0004C9   64FF         XRL     A,#0xff
   \                     ??MAC_CbackEvent_23:
   \   0004CB   6003         JZ      $+5
   \   0004CD   02....       LJMP    ??MAC_CbackEvent_24 & 0xFFFF
   \   0004D0   85..82       MOV     DPL,?XSP + 0
   \   0004D3   85..83       MOV     DPH,?XSP + 1
   \   0004D6   E0           MOVX    A,@DPTR
   \   0004D7   F8           MOV     R0,A
   \   0004D8   A3           INC     DPTR
   \   0004D9   E0           MOVX    A,@DPTR
   \   0004DA   F583         MOV     DPH,A
   \   0004DC   8882         MOV     DPL,R0
   \   0004DE   A3           INC     DPTR
   \   0004DF   A3           INC     DPTR
   \   0004E0   E0           MOVX    A,@DPTR
   \   0004E1   F8           MOV     R0,A
   \   0004E2   A3           INC     DPTR
   \   0004E3   E0           MOVX    A,@DPTR
   \   0004E4   C8           XCH     A,R0
   \   0004E5   2406         ADD     A,#0x6
   \   0004E7   F582         MOV     DPL,A
   \   0004E9   C8           XCH     A,R0
   \   0004EA   3400         ADDC    A,#0x0
   \   0004EC   F583         MOV     DPH,A
   \   0004EE   E0           MOVX    A,@DPTR
   \   0004EF   C3           CLR     C
   \   0004F0   9402         SUBB    A,#0x2
   \   0004F2   4067         JC      ??MAC_CbackEvent_24
    269                  {
    270                    // Send the messsage to a special broadcast queue
    271                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   0004F4                ; Setup parameters for call to function nwk_broadcastSend
   \   0004F4   EE           MOV     A,R6
   \   0004F5   FA           MOV     R2,A
   \   0004F6   EF           MOV     A,R7
   \   0004F7   FB           MOV     R3,A
   \   0004F8   12....       LCALL   `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   0004FB   E9           MOV     A,R1
   \   0004FC   6007         JZ      ??MAC_CbackEvent_25
    272                    {
    273                      // Drop the message, too many broadcast messages to process
    274                      mac_msg_deallocate( (uint8 **)&pData );
   \   0004FE                ; Setup parameters for call to function mac_msg_deallocate
   \   0004FE   AA..         MOV     R2,?XSP + 0
   \   000500   AB..         MOV     R3,?XSP + 1
   \   000502   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    275                    }
    276                    return;
   \                     ??MAC_CbackEvent_25:
   \   000505   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    277                  }
    278                }
    279              }
    280              else if ((event == MAC_MCPS_DATA_CNF) && (pData->hdr.status != MAC_NO_RESOURCES))
   \                     ??MAC_CbackEvent_20:
   \   000508   740C         MOV     A,#0xc
   \   00050A   65..         XRL     A,?V3
   \   00050C   704D         JNZ     ??MAC_CbackEvent_24
   \   00050E   85..82       MOV     DPL,?XSP + 0
   \   000511   85..83       MOV     DPH,?XSP + 1
   \   000514   E0           MOVX    A,@DPTR
   \   000515   F8           MOV     R0,A
   \   000516   A3           INC     DPTR
   \   000517   E0           MOVX    A,@DPTR
   \   000518   F583         MOV     DPH,A
   \   00051A   8882         MOV     DPL,R0
   \   00051C   A3           INC     DPTR
   \   00051D   E0           MOVX    A,@DPTR
   \   00051E   641A         XRL     A,#0x1a
   \   000520   6039         JZ      ??MAC_CbackEvent_24
    281              {
    282                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
   \   000522   8E..         MOV     ?V0,R6
   \   000524   8F..         MOV     ?V1,R7
    283                
    284                if (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK)
   \   000526   85..82       MOV     DPL,?V0
   \   000529   85..83       MOV     DPH,?V1
   \   00052C   A3           INC     DPTR
   \   00052D   A3           INC     DPTR
   \   00052E   A3           INC     DPTR
   \   00052F   E0           MOVX    A,@DPTR
   \   000530   F8           MOV     R0,A
   \   000531   A3           INC     DPTR
   \   000532   E0           MOVX    A,@DPTR
   \   000533   C8           XCH     A,R0
   \   000534   240E         ADD     A,#0xe
   \   000536   F582         MOV     DPL,A
   \   000538   C8           XCH     A,R0
   \   000539   3400         ADDC    A,#0x0
   \   00053B   F583         MOV     DPH,A
   \   00053D   E0           MOVX    A,@DPTR
   \   00053E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000540   5019         JNC     ??MAC_CbackEvent_24
    285                {
    286                  // See if LQI needs adjustment due to frame correlation
    287                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000542                ; Setup parameters for call to function ZMacLqiAdjust
   \   000542   E5..         MOV     A,?V0
   \   000544   240C         ADD     A,#0xc
   \   000546   FA           MOV     R2,A
   \   000547   E4           CLR     A
   \   000548   35..         ADDC    A,?V1
   \   00054A   FB           MOV     R3,A
   \   00054B   E5..         MOV     A,?V0
   \   00054D   240D         ADD     A,#0xd
   \   00054F   F582         MOV     DPL,A
   \   000551   E4           CLR     A
   \   000552   35..         ADDC    A,?V1
   \   000554   F583         MOV     DPH,A
   \   000556   E0           MOVX    A,@DPTR
   \   000557   F9           MOV     R1,A
   \   000558   12....       LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    288                }
    289              }
    290          
    291              // Application hasn't already processed this message. Send it to NWK task.
    292              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_24:
   \   00055B                ; Setup parameters for call to function osal_msg_send
   \   00055B   EE           MOV     A,R6
   \   00055C   FA           MOV     R2,A
   \   00055D   EF           MOV     A,R7
   \   00055E   FB           MOV     R3,A
   \   00055F   90....       MOV     DPTR,#NWK_TaskID
   \   000562   E0           MOVX    A,@DPTR
   \   000563   F9           MOV     R1,A
   \   000564   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000567   E9           MOV     A,R1
    293            }
    294          
    295            if ((event == MAC_MCPS_DATA_CNF) && (pData->dataCnf.pDataReq != NULL))
   \                     ??MAC_CbackEvent_19:
   \   000568   740C         MOV     A,#0xc
   \   00056A   65..         XRL     A,?V3
   \   00056C   702C         JNZ     ??MAC_CbackEvent_0
   \   00056E   85..82       MOV     DPL,?XSP + 0
   \   000571   85..83       MOV     DPH,?XSP + 1
   \   000574   E0           MOVX    A,@DPTR
   \   000575   F8           MOV     R0,A
   \   000576   A3           INC     DPTR
   \   000577   E0           MOVX    A,@DPTR
   \   000578   F583         MOV     DPH,A
   \   00057A   8882         MOV     DPL,R0
   \   00057C   A3           INC     DPTR
   \   00057D   A3           INC     DPTR
   \   00057E   A3           INC     DPTR
   \   00057F   E0           MOVX    A,@DPTR
   \   000580   F8           MOV     R0,A
   \   000581   A3           INC     DPTR
   \   000582   E0           MOVX    A,@DPTR
   \   000583   F9           MOV     R1,A
   \   000584   E8           MOV     A,R0
   \   000585   49           ORL     A,R1
   \   000586   6012         JZ      ??MAC_CbackEvent_0
    296            {
    297              // If the application needs 'pDataReq' then we cannot free it here.
    298              // The application must free it after using it. Note that 'pDataReq'
    299              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    300          
    301              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   000588                ; Setup parameters for call to function mac_msg_deallocate
   \   000588   85..82       MOV     DPL,?XSP + 0
   \   00058B   85..83       MOV     DPH,?XSP + 1
   \   00058E   E0           MOVX    A,@DPTR
   \   00058F   2403         ADD     A,#0x3
   \   000591   FA           MOV     R2,A
   \   000592   A3           INC     DPTR
   \   000593   E0           MOVX    A,@DPTR
   \   000594   3400         ADDC    A,#0x0
   \   000596   FB           MOV     R3,A
   \   000597   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    302            }
    303          #endif
    304          }
   \                     ??MAC_CbackEvent_0:
   \   00059A   7405         MOV     A,#0x5
   \   00059C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00059F   7F08         MOV     R7,#0x8
   \   0005A1   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0005A4                REQUIRE _A_IEN0
    305          #else  // ifdef MT_MAC_CB_FUNC
    306          {
    307            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    308            switch (pData->hdr.event)
    309            {
    310              case MAC_MLME_ASSOCIATE_IND:
    311                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    312                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    313                break;
    314          
    315              case MAC_MLME_ASSOCIATE_CNF:
    316                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    317                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    318                break;
    319          
    320              case MAC_MLME_DISASSOCIATE_IND:
    321                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    322                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    323                break;
    324          
    325              case MAC_MLME_DISASSOCIATE_CNF:
    326                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    327                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    328                break;
    329          
    330              case MAC_MLME_BEACON_NOTIFY_IND:
    331                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    332                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    333                break;
    334          
    335              case MAC_MLME_ORPHAN_IND:
    336                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    337                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    338                break;
    339          
    340              case MAC_MLME_SCAN_CNF:
    341                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    342                {
    343                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    344                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    345                }
    346          
    347                if (ZMac_ScanBuf != NULL)
    348                {
    349                  void *pTmp = ZMac_ScanBuf;
    350                  ZMac_ScanBuf = NULL;
    351                  osal_mem_free(pTmp);
    352                }
    353                break;
    354          
    355              case MAC_MLME_START_CNF:
    356                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    357                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    358                break;
    359          
    360              case MAC_MLME_SYNC_LOSS_IND:
    361                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    362                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    363                break;
    364          
    365              case MAC_MLME_POLL_CNF:
    366                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    367                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    368                break;
    369          
    370              case MAC_MLME_COMM_STATUS_IND:
    371                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    372                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    373                break;
    374          
    375              case MAC_MCPS_DATA_CNF:
    376                if (pData->dataCnf.pDataReq != NULL)
    377                  mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    378          
    379                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    380                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    381                break;
    382          
    383              case MAC_MCPS_DATA_IND:
    384                {
    385                  /*
    386                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    387                     buffer and re-organize the contents into ZMAC format.
    388                  */
    389                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    390                  uint8 event, status, len, *msdu;
    391          
    392                  /* Store parameters */
    393                  event = pData->hdr.event;
    394                  status = pData->hdr.status;
    395                  len = pData->dataInd.msdu.len;
    396                  msdu = pData->dataInd.msdu.p;
    397          
    398                  /* Copy security fields */
    399                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    400                  
    401                  /* Copy mac fields one by one since the two buffers overlap. */
    402                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    403                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    404                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    405                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    406                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    407                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    408                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    409                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    410                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    411                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    412          
    413                  /* Restore parameters */
    414                  pDataInd->hdr.Status = status;
    415                  pDataInd->hdr.Event = event;
    416                  pDataInd->msduLength = len;
    417          
    418                  if (len)
    419                    pDataInd->msdu = msdu;
    420                  else
    421                    pDataInd->msdu = NULL;
    422          
    423                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    424                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    425                }
    426          
    427                /* free buffer */
    428                mac_msg_deallocate( (uint8 **)&pData );
    429                break;
    430          
    431              case MAC_MCPS_PURGE_CNF:
    432                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    433                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    434                break;
    435          
    436              default:
    437                break;
    438            }
    439          }
    440          #endif
    441          
    442          /********************************************************************************************************
    443           * @fn      MAC_CbackCheckPending
    444           *
    445           * @brief   Return number of pending indirect msg
    446           *
    447           * @param   None
    448           *
    449           * @return  Number of indirect msg holding
    450           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    451          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    452          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    453          #if !defined (NONWK)
    454            if ( ZSTACK_ROUTER_BUILD )
    455            {
    456              return (nwkDB_ReturnIndirectHoldingCnt());
    457            }
    458            else
    459            {
    460              return (0);
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    461            }
    462          #else
    463            return (0);
    464          #endif
    465          }
    466          
    467          /********************************************************************************************************
    468           * @fn      ZMacLqiAdjustMode
    469           *
    470           * @brief   Sets/return LQI adjust mode
    471           *
    472           * @param   mode - LQI_ADJ_GET = return current mode only
    473           *                 LQI_ADJ_OFF = disable LQI adjusts
    474           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    475           *
    476           * @return  current LQI adjust mode
    477           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    478          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    479          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    480            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV     A,#-0x1
   \   000008   68           XRL     A,R0
   \   000009   6005         JZ      ??ZMacLqiAdjustMode_0
    481            {
    482              lqiAdjMode = mode;
   \   00000B   E8           MOV     A,R0
   \   00000C   90....       MOV     DPTR,#lqiAdjMode
   \   00000F   F0           MOVX    @DPTR,A
    483            }
    484            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV     DPTR,#lqiAdjMode
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
    485          }
    486          
    487          #if !defined NONWK
    488          /********************************************************************************************************
    489           * @fn      ZMacLqiAdjust
    490           *
    491           * @brief   Adjust LQI according to correlation value
    492           *
    493           * @notes - the IEEE 802.15.4 specification provides some general statements on
    494           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    495           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    496           *          802.15.4 signals detectable by the receiver, and LQ values should be
    497           *          uniformly distributed between these two limits." Section E.2.3: "The
    498           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    499           *          received packet. When energy level and SNR information are combined,
    500           *          they can indicate whether a corrupt packet resulted from low signal
    501           *          strength or from high signal strength plus interference."
    502           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    503           *          packet correlation value (related to SNR) to scale incoming LQI value
    504           *          (related to signal strength) to 'derate' noisy packets.
    505           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    506           *          implement their own proprietary LQI adjustment algorithm.
    507           *
    508           * @param   corr - packet correlation value
    509           * @param   lqi  - ptr to link quality (scaled rssi)
    510           *
    511           * @return  *lqi - adjusted link quality
    512           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    514          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
    515            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV     DPTR,#lqiAdjMode
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   606B         JZ      ??ZMacLqiAdjust_0
    516            {
    517              uint16 adjLqi = *lqi;
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7900         MOV     R1,#0x0
    518          
    519              // Keep correlation within theoretical limits
    520              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV     A,R6
   \   00001A   C3           CLR     C
   \   00001B   9432         SUBB    A,#0x32
   \   00001D   5004         JNC     ??ZMacLqiAdjust_1
    521              {
    522                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV     R6,#0x32
   \   000021   8008         SJMP    ??ZMacLqiAdjust_2
    523              }
    524              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV     A,R6
   \   000024   C3           CLR     C
   \   000025   946F         SUBB    A,#0x6f
   \   000027   4002         JC      ??ZMacLqiAdjust_2
    525              {
    526                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV     R6,#0x6e
    527              }
    528          
    529              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV     DPTR,#lqiAdjMode
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6401         XRL     A,#0x1
   \   000031   7032         JNZ     ??ZMacLqiAdjust_3
    530              {
    531                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    532                           which is computed from the incoming correlation value between
    533                           theorectical minimum/maximum values. This is a very simple way
    534                           of 'derating' the incoming LQI as correlation value drops. */
    535                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   7B00         MOV     R3,#0x0
   \   000037   EA           MOV     A,R2
   \   000038   24CE         ADD     A,#-0x32
   \   00003A   F5..         MOV     ?V0,A
   \   00003C   EB           MOV     A,R3
   \   00003D   34FF         ADDC    A,#-0x1
   \   00003F   F5..         MOV     ?V1,A
   \   000041   E8           MOV     A,R0
   \   000042   85..F0       MOV     B,?V0
   \   000045   A4           MUL     AB
   \   000046   C8           XCH     A,R0
   \   000047   AAF0         MOV     R2,B
   \   000049   85..F0       MOV     B,?V1
   \   00004C   A4           MUL     AB
   \   00004D   2A           ADD     A,R2
   \   00004E   FA           MOV     R2,A
   \   00004F   85..F0       MOV     B,?V0
   \   000052   E9           MOV     A,R1
   \   000053   A4           MUL     AB
   \   000054   2A           ADD     A,R2
   \   000055   F9           MOV     R1,A
   \   000056   7A3C         MOV     R2,#0x3c
   \   000058   7B00         MOV     R3,#0x0
   \   00005A   12....       LCALL   ?US_DIV_MOD
   \   00005D   88..         MOV     ?V0,R0
   \   00005F   89..         MOV     ?V1,R1
   \   000061   A8..         MOV     R0,?V0
   \   000063   A9..         MOV     R1,?V1
    536              }
    537              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    538              {
    539                /* MODE2 - location for developer to implement a proprietary algorithm */
    540              }
    541          
    542              // Replace incoming LQI with scaled value
    543              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000065   C3           CLR     C
   \   000066   E8           MOV     A,R0
   \   000067   9400         SUBB    A,#0x0
   \   000069   E9           MOV     A,R1
   \   00006A   9401         SUBB    A,#0x1
   \   00006C   4004         JC      ??ZMacLqiAdjust_4
   \   00006E   74FF         MOV     A,#-0x1
   \   000070   8001         SJMP    ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   000072   E8           MOV     A,R0
   \                     ??ZMacLqiAdjust_5:
   \   000073   C0E0         PUSH    A
   \   000075   8C82         MOV     DPL,R4
   \   000077   8D83         MOV     DPH,R5
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
    544            }
    545          }
   \                     ??ZMacLqiAdjust_0:
   \   00007C   7F02         MOV     R7,#0x2
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackCheckPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjustMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjustMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjust::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjust
    546          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   MAC_CbackCheckPending
      1     24   MAC_CbackEvent
        0     21   -> MAC_MlmeGetReq
        0     21   -> ZMacLqiAdjust
        0     21   -> mac_msg_deallocate
        0     21   -> nwk_broadcastSend
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
        0     21   -> osal_msg_allocate
        0     21   -> osal_msg_send
      1     31   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  MAC_CbackCheckPending
       6  MAC_CbackCheckPending::?relay
    1444  MAC_CbackEvent
       6  MAC_CbackEvent::?relay
     129  ZMacLqiAdjust
       6  ZMacLqiAdjust::?relay
      28  ZMacLqiAdjustMode
       6  ZMacLqiAdjustMode::?relay
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      17  zmacCBSizeTable

 
 1 606 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
 1 647 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     3 bytes of XDATA memory

Errors: none
Warnings: none
