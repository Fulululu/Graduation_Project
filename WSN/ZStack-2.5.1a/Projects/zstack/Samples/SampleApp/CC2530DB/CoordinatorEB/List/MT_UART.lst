###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                08/Nov/2017  15:29:28
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Components\mt\MT_UART.c
#    Command line       =  
#        -f
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Components\mt\MT_UART.c -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -lC
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz
#    List file          =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\MT_UART.lst
#    Object file        =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\MT_UART.r51
#
###############################################################################

F:\Zigbeespace\20171020\ZStack-2.5.1a\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.anlde.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          //20171108 add MT_rx_buffer size
     67          #define MT_RX_BUF_SIZE   15
     68          
     69          /***************************************************************************************************
     70           *                                         GLOBAL VARIABLES
     71           ***************************************************************************************************/
     72          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     74          
     75          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     79          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     82          
     83          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     84          uint16  MT_UartMaxZAppBufLen;
     85          bool    MT_UartZAppRxStatus;
     86          #endif
     87          
     88          //20171108 add MT_rx_buffer

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 MT_RX_Buffer[MT_RX_BUF_SIZE];
   \                     MT_RX_Buffer:
   \   000000                DS 15
   \   00000F                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          uint16 rxLen;
   \                     rxLen:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     91          
     92          /***************************************************************************************************
     93           *                                          LOCAL FUNCTIONS
     94           ***************************************************************************************************/
     95          
     96          /***************************************************************************************************
     97           * @fn      MT_UartInit
     98           *
     99           * @brief   Initialize MT with UART support
    100           *
    101           * @param   None
    102           *
    103           * @return  None
    104          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          void MT_UartInit ()
   \                     MT_UartInit:
    106          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    107            halUARTCfg_t uartConfig;
    108          
    109            /* Initialize APP ID */
    110            App_TaskID = 0;
   \   000009   90....       MOV     DPTR,#App_TaskID
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    111          
    112            /* UART Configuration */
    113            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    114            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
    115            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
    116            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7440         MOV     A,#0x40
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
    117            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002E   740A         MOV     A,#0xa
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7480         MOV     A,#-0x80
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
    118            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000039   7412         MOV     A,#0x12
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7480         MOV     A,#-0x80
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
    119            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7406         MOV     A,#0x6
   \   00004B   F0           MOVX    @DPTR,A
    120            uartConfig.intEnable            = TRUE;
   \   00004C   7416         MOV     A,#0x16
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
    121          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    122            uartConfig.callBackFunc         = MT_UartProcessZToolData;
   \   000054   741B         MOV     A,#0x1b
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   74..         MOV     A,#`??MT_UartProcessZToolData::?relay` & 0xff
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   74..         MOV     A,#(`??MT_UartProcessZToolData::?relay` >> 8) & 0xff
   \   00005F   F0           MOVX    @DPTR,A
    123          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    124            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    125          #else
    126            uartConfig.callBackFunc         = NULL;
    127          #endif
    128            //20171108 add callback
    129            uartConfig.callBackFunc         = MT_UartRXCB;
   \   000060   741B         MOV     A,#0x1b
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   74..         MOV     A,#`??MT_UartRXCB::?relay` & 0xff
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#(`??MT_UartRXCB::?relay` >> 8) & 0xff
   \   00006B   F0           MOVX    @DPTR,A
    130            
    131            /* Start UART */
    132          #if defined (MT_UART_DEFAULT_PORT)
    133            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   00006C                ; Setup parameters for call to function HalUARTOpen
   \   00006C   AA..         MOV     R2,?XSP + 0
   \   00006E   AB..         MOV     R3,?XSP + 1
   \   000070   7900         MOV     R1,#0x0
   \   000072   12....       LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    134          #else
    135            /* Silence IAR compiler warning */
    136            (void)uartConfig;
    137          #endif
    138          
    139            /* Initialize for ZApp */
    140          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    141            /* Default max bytes that ZAPP can take */
    142            MT_UartMaxZAppBufLen  = 1;
    143            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    144          #endif
    145          
    146          }
   \   000075   741D         MOV     A,#0x1d
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A                REQUIRE ?Subroutine0
   \   00007A                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    147          
    148          /***************************************************************************************************
    149           * @fn      MT_SerialRegisterTaskID
    150           *
    151           * @brief   This function registers the taskID of the application so it knows
    152           *          where to send the messages whent they come in.
    153           *
    154           * @param   void
    155           *
    156           * @return  void
    157           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    159          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    160            App_TaskID = taskID;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#App_TaskID
   \   000008   F0           MOVX    @DPTR,A
    161          }
   \   000009   80..         SJMP    ?Subroutine0
    162          
    163          /***************************************************************************************************
    164           * @fn      SPIMgr_CalcFCS
    165           *
    166           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    167           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    168           *
    169           * @param   byte *msg_ptr - message pointer
    170           * @param   byte len - length (in bytes) of message
    171           *
    172           * @return  result byte
    173           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    175          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    176            byte x;
    177            byte xorResult;
    178          
    179            xorResult = 0;
   \   000006   7900         MOV     R1,#0x0
    180          
    181            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV     R0,#0x0
   \   00000A   800E         SJMP    ??MT_UartCalcFCS_0
    182              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C9           XCH     A,R1
   \   000012   69           XRL     A,R1
   \   000013   F9           MOV     R1,A
   \   000014   08           INC     R0
   \   000015   A3           INC     DPTR
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV     A,R0
   \   00001B   C3           CLR     C
   \   00001C   9C           SUBB    A,R4
   \   00001D   40ED         JC      ??MT_UartCalcFCS_1
    183          
    184            return ( xorResult );
   \   00001F   80..         SJMP    ?Subroutine0
    185          }
    186          
    187          
    188          /***************************************************************************************************
    189           * @fn      MT_UartProcessZToolData
    190           *
    191           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    192           *          |  1  |     1        |    2    |  0-Len   |   1   |
    193           *
    194           *          Parses the data and determine either is SPI or just simply serial data
    195           *          then send the data to correct place (MT or APP)
    196           *
    197           * @param   port     - UART port
    198           *          event    - Event that causes the callback
    199           *
    200           *
    201           * @return  None
    202           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    203          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    204          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    205            uint8  ch;
    206            uint8  bytesInRxBuffer;
    207            
    208            (void)event;  // Intentionally unreferenced parameter
   \   00000C   8029         SJMP    ??MT_UartProcessZToolData_0
    209          
    210            while (Hal_UART_RxBufLen(port))
    211            {
    212              HalUARTRead (port, &ch, 1);
    213          
    214              switch (state)
    215              {
    216                case SOP_STATE:
    217                  if (ch == MT_UART_SOF)
    218                    state = LEN_STATE;
    219                  break;
    220          
    221                case LEN_STATE:
    222                  LEN_Token = ch;
    223          
    224                  tempDataLen = 0;
    225          
    226                  /* Allocate memory for the data */
    227                  pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    228                                                                  MT_RPC_FRAME_HDR_SZ + LEN_Token );
    229          
    230                  if (pMsg)
    231                  {
    232                    /* Fill up what we can */
    233                    pMsg->hdr.event = CMD_SERIAL_MSG;
   \                     ??MT_UartProcessZToolData_1:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F583         MOV     DPH,A
   \   000011   8882         MOV     DPL,R0
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    234                    pMsg->msg = (uint8*)(pMsg+1);
   \   000016   90....       MOV     DPTR,#pMsg
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   2404         ADD     A,#0x4
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?Subroutine4 & 0xFFFF
    235                    pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
   \                     ??CrossCallReturnLabel_6:
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   F0           MOVX    @DPTR,A
    236                    state = CMD_STATE1;
   \   000031   90....       MOV     DPTR,#state
   \   000034   7401         MOV     A,#0x1
   \                     ??MT_UartProcessZToolData_2:
   \   000036   F0           MOVX    @DPTR,A
    237                  }
    238                  else
    239                  {
    240                    state = SOP_STATE;
    241                    return;
    242                  }
    243                  break;
   \                     ??MT_UartProcessZToolData_0:
   \   000037                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000037   EE           MOV     A,R6
   \   000038   F9           MOV     R1,A
   \   000039   12....       LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   00003C   8B..         MOV     ?V1,R3
   \   00003E   EA           MOV     A,R2
   \   00003F   45..         ORL     A,?V1
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??MT_UartProcessZToolData_3 & 0xFFFF
   \   000046                ; Setup parameters for call to function HalUARTRead
   \   000046   7C01         MOV     R4,#0x1
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   AA..         MOV     R2,?XSP + 0
   \   00004C   AB..         MOV     R3,?XSP + 1
   \   00004E   EE           MOV     A,R6
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000053   90....       MOV     DPTR,#state
   \   000056   E0           MOVX    A,@DPTR
   \   000057   6017         JZ      ??MT_UartProcessZToolData_4
   \   000059   14           DEC     A
   \   00005A   6061         JZ      ??MT_UartProcessZToolData_5
   \   00005C   14           DEC     A
   \   00005D   6075         JZ      ??MT_UartProcessZToolData_6
   \   00005F   14           DEC     A
   \   000060   6020         JZ      ??MT_UartProcessZToolData_7
   \   000062   14           DEC     A
   \   000063   7003         JNZ     $+5
   \   000065   02....       LJMP    ??MT_UartProcessZToolData_8 & 0xFFFF
   \   000068   14           DEC     A
   \   000069   7003         JNZ     $+5
   \   00006B   02....       LJMP    ??MT_UartProcessZToolData_9 & 0xFFFF
   \   00006E   80C7         SJMP    ??MT_UartProcessZToolData_0
   \                     ??MT_UartProcessZToolData_4:
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   64FE         XRL     A,#0xfe
   \   000079   70BC         JNZ     ??MT_UartProcessZToolData_0
   \   00007B   90....       MOV     DPTR,#state
   \   00007E   7403         MOV     A,#0x3
   \   000080   80B4         SJMP    ??MT_UartProcessZToolData_2
   \                     ??MT_UartProcessZToolData_7:
   \   000082   85..82       MOV     DPL,?XSP + 0
   \   000085   85..83       MOV     DPH,?XSP + 1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   90....       MOV     DPTR,#LEN_Token
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   90....       MOV     DPTR,#tempDataLen
   \   000090   E4           CLR     A
   \   000091   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000094   2407         ADD     A,#0x7
   \   000096   FA           MOV     R2,A
   \   000097   E4           CLR     A
   \   000098   3400         ADDC    A,#0x0
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00009E   90....       MOV     DPTR,#pMsg
   \   0000A1   EA           MOV     A,R2
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   EB           MOV     A,R3
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   90....       MOV     DPTR,#pMsg
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   E8           MOV     A,R0
   \   0000AF   49           ORL     A,R1
   \   0000B0   6003         JZ      $+5
   \   0000B2   02....       LJMP    ??MT_UartProcessZToolData_1 & 0xFFFF
   \   0000B5   90....       MOV     DPTR,#state
   \   0000B8   E4           CLR     A
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   02....       LJMP    ??MT_UartProcessZToolData_3 & 0xFFFF
    244          
    245                case CMD_STATE1:
    246                  pMsg->msg[MT_RPC_POS_CMD0] = ch;
   \                     ??MT_UartProcessZToolData_5:
   \   0000BD   85..82       MOV     DPL,?XSP + 0
   \   0000C0   85..83       MOV     DPH,?XSP + 1
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   C0E0         PUSH    A
   \   0000C6   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000C9   D0E0         POP     A
   \   0000CB   F0           MOVX    @DPTR,A
    247                  state = CMD_STATE2;
   \   0000CC   90....       MOV     DPTR,#state
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    248                  break;
    249          
    250                case CMD_STATE2:
    251                  pMsg->msg[MT_RPC_POS_CMD1] = ch;
   \                     ??MT_UartProcessZToolData_6:
   \   0000D4   85..82       MOV     DPL,?XSP + 0
   \   0000D7   85..83       MOV     DPH,?XSP + 1
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   C0E0         PUSH    A
   \   0000DD   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000E0   A3           INC     DPTR
   \   0000E1   D0E0         POP     A
   \   0000E3   12....       LCALL   ?Subroutine4 & 0xFFFF
    252                  /* If there is no data, skip to FCS state */
    253                  if (LEN_Token)
   \                     ??CrossCallReturnLabel_8:
   \   0000E6   7003         JNZ     $+5
   \   0000E8   02....       LJMP    ??MT_UartProcessZToolData_10 & 0xFFFF
    254                  {
    255                    state = DATA_STATE;
   \   0000EB   90....       MOV     DPTR,#state
   \   0000EE   7404         MOV     A,#0x4
   \   0000F0   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    256                  }
    257                  else
    258                  {
    259                    state = FCS_STATE;
    260                  }
    261                  break;
    262          
    263                case DATA_STATE:
    264          
    265                  /* Fill in the buffer the first byte of the data */
    266                  pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
   \                     ??MT_UartProcessZToolData_8:
   \   0000F3   85..82       MOV     DPL,?XSP + 0
   \   0000F6   85..83       MOV     DPH,?XSP + 1
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   C0E0         PUSH    A
   \   0000FC   90....       MOV     DPTR,#tempDataLen
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F8           MOV     R0,A
   \   000101   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000104   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   90....       MOV     DPTR,#tempDataLen
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   04           INC     A
   \   00010F   F0           MOVX    @DPTR,A
    267          
    268                  /* Check number of bytes left in the Rx buffer */
    269                  bytesInRxBuffer = Hal_UART_RxBufLen(port);
   \   000110                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000110   EE           MOV     A,R6
   \   000111   F9           MOV     R1,A
   \   000112   12....       LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000115   EA           MOV     A,R2
   \   000116   FF           MOV     R7,A
    270          
    271                  /* If the remain of the data is there, read them all, otherwise, just read enough */
    272                  if (bytesInRxBuffer <= LEN_Token - tempDataLen)
   \   000117   90....       MOV     DPTR,#LEN_Token
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FA           MOV     R2,A
   \   00011C   90....       MOV     DPTR,#tempDataLen
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   F8           MOV     R0,A
   \   000121   EA           MOV     A,R2
   \   000122   C3           CLR     C
   \   000123   98           SUBB    A,R0
   \   000124   FA           MOV     R2,A
   \   000125   95E0         SUBB    A,0xE0 /* A   */
   \   000127   FB           MOV     R3,A
   \   000128   EF           MOV     A,R7
   \   000129   F8           MOV     R0,A
   \   00012A   C3           CLR     C
   \   00012B   EA           MOV     A,R2
   \   00012C   98           SUBB    A,R0
   \   00012D   EB           MOV     A,R3
   \   00012E   9400         SUBB    A,#0x0
   \   000130   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000132   65D0         XRL     A,PSW
   \   000134   33           RLC     A
   \   000135   4013         JC      ??MT_UartProcessZToolData_11
    273                  {
    274                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
   \   000137                ; Setup parameters for call to function HalUARTRead
   \   000137   EF           MOV     A,R7
   \   000138   FC           MOV     R4,A
   \   000139   7D00         MOV     R5,#0x0
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F8           MOV     R0,A
   \   00013D   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000140   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    275                    tempDataLen += bytesInRxBuffer;
   \   000143   90....       MOV     DPTR,#tempDataLen
   \   000146   E0           MOVX    A,@DPTR
   \   000147   2F           ADD     A,R7
   \   000148   8019         SJMP    ??MT_UartProcessZToolData_12
    276                  }
    277                  else
    278                  {
    279                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
   \                     ??MT_UartProcessZToolData_11:
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   F8           MOV     R0,A
   \   00014C                ; Setup parameters for call to function HalUARTRead
   \   00014C   90....       MOV     DPTR,#LEN_Token
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   C3           CLR     C
   \   000151   98           SUBB    A,R0
   \   000152   FC           MOV     R4,A
   \   000153   95E0         SUBB    A,0xE0 /* A   */
   \   000155   FD           MOV     R5,A
   \   000156   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000159   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    280                    tempDataLen += (LEN_Token - tempDataLen);
   \   00015C   90....       MOV     DPTR,#LEN_Token
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   90....       MOV     DPTR,#tempDataLen
   \                     ??MT_UartProcessZToolData_12:
   \   000163   F0           MOVX    @DPTR,A
    281                  }
    282          
    283                  /* If number of bytes read is equal to data length, time to move on to FCS */
    284                  if ( tempDataLen == LEN_Token )
   \   000164   E0           MOVX    A,@DPTR
   \   000165   F8           MOV     R0,A
   \   000166   90....       MOV     DPTR,#LEN_Token
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   68           XRL     A,R0
   \   00016B   6003         JZ      $+5
   \   00016D   02....       LJMP    ??MT_UartProcessZToolData_0 & 0xFFFF
    285                      state = FCS_STATE;
   \                     ??MT_UartProcessZToolData_10:
   \   000170   90....       MOV     DPTR,#state
   \   000173   7405         MOV     A,#0x5
   \   000175   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    286          
    287                  break;
    288          
    289                case FCS_STATE:
    290          
    291                  FSC_Token = ch;
   \                     ??MT_UartProcessZToolData_9:
   \   000178   85..82       MOV     DPL,?XSP + 0
   \   00017B   85..83       MOV     DPH,?XSP + 1
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   90....       MOV     DPTR,#FSC_Token
   \   000182   12....       LCALL   ?Subroutine4 & 0xFFFF
    292          
    293                  /* Make sure it's correct */
    294                  if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
   \                     ??CrossCallReturnLabel_9:
   \   000185   2403         ADD     A,#0x3
   \   000187   F9           MOV     R1,A
   \   000188   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00018B   FA           MOV     R2,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   FB           MOV     R3,A
   \   00018F   12....       LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   000192   E9           MOV     A,R1
   \   000193   F8           MOV     R0,A
   \   000194   90....       MOV     DPTR,#FSC_Token
   \   000197   E0           MOVX    A,@DPTR
   \   000198   68           XRL     A,R0
   \   000199   90....       MOV     DPTR,#pMsg
   \   00019C   700F         JNZ     ??MT_UartProcessZToolData_13
    295                  {
    296                    osal_msg_send( App_TaskID, (byte *)pMsg );
   \   00019E                ; Setup parameters for call to function osal_msg_send
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   FA           MOV     R2,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   FB           MOV     R3,A
   \   0001A3   90....       MOV     DPTR,#App_TaskID
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   F9           MOV     R1,A
   \   0001A8   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0001AB   8008         SJMP    ??MT_UartProcessZToolData_14
    297                  }
    298                  else
    299                  {
    300                    /* deallocate the msg */
    301                    osal_msg_deallocate ( (uint8 *)pMsg );
   \                     ??MT_UartProcessZToolData_13:
   \   0001AD                ; Setup parameters for call to function osal_msg_deallocate
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   FA           MOV     R2,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   FB           MOV     R3,A
   \   0001B2   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    302                  }
    303          
    304                  /* Reset the state, send or discard the buffers at this point */
    305                  state = SOP_STATE;
   \                     ??MT_UartProcessZToolData_14:
   \   0001B5   90....       MOV     DPTR,#state
   \   0001B8   E4           CLR     A
   \   0001B9   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    306          
    307                  break;
    308          
    309                default:
    310                 break;
    311              }
    312            }
    313          }
   \                     ??MT_UartProcessZToolData_3:
   \   0001BC   7401         MOV     A,#0x1
   \   0001BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C1   7F02         MOV     R7,#0x2
   \   0001C3   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_allocate
   \   000001                ; Setup parameters for call to function MT_UartCalcFCS
   \   000001   90....       MOV     DPTR,#LEN_Token
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000003   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3400         ADDC    A,#0x0
   \   000007   8A82         MOV     DPL,R2
   \   000009   F583         MOV     DPH,A
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartRegisterTaskID::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartCalcFCS::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartProcessZToolData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    314          
    315          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    316          /***************************************************************************************************
    317           * @fn      MT_UartProcessZAppData
    318           *
    319           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    320           *          |  1  |  2   |       1         |  1   |
    321           *
    322           *          Parses the data and determine either is SPI or just simply serial data
    323           *          then send the data to correct place (MT or APP)
    324           *
    325           * @param   port    - UART port
    326           *          event   - Event that causes the callback
    327           *
    328           *
    329           * @return  None
    330           ***************************************************************************************************/
    331          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    332          {
    333          
    334            osal_event_hdr_t  *msg_ptr;
    335            uint16 length = 0;
    336            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    337          
    338            /*
    339               If maxZAppBufferLength is 0 or larger than current length
    340               the entire length of the current buffer is returned.
    341            */
    342            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    343            {
    344              length = MT_UartMaxZAppBufLen;
    345            }
    346            else
    347            {
    348              length = rxBufLen;
    349            }
    350          
    351            /* Verify events */
    352            if (event == HAL_UART_TX_FULL)
    353            {
    354              // Do something when TX if full
    355              return;
    356            }
    357          
    358            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    359            {
    360              if ( App_TaskID )
    361              {
    362                /*
    363                   If Application is ready to receive and there is something
    364                   in the Rx buffer then send it up
    365                */
    366                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    367                {
    368                  /* Disable App flow control until it processes the current data */
    369                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    370          
    371                  /* 2 more bytes are added, 1 for CMD type, other for length */
    372                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    373                  if ( msg_ptr )
    374                  {
    375                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    376                    msg_ptr->status = length;
    377          
    378                    /* Read the data of Rx buffer */
    379                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    380          
    381                    /* Send the raw data to application...or where ever */
    382                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    383                  }
    384                }
    385              }
    386            }
    387          }
    388          
    389          /***************************************************************************************************
    390           * @fn      SPIMgr_ZAppBufferLengthRegister
    391           *
    392           * @brief
    393           *
    394           * @param   maxLen - Max Length that the application wants at a time
    395           *
    396           * @return  None
    397           *
    398           ***************************************************************************************************/
    399          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    400          {
    401            /* If the maxLen is larger than the RX buff, something is not right */
    402            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    403              MT_UartMaxZAppBufLen = maxLen;
    404            else
    405              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    406          }
    407          
    408          /***************************************************************************************************
    409           * @fn      SPIMgr_AppFlowControl
    410           *
    411           * @brief
    412           *
    413           * @param   status - ready to send or not
    414           *
    415           * @return  None
    416           *
    417           ***************************************************************************************************/
    418          void MT_UartAppFlowControl ( bool status )
    419          {
    420          
    421            /* Make sure only update if needed */
    422            if (status != MT_UartZAppRxStatus )
    423            {
    424              MT_UartZAppRxStatus = status;
    425            }
    426          
    427            /* App is ready to read again, ProcessZAppData have to be triggered too */
    428            if (status == MT_UART_ZAPP_RX_READY)
    429            {
    430              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    431            }
    432          
    433          }
    434          
    435          
    436          #endif //ZAPP
    437          
    438          /***************************************************************************************************
    439          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     11   MT_UartCalcFCS
      2     29   MT_UartInit
        2     29   -> HalUARTOpen
      1     11   MT_UartProcessZToolData
        0     11   -> HalUARTRead
        0     11   -> Hal_UART_RxBufLen
        0     11   -> MT_UartCalcFCS
        0     11   -> osal_msg_allocate
        0     11   -> osal_msg_deallocate
        0     11   -> osal_msg_send
      2      0   MT_UartRegisterTaskID


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
      13  ?Subroutine1
      12  ?Subroutine2
       4  ?Subroutine3
       6  ?Subroutine4
      15  ?Subroutine5
      15  ?Subroutine6
      14  ?Subroutine7
       1  App_TaskID
       2  CMD_Token
       1  FSC_Token
       1  LEN_Token
      15  MT_RX_Buffer
      33  MT_UartCalcFCS
       6  MT_UartCalcFCS::?relay
     122  MT_UartInit
       6  MT_UartInit::?relay
     454  MT_UartProcessZToolData
       6  MT_UartProcessZToolData::?relay
      11  MT_UartRegisterTaskID
       6  MT_UartRegisterTaskID::?relay
       2  pMsg
       2  rxLen
       1  state
       1  tempDataLen

 
 706 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
  26 bytes in segment XDATA_Z
 
 730 bytes of CODE  memory
  26 bytes of XDATA memory

Errors: none
Warnings: none
