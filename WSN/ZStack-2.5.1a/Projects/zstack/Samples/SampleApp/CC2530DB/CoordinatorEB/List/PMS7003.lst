###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                08/Apr/2018  22:27:32
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\PMS7003.c
#    Command line       =  
#        -f
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\PMS7003.c
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -lC
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz
#    List file          =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\PMS7003.lst
#    Object file        =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\PMS7003.r51
#
###############################################################################

F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\PMS7003.c
      1          //=====================================================================
      2          //文件名称：PMS7003.c
      3          //功能概要：空气颗粒物传感器（PM2.5）PMS7003构件源文件
      4          //=====================================================================
      5          
      6          #include "PMS7003.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      7          
      8          //SET------3.3V
      9          //RST------3.3V
     10          
     11          //=====================================================================
     12          //传感器命令协议：
     13          //特征字节  特征字节  指令字节  状态字节1 状态字节2 校验字节1 校验字节2
     14          // 0x42      0x4d      CMD      DATAH     DATAL    LRCH      LRCL
     15          //指令及特征字节的定义：
     16          //CMD  DATAH  DATAL      	  说明
     17          //0xe2   x      x        	 被动读数
     18          //0xe1   x    00H-被动式         状态切换
     19          //            01H-主动式
     20          //0xe4   x    00H-待机模式       待机控制
     21          //       x    01H-正常模式
     22          //校验字生成：
     23          //从特征字开始所有字节累加和
     24          //=====================================================================
     25          
     26          //=========================================================================
     27          //函数名称：PMS7003_init
     28          //函数参数：无
     29          //函数返回：无
     30          //功能概要：初始化SET、RST引脚
     31          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     32          void PMS7003_Init(void)
   \                     PMS7003_Init:
     33          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     34              P0SEL &= ~0x30;                 //设置P0.4 P0.5为普通IO口
   \   000004   53F3CF       ANL     0xf3,#0xcf
     35              P0DIR |= 0x30;                 //P0.4 P0.5定义为输出口
   \   000007   43FD30       ORL     0xfd,#0x30
     36              //PMS7003_rest();
     37              //PMS7003_SET = 1;
     38              PMS7003_control(PMS7003_CMD_READSTATE_PASSTIVE);
   \   00000A                ; Setup parameters for call to function PMS7003_control
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7BE1         MOV     R3,#-0x1f
   \   00000E   12....       LCALL   `??PMS7003_control::?relay`; Banked call to: PMS7003_control
     39          }
   \   000011                REQUIRE ?Subroutine0
   \   000011                REQUIRE P0SEL
   \   000011                REQUIRE P0DIR
   \   000011                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     40          
     41          //=========================================================================
     42          //函数名称：PMS7003_control
     43          //函数参数：cmd:控制命令
     44          //函数返回：命令发送成功：0；命令发送失败：0x11
     45          //功能概要：通过命令控制传感器工作状态
     46          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     47          unsigned char PMS7003_control(unsigned int cmd)
   \                     PMS7003_control:
     48          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 7
   \   000004   74F9         MOV     A,#-0x7
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
     49          	unsigned char flag;
     50          	//初始化命令帧
     51          	unsigned char command[PMS7003_LENTH_CMD] = {0};
   \   000009   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0}>`
   \   00000C   AC..         MOV     R4,?XSP + 0
   \   00000E   AD..         MOV     R5,?XSP + 1
   \   000010   7407         MOV     A,#0x7
   \   000012   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     52          
     53          	PMS7003_buildframe(cmd,command);
   \   000015                ; Setup parameters for call to function PMS7003_buildframe
   \   000015   AC..         MOV     R4,?XSP + 0
   \   000017   AD..         MOV     R5,?XSP + 1
   \   000019   12....       LCALL   `??PMS7003_buildframe::?relay`; Banked call to: PMS7003_buildframe
     54          	flag = HalUARTWrite(0, command, PMS7003_LENTH_CMD);
     55          
     56          	//如果发送命令错误，返回错误码
     57          	if(!flag)
   \   00001C                ; Setup parameters for call to function HalUARTWrite
   \   00001C   7C07         MOV     R4,#0x7
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   AA..         MOV     R2,?XSP + 0
   \   000022   AB..         MOV     R3,?XSP + 1
   \   000024   7900         MOV     R1,#0x0
   \   000026   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000029   EA           MOV     A,R2
   \   00002A   7004         JNZ     ??PMS7003_control_0
     58          	{
     59          		return PMS7003_ERR_CMDFAIL;
   \   00002C   7911         MOV     R1,#0x11
   \   00002E   8002         SJMP    ??PMS7003_control_1
     60          	}
     61          
     62          	return 0;
   \                     ??PMS7003_control_0:
   \   000030   7900         MOV     R1,#0x0
   \                     ??PMS7003_control_1:
   \   000032   7407         MOV     A,#0x7
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   80..         SJMP    ?Subroutine0
     63          }
     64          
     65          //=========================================================================
     66          //函数名称：PMS7003_buildframe
     67          //函数参数：cmd:控制命令
     68          //		 *frame：命令帧数组
     69          //函数返回：无
     70          //功能概要：将命令组成命令帧
     71          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          void PMS7003_buildframe(unsigned int cmd_state,unsigned char *frame)
   \                     PMS7003_buildframe:
     73          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     74          	unsigned char cmd;
     75          	unsigned char statechar;
     76          	unsigned char lrcl;
     77          	unsigned char lrch;
     78          	unsigned int lrc = 0;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
     79          
     80          	//计算命令和状态字节
     81          	cmd = cmd_state >> 8;
     82          	statechar = cmd_state;
     83          
     84          	//组帧
     85          	frame[0] = 0x42;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   7442         MOV     A,#0x42
   \   00000F   F0           MOVX    @DPTR,A
     86          	frame[1] = 0x4d;
   \   000010   A3           INC     DPTR
   \   000011   744D         MOV     A,#0x4d
   \   000013   F0           MOVX    @DPTR,A
     87          	frame[2] = cmd;
   \   000014   EB           MOV     A,R3
   \   000015   8C82         MOV     DPL,R4
   \   000017   8D83         MOV     DPH,R5
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
     88          	frame[3] = 0x00;
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
     89          	frame[4] = statechar;
   \   000025   EA           MOV     A,R2
   \   000026   8C82         MOV     DPL,R4
   \   000028   8D83         MOV     DPH,R5
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
     90          
     91          	//计算校验字 节
     92          	unsigned char i;
     93          	for(i = 0 ; i < (PMS7003_LENTH_CMD-2) ; i++)
   \   00002F   7E00         MOV     R6,#0x0
     94          	{
     95          		lrc += frame[i];
   \                     ??PMS7003_buildframe_0:
   \   000031   EE           MOV     A,R6
   \   000032   FA           MOV     R2,A
   \   000033   EC           MOV     A,R4
   \   000034   2A           ADD     A,R2
   \   000035   F582         MOV     DPL,A
   \   000037   E4           CLR     A
   \   000038   3D           ADDC    A,R5
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   E8           MOV     A,R0
   \   00003E   2A           ADD     A,R2
   \   00003F   F8           MOV     R0,A
   \   000040   E4           CLR     A
   \   000041   39           ADDC    A,R1
   \   000042   F9           MOV     R1,A
     96          	}
   \   000043   0E           INC     R6
   \   000044   EE           MOV     A,R6
   \   000045   C3           CLR     C
   \   000046   9405         SUBB    A,#0x5
   \   000048   40E7         JC      ??PMS7003_buildframe_0
     97          	lrch = lrc >> 8;
     98          	lrcl = lrc;
     99          	//组帧
    100          	frame[5] = lrcl;
   \   00004A   E8           MOV     A,R0
   \   00004B   8C82         MOV     DPL,R4
   \   00004D   8D83         MOV     DPH,R5
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   F0           MOVX    @DPTR,A
    101          	frame[6] = lrch;
   \   000055   E9           MOV     A,R1
   \   000056   8C82         MOV     DPL,R4
   \   000058   8D83         MOV     DPH,R5
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   F0           MOVX    @DPTR,A
    102          }
   \   000061   7F01         MOV     R7,#0x1
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
    103          
    104          //=========================================================================
    105          //函数名称：PMS7003_rest
    106          //函数参数：无
    107          //函数返回：无
    108          //功能概要：通过RST引脚复位传感器
    109          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          void PMS7003_rest(void)
   \                     PMS7003_rest:
    111          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    112          	PMS7003_RST = 0;
   \   000000   C284         CLR     0x80.4
    113                  for(int i=0;i<500;i++);
    114                  PMS7003_RST = 1;
   \   000002   D284         SETB    0x80.4
    115          }
   \   000004   02....       LJMP    ?BRET
   \   000007                REQUIRE _A_P0
    116          
    117          //=========================================================================
    118          //函数名称：PMS7003_sleep
    119          //函数参数：无
    120          //函数返回：无
    121          //功能概要：通过SET引脚休眠传感器
    122          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void PMS7003_sleep(void)
   \                     PMS7003_sleep:
    124          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    125          	PMS7003_SET = 0;
   \   000000   C285         CLR     0x80.5
    126          }
   \   000002   02....       LJMP    ?BRET
   \   000005                REQUIRE _A_P0
    127          
    128          //======================================================================
    129          //函数名称：PMS7003_datarec
    130          //函数参数：databuf:数据接收缓存
    131          //函数返回：接收成功：0 ；接收失败：0x12
    132          //功能概要：接收传感器原始读数
    133          //======================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          unsigned char PMS7003_recdata(unsigned char *databuf)
   \                     PMS7003_recdata:
    135          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    136          	unsigned char lrcl, lrch, i;
    137          	unsigned int lrcsum, datasum = 0;
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   75..00       MOV     ?V1,#0x0
    138                  PMS7003_control(PMS7003_CMD_PSSTIVEREAD);
   \   00000F                ; Setup parameters for call to function PMS7003_control
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7BE2         MOV     R3,#-0x1e
   \   000013   12....       LCALL   `??PMS7003_control::?relay`; Banked call to: PMS7003_control
    139          	//接收传感器的数据
    140                  i=HalUARTRead(0, databuf, PMS7003_LENTH_DATA);
   \   000016                ; Setup parameters for call to function HalUARTRead
   \   000016   7C20         MOV     R4,#0x20
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FB           MOV     R3,A
   \   00001E   7900         MOV     R1,#0x0
   \   000020   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    141          
    142          	//计算校验和
    143          	for(i = 0; i < (PMS7003_LENTH_DATA -2) ; i++)
   \   000023   7A00         MOV     R2,#0x0
    144          	{
    145          		datasum += databuf[i];
   \                     ??PMS7003_recdata_0:
   \   000025   EA           MOV     A,R2
   \   000026   F8           MOV     R0,A
   \   000027   EE           MOV     A,R6
   \   000028   28           ADD     A,R0
   \   000029   F582         MOV     DPL,A
   \   00002B   E4           CLR     A
   \   00002C   3F           ADDC    A,R7
   \   00002D   F583         MOV     DPH,A
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   E5..         MOV     A,?V0
   \   000033   28           ADD     A,R0
   \   000034   F5..         MOV     ?V0,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V1
   \   000039   F5..         MOV     ?V1,A
    146          	}
   \   00003B   0A           INC     R2
   \   00003C   EA           MOV     A,R2
   \   00003D   C3           CLR     C
   \   00003E   941E         SUBB    A,#0x1e
   \   000040   40E3         JC      ??PMS7003_recdata_0
    147          	lrcl = databuf[PMS7003_LENTH_DATA-1];
    148          	lrch = databuf[PMS7003_LENTH_DATA-2];
    149          	lrcsum = (lrch<<8)+lrcl;
    150          	//如果校验错误，返回错误码
    151          	if(datasum != lrcsum)
   \   000042   EE           MOV     A,R6
   \   000043   241E         ADD     A,#0x1e
   \   000045   F582         MOV     DPL,A
   \   000047   E4           CLR     A
   \   000048   3F           ADDC    A,R7
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   EE           MOV     A,R6
   \   00004E   241F         ADD     A,#0x1f
   \   000050   F582         MOV     DPL,A
   \   000052   E4           CLR     A
   \   000053   3F           ADDC    A,R7
   \   000054   F583         MOV     DPH,A
   \   000056   E0           MOVX    A,@DPTR
   \   000057   65..         XRL     A,?V0
   \   000059   7003         JNZ     ??PMS7003_recdata_1
   \   00005B   E9           MOV     A,R1
   \   00005C   65..         XRL     A,?V1
   \                     ??PMS7003_recdata_1:
   \   00005E   6004         JZ      ??PMS7003_recdata_2
    152                  {
    153          		return PMS7003_ERR_RECFAIL;
   \   000060   7912         MOV     R1,#0x12
   \   000062   8002         SJMP    ??PMS7003_recdata_3
    154                  }
    155          
    156          	return 0;
   \                     ??PMS7003_recdata_2:
   \   000064   7900         MOV     R1,#0x0
   \                     ??PMS7003_recdata_3:
   \   000066                REQUIRE ?Subroutine1
   \   000066                ; // Fall through to label ?Subroutine1
    157          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    158          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    159          unsigned char PMS7003_Read_Str(unsigned char *buf)
   \                     PMS7003_Read_Str:
    160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    161            unsigned char tmp[PMS7003_LENTH_DATA];
    162            unsigned int pm1, pm25, pm10;//CF=1，标准颗粒物，单位ug/m3
    163            unsigned int cnt = 0;
   \   00000E   7EE9         MOV     R6,#-0x17
   \   000010   7F03         MOV     R7,#0x3
    164            while(PMS7003_recdata(tmp) == PMS7003_ERR_RECFAIL)
   \                     ??PMS7003_Read_Str_0:
   \   000012                ; Setup parameters for call to function PMS7003_recdata
   \   000012   AA..         MOV     R2,?XSP + 0
   \   000014   AB..         MOV     R3,?XSP + 1
   \   000016   12....       LCALL   `??PMS7003_recdata::?relay`; Banked call to: PMS7003_recdata
   \   000019   E9           MOV     A,R1
   \   00001A   6412         XRL     A,#0x12
   \   00001C   7018         JNZ     ??PMS7003_Read_Str_1
    165            {
    166              if(++cnt > 1000)
   \   00001E   EE           MOV     A,R6
   \   00001F   24FF         ADD     A,#-0x1
   \   000021   1E           DEC     R6
   \   000022   EF           MOV     A,R7
   \   000023   34FF         ADDC    A,#-0x1
   \   000025   FF           MOV     R7,A
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   70E8         JNZ     ??PMS7003_Read_Str_0
    167                return 1;         //timeout,sensor no response
    168            }
    169            pm1 = (tmp[4]<<8) + tmp[5];
    170            pm25 = (tmp[6]<<8) + tmp[7];
    171            pm10 = (tmp[8]<<8) + tmp[9];
    172                
    173            if(pm1<1000 && pm25<1000 && pm10<1000)
    174            {
    175              sprintf((char*)buf, "%3d %3d %3d", pm1, pm25, pm10);
    176              return 0;
    177            }
    178            return 1;              //should not arrive here
   \                     ??PMS7003_Read_Str_2:
   \   00002A   7901         MOV     R1,#0x1
   \                     ??PMS7003_Read_Str_3:
   \   00002C   7420         MOV     A,#0x20
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   7F08         MOV     R7,#0x8
   \   000033   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??PMS7003_Read_Str_1:
   \   000036   7404         MOV     A,#0x4
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   7405         MOV     A,#0x5
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V2,A
   \   000045   E9           MOV     A,R1
   \   000046   F5..         MOV     ?V3,A
   \   000048   7406         MOV     A,#0x6
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   7407         MOV     A,#0x7
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V4,A
   \   000057   E9           MOV     A,R1
   \   000058   F5..         MOV     ?V5,A
   \   00005A   7408         MOV     A,#0x8
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   7409         MOV     A,#0x9
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   E4           CLR     A
   \   000069   2A           ADD     A,R2
   \   00006A   F5..         MOV     ?V6,A
   \   00006C   E9           MOV     A,R1
   \   00006D   F5..         MOV     ?V7,A
   \   00006F   E5..         MOV     A,?V2
   \   000071   94E8         SUBB    A,#-0x18
   \   000073   E5..         MOV     A,?V3
   \   000075   9403         SUBB    A,#0x3
   \   000077   50B1         JNC     ??PMS7003_Read_Str_2
   \   000079   C3           CLR     C
   \   00007A   E5..         MOV     A,?V4
   \   00007C   94E8         SUBB    A,#-0x18
   \   00007E   E5..         MOV     A,?V5
   \   000080   9403         SUBB    A,#0x3
   \   000082   50A6         JNC     ??PMS7003_Read_Str_2
   \   000084   C3           CLR     C
   \   000085   EA           MOV     A,R2
   \   000086   94E8         SUBB    A,#-0x18
   \   000088   E9           MOV     A,R1
   \   000089   9403         SUBB    A,#0x3
   \   00008B   509D         JNC     ??PMS7003_Read_Str_2
   \   00008D                ; Setup parameters for call to function sprintf
   \   00008D   78..         MOV     R0,#?V6
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   78..         MOV     R0,#?V4
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   78..         MOV     R0,#?V2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   7C..         MOV     R4,#`?<Constant "%3d %3d %3d">` & 0xff
   \   00009E   7D..         MOV     R5,#(`?<Constant "%3d %3d %3d">` >> 8) & 0xff
   \   0000A0   AA..         MOV     R2,?V0
   \   0000A2   AB..         MOV     R3,?V1
   \   0000A4   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0000A7   7406         MOV     A,#0x6
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   7900         MOV     R1,#0x0
   \   0000AE   02....       LJMP    ??PMS7003_Read_Str_3 & 0xFFFF
    179          }
    180          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          unsigned char PMS7003_Read(unsigned char *buf)
   \                     PMS7003_Read:
    182          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    183            unsigned char tmp[PMS7003_LENTH_DATA];
    184            unsigned int pm1, pm25, pm10;//CF=1，标准颗粒物，单位ug/m3
    185            unsigned int cnt = 0;
   \   00000E   75..E9       MOV     ?V0,#-0x17
   \   000011   75..03       MOV     ?V1,#0x3
    186            while(PMS7003_recdata(tmp) == PMS7003_ERR_RECFAIL)
   \                     ??PMS7003_Read_0:
   \   000014                ; Setup parameters for call to function PMS7003_recdata
   \   000014   AA..         MOV     R2,?XSP + 0
   \   000016   AB..         MOV     R3,?XSP + 1
   \   000018   12....       LCALL   `??PMS7003_recdata::?relay`; Banked call to: PMS7003_recdata
   \   00001B   E9           MOV     A,R1
   \   00001C   6412         XRL     A,#0x12
   \   00001E   701C         JNZ     ??PMS7003_Read_1
    187            {
    188              if(++cnt > 1000)
   \   000020   E5..         MOV     A,?V0
   \   000022   24FF         ADD     A,#-0x1
   \   000024   F5..         MOV     ?V0,A
   \   000026   E5..         MOV     A,?V1
   \   000028   34FF         ADDC    A,#-0x1
   \   00002A   F5..         MOV     ?V1,A
   \   00002C   E5..         MOV     A,?V0
   \   00002E   45..         ORL     A,?V1
   \   000030   70E2         JNZ     ??PMS7003_Read_0
    189                return 1;         //timeout,sensor no response
    190            }
    191            pm1 = (tmp[4]<<8) + tmp[5];
    192            pm25 = (tmp[6]<<8) + tmp[7];
    193            pm10 = (tmp[8]<<8) + tmp[9];
    194                
    195            if(pm1<1000 && pm25<1000 && pm10<1000)
    196            {
    197              buf[0] = tmp[4];    //pm1 H
    198              buf[1] = tmp[5];    //pm1 L
    199              
    200              buf[2] = tmp[6];
    201              buf[3] = tmp[7];
    202              
    203              buf[4] = tmp[8];
    204              buf[5] = tmp[9];
    205              return 0;
    206            }
    207            return 1;              //should not arrive here
   \                     ??PMS7003_Read_2:
   \   000032   7901         MOV     R1,#0x1
   \                     ??PMS7003_Read_3:
   \   000034   7420         MOV     A,#0x20
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??PMS7003_Read_1:
   \   00003C   7408         MOV     A,#0x8
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   7409         MOV     A,#0x9
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   E9           MOV     A,R1
   \   00004B   FB           MOV     R3,A
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   7405         MOV     A,#0x5
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00005B   50D5         JNC     ??PMS7003_Read_2
   \   00005D   7406         MOV     A,#0x6
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   7407         MOV     A,#0x7
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00006C   50C4         JNC     ??PMS7003_Read_2
   \   00006E   C3           CLR     C
   \   00006F   EA           MOV     A,R2
   \   000070   94E8         SUBB    A,#-0x18
   \   000072   EB           MOV     A,R3
   \   000073   9403         SUBB    A,#0x3
   \   000075   50BB         JNC     ??PMS7003_Read_2
   \   000077   7404         MOV     A,#0x4
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   F0           MOVX    @DPTR,A
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   7406         MOV     A,#0x6
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000093   A3           INC     DPTR
   \   000094   F0           MOVX    @DPTR,A
   \   000095   7407         MOV     A,#0x7
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   7408         MOV     A,#0x8
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   7409         MOV     A,#0x9
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000B1   A3           INC     DPTR
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   7900         MOV     R1,#0x0
   \   0000B5   02....       LJMP    ??PMS7003_Read_3 & 0xFFFF
    208          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   E4           CLR     A
   \   000003   2C           ADD     A,R4
   \   000004   94E8         SUBB    A,#-0x18
   \   000006   E9           MOV     A,R1
   \   000007   9403         SUBB    A,#0x3
   \   000009   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_control::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_control

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_buildframe::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_buildframe

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_rest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_rest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_sleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_sleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_recdata::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_recdata

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_Read_Str::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_Read_Str

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??PMS7003_Read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PMS7003_Read

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%3d %3d %3d">`:
   \   000000   25336420     DB "%3d %3d %3d"
   \            25336420
   \            25336400
    209          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   PMS7003_Init
        2      0   -> PMS7003_control
      1     42   PMS7003_Read
        0     42   -> PMS7003_recdata
      0     54   PMS7003_Read_Str
        0     48   -> PMS7003_recdata
        0     54   -> sprintf
      1     16   PMS7003_buildframe
      2     17   PMS7003_control
        2      7   -> HalUARTWrite
        2      7   -> PMS7003_buildframe
      0     58   PMS7003_recdata
        0     10   -> HalUARTRead
        0     10   -> PMS7003_control
      0      0   PMS7003_rest
      0      0   PMS7003_sleep


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "%3d %3d %3d">
       7  ?<Constant {0, 0, 0, 0, 0, 0, 0}>
       7  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine2
      10  ?Subroutine3
       7  ?Subroutine4
       1  P0DIR
       1  P0SEL
      17  PMS7003_Init
       6  PMS7003_Init::?relay
     184  PMS7003_Read
       6  PMS7003_Read::?relay
     177  PMS7003_Read_Str
       6  PMS7003_Read_Str::?relay
     102  PMS7003_buildframe
       6  PMS7003_buildframe::?relay
      57  PMS7003_control
       6  PMS7003_control::?relay
     102  PMS7003_recdata
       6  PMS7003_recdata::?relay
       7  PMS7003_rest
       6  PMS7003_rest::?relay
       5  PMS7003_sleep
       6  PMS7003_sleep::?relay
       1  _A_P0

 
 690 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
  19 bytes in segment XDATA_ROM_C
 
 738 bytes of CODE  memory
  19 bytes of CONST memory
   0 bytes of DATA  memory (+ 3 bytes shared)

Errors: none
Warnings: none
