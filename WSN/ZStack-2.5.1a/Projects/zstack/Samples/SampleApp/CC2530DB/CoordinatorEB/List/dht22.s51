///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               19/Oct/2017  17:45:18
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\dht22.c
//    Command line       =  
//        -f "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
//        -DREJOIN_POLL_RATE=1000 "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\dht22.c"
//        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -lC "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
//        -lA "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\" -I
//        "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        F:\Zigbeespace\20170624 -
//        副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\dht22.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME dht22

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?US_DIV_MOD

        PUBLIC `??dht22_delay_10us::?relay`
        FUNCTION `??dht22_delay_10us::?relay`,0203H
        PUBLIC `??dht22_delay_ms::?relay`
        FUNCTION `??dht22_delay_ms::?relay`,0203H
        PUBLIC `??dht22_delay_nus::?relay`
        FUNCTION `??dht22_delay_nus::?relay`,0203H
        PUBLIC `??dht22_read_byte::?relay`
        FUNCTION `??dht22_read_byte::?relay`,0203H
        PUBLIC `??dht22_value::?relay`
        FUNCTION `??dht22_value::?relay`,0203H
        PUBWEAK P0DIR
        PUBWEAK _A_P0
        PUBLIC dht22_delay_10us
        FUNCTION dht22_delay_10us,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dht22_delay_ms
        FUNCTION dht22_delay_ms,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC dht22_delay_nus
        FUNCTION dht22_delay_nus,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dht22_read_byte
        FUNCTION dht22_read_byte,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC dht22_value
        FUNCTION dht22_value,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
Onboard_wait        SYMBOL "Onboard_wait"
`??Onboard_wait::?relay` SYMBOL "?relay", Onboard_wait
dht22_delay_10us    SYMBOL "dht22_delay_10us"
`??dht22_delay_10us::?relay` SYMBOL "?relay", dht22_delay_10us
dht22_delay_ms      SYMBOL "dht22_delay_ms"
`??dht22_delay_ms::?relay` SYMBOL "?relay", dht22_delay_ms
dht22_delay_nus     SYMBOL "dht22_delay_nus"
`??dht22_delay_nus::?relay` SYMBOL "?relay", dht22_delay_nus
dht22_read_byte     SYMBOL "dht22_read_byte"
`??dht22_read_byte::?relay` SYMBOL "?relay", dht22_read_byte
dht22_value         SYMBOL "dht22_value"
`??dht22_value::?relay` SYMBOL "?relay", dht22_value

        EXTERN `??Onboard_wait::?relay`
        FUNCTION `??Onboard_wait::?relay`,00H
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// F:\Zigbeespace\20170624 - 副本\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\dht22.c
//    1 #include "dht22.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    2 #include"OnBoard.h"
//    3 //32MHZ us延时函数；
//    4 //#pragma optimize=none
//    5 //延时函数

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    6 void dht22_delay_nus(unsigned short n) //n us延时
dht22_delay_nus:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function dht22_delay_nus
        CODE
//    7 {
        FUNCALL dht22_delay_nus, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI EndBlock cfiBlock0
        ; Saved register size: 2
        ; Auto size: 0
//    8     MicroWait(n);   
        ; Setup parameters for call to function Onboard_wait
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//    9 }
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//   10 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   11 void dht22_delay_10us(void) //10 us延时
dht22_delay_10us:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function dht22_delay_10us
        CODE
//   12 {
        FUNCALL dht22_delay_10us, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   13    MicroWait(10);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        SJMP    ?Subroutine0
//   14 }
          CFI EndBlock cfiBlock2
//   15 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   16 void dht22_delay_ms(uint Time)//n ms延时
dht22_delay_ms:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function dht22_delay_ms
        CODE
//   17 {
        FUNCALL dht22_delay_ms, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   18   unsigned char i;
//   19   while(Time--)
??dht22_delay_ms_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??dht22_delay_ms_1
//   20   {
//   21     for(i=0;i<100;i++)
        MOV     ?V0,#0x64
//   22      dht22_delay_10us();
??dht22_delay_ms_2:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
        DEC     ?V0
        MOV     A,?V0
        JZ      ??dht22_delay_ms_0
        SJMP    ??dht22_delay_ms_2
//   23   }
//   24 }
??dht22_delay_ms_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//   25 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   26 unsigned char dht22_read_byte(void)
dht22_read_byte:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function dht22_read_byte
        CODE
//   27 {
        FUNCALL dht22_read_byte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_read_byte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_read_byte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_read_byte, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   28     int count = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//   29     unsigned char r_val = 0; 
        MOV     ?V0,#0x0
//   30     unsigned char i;
//   31     
//   32     for(i = 0 ; i < 8 ; i++)
        MOV     ?V1,#0x8
//   33     { 
//   34         //等待低电平50us
//   35         while(!DHT22_PIN);
??dht22_read_byte_0:
        MOV     C,0x80.7
        JNC     ??dht22_read_byte_0
//   36         dht22_delay_10us();
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   37         dht22_delay_10us();
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   38         dht22_delay_10us();
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   39         dht22_delay_10us();
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
//   40         //高电平26~28us表示'0',70us表示'1'
//   41         //经过延迟后，若DHT22_PIN仍为1，则为高电平
//   42         if( DHT22_PIN == 1 )
        MOV     C,0x80.7
        MOV     A,?V0
        JNC     ??dht22_read_byte_1
//   43         {      
//   44             r_val <<= 1;
//   45             r_val |= 1;
        CLR     C
        RLC     A
        ORL     A,#0x1
        MOV     ?V0,A
//   46         }
//   47         else
//   48         {
//   49             r_val <<= 1;
//   50             continue;
//   51         }             
//   52         //当数据为1时，等待DHT22发送完这一位数据；      
//   53         while( DHT22_PIN == 1)
??dht22_read_byte_2:
        MOV     C,0x80.7
        JNC     ??dht22_read_byte_3
//   54         {
//   55           count++;
        INC     R6
        MOV     A,R6
        JNZ     ??dht22_read_byte_4
        INC     R7
//   56           if(count == 200)
??dht22_read_byte_4:
        MOV     A,#-0x38
        XRL     A,R6
        ORL     A,R7
        JNZ     ??dht22_read_byte_2
//   57             return -1;
        MOV     R1,#-0x1
        SJMP    ??dht22_read_byte_5
//   58         }
??dht22_read_byte_1:
        CLR     C
        RLC     A
        MOV     ?V0,A
//   59     }
??dht22_read_byte_3:
        DEC     ?V1
        MOV     A,?V1
        JNZ     ??dht22_read_byte_0
//   60     return r_val;  
        MOV     R1,?V0
??dht22_read_byte_5:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
        REQUIRE _A_P0
//   61 }
//   62 
//   63 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   64 char dht22_value(unsigned char *temp ,unsigned char *humi , unsigned char flag)
dht22_value:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function dht22_value
        CODE
//   65 {   
        FUNCALL dht22_value, dht22_delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_value, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_value, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_value, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_value, dht22_read_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_value, dht22_read_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_value, dht22_read_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_value, dht22_read_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dht22_value, dht22_read_byte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V6,R1
//   66      unsigned char count=0;
//   67      unsigned char humi_H = 0 , humi_L = 0;
//   68      unsigned char temp_H = 0 , temp_L = 0;
//   69      unsigned int tempture = 0, humidity = 0;
//   70      unsigned char check = 0,sum=0;
//   71      unsigned char unit=0,hundred=0,decade=0;
//   72      
//   73      DHT22_PIN_OUT();
        ORL     0xfd,#0x80
//   74      DHT22_PIN_L();  //输出低电平；   
        CLR     0x80.7
//   75 
//   76      dht22_delay_ms(1);//主机低电平呼叫
        ; Setup parameters for call to function dht22_delay_ms
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??dht22_delay_ms::?relay`; Banked call to: dht22_delay_ms
//   77      
//   78      DHT22_PIN_IN();
        ANL     0xfd,#0x7f
        MOV     A,#0x1f
//   79      while(DHT22_PIN != 1)
??dht22_value_0:
        MOV     C,0x80.7
        JC      ??dht22_value_1
//   80      {
//   81         count++;
//   82         if(count>30)
        DEC     A
        JNZ     $+5
        LJMP    ??dht22_value_2 & 0xFFFF
        SJMP    ??dht22_value_0
//   83           return -1;
//   84      }
//   85      count=0;
//   86      
//   87      dht22_delay_nus(30);//等待主机释放总线时间
??dht22_value_1:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x1e
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
        MOV     R0,#0x33
//   88      while(DHT22_PIN != 0)
??dht22_value_3:
        MOV     C,0x80.7
        JNC     ??dht22_value_4
//   89      {
//   90         count++;
//   91         if(count>50)
        DEC     R0
        MOV     A,R0
        JNZ     $+5
        LJMP    ??dht22_value_2 & 0xFFFF
        SJMP    ??dht22_value_3
//   92           return -1;
//   93      }
//   94      count=0;   
//   95        
//   96      if(DHT22_PIN == 0) //正确的响应输出；
??dht22_value_4:
        MOV     C,0x80.7
        JNC     $+5
        LJMP    ??dht22_value_5 & 0xFFFF
//   97      {       
//   98              dht22_delay_nus(80);//dht22响应呼叫低电平
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x50
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
        MOV     R0,#0x33
//   99              while(DHT22_PIN != 1)
??dht22_value_6:
        MOV     C,0x80.7
        JC      ??dht22_value_7
//  100              {
//  101                 count++;
//  102                 if(count>50)
        DEC     R0
        MOV     A,R0
        JNZ     $+5
        LJMP    ??dht22_value_2 & 0xFFFF
        SJMP    ??dht22_value_6
//  103                   return -1;
//  104              }
//  105              count=0;
//  106              
//  107              dht22_delay_nus(80);//dht22响应呼叫高电平
??dht22_value_7:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x50
        MOV     R3,#0x0
        LCALL   `??Onboard_wait::?relay`; Banked call to: Onboard_wait
        MOV     R0,#0x33
//  108              while(DHT22_PIN != 1)
??dht22_value_8:
        MOV     C,0x80.7
        JC      ??dht22_value_9
//  109              {
//  110                 count++;
//  111                 if(count>50)
        DEC     R0
        MOV     A,R0
        JNZ     $+5
        LJMP    ??dht22_value_2 & 0xFFFF
        SJMP    ??dht22_value_8
//  112                   return -1;
//  113              }
//  114              count=0;     
//  115 
//  116             //DHT22发送
//  117             humi_H = dht22_read_byte(); //湿度高八位；
??dht22_value_9:
        ; Setup parameters for call to function dht22_read_byte
        LCALL   `??dht22_read_byte::?relay`; Banked call to: dht22_read_byte
        MOV     A,R1
        MOV     ?V4,A
//  118             humi_L = dht22_read_byte(); //湿度低八位；
        ; Setup parameters for call to function dht22_read_byte
        LCALL   `??dht22_read_byte::?relay`; Banked call to: dht22_read_byte
        MOV     A,R1
        MOV     ?V2,A
//  119             temp_H = dht22_read_byte(); //温度高八位；
        ; Setup parameters for call to function dht22_read_byte
        LCALL   `??dht22_read_byte::?relay`; Banked call to: dht22_read_byte
        MOV     A,R1
        MOV     ?V5,A
//  120             temp_L = dht22_read_byte(); //温度低八位；
        ; Setup parameters for call to function dht22_read_byte
        LCALL   `??dht22_read_byte::?relay`; Banked call to: dht22_read_byte
        MOV     A,R1
        MOV     ?V3,A
//  121             check = dht22_read_byte(); //校验和；  
//  122             sum = humi_H + humi_L + temp_H + temp_L;
//  123        
//  124             //校验和正确即表示获取成功！
//  125             if(check == sum)
        ; Setup parameters for call to function dht22_read_byte
        LCALL   `??dht22_read_byte::?relay`; Banked call to: dht22_read_byte
        MOV     A,R1
        MOV     R0,A
        MOV     A,?V4
        ADD     A,?V2
        ADD     A,?V5
        ADD     A,?V3
        XRL     A,R0
        JZ      $+5
        LJMP    ??dht22_value_5 & 0xFFFF
//  126             {            
//  127                   //获取成功后根据参数类型存入参数中
//  128                   tempture=temp_H;
//  129                   tempture=tempture<<8;
//  130                   tempture+=temp_L;
//  131                   //矫正
//  132                   tempture-=40;
        MOV     R1,?V5
        MOV     A,?V3
        ADD     A,#-0x28
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R5,A
//  133                   
//  134                   humidity=humi_H;
//  135                   humidity=humidity<<8;
//  136                   humidity+=humi_L;
        MOV     A,?V4
        MOV     ?V3,A
//  137                   
//  138                   if(flag == DHT22_STRING)//字符串类型 
        MOV     A,#0x1
        XRL     A,?V6
        JZ      $+5
        LJMP    ??dht22_value_10 & 0xFFFF
//  139                   {     //0x30即'0'
//  140                         hundred=tempture/100;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        MOV     ?V5,A
//  141                         unit=tempture%10;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     ?V4,A
//  142                         decade=(tempture-hundred*100-unit)/10;
//  143                         temp[0] = hundred+0x30;
        MOV     A,#0x30
        ADD     A,?V5
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine2 & 0xFFFF
//  144                         temp[1] = decade+0x30;
??CrossCallReturnLabel_2:
        MOV     A,R4
        SUBB    A,R0
        MOV     R2,A
        MOV     A,R5
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        LCALL   ?Subroutine4 & 0xFFFF
//  145                         temp[2] = '.';
??CrossCallReturnLabel_6:
        MOV     A,#0x2e
        MOVX    @DPTR,A
//  146                         temp[3] = unit+0x30;
        MOV     A,#0x30
        ADD     A,?V4
        LCALL   ?Subroutine3 & 0xFFFF
//  147                         temp[4] = '\0';
??CrossCallReturnLabel_4:
        CLR     A
        MOVX    @DPTR,A
//  148                         
//  149                         hundred=humidity/100;
        MOV     R0,?V2
        MOV     R1,?V3
        MOV     R2,#0x64
        MOV     R3,A
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        MOV     ?V5,A
//  150                         unit=humidity%10;
        MOV     R0,?V2
        MOV     R1,?V3
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     ?V4,A
//  151                         decade=(humidity-hundred*100-unit)/10;                        
//  152                         humi[0] = hundred+0x30;
        MOV     A,#0x30
        ADD     A,?V5
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine2 & 0xFFFF
//  153                         humi[1] = decade+0x30;
??CrossCallReturnLabel_3:
        MOV     A,?V2
        SUBB    A,R0
        MOV     R2,A
        MOV     A,?V3
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        LCALL   ?Subroutine6 & 0xFFFF
//  154                         humi[2] = '.';
??CrossCallReturnLabel_12:
        INC     DPTR
        INC     DPTR
        MOV     A,#0x2e
        MOVX    @DPTR,A
//  155                         humi[3] = unit+0x30;
        MOV     A,#0x30
        ADD     A,?V4
        LCALL   ?Subroutine5 & 0xFFFF
//  156                         humi[4] = '\0';
//  157                         //unit=0;//用于断电调试
//  158                     
//  159                   }
??CrossCallReturnLabel_8:
        CLR     A
        SJMP    ??dht22_value_11
//  160                   else//16位二进制数类型 
//  161                   {
//  162                       *temp = temp_H;
??dht22_value_10:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,R1
        LCALL   ??Subroutine8_0 & 0xFFFF
//  163                       *humi = humi_H;
//  164                   }                                                       
//  165             }
//  166             else//获取错误
//  167             {          
//  168                 if(flag == DHT22_STRING)
//  169                 {
//  170                     temp[0] = '\0';
//  171                     temp[1] = '\0';
//  172                     temp[2] = '\0';
//  173                     temp[3] = '\0';
//  174                     temp[4] = '\0';
//  175                    
//  176                     humi[0] = '\0';
//  177                     humi[1] = '\0';
//  178                     humi[2] = '\0';
//  179                     humi[3] = '\0';
//  180                     humi[4] = '\0';                    
//  181                 }
//  182                 else 
//  183                 {
//  184                     *temp = 0;
//  185                     *humi = 0;
//  186                 }     
//  187     
//  188                 return -1;
//  189             }
//  190      }
??CrossCallReturnLabel_14:
        MOV     A,?V4
??dht22_value_11:
        MOVX    @DPTR,A
//  191      else//不正确的响应输出；
//  192      {
//  193            if(flag == DHT22_STRING)
//  194             {
//  195                     temp[0] = '\0';
//  196                     temp[1] = '\0';
//  197                     temp[2] = '\0';
//  198                     temp[3] = '\0';
//  199                     temp[4] = '\0';
//  200                    
//  201                     humi[0] = '\0';
//  202                     humi[1] = '\0';
//  203                     humi[2] = '\0';
//  204                     humi[3] = '\0';
//  205                     humi[4] = '\0'; 
//  206             }
//  207             else 
//  208             {
//  209                 *temp = 0;
//  210                 *humi = 0;
//  211             }     
//  212 
//  213             return -1; 
//  214      }  
//  215      return 0;
        MOV     R1,#0x0
        SJMP    ??dht22_value_12
??dht22_value_5:
        MOV     A,#0x1
        XRL     A,?V6
        MOV     DPL,?V0
        MOV     DPH,?V1
        JNZ     ??dht22_value_13
        CLR     A
        MOVX    @DPTR,A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        MOVX    @DPTR,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_15:
        MOVX    @DPTR,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        SJMP    ??CrossCallReturnLabel_16
??dht22_value_13:
        CLR     A
        LCALL   ??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX    @DPTR,A
??dht22_value_2:
        MOV     R1,#-0x1
??dht22_value_12:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
        REQUIRE P0DIR
        REQUIRE _A_P0
//  216 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function dht22_value
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function dht22_value
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        INC     DPTR
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine8_0:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function dht22_value
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function dht22_value
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function dht22_value
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function dht22_value
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function dht22_value
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function dht22_value
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function dht22_value
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function dht22_value
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function dht22_value
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function dht22_value
          CFI Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function dht22_value
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_7
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-4
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function dht22_value
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_4
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-4
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function dht22_value
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_5
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function dht22_value
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function dht22_value
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function dht22_value
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function dht22_value
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOVX    @DPTR,A
        MOV     A,?V5
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        CLR     A
        ADD     A,R2
        MOV     R1,A
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function dht22_value
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function dht22_value
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        SUBB    A,R1
        MOV     R3,A
        MOV     R0,?V4
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R3
        SUBB    A,#0x0
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dht22_delay_nus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dht22_delay_nus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dht22_delay_10us::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dht22_delay_10us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dht22_delay_ms::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dht22_delay_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dht22_read_byte::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dht22_read_byte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??dht22_value::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    dht22_value

        END
//  217 
//  218 
//  219 
//  220 
// 
// 640 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
// 
// 670 bytes of CODE memory
//   0 bytes of DATA memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
