###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                08/Nov/2017  15:29:24
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
#    Command line       =  
#        -f
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x333;
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=0 -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0)
#        -DREJOIN_POLL_RATE=1000
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -lC
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz
#    List file          =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\hal_lcd.lst
#    Object file        =  
#        F:\Zigbeespace\20171020\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\hal_lcd.r51
#
###############################################################################

F:\Zigbeespace\20171020\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
      1          /****************************************************************************
      2          * Filename: hal_lcd.c
      3          * Author:      Andy  https://aldsz.taobao.com
      4          * Date:        2015-06-16
      5          * Version:     1.0
      6          * Description: OLED driver
      7          ****************************************************************************/
      8          #include "hal_types.h"
      9          #include "hal_lcd.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     10          #include "OSAL.h"
     11          #include "OnBoard.h"
     12          #include "hal_assert.h"
     13          #include <string.h>
     14          
     15          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     16            #include "DebugTrace.h"
     17          #endif
     18          
     19          
     20          //------------------------------------------------------------------------------
     21          #define LCD_COMMAND 0x00
     22          #define LCD_DATA    0x01
     23          
     24          #define LCD_MAX_BUF 25
     25          
     26          #define SOFTWARE_SPI
     27          //#define HARDWARE_SPI //采用硬件SPI通讯
     28          
     29          #define COL_SPACE   2  //字符间距
     30          #define ROW_SPACE   4  //行间距
     31          #define ALL_CNS     128
     32          #define X_MAX_PIXEL 128
     33          #define Y_MAX_PIXEL 128
     34          
     35          // SPI TFT LCD端口定义
     36          #define LCD_DC           P0_0  // 数据/命令选择
     37          #define LCD_SDA          P1_3  // 双向数据 
     38          #define LCD_SCL          P1_2  // 时钟   
     39          //#define LCD_CS         P1_2  // 片选, L_S 将片选接地
     40          #define LCD_RST          P1_7  // 控制lcd复位   
     41          
     42          //液晶控制口置1操作语句宏定义
     43          //#define LCD_CS_SET  	(LCD_CS_CLRx01)   
     44          #define	LCD_DC_SET  	(LCD_DC = 0x01)  
     45          #define	LCD_SDA_SET  	(LCD_SDA = 0x01)    
     46          #define	LCD_SCL_SET  	(LCD_SCL = 0x01)   
     47          #define	LCD_RST_SET  	(LCD_RST = 0x01)  
     48          
     49          //液晶控制口置0操作语句宏定义
     50          //#define LCD_CS_CLR  	(LCD_CS_CLRx00)    
     51          #define	LCD_DC_CLR  	(LCD_DC = 0x00)  
     52          #define	LCD_SDA_CLR  	(LCD_SDA = 0x00)     
     53          #define	LCD_SCL_CLR  	(LCD_SCL = 0x00)
     54          #define	LCD_RST_CLR  	(LCD_RST = 0x00)   
     55          
     56          
     57          void SPI_Init(void);
     58          void LCD_clear(unsigned int color);
     59          void HalLcdWriteEnString(uint8 x, uint8 y, char *title);
     60          void LCD_write_EN_string(unsigned char X,unsigned char Y,uint8 *s);
     61          static void LCD_set_window(unsigned int X, unsigned int Y, 
     62                                     unsigned Width,unsigned int Height);
     63          static void LCD_write_EN(unsigned int X, unsigned int Y, unsigned char c);
     64          static void LCD_write_CN(unsigned int X, unsigned int Y, unsigned char c);
     65          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     66          unsigned int  Color    = BLUE; //默认前景颜色
   \                     Color:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for Color>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     67          unsigned int  Color_BK = GREEN;//默认背景颜色
   \                     Color_BK:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for Color_BK>`
   \   000002                REQUIRE __INIT_XDATA_I
     68          //------------------------------------------------------------------------------
     69          
     70          #define XLevelL            0x00
     71          #define XLevelH            0x10
     72          #define XLevel             ((XLevelH&0x0F)*16+XLevelL)
     73          #define Max_Column         128
     74          #define Max_Row            64
     75          #define Brightness         0xCF 
     76          #define X_WIDTH            128
     77          #define Y_WIDTH            64
     78          
     79          #define LCD_MAX_BUF        25
     80          #define HAL_LCD_MAX_CHARS  16   // Max number of chars on a single LCD line 
     81          
     82          
     83          #if (HAL_LCD == TRUE)
     84          void HalLcd_HW_Init(void);
     85          void HalLcd_HW_WaitUs(uint16 i);
     86          void HalLcd_HW_Clear(void);
     87          void HalLcd_HW_Control(uint8 cmd);
     88          void HalLcd_HW_Write(uint8 data);
     89          void HalLcd_HW_SetContrast(uint8 value);
     90          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
     91          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
     92          
     93          void DelayMS(unsigned int msec);
     94          void LCD_WrDat(unsigned char dat);
     95          void LCD_WrCmd(unsigned char cmd);
     96          void LCD_Set_Pos(unsigned char x, unsigned char y);
     97          void LCD_Fill(unsigned char bmp_dat) ;
     98          void LCD_CLS(void);
     99          
    100          //-----------------------------------------------------------------------------
    101          void DrawRect(unsigned int Xpos, unsigned int Ypos, unsigned int Width, 
    102                        unsigned int Height,unsigned Color);
    103          void DrawRectFill(unsigned int Xpos  , unsigned int Ypos, unsigned int Width, 
    104                            unsigned int Height, unsigned Color);
    105          void  SendByte(unsigned char Data);
    106          void  SPI_WriteData(unsigned char Data);
    107          void LCD_write_byte(unsigned char data, unsigned char command);
    108          void LCD_WriteData_16Bit(unsigned short Data);
    109          void LCD_write_CN_string(unsigned char X,unsigned char Y,uint8 *s);
    110          void ShowImage(const unsigned char *p);
    111          
    112          void DrawPixel(unsigned int x, unsigned int y, unsigned int color);
    113          void DrawVerticalLine(unsigned int x, unsigned int y, 
    114                                unsigned int Length,unsigned int Color);
    115          void DrawHorizonLine(unsigned int x, unsigned int y, 
    116                               unsigned int Length,unsigned int Color);               
    117          void Lcd_Reset(void);
    118          
    119          
    120          //中文14x14点阵字符索引 ALD

   \                                 In  segment CODE_C, align 1
    121          __code const  unsigned char CN14x14_Index[] =
   \                     CN14x14_Index:
   \   000000   C0AFB1CA     DB 0C0H, 0AFH, 0B1H, 0CAH, 0D0H, 0A1H, 0D0H, 0C2H
   \            D0A1D0C2
   \   000008   C8BCC6F8     DB 0C8H, 0BCH, 0C6H, 0F8H, 0CEH, 0C2H, 0CAH, 0AAH
   \            CEC2CAAA
   \   000010   B6C8D6D5     DB 0B6H, 0C8H, 0D6H, 0D5H, 0B6H, 0CBH, 0D2H, 0BBH
   \            B6CBD2BB
   \   000018   B6FEC8FD     DB 0B6H, 0FEH, 0C8H, 0FDH, 0CBH, 0C4H, 0CDH, 0A3H
   \            CBC4CDA3
   \   000020   CBAEB5E7     DB 0CBH, 0AEH, 0B5H, 0E7H, 0D7H, 0C5H, 0BBH, 0F0H
   \            D7C5BBF0
   \   000028   B6CFCDF8     DB 0B6H, 0CFH, 0CDH, 0F8H, 0B5H, 0D8H, 0D6H, 0B7H
   \            B5D8D6B7
   \   000030   D0ADB5F7     DB 0D0H, 0ADH, 0B5H, 0F7H, 0C6H, 0F7H, 0C2H, 0B7H
   \            C6F7C2B7
   \   000038   D3C9A3BA     DB 0D3H, 0C9H, 0A3H, 0BAH, 0A1H, 0E6H, 0A3H, 0A5H
   \            A1E6A3A5
   \   000040   00           DB 0
    122          {
    123            "蜡笔小新燃气温湿度终端一二三四停水电着火断网地址协调器路由：℃％"
    124          };
    125          
    126          //中文14x14点阵字符 ald

   \                                 In  segment CODE_C, align 1
    127          __code const unsigned char CN14x14[][28] =
   \                     CN14x14:
   \   000000   10           DB 16
   \   000001   48           DB 72
   \   000002   10           DB 16
   \   000003   48           DB 72
   \   000004   7D           DB 125
   \   000005   FE           DB 254
   \   000006   54           DB 84
   \   000007   48           DB 72
   \   000008   54           DB 84
   \   000009   48           DB 72
   \   00000A   55           DB 85
   \   00000B   FE           DB 254
   \   00000C   54           DB 84
   \   00000D   00           DB 0
   \   00000E   7C           DB 124
   \   00000F   FC           DB 252
   \   000010   50           DB 80
   \   000011   84           DB 132
   \   000012   10           DB 16
   \   000013   84           DB 132
   \   000014   14           DB 20
   \   000015   FC           DB 252
   \   000016   3E           DB 62
   \   000017   84           DB 132
   \   000018   62           DB 98
   \   000019   84           DB 132
   \   00001A   40           DB 64
   \   00001B   FC           DB 252
   \   00001C   10           DB 16
   \   00001D   40           DB 64
   \   00001E   3F           DB 63
   \   00001F   7C           DB 124
   \   000020   68           DB 104
   \   000021   D0           DB 208
   \   000022   05           DB 5
   \   000023   00           DB 0
   \   000024   03           DB 3
   \   000025   F8           DB 248
   \   000026   1F           DB 31
   \   000027   80           DB 128
   \   000028   01           DB 1
   \   000029   00           DB 0
   \   00002A   3F           DB 63
   \   00002B   F8           DB 248
   \   00002C   01           DB 1
   \   00002D   00           DB 0
   \   00002E   01           DB 1
   \   00002F   00           DB 0
   \   000030   7F           DB 127
   \   000031   FC           DB 252
   \   000032   01           DB 1
   \   000033   00           DB 0
   \   000034   01           DB 1
   \   000035   02           DB 2
   \   000036   01           DB 1
   \   000037   FE           DB 254
   \   000038   01           DB 1
   \   000039   00           DB 0
   \   00003A   01           DB 1
   \   00003B   00           DB 0
   \   00003C   01           DB 1
   \   00003D   00           DB 0
   \   00003E   01           DB 1
   \   00003F   00           DB 0
   \   000040   09           DB 9
   \   000041   10           DB 16
   \   000042   19           DB 25
   \   000043   18           DB 24
   \   000044   31           DB 49
   \   000045   0C           DB 12
   \   000046   61           DB 97
   \   000047   04           DB 4
   \   000048   41           DB 65
   \   000049   06           DB 6
   \   00004A   41           DB 65
   \   00004B   02           DB 2
   \   00004C   01           DB 1
   \   00004D   00           DB 0
   \   00004E   01           DB 1
   \   00004F   00           DB 0
   \   000050   05           DB 5
   \   000051   00           DB 0
   \   000052   03           DB 3
   \   000053   00           DB 0
   \   000054   10           DB 16
   \   000055   0C           DB 12
   \   000056   08           DB 8
   \   000057   78           DB 120
   \   000058   7F           DB 127
   \   000059   40           DB 64
   \   00005A   22           DB 34
   \   00005B   40           DB 64
   \   00005C   14           DB 20
   \   00005D   40           DB 64
   \   00005E   7F           DB 127
   \   00005F   7E           DB 126
   \   000060   08           DB 8
   \   000061   48           DB 72
   \   000062   08           DB 8
   \   000063   48           DB 72
   \   000064   7F           DB 127
   \   000065   48           DB 72
   \   000066   08           DB 8
   \   000067   48           DB 72
   \   000068   2A           DB 42
   \   000069   48           DB 72
   \   00006A   49           DB 73
   \   00006B   48           DB 72
   \   00006C   08           DB 8
   \   00006D   48           DB 72
   \   00006E   18           DB 24
   \   00006F   C8           DB 200
   \   000070   11           DB 17
   \   000071   14           DB 20
   \   000072   11           DB 17
   \   000073   D2           DB 210
   \   000074   16           DB 22
   \   000075   50           DB 80
   \   000076   5A           DB 90
   \   000077   7E           DB 126
   \   000078   55           DB 85
   \   000079   50           DB 80
   \   00007A   50           DB 80
   \   00007B   90           DB 144
   \   00007C   12           DB 18
   \   00007D   A8           DB 168
   \   00007E   11           DB 17
   \   00007F   28           DB 40
   \   000080   11           DB 17
   \   000081   44           DB 68
   \   000082   12           DB 18
   \   000083   44           DB 68
   \   000084   2C           DB 44
   \   000085   82           DB 130
   \   000086   24           DB 36
   \   000087   08           DB 8
   \   000088   42           DB 66
   \   000089   A4           DB 164
   \   00008A   42           DB 66
   \   00008B   52           DB 82
   \   00008C   08           DB 8
   \   00008D   00           DB 0
   \   00008E   08           DB 8
   \   00008F   00           DB 0
   \   000090   1F           DB 31
   \   000091   FC           DB 252
   \   000092   30           DB 48
   \   000093   00           DB 0
   \   000094   67           DB 103
   \   000095   F0           DB 240
   \   000096   00           DB 0
   \   000097   00           DB 0
   \   000098   1F           DB 31
   \   000099   F0           DB 240
   \   00009A   00           DB 0
   \   00009B   10           DB 16
   \   00009C   00           DB 0
   \   00009D   10           DB 16
   \   00009E   00           DB 0
   \   00009F   10           DB 16
   \   0000A0   00           DB 0
   \   0000A1   10           DB 16
   \   0000A2   00           DB 0
   \   0000A3   12           DB 18
   \   0000A4   00           DB 0
   \   0000A5   0A           DB 10
   \   0000A6   00           DB 0
   \   0000A7   06           DB 6
   \   0000A8   07           DB 7
   \   0000A9   E0           DB 224
   \   0000AA   44           DB 68
   \   0000AB   20           DB 32
   \   0000AC   24           DB 36
   \   0000AD   20           DB 32
   \   0000AE   07           DB 7
   \   0000AF   E0           DB 224
   \   0000B0   84           DB 132
   \   0000B1   20           DB 32
   \   0000B2   44           DB 68
   \   0000B3   20           DB 32
   \   0000B4   07           DB 7
   \   0000B5   E0           DB 224
   \   0000B6   20           DB 32
   \   0000B7   00           DB 0
   \   0000B8   2F           DB 47
   \   0000B9   F0           DB 240
   \   0000BA   4A           DB 74
   \   0000BB   50           DB 80
   \   0000BC   4A           DB 74
   \   0000BD   50           DB 80
   \   0000BE   8A           DB 138
   \   0000BF   50           DB 80
   \   0000C0   8A           DB 138
   \   0000C1   50           DB 80
   \   0000C2   1F           DB 31
   \   0000C3   F8           DB 248
   \   0000C4   00           DB 0
   \   0000C5   00           DB 0
   \   0000C6   4F           DB 79
   \   0000C7   F0           DB 240
   \   0000C8   28           DB 40
   \   0000C9   10           DB 16
   \   0000CA   08           DB 8
   \   0000CB   10           DB 16
   \   0000CC   8F           DB 143
   \   0000CD   F0           DB 240
   \   0000CE   48           DB 72
   \   0000CF   10           DB 16
   \   0000D0   08           DB 8
   \   0000D1   10           DB 16
   \   0000D2   2F           DB 47
   \   0000D3   F0           DB 240
   \   0000D4   22           DB 34
   \   0000D5   40           DB 64
   \   0000D6   52           DB 82
   \   0000D7   48           DB 72
   \   0000D8   4A           DB 74
   \   0000D9   50           DB 80
   \   0000DA   86           DB 134
   \   0000DB   60           DB 96
   \   0000DC   82           DB 130
   \   0000DD   40           DB 64
   \   0000DE   1F           DB 31
   \   0000DF   F8           DB 248
   \   0000E0   02           DB 2
   \   0000E1   00           DB 0
   \   0000E2   01           DB 1
   \   0000E3   00           DB 0
   \   0000E4   3F           DB 63
   \   0000E5   F8           DB 248
   \   0000E6   24           DB 36
   \   0000E7   20           DB 32
   \   0000E8   3F           DB 63
   \   0000E9   F8           DB 248
   \   0000EA   24           DB 36
   \   0000EB   20           DB 32
   \   0000EC   27           DB 39
   \   0000ED   E0           DB 224
   \   0000EE   20           DB 32
   \   0000EF   00           DB 0
   \   0000F0   2F           DB 47
   \   0000F1   F0           DB 240
   \   0000F2   24           DB 36
   \   0000F3   20           DB 32
   \   0000F4   22           DB 34
   \   0000F5   40           DB 64
   \   0000F6   41           DB 65
   \   0000F7   80           DB 128
   \   0000F8   46           DB 70
   \   0000F9   60           DB 96
   \   0000FA   98           DB 152
   \   0000FB   18           DB 24
   \   0000FC   21           DB 33
   \   0000FD   00           DB 0
   \   0000FE   21           DB 33
   \   0000FF   00           DB 0
   \   000100   41           DB 65
   \   000101   E0           DB 224
   \   000102   92           DB 146
   \   000103   20           DB 32
   \   000104   F5           DB 245
   \   000105   40           DB 64
   \   000106   20           DB 32
   \   000107   80           DB 128
   \   000108   41           DB 65
   \   000109   40           DB 64
   \   00010A   82           DB 130
   \   00010B   20           DB 32
   \   00010C   F4           DB 244
   \   00010D   18           DB 24
   \   00010E   01           DB 1
   \   00010F   80           DB 128
   \   000110   00           DB 0
   \   000111   60           DB 96
   \   000112   33           DB 51
   \   000113   00           DB 0
   \   000114   C0           DB 192
   \   000115   C0           DB 192
   \   000116   00           DB 0
   \   000117   20           DB 32
   \   000118   20           DB 32
   \   000119   40           DB 64
   \   00011A   12           DB 18
   \   00011B   48           DB 72
   \   00011C   12           DB 18
   \   00011D   48           DB 72
   \   00011E   FA           DB 250
   \   00011F   48           DB 72
   \   000120   03           DB 3
   \   000121   F8           DB 248
   \   000122   08           DB 8
   \   000123   00           DB 0
   \   000124   8B           DB 139
   \   000125   F8           DB 248
   \   000126   48           DB 72
   \   000127   80           DB 128
   \   000128   53           DB 83
   \   000129   F8           DB 248
   \   00012A   52           DB 82
   \   00012B   A8           DB 168
   \   00012C   02           DB 2
   \   00012D   A8           DB 168
   \   00012E   1A           DB 26
   \   00012F   A8           DB 168
   \   000130   E2           DB 226
   \   000131   A8           DB 168
   \   000132   02           DB 2
   \   000133   18           DB 24
   \   000134   00           DB 0
   \   000135   00           DB 0
   \   000136   00           DB 0
   \   000137   00           DB 0
   \   000138   00           DB 0
   \   000139   00           DB 0
   \   00013A   00           DB 0
   \   00013B   00           DB 0
   \   00013C   00           DB 0
   \   00013D   00           DB 0
   \   00013E   00           DB 0
   \   00013F   00           DB 0
   \   000140   FF           DB 255
   \   000141   F8           DB 248
   \   000142   00           DB 0
   \   000143   00           DB 0
   \   000144   00           DB 0
   \   000145   00           DB 0
   \   000146   00           DB 0
   \   000147   00           DB 0
   \   000148   00           DB 0
   \   000149   00           DB 0
   \   00014A   00           DB 0
   \   00014B   00           DB 0
   \   00014C   00           DB 0
   \   00014D   00           DB 0
   \   00014E   00           DB 0
   \   00014F   00           DB 0
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   00           DB 0
   \   000153   00           DB 0
   \   000154   7F           DB 127
   \   000155   F0           DB 240
   \   000156   00           DB 0
   \   000157   00           DB 0
   \   000158   00           DB 0
   \   000159   00           DB 0
   \   00015A   00           DB 0
   \   00015B   00           DB 0
   \   00015C   00           DB 0
   \   00015D   00           DB 0
   \   00015E   00           DB 0
   \   00015F   00           DB 0
   \   000160   00           DB 0
   \   000161   00           DB 0
   \   000162   00           DB 0
   \   000163   00           DB 0
   \   000164   00           DB 0
   \   000165   00           DB 0
   \   000166   00           DB 0
   \   000167   00           DB 0
   \   000168   FF           DB 255
   \   000169   F8           DB 248
   \   00016A   00           DB 0
   \   00016B   00           DB 0
   \   00016C   00           DB 0
   \   00016D   00           DB 0
   \   00016E   7F           DB 127
   \   00016F   F0           DB 240
   \   000170   00           DB 0
   \   000171   00           DB 0
   \   000172   00           DB 0
   \   000173   00           DB 0
   \   000174   00           DB 0
   \   000175   00           DB 0
   \   000176   00           DB 0
   \   000177   00           DB 0
   \   000178   00           DB 0
   \   000179   00           DB 0
   \   00017A   3F           DB 63
   \   00017B   E0           DB 224
   \   00017C   00           DB 0
   \   00017D   00           DB 0
   \   00017E   00           DB 0
   \   00017F   00           DB 0
   \   000180   00           DB 0
   \   000181   00           DB 0
   \   000182   00           DB 0
   \   000183   00           DB 0
   \   000184   00           DB 0
   \   000185   00           DB 0
   \   000186   FF           DB 255
   \   000187   F8           DB 248
   \   000188   00           DB 0
   \   000189   00           DB 0
   \   00018A   7F           DB 127
   \   00018B   F8           DB 248
   \   00018C   44           DB 68
   \   00018D   88           DB 136
   \   00018E   44           DB 68
   \   00018F   88           DB 136
   \   000190   44           DB 68
   \   000191   88           DB 136
   \   000192   44           DB 68
   \   000193   88           DB 136
   \   000194   44           DB 68
   \   000195   88           DB 136
   \   000196   44           DB 68
   \   000197   88           DB 136
   \   000198   44           DB 68
   \   000199   88           DB 136
   \   00019A   48           DB 72
   \   00019B   78           DB 120
   \   00019C   50           DB 80
   \   00019D   08           DB 8
   \   00019E   40           DB 64
   \   00019F   08           DB 8
   \   0001A0   7F           DB 127
   \   0001A1   F8           DB 248
   \   0001A2   40           DB 64
   \   0001A3   08           DB 8
   \   0001A4   10           DB 16
   \   0001A5   80           DB 128
   \   0001A6   1F           DB 31
   \   0001A7   F8           DB 248
   \   0001A8   10           DB 16
   \   0001A9   00           DB 0
   \   0001AA   27           DB 39
   \   0001AB   F0           DB 240
   \   0001AC   24           DB 36
   \   0001AD   10           DB 16
   \   0001AE   67           DB 103
   \   0001AF   F0           DB 240
   \   0001B0   A0           DB 160
   \   0001B1   00           DB 0
   \   0001B2   2F           DB 47
   \   0001B3   F8           DB 248
   \   0001B4   28           DB 40
   \   0001B5   08           DB 8
   \   0001B6   27           DB 39
   \   0001B7   F0           DB 240
   \   0001B8   20           DB 32
   \   0001B9   40           DB 64
   \   0001BA   20           DB 32
   \   0001BB   40           DB 64
   \   0001BC   20           DB 32
   \   0001BD   40           DB 64
   \   0001BE   21           DB 33
   \   0001BF   C0           DB 192
   \   0001C0   02           DB 2
   \   0001C1   00           DB 0
   \   0001C2   02           DB 2
   \   0001C3   00           DB 0
   \   0001C4   02           DB 2
   \   0001C5   00           DB 0
   \   0001C6   02           DB 2
   \   0001C7   10           DB 16
   \   0001C8   7B           DB 123
   \   0001C9   20           DB 32
   \   0001CA   0B           DB 11
   \   0001CB   40           DB 64
   \   0001CC   0A           DB 10
   \   0001CD   80           DB 128
   \   0001CE   12           DB 18
   \   0001CF   80           DB 128
   \   0001D0   12           DB 18
   \   0001D1   40           DB 64
   \   0001D2   22           DB 34
   \   0001D3   20           DB 32
   \   0001D4   42           DB 66
   \   0001D5   10           DB 16
   \   0001D6   82           DB 130
   \   0001D7   08           DB 8
   \   0001D8   02           DB 2
   \   0001D9   00           DB 0
   \   0001DA   0E           DB 14
   \   0001DB   00           DB 0
   \   0001DC   02           DB 2
   \   0001DD   00           DB 0
   \   0001DE   02           DB 2
   \   0001DF   00           DB 0
   \   0001E0   02           DB 2
   \   0001E1   00           DB 0
   \   0001E2   7F           DB 127
   \   0001E3   F0           DB 240
   \   0001E4   42           DB 66
   \   0001E5   10           DB 16
   \   0001E6   42           DB 66
   \   0001E7   10           DB 16
   \   0001E8   7F           DB 127
   \   0001E9   F0           DB 240
   \   0001EA   42           DB 66
   \   0001EB   10           DB 16
   \   0001EC   42           DB 66
   \   0001ED   10           DB 16
   \   0001EE   7F           DB 127
   \   0001EF   F0           DB 240
   \   0001F0   42           DB 66
   \   0001F1   00           DB 0
   \   0001F2   02           DB 2
   \   0001F3   08           DB 8
   \   0001F4   02           DB 2
   \   0001F5   08           DB 8
   \   0001F6   01           DB 1
   \   0001F7   F8           DB 248
   \   0001F8   10           DB 16
   \   0001F9   40           DB 64
   \   0001FA   7F           DB 127
   \   0001FB   F0           DB 240
   \   0001FC   02           DB 2
   \   0001FD   00           DB 0
   \   0001FE   3F           DB 63
   \   0001FF   E0           DB 224
   \   000200   04           DB 4
   \   000201   00           DB 0
   \   000202   FF           DB 255
   \   000203   F8           DB 248
   \   000204   08           DB 8
   \   000205   00           DB 0
   \   000206   1F           DB 31
   \   000207   E0           DB 224
   \   000208   30           DB 48
   \   000209   20           DB 32
   \   00020A   5F           DB 95
   \   00020B   E0           DB 224
   \   00020C   90           DB 144
   \   00020D   20           DB 32
   \   00020E   1F           DB 31
   \   00020F   E0           DB 224
   \   000210   10           DB 16
   \   000211   20           DB 32
   \   000212   1F           DB 31
   \   000213   E0           DB 224
   \   000214   02           DB 2
   \   000215   00           DB 0
   \   000216   02           DB 2
   \   000217   00           DB 0
   \   000218   02           DB 2
   \   000219   00           DB 0
   \   00021A   22           DB 34
   \   00021B   10           DB 16
   \   00021C   22           DB 34
   \   00021D   10           DB 16
   \   00021E   22           DB 34
   \   00021F   20           DB 32
   \   000220   45           DB 69
   \   000221   40           DB 64
   \   000222   85           DB 133
   \   000223   00           DB 0
   \   000224   05           DB 5
   \   000225   00           DB 0
   \   000226   08           DB 8
   \   000227   80           DB 128
   \   000228   08           DB 8
   \   000229   80           DB 128
   \   00022A   10           DB 16
   \   00022B   40           DB 64
   \   00022C   20           DB 32
   \   00022D   20           DB 32
   \   00022E   C0           DB 192
   \   00022F   18           DB 24
   \   000230   10           DB 16
   \   000231   30           DB 48
   \   000232   91           DB 145
   \   000233   C0           DB 192
   \   000234   D5           DB 213
   \   000235   00           DB 0
   \   000236   B9           DB 185
   \   000237   00           DB 0
   \   000238   91           DB 145
   \   000239   00           DB 0
   \   00023A   FD           DB 253
   \   00023B   F8           DB 248
   \   00023C   91           DB 145
   \   00023D   20           DB 32
   \   00023E   B9           DB 185
   \   00023F   20           DB 32
   \   000240   D5           DB 213
   \   000241   20           DB 32
   \   000242   95           DB 149
   \   000243   20           DB 32
   \   000244   91           DB 145
   \   000245   20           DB 32
   \   000246   91           DB 145
   \   000247   20           DB 32
   \   000248   82           DB 130
   \   000249   20           DB 32
   \   00024A   FC           DB 252
   \   00024B   20           DB 32
   \   00024C   00           DB 0
   \   00024D   00           DB 0
   \   00024E   7F           DB 127
   \   00024F   F8           DB 248
   \   000250   40           DB 64
   \   000251   08           DB 8
   \   000252   42           DB 66
   \   000253   28           DB 40
   \   000254   53           DB 83
   \   000255   28           DB 40
   \   000256   4A           DB 74
   \   000257   A8           DB 168
   \   000258   44           DB 68
   \   000259   48           DB 72
   \   00025A   44           DB 68
   \   00025B   48           DB 72
   \   00025C   4A           DB 74
   \   00025D   A8           DB 168
   \   00025E   4A           DB 74
   \   00025F   A8           DB 168
   \   000260   51           DB 81
   \   000261   08           DB 8
   \   000262   62           DB 98
   \   000263   08           DB 8
   \   000264   40           DB 64
   \   000265   08           DB 8
   \   000266   40           DB 64
   \   000267   38           DB 56
   \   000268   20           DB 32
   \   000269   80           DB 128
   \   00026A   20           DB 32
   \   00026B   80           DB 128
   \   00026C   24           DB 36
   \   00026D   90           DB 144
   \   00026E   24           DB 36
   \   00026F   B0           DB 176
   \   000270   F5           DB 245
   \   000271   D0           DB 208
   \   000272   2E           DB 46
   \   000273   90           DB 144
   \   000274   24           DB 36
   \   000275   90           DB 144
   \   000276   24           DB 36
   \   000277   90           DB 144
   \   000278   24           DB 36
   \   000279   90           DB 144
   \   00027A   24           DB 36
   \   00027B   B0           DB 176
   \   00027C   34           DB 52
   \   00027D   80           DB 128
   \   00027E   C4           DB 196
   \   00027F   08           DB 8
   \   000280   04           DB 4
   \   000281   08           DB 8
   \   000282   03           DB 3
   \   000283   F8           DB 248
   \   000284   20           DB 32
   \   000285   40           DB 64
   \   000286   20           DB 32
   \   000287   40           DB 64
   \   000288   20           DB 32
   \   000289   40           DB 64
   \   00028A   20           DB 32
   \   00028B   40           DB 64
   \   00028C   FA           DB 250
   \   00028D   40           DB 64
   \   00028E   22           DB 34
   \   00028F   78           DB 120
   \   000290   22           DB 34
   \   000291   40           DB 64
   \   000292   22           DB 34
   \   000293   40           DB 64
   \   000294   22           DB 34
   \   000295   40           DB 64
   \   000296   22           DB 34
   \   000297   40           DB 64
   \   000298   3A           DB 58
   \   000299   40           DB 64
   \   00029A   E2           DB 226
   \   00029B   40           DB 64
   \   00029C   02           DB 2
   \   00029D   40           DB 64
   \   00029E   0F           DB 15
   \   00029F   F8           DB 248
   \   0002A0   21           DB 33
   \   0002A1   00           DB 0
   \   0002A2   21           DB 33
   \   0002A3   00           DB 0
   \   0002A4   21           DB 33
   \   0002A5   00           DB 0
   \   0002A6   FB           DB 251
   \   0002A7   E0           DB 224
   \   0002A8   21           DB 33
   \   0002A9   20           DB 32
   \   0002AA   21           DB 33
   \   0002AB   20           DB 32
   \   0002AC   21           DB 33
   \   0002AD   20           DB 32
   \   0002AE   25           DB 37
   \   0002AF   30           DB 48
   \   0002B0   25           DB 37
   \   0002B1   28           DB 40
   \   0002B2   29           DB 41
   \   0002B3   28           DB 40
   \   0002B4   22           DB 34
   \   0002B5   20           DB 32
   \   0002B6   22           DB 34
   \   0002B7   20           DB 32
   \   0002B8   24           DB 36
   \   0002B9   20           DB 32
   \   0002BA   28           DB 40
   \   0002BB   C0           DB 192
   \   0002BC   40           DB 64
   \   0002BD   00           DB 0
   \   0002BE   27           DB 39
   \   0002BF   F8           DB 248
   \   0002C0   24           DB 36
   \   0002C1   88           DB 136
   \   0002C2   04           DB 4
   \   0002C3   88           DB 136
   \   0002C4   E5           DB 229
   \   0002C5   E8           DB 232
   \   0002C6   24           DB 36
   \   0002C7   88           DB 136
   \   0002C8   27           DB 39
   \   0002C9   F8           DB 248
   \   0002CA   24           DB 36
   \   0002CB   08           DB 8
   \   0002CC   25           DB 37
   \   0002CD   E8           DB 232
   \   0002CE   2D           DB 45
   \   0002CF   28           DB 40
   \   0002D0   35           DB 53
   \   0002D1   28           DB 40
   \   0002D2   25           DB 37
   \   0002D3   E8           DB 232
   \   0002D4   04           DB 4
   \   0002D5   08           DB 8
   \   0002D6   08           DB 8
   \   0002D7   38           DB 56
   \   0002D8   7D           DB 125
   \   0002D9   F0           DB 240
   \   0002DA   45           DB 69
   \   0002DB   10           DB 16
   \   0002DC   45           DB 69
   \   0002DD   10           DB 16
   \   0002DE   7D           DB 125
   \   0002DF   F0           DB 240
   \   0002E0   00           DB 0
   \   0002E1   40           DB 64
   \   0002E2   02           DB 2
   \   0002E3   20           DB 32
   \   0002E4   FF           DB 255
   \   0002E5   F8           DB 248
   \   0002E6   08           DB 8
   \   0002E7   80           DB 128
   \   0002E8   30           DB 48
   \   0002E9   60           DB 96
   \   0002EA   C0           DB 192
   \   0002EB   18           DB 24
   \   0002EC   7D           DB 125
   \   0002ED   F0           DB 240
   \   0002EE   45           DB 69
   \   0002EF   10           DB 16
   \   0002F0   45           DB 69
   \   0002F1   10           DB 16
   \   0002F2   7D           DB 125
   \   0002F3   F0           DB 240
   \   0002F4   00           DB 0
   \   0002F5   80           DB 128
   \   0002F6   78           DB 120
   \   0002F7   80           DB 128
   \   0002F8   48           DB 72
   \   0002F9   F0           DB 240
   \   0002FA   49           DB 73
   \   0002FB   10           DB 16
   \   0002FC   4A           DB 74
   \   0002FD   A0           DB 160
   \   0002FE   78           DB 120
   \   0002FF   40           DB 64
   \   000300   10           DB 16
   \   000301   A0           DB 160
   \   000302   53           DB 83
   \   000303   18           DB 24
   \   000304   5C           DB 92
   \   000305   00           DB 0
   \   000306   51           DB 81
   \   000307   F0           DB 240
   \   000308   51           DB 81
   \   000309   10           DB 16
   \   00030A   5D           DB 93
   \   00030B   10           DB 16
   \   00030C   E1           DB 225
   \   00030D   F0           DB 240
   \   00030E   01           DB 1
   \   00030F   10           DB 16
   \   000310   02           DB 2
   \   000311   00           DB 0
   \   000312   02           DB 2
   \   000313   00           DB 0
   \   000314   02           DB 2
   \   000315   00           DB 0
   \   000316   7F           DB 127
   \   000317   F0           DB 240
   \   000318   42           DB 66
   \   000319   10           DB 16
   \   00031A   42           DB 66
   \   00031B   10           DB 16
   \   00031C   42           DB 66
   \   00031D   10           DB 16
   \   00031E   42           DB 66
   \   00031F   10           DB 16
   \   000320   7F           DB 127
   \   000321   F0           DB 240
   \   000322   42           DB 66
   \   000323   10           DB 16
   \   000324   42           DB 66
   \   000325   10           DB 16
   \   000326   42           DB 66
   \   000327   10           DB 16
   \   000328   42           DB 66
   \   000329   10           DB 16
   \   00032A   7F           DB 127
   \   00032B   F0           DB 240
   \   00032C   00           DB 0
   \   00032D   00           DB 0
   \   00032E   00           DB 0
   \   00032F   00           DB 0
   \   000330   00           DB 0
   \   000331   00           DB 0
   \   000332   00           DB 0
   \   000333   00           DB 0
   \   000334   00           DB 0
   \   000335   00           DB 0
   \   000336   00           DB 0
   \   000337   00           DB 0
   \   000338   18           DB 24
   \   000339   00           DB 0
   \   00033A   18           DB 24
   \   00033B   00           DB 0
   \   00033C   00           DB 0
   \   00033D   00           DB 0
   \   00033E   00           DB 0
   \   00033F   00           DB 0
   \   000340   18           DB 24
   \   000341   00           DB 0
   \   000342   18           DB 24
   \   000343   00           DB 0
   \   000344   00           DB 0
   \   000345   00           DB 0
   \   000346   00           DB 0
   \   000347   00           DB 0
   \   000348   60           DB 96
   \   000349   00           DB 0
   \   00034A   90           DB 144
   \   00034B   00           DB 0
   \   00034C   97           DB 151
   \   00034D   E8           DB 232
   \   00034E   68           DB 104
   \   00034F   18           DB 24
   \   000350   10           DB 16
   \   000351   08           DB 8
   \   000352   10           DB 16
   \   000353   08           DB 8
   \   000354   10           DB 16
   \   000355   00           DB 0
   \   000356   10           DB 16
   \   000357   00           DB 0
   \   000358   10           DB 16
   \   000359   00           DB 0
   \   00035A   10           DB 16
   \   00035B   00           DB 0
   \   00035C   10           DB 16
   \   00035D   08           DB 8
   \   00035E   08           DB 8
   \   00035F   10           DB 16
   \   000360   07           DB 7
   \   000361   E0           DB 224
   \   000362   00           DB 0
   \   000363   00           DB 0
   \   000364   18           DB 24
   \   000365   00           DB 0
   \   000366   24           DB 36
   \   000367   08           DB 8
   \   000368   24           DB 36
   \   000369   10           DB 16
   \   00036A   24           DB 36
   \   00036B   20           DB 32
   \   00036C   24           DB 36
   \   00036D   40           DB 64
   \   00036E   24           DB 36
   \   00036F   80           DB 128
   \   000370   19           DB 25
   \   000371   00           DB 0
   \   000372   02           DB 2
   \   000373   60           DB 96
   \   000374   04           DB 4
   \   000375   90           DB 144
   \   000376   08           DB 8
   \   000377   90           DB 144
   \   000378   10           DB 16
   \   000379   90           DB 144
   \   00037A   20           DB 32
   \   00037B   90           DB 144
   \   00037C   40           DB 64
   \   00037D   90           DB 144
   \   00037E   00           DB 0
   \   00037F   60           DB 96
    128          {
    129          /*--  文字:  蜡  --*/
    130          /*--  宋体12;  此字体下对应的点阵为：宽x高=14x14   --*/
    131          0x10,0x48,0x10,0x48,0x7D,0xFE,0x54,0x48,0x54,0x48,0x55,0xFE,0x54,0x00,
    132          0x7C,0xFC,0x50,0x84,0x10,0x84,0x14,0xFC,0x3E,0x84,0x62,0x84,0x40,0xFC,
    133          
    134          /*--  文字:  笔  --*/
    135          /*--  宋体12;  此字体下对应的点阵为：宽x高=14x14   --*/
    136          0x10,0x40,0x3F,0x7C,0x68,0xD0,0x05,0x00,0x03,0xF8,0x1F,0x80,0x01,0x00,
    137          0x3F,0xF8,0x01,0x00,0x01,0x00,0x7F,0xFC,0x01,0x00,0x01,0x02,0x01,0xFE,
    138          
    139          /*--  文字:  小  --*/
    140          /*--  宋体12;  此字体下对应的点阵为：宽x高=14x14   --*/
    141          0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x09,0x10,0x19,0x18,0x31,0x0C,
    142          0x61,0x04,0x41,0x06,0x41,0x02,0x01,0x00,0x01,0x00,0x05,0x00,0x03,0x00,
    143          
    144          /*--  文字:  新  --*/
    145          /*--  宋体12;  此字体下对应的点阵为：宽x高=14x14   --*/
    146          0x10,0x0C,0x08,0x78,0x7F,0x40,0x22,0x40,0x14,0x40,0x7F,0x7E,0x08,0x48,
    147          0x08,0x48,0x7F,0x48,0x08,0x48,0x2A,0x48,0x49,0x48,0x08,0x48,0x18,0xC8,
    148          
    149          /*--  文字:  燃  --*/
    150          /*--  宋体12;  此字体下对应的点阵为：宽x高=14x14   --*/
    151          0x11,0x14,0x11,0xD2,0x16,0x50,0x5A,0x7E,0x55,0x50,0x50,0x90,0x12,0xA8,
    152          0x11,0x28,0x11,0x44,0x12,0x44,0x2C,0x82,0x24,0x08,0x42,0xA4,0x42,0x52,
    153          
    154          /*--  文字:  气  --*/
    155          /*--  宋体12;  此字体下对应的点阵为：宽x高=14x14   --*/
    156          0x08,0x00,0x08,0x00,0x1F,0xFC,0x30,0x00,0x67,0xF0,0x00,0x00,0x1F,0xF0,
    157          0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x12,0x00,0x0A,0x00,0x06,
    158          
    159          0x07,0xE0,0x44,0x20,0x24,0x20,0x07,0xE0,0x84,0x20,0x44,0x20,0x07,0xE0,0x20,0x00,
    160          0x2F,0xF0,0x4A,0x50,0x4A,0x50,0x8A,0x50,0x8A,0x50,0x1F,0xF8,/*"温",39*/
    161          
    162          0x00,0x00,0x4F,0xF0,0x28,0x10,0x08,0x10,0x8F,0xF0,0x48,0x10,0x08,0x10,0x2F,0xF0,
    163          0x22,0x40,0x52,0x48,0x4A,0x50,0x86,0x60,0x82,0x40,0x1F,0xF8,/*"湿",40*/
    164          
    165          0x02,0x00,0x01,0x00,0x3F,0xF8,0x24,0x20,0x3F,0xF8,0x24,0x20,0x27,0xE0,0x20,0x00,
    166          0x2F,0xF0,0x24,0x20,0x22,0x40,0x41,0x80,0x46,0x60,0x98,0x18,/*"度",41*/
    167          
    168          0x21,0x00,0x21,0x00,0x41,0xE0,0x92,0x20,0xF5,0x40,0x20,0x80,0x41,0x40,0x82,0x20,
    169          0xF4,0x18,0x01,0x80,0x00,0x60,0x33,0x00,0xC0,0xC0,0x00,0x20,/*"终",42*/
    170          
    171          0x20,0x40,0x12,0x48,0x12,0x48,0xFA,0x48,0x03,0xF8,0x08,0x00,0x8B,0xF8,0x48,0x80,
    172          0x53,0xF8,0x52,0xA8,0x02,0xA8,0x1A,0xA8,0xE2,0xA8,0x02,0x18,/*"端",43*/
    173          
    174          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,
    175          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"一",44*/
    176          
    177          0x00,0x00,0x00,0x00,0x7F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    178          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,/*"二",45*/
    179          
    180          0x00,0x00,0x7F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xE0,
    181          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,/*"三",46*/
    182          
    183          0x00,0x00,0x7F,0xF8,0x44,0x88,0x44,0x88,0x44,0x88,0x44,0x88,0x44,0x88,0x44,0x88,
    184          0x44,0x88,0x48,0x78,0x50,0x08,0x40,0x08,0x7F,0xF8,0x40,0x08,/*"四",47*/
    185          
    186          0x10,0x80,0x1F,0xF8,0x10,0x00,0x27,0xF0,0x24,0x10,0x67,0xF0,0xA0,0x00,0x2F,0xF8,
    187          0x28,0x08,0x27,0xF0,0x20,0x40,0x20,0x40,0x20,0x40,0x21,0xC0,/*"停",48*/
    188          
    189          0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x10,0x7B,0x20,0x0B,0x40,0x0A,0x80,0x12,0x80,
    190          0x12,0x40,0x22,0x20,0x42,0x10,0x82,0x08,0x02,0x00,0x0E,0x00,/*"水",49*/
    191          
    192          0x02,0x00,0x02,0x00,0x02,0x00,0x7F,0xF0,0x42,0x10,0x42,0x10,0x7F,0xF0,0x42,0x10,
    193          0x42,0x10,0x7F,0xF0,0x42,0x00,0x02,0x08,0x02,0x08,0x01,0xF8,/*"电",50*/
    194          
    195          0x10,0x40,0x7F,0xF0,0x02,0x00,0x3F,0xE0,0x04,0x00,0xFF,0xF8,0x08,0x00,0x1F,0xE0,
    196          0x30,0x20,0x5F,0xE0,0x90,0x20,0x1F,0xE0,0x10,0x20,0x1F,0xE0,/*"着",51*/
    197          
    198          0x02,0x00,0x02,0x00,0x02,0x00,0x22,0x10,0x22,0x10,0x22,0x20,0x45,0x40,0x85,0x00,
    199          0x05,0x00,0x08,0x80,0x08,0x80,0x10,0x40,0x20,0x20,0xC0,0x18,/*"火",52*/
    200          
    201          0x10,0x30,0x91,0xC0,0xD5,0x00,0xB9,0x00,0x91,0x00,0xFD,0xF8,0x91,0x20,0xB9,0x20,
    202          0xD5,0x20,0x95,0x20,0x91,0x20,0x91,0x20,0x82,0x20,0xFC,0x20,/*"断",53*/
    203          
    204          0x00,0x00,0x7F,0xF8,0x40,0x08,0x42,0x28,0x53,0x28,0x4A,0xA8,0x44,0x48,0x44,0x48,
    205          0x4A,0xA8,0x4A,0xA8,0x51,0x08,0x62,0x08,0x40,0x08,0x40,0x38,/*"网",54*/
    206          
    207          0x20,0x80,0x20,0x80,0x24,0x90,0x24,0xB0,0xF5,0xD0,0x2E,0x90,0x24,0x90,0x24,0x90,
    208          0x24,0x90,0x24,0xB0,0x34,0x80,0xC4,0x08,0x04,0x08,0x03,0xF8,/*"地",55*/
    209          
    210          0x20,0x40,0x20,0x40,0x20,0x40,0x20,0x40,0xFA,0x40,0x22,0x78,0x22,0x40,0x22,0x40,
    211          0x22,0x40,0x22,0x40,0x3A,0x40,0xE2,0x40,0x02,0x40,0x0F,0xF8,/*"址",56*/
    212          
    213          0x21,0x00,0x21,0x00,0x21,0x00,0xFB,0xE0,0x21,0x20,0x21,0x20,0x21,0x20,0x25,0x30,
    214          0x25,0x28,0x29,0x28,0x22,0x20,0x22,0x20,0x24,0x20,0x28,0xC0,/*"协",57*/
    215          
    216          0x40,0x00,0x27,0xF8,0x24,0x88,0x04,0x88,0xE5,0xE8,0x24,0x88,0x27,0xF8,0x24,0x08,
    217          0x25,0xE8,0x2D,0x28,0x35,0x28,0x25,0xE8,0x04,0x08,0x08,0x38,/*"调",58*/
    218          
    219          0x7D,0xF0,0x45,0x10,0x45,0x10,0x7D,0xF0,0x00,0x40,0x02,0x20,0xFF,0xF8,0x08,0x80,
    220          0x30,0x60,0xC0,0x18,0x7D,0xF0,0x45,0x10,0x45,0x10,0x7D,0xF0,/*"器",59*/
    221          
    222          0x00,0x80,0x78,0x80,0x48,0xF0,0x49,0x10,0x4A,0xA0,0x78,0x40,0x10,0xA0,0x53,0x18,
    223          0x5C,0x00,0x51,0xF0,0x51,0x10,0x5D,0x10,0xE1,0xF0,0x01,0x10,/*"路",60*/
    224          
    225          0x02,0x00,0x02,0x00,0x02,0x00,0x7F,0xF0,0x42,0x10,0x42,0x10,0x42,0x10,0x42,0x10,
    226          0x7F,0xF0,0x42,0x10,0x42,0x10,0x42,0x10,0x42,0x10,0x7F,0xF0,/*"由",61*/
    227          
    228          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,
    229          0x00,0x00,0x00,0x00,0x18,0x00,0x18,0x00,0x00,0x00,0x00,0x00,/*"：",62*/
    230          
    231          0x60,0x00,0x90,0x00,0x97,0xE8,0x68,0x18,0x10,0x08,0x10,0x08,0x10,0x00,0x10,0x00,
    232          0x10,0x00,0x10,0x00,0x10,0x08,0x08,0x10,0x07,0xE0,0x00,0x00,/*"℃",63*/
    233          
    234          0x18,0x00,0x24,0x08,0x24,0x10,0x24,0x20,0x24,0x40,0x24,0x80,0x19,0x00,0x02,0x60,
    235          0x04,0x90,0x08,0x90,0x10,0x90,0x20,0x90,0x40,0x90,0x00,0x60,/*"％",64*/
    236          
    237          };
    238          
    239          //英文7x14点阵字符 andy

   \                                 In  segment CODE_C, align 1
    240          __code const unsigned char ASCII7x14[][14] =
   \                     ASCII7x14:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   10           DB 16
   \   000011   10           DB 16
   \   000012   10           DB 16
   \   000013   10           DB 16
   \   000014   10           DB 16
   \   000015   10           DB 16
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   30           DB 48
   \   000019   30           DB 48
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   14           DB 20
   \   00001E   28           DB 40
   \   00001F   50           DB 80
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   28           DB 40
   \   00002E   28           DB 40
   \   00002F   FC           DB 252
   \   000030   28           DB 40
   \   000031   48           DB 72
   \   000032   50           DB 80
   \   000033   FC           DB 252
   \   000034   50           DB 80
   \   000035   50           DB 80
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   10           DB 16
   \   00003B   38           DB 56
   \   00003C   54           DB 84
   \   00003D   54           DB 84
   \   00003E   30           DB 48
   \   00003F   18           DB 24
   \   000040   14           DB 20
   \   000041   54           DB 84
   \   000042   54           DB 84
   \   000043   38           DB 56
   \   000044   10           DB 16
   \   000045   00           DB 0
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   44           DB 68
   \   00004A   A8           DB 168
   \   00004B   A8           DB 168
   \   00004C   B0           DB 176
   \   00004D   54           DB 84
   \   00004E   1A           DB 26
   \   00004F   2A           DB 42
   \   000050   2A           DB 42
   \   000051   44           DB 68
   \   000052   00           DB 0
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   00           DB 0
   \   000057   20           DB 32
   \   000058   50           DB 80
   \   000059   50           DB 80
   \   00005A   60           DB 96
   \   00005B   AC           DB 172
   \   00005C   A8           DB 168
   \   00005D   98           DB 152
   \   00005E   92           DB 146
   \   00005F   7C           DB 124
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   60           DB 96
   \   000064   60           DB 96
   \   000065   20           DB 32
   \   000066   C0           DB 192
   \   000067   00           DB 0
   \   000068   00           DB 0
   \   000069   00           DB 0
   \   00006A   00           DB 0
   \   00006B   00           DB 0
   \   00006C   00           DB 0
   \   00006D   00           DB 0
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   00           DB 0
   \   000071   04           DB 4
   \   000072   08           DB 8
   \   000073   08           DB 8
   \   000074   10           DB 16
   \   000075   10           DB 16
   \   000076   10           DB 16
   \   000077   10           DB 16
   \   000078   10           DB 16
   \   000079   10           DB 16
   \   00007A   08           DB 8
   \   00007B   08           DB 8
   \   00007C   04           DB 4
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0
   \   000080   40           DB 64
   \   000081   20           DB 32
   \   000082   10           DB 16
   \   000083   08           DB 8
   \   000084   04           DB 4
   \   000085   08           DB 8
   \   000086   10           DB 16
   \   000087   20           DB 32
   \   000088   40           DB 64
   \   000089   00           DB 0
   \   00008A   00           DB 0
   \   00008B   00           DB 0
   \   00008C   00           DB 0
   \   00008D   00           DB 0
   \   00008E   00           DB 0
   \   00008F   10           DB 16
   \   000090   10           DB 16
   \   000091   D6           DB 214
   \   000092   38           DB 56
   \   000093   38           DB 56
   \   000094   D6           DB 214
   \   000095   10           DB 16
   \   000096   10           DB 16
   \   000097   00           DB 0
   \   000098   00           DB 0
   \   000099   00           DB 0
   \   00009A   00           DB 0
   \   00009B   00           DB 0
   \   00009C   00           DB 0
   \   00009D   10           DB 16
   \   00009E   10           DB 16
   \   00009F   10           DB 16
   \   0000A0   FE           DB 254
   \   0000A1   10           DB 16
   \   0000A2   10           DB 16
   \   0000A3   10           DB 16
   \   0000A4   00           DB 0
   \   0000A5   00           DB 0
   \   0000A6   00           DB 0
   \   0000A7   00           DB 0
   \   0000A8   00           DB 0
   \   0000A9   00           DB 0
   \   0000AA   00           DB 0
   \   0000AB   00           DB 0
   \   0000AC   00           DB 0
   \   0000AD   00           DB 0
   \   0000AE   00           DB 0
   \   0000AF   00           DB 0
   \   0000B0   00           DB 0
   \   0000B1   00           DB 0
   \   0000B2   60           DB 96
   \   0000B3   60           DB 96
   \   0000B4   20           DB 32
   \   0000B5   C0           DB 192
   \   0000B6   00           DB 0
   \   0000B7   00           DB 0
   \   0000B8   00           DB 0
   \   0000B9   00           DB 0
   \   0000BA   00           DB 0
   \   0000BB   00           DB 0
   \   0000BC   FC           DB 252
   \   0000BD   00           DB 0
   \   0000BE   00           DB 0
   \   0000BF   00           DB 0
   \   0000C0   00           DB 0
   \   0000C1   00           DB 0
   \   0000C2   00           DB 0
   \   0000C3   00           DB 0
   \   0000C4   00           DB 0
   \   0000C5   00           DB 0
   \   0000C6   00           DB 0
   \   0000C7   00           DB 0
   \   0000C8   00           DB 0
   \   0000C9   00           DB 0
   \   0000CA   00           DB 0
   \   0000CB   00           DB 0
   \   0000CC   00           DB 0
   \   0000CD   00           DB 0
   \   0000CE   60           DB 96
   \   0000CF   60           DB 96
   \   0000D0   00           DB 0
   \   0000D1   00           DB 0
   \   0000D2   00           DB 0
   \   0000D3   02           DB 2
   \   0000D4   04           DB 4
   \   0000D5   04           DB 4
   \   0000D6   04           DB 4
   \   0000D7   08           DB 8
   \   0000D8   08           DB 8
   \   0000D9   10           DB 16
   \   0000DA   10           DB 16
   \   0000DB   20           DB 32
   \   0000DC   20           DB 32
   \   0000DD   20           DB 32
   \   0000DE   40           DB 64
   \   0000DF   00           DB 0
   \   0000E0   00           DB 0
   \   0000E1   00           DB 0
   \   0000E2   00           DB 0
   \   0000E3   30           DB 48
   \   0000E4   48           DB 72
   \   0000E5   84           DB 132
   \   0000E6   84           DB 132
   \   0000E7   84           DB 132
   \   0000E8   84           DB 132
   \   0000E9   84           DB 132
   \   0000EA   48           DB 72
   \   0000EB   30           DB 48
   \   0000EC   00           DB 0
   \   0000ED   00           DB 0
   \   0000EE   00           DB 0
   \   0000EF   00           DB 0
   \   0000F0   00           DB 0
   \   0000F1   10           DB 16
   \   0000F2   70           DB 112
   \   0000F3   10           DB 16
   \   0000F4   10           DB 16
   \   0000F5   10           DB 16
   \   0000F6   10           DB 16
   \   0000F7   10           DB 16
   \   0000F8   10           DB 16
   \   0000F9   7C           DB 124
   \   0000FA   00           DB 0
   \   0000FB   00           DB 0
   \   0000FC   00           DB 0
   \   0000FD   00           DB 0
   \   0000FE   00           DB 0
   \   0000FF   38           DB 56
   \   000100   44           DB 68
   \   000101   44           DB 68
   \   000102   04           DB 4
   \   000103   08           DB 8
   \   000104   10           DB 16
   \   000105   20           DB 32
   \   000106   44           DB 68
   \   000107   7C           DB 124
   \   000108   00           DB 0
   \   000109   00           DB 0
   \   00010A   00           DB 0
   \   00010B   00           DB 0
   \   00010C   00           DB 0
   \   00010D   38           DB 56
   \   00010E   44           DB 68
   \   00010F   44           DB 68
   \   000110   18           DB 24
   \   000111   04           DB 4
   \   000112   04           DB 4
   \   000113   44           DB 68
   \   000114   44           DB 68
   \   000115   38           DB 56
   \   000116   00           DB 0
   \   000117   00           DB 0
   \   000118   00           DB 0
   \   000119   00           DB 0
   \   00011A   08           DB 8
   \   00011B   08           DB 8
   \   00011C   18           DB 24
   \   00011D   28           DB 40
   \   00011E   48           DB 72
   \   00011F   48           DB 72
   \   000120   88           DB 136
   \   000121   7C           DB 124
   \   000122   08           DB 8
   \   000123   1C           DB 28
   \   000124   00           DB 0
   \   000125   00           DB 0
   \   000126   00           DB 0
   \   000127   00           DB 0
   \   000128   00           DB 0
   \   000129   7C           DB 124
   \   00012A   40           DB 64
   \   00012B   40           DB 64
   \   00012C   78           DB 120
   \   00012D   44           DB 68
   \   00012E   04           DB 4
   \   00012F   44           DB 68
   \   000130   44           DB 68
   \   000131   38           DB 56
   \   000132   00           DB 0
   \   000133   00           DB 0
   \   000134   00           DB 0
   \   000135   00           DB 0
   \   000136   00           DB 0
   \   000137   3C           DB 60
   \   000138   44           DB 68
   \   000139   80           DB 128
   \   00013A   B8           DB 184
   \   00013B   C4           DB 196
   \   00013C   84           DB 132
   \   00013D   84           DB 132
   \   00013E   84           DB 132
   \   00013F   78           DB 120
   \   000140   00           DB 0
   \   000141   00           DB 0
   \   000142   00           DB 0
   \   000143   00           DB 0
   \   000144   00           DB 0
   \   000145   7C           DB 124
   \   000146   44           DB 68
   \   000147   48           DB 72
   \   000148   08           DB 8
   \   000149   10           DB 16
   \   00014A   10           DB 16
   \   00014B   10           DB 16
   \   00014C   10           DB 16
   \   00014D   10           DB 16
   \   00014E   00           DB 0
   \   00014F   00           DB 0
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   00           DB 0
   \   000153   78           DB 120
   \   000154   84           DB 132
   \   000155   84           DB 132
   \   000156   48           DB 72
   \   000157   78           DB 120
   \   000158   84           DB 132
   \   000159   84           DB 132
   \   00015A   84           DB 132
   \   00015B   78           DB 120
   \   00015C   00           DB 0
   \   00015D   00           DB 0
   \   00015E   00           DB 0
   \   00015F   00           DB 0
   \   000160   00           DB 0
   \   000161   78           DB 120
   \   000162   84           DB 132
   \   000163   84           DB 132
   \   000164   84           DB 132
   \   000165   8C           DB 140
   \   000166   74           DB 116
   \   000167   04           DB 4
   \   000168   88           DB 136
   \   000169   F0           DB 240
   \   00016A   00           DB 0
   \   00016B   00           DB 0
   \   00016C   00           DB 0
   \   00016D   00           DB 0
   \   00016E   00           DB 0
   \   00016F   00           DB 0
   \   000170   00           DB 0
   \   000171   30           DB 48
   \   000172   30           DB 48
   \   000173   00           DB 0
   \   000174   00           DB 0
   \   000175   00           DB 0
   \   000176   30           DB 48
   \   000177   30           DB 48
   \   000178   00           DB 0
   \   000179   00           DB 0
   \   00017A   00           DB 0
   \   00017B   00           DB 0
   \   00017C   00           DB 0
   \   00017D   00           DB 0
   \   00017E   00           DB 0
   \   00017F   00           DB 0
   \   000180   10           DB 16
   \   000181   00           DB 0
   \   000182   00           DB 0
   \   000183   00           DB 0
   \   000184   00           DB 0
   \   000185   10           DB 16
   \   000186   10           DB 16
   \   000187   20           DB 32
   \   000188   00           DB 0
   \   000189   00           DB 0
   \   00018A   04           DB 4
   \   00018B   08           DB 8
   \   00018C   10           DB 16
   \   00018D   20           DB 32
   \   00018E   40           DB 64
   \   00018F   20           DB 32
   \   000190   10           DB 16
   \   000191   08           DB 8
   \   000192   04           DB 4
   \   000193   00           DB 0
   \   000194   00           DB 0
   \   000195   00           DB 0
   \   000196   00           DB 0
   \   000197   00           DB 0
   \   000198   00           DB 0
   \   000199   00           DB 0
   \   00019A   00           DB 0
   \   00019B   FC           DB 252
   \   00019C   00           DB 0
   \   00019D   00           DB 0
   \   00019E   FC           DB 252
   \   00019F   00           DB 0
   \   0001A0   00           DB 0
   \   0001A1   00           DB 0
   \   0001A2   00           DB 0
   \   0001A3   00           DB 0
   \   0001A4   00           DB 0
   \   0001A5   00           DB 0
   \   0001A6   40           DB 64
   \   0001A7   20           DB 32
   \   0001A8   10           DB 16
   \   0001A9   08           DB 8
   \   0001AA   04           DB 4
   \   0001AB   08           DB 8
   \   0001AC   10           DB 16
   \   0001AD   20           DB 32
   \   0001AE   40           DB 64
   \   0001AF   00           DB 0
   \   0001B0   00           DB 0
   \   0001B1   00           DB 0
   \   0001B2   00           DB 0
   \   0001B3   00           DB 0
   \   0001B4   78           DB 120
   \   0001B5   84           DB 132
   \   0001B6   84           DB 132
   \   0001B7   84           DB 132
   \   0001B8   08           DB 8
   \   0001B9   10           DB 16
   \   0001BA   10           DB 16
   \   0001BB   00           DB 0
   \   0001BC   30           DB 48
   \   0001BD   30           DB 48
   \   0001BE   00           DB 0
   \   0001BF   00           DB 0
   \   0001C0   00           DB 0
   \   0001C1   00           DB 0
   \   0001C2   00           DB 0
   \   0001C3   38           DB 56
   \   0001C4   44           DB 68
   \   0001C5   9A           DB 154
   \   0001C6   AA           DB 170
   \   0001C7   AA           DB 170
   \   0001C8   AA           DB 170
   \   0001C9   B4           DB 180
   \   0001CA   42           DB 66
   \   0001CB   3C           DB 60
   \   0001CC   00           DB 0
   \   0001CD   00           DB 0
   \   0001CE   00           DB 0
   \   0001CF   00           DB 0
   \   0001D0   00           DB 0
   \   0001D1   10           DB 16
   \   0001D2   10           DB 16
   \   0001D3   28           DB 40
   \   0001D4   28           DB 40
   \   0001D5   28           DB 40
   \   0001D6   38           DB 56
   \   0001D7   44           DB 68
   \   0001D8   44           DB 68
   \   0001D9   EE           DB 238
   \   0001DA   00           DB 0
   \   0001DB   00           DB 0
   \   0001DC   00           DB 0
   \   0001DD   00           DB 0
   \   0001DE   00           DB 0
   \   0001DF   F8           DB 248
   \   0001E0   44           DB 68
   \   0001E1   44           DB 68
   \   0001E2   78           DB 120
   \   0001E3   44           DB 68
   \   0001E4   44           DB 68
   \   0001E5   44           DB 68
   \   0001E6   44           DB 68
   \   0001E7   F8           DB 248
   \   0001E8   00           DB 0
   \   0001E9   00           DB 0
   \   0001EA   00           DB 0
   \   0001EB   00           DB 0
   \   0001EC   00           DB 0
   \   0001ED   3C           DB 60
   \   0001EE   44           DB 68
   \   0001EF   84           DB 132
   \   0001F0   80           DB 128
   \   0001F1   80           DB 128
   \   0001F2   80           DB 128
   \   0001F3   80           DB 128
   \   0001F4   44           DB 68
   \   0001F5   38           DB 56
   \   0001F6   00           DB 0
   \   0001F7   00           DB 0
   \   0001F8   00           DB 0
   \   0001F9   00           DB 0
   \   0001FA   00           DB 0
   \   0001FB   F0           DB 240
   \   0001FC   48           DB 72
   \   0001FD   44           DB 68
   \   0001FE   44           DB 68
   \   0001FF   44           DB 68
   \   000200   44           DB 68
   \   000201   44           DB 68
   \   000202   48           DB 72
   \   000203   F0           DB 240
   \   000204   00           DB 0
   \   000205   00           DB 0
   \   000206   00           DB 0
   \   000207   00           DB 0
   \   000208   00           DB 0
   \   000209   FC           DB 252
   \   00020A   44           DB 68
   \   00020B   40           DB 64
   \   00020C   48           DB 72
   \   00020D   78           DB 120
   \   00020E   48           DB 72
   \   00020F   40           DB 64
   \   000210   44           DB 68
   \   000211   FC           DB 252
   \   000212   00           DB 0
   \   000213   00           DB 0
   \   000214   00           DB 0
   \   000215   00           DB 0
   \   000216   00           DB 0
   \   000217   FC           DB 252
   \   000218   42           DB 66
   \   000219   40           DB 64
   \   00021A   48           DB 72
   \   00021B   78           DB 120
   \   00021C   48           DB 72
   \   00021D   40           DB 64
   \   00021E   40           DB 64
   \   00021F   E0           DB 224
   \   000220   00           DB 0
   \   000221   00           DB 0
   \   000222   00           DB 0
   \   000223   00           DB 0
   \   000224   00           DB 0
   \   000225   3C           DB 60
   \   000226   44           DB 68
   \   000227   84           DB 132
   \   000228   80           DB 128
   \   000229   80           DB 128
   \   00022A   8E           DB 142
   \   00022B   84           DB 132
   \   00022C   44           DB 68
   \   00022D   38           DB 56
   \   00022E   00           DB 0
   \   00022F   00           DB 0
   \   000230   00           DB 0
   \   000231   00           DB 0
   \   000232   00           DB 0
   \   000233   EE           DB 238
   \   000234   44           DB 68
   \   000235   44           DB 68
   \   000236   44           DB 68
   \   000237   7C           DB 124
   \   000238   44           DB 68
   \   000239   44           DB 68
   \   00023A   44           DB 68
   \   00023B   EE           DB 238
   \   00023C   00           DB 0
   \   00023D   00           DB 0
   \   00023E   00           DB 0
   \   00023F   00           DB 0
   \   000240   00           DB 0
   \   000241   7C           DB 124
   \   000242   10           DB 16
   \   000243   10           DB 16
   \   000244   10           DB 16
   \   000245   10           DB 16
   \   000246   10           DB 16
   \   000247   10           DB 16
   \   000248   10           DB 16
   \   000249   7C           DB 124
   \   00024A   00           DB 0
   \   00024B   00           DB 0
   \   00024C   00           DB 0
   \   00024D   00           DB 0
   \   00024E   00           DB 0
   \   00024F   7C           DB 124
   \   000250   10           DB 16
   \   000251   10           DB 16
   \   000252   10           DB 16
   \   000253   10           DB 16
   \   000254   10           DB 16
   \   000255   10           DB 16
   \   000256   10           DB 16
   \   000257   10           DB 16
   \   000258   90           DB 144
   \   000259   E0           DB 224
   \   00025A   00           DB 0
   \   00025B   00           DB 0
   \   00025C   00           DB 0
   \   00025D   EE           DB 238
   \   00025E   44           DB 68
   \   00025F   48           DB 72
   \   000260   50           DB 80
   \   000261   70           DB 112
   \   000262   48           DB 72
   \   000263   48           DB 72
   \   000264   44           DB 68
   \   000265   EE           DB 238
   \   000266   00           DB 0
   \   000267   00           DB 0
   \   000268   00           DB 0
   \   000269   00           DB 0
   \   00026A   00           DB 0
   \   00026B   E0           DB 224
   \   00026C   40           DB 64
   \   00026D   40           DB 64
   \   00026E   40           DB 64
   \   00026F   40           DB 64
   \   000270   40           DB 64
   \   000271   40           DB 64
   \   000272   44           DB 68
   \   000273   FC           DB 252
   \   000274   00           DB 0
   \   000275   00           DB 0
   \   000276   00           DB 0
   \   000277   00           DB 0
   \   000278   00           DB 0
   \   000279   EE           DB 238
   \   00027A   6C           DB 108
   \   00027B   6C           DB 108
   \   00027C   6C           DB 108
   \   00027D   54           DB 84
   \   00027E   54           DB 84
   \   00027F   54           DB 84
   \   000280   54           DB 84
   \   000281   D6           DB 214
   \   000282   00           DB 0
   \   000283   00           DB 0
   \   000284   00           DB 0
   \   000285   00           DB 0
   \   000286   00           DB 0
   \   000287   EE           DB 238
   \   000288   64           DB 100
   \   000289   64           DB 100
   \   00028A   54           DB 84
   \   00028B   54           DB 84
   \   00028C   54           DB 84
   \   00028D   4C           DB 76
   \   00028E   4C           DB 76
   \   00028F   E4           DB 228
   \   000290   00           DB 0
   \   000291   00           DB 0
   \   000292   00           DB 0
   \   000293   00           DB 0
   \   000294   00           DB 0
   \   000295   30           DB 48
   \   000296   48           DB 72
   \   000297   84           DB 132
   \   000298   84           DB 132
   \   000299   84           DB 132
   \   00029A   84           DB 132
   \   00029B   84           DB 132
   \   00029C   48           DB 72
   \   00029D   30           DB 48
   \   00029E   00           DB 0
   \   00029F   00           DB 0
   \   0002A0   00           DB 0
   \   0002A1   00           DB 0
   \   0002A2   00           DB 0
   \   0002A3   F8           DB 248
   \   0002A4   44           DB 68
   \   0002A5   44           DB 68
   \   0002A6   44           DB 68
   \   0002A7   78           DB 120
   \   0002A8   40           DB 64
   \   0002A9   40           DB 64
   \   0002AA   40           DB 64
   \   0002AB   E0           DB 224
   \   0002AC   00           DB 0
   \   0002AD   00           DB 0
   \   0002AE   00           DB 0
   \   0002AF   00           DB 0
   \   0002B0   00           DB 0
   \   0002B1   30           DB 48
   \   0002B2   48           DB 72
   \   0002B3   84           DB 132
   \   0002B4   84           DB 132
   \   0002B5   84           DB 132
   \   0002B6   84           DB 132
   \   0002B7   B4           DB 180
   \   0002B8   48           DB 72
   \   0002B9   38           DB 56
   \   0002BA   0C           DB 12
   \   0002BB   00           DB 0
   \   0002BC   00           DB 0
   \   0002BD   00           DB 0
   \   0002BE   00           DB 0
   \   0002BF   F8           DB 248
   \   0002C0   44           DB 68
   \   0002C1   44           DB 68
   \   0002C2   78           DB 120
   \   0002C3   50           DB 80
   \   0002C4   48           DB 72
   \   0002C5   48           DB 72
   \   0002C6   44           DB 68
   \   0002C7   E6           DB 230
   \   0002C8   00           DB 0
   \   0002C9   00           DB 0
   \   0002CA   00           DB 0
   \   0002CB   00           DB 0
   \   0002CC   00           DB 0
   \   0002CD   3C           DB 60
   \   0002CE   44           DB 68
   \   0002CF   40           DB 64
   \   0002D0   20           DB 32
   \   0002D1   18           DB 24
   \   0002D2   04           DB 4
   \   0002D3   04           DB 4
   \   0002D4   44           DB 68
   \   0002D5   78           DB 120
   \   0002D6   00           DB 0
   \   0002D7   00           DB 0
   \   0002D8   00           DB 0
   \   0002D9   00           DB 0
   \   0002DA   00           DB 0
   \   0002DB   FE           DB 254
   \   0002DC   92           DB 146
   \   0002DD   10           DB 16
   \   0002DE   10           DB 16
   \   0002DF   10           DB 16
   \   0002E0   10           DB 16
   \   0002E1   10           DB 16
   \   0002E2   10           DB 16
   \   0002E3   38           DB 56
   \   0002E4   00           DB 0
   \   0002E5   00           DB 0
   \   0002E6   00           DB 0
   \   0002E7   00           DB 0
   \   0002E8   00           DB 0
   \   0002E9   EE           DB 238
   \   0002EA   44           DB 68
   \   0002EB   44           DB 68
   \   0002EC   44           DB 68
   \   0002ED   44           DB 68
   \   0002EE   44           DB 68
   \   0002EF   44           DB 68
   \   0002F0   44           DB 68
   \   0002F1   38           DB 56
   \   0002F2   00           DB 0
   \   0002F3   00           DB 0
   \   0002F4   00           DB 0
   \   0002F5   00           DB 0
   \   0002F6   00           DB 0
   \   0002F7   EE           DB 238
   \   0002F8   44           DB 68
   \   0002F9   44           DB 68
   \   0002FA   28           DB 40
   \   0002FB   28           DB 40
   \   0002FC   28           DB 40
   \   0002FD   28           DB 40
   \   0002FE   10           DB 16
   \   0002FF   10           DB 16
   \   000300   00           DB 0
   \   000301   00           DB 0
   \   000302   00           DB 0
   \   000303   00           DB 0
   \   000304   00           DB 0
   \   000305   D6           DB 214
   \   000306   54           DB 84
   \   000307   54           DB 84
   \   000308   54           DB 84
   \   000309   54           DB 84
   \   00030A   6C           DB 108
   \   00030B   28           DB 40
   \   00030C   28           DB 40
   \   00030D   28           DB 40
   \   00030E   00           DB 0
   \   00030F   00           DB 0
   \   000310   00           DB 0
   \   000311   00           DB 0
   \   000312   00           DB 0
   \   000313   EE           DB 238
   \   000314   44           DB 68
   \   000315   28           DB 40
   \   000316   28           DB 40
   \   000317   10           DB 16
   \   000318   28           DB 40
   \   000319   28           DB 40
   \   00031A   44           DB 68
   \   00031B   EE           DB 238
   \   00031C   00           DB 0
   \   00031D   00           DB 0
   \   00031E   00           DB 0
   \   00031F   00           DB 0
   \   000320   00           DB 0
   \   000321   EE           DB 238
   \   000322   44           DB 68
   \   000323   28           DB 40
   \   000324   28           DB 40
   \   000325   10           DB 16
   \   000326   10           DB 16
   \   000327   10           DB 16
   \   000328   10           DB 16
   \   000329   38           DB 56
   \   00032A   00           DB 0
   \   00032B   00           DB 0
   \   00032C   00           DB 0
   \   00032D   00           DB 0
   \   00032E   00           DB 0
   \   00032F   7C           DB 124
   \   000330   88           DB 136
   \   000331   08           DB 8
   \   000332   10           DB 16
   \   000333   20           DB 32
   \   000334   20           DB 32
   \   000335   40           DB 64
   \   000336   44           DB 68
   \   000337   FC           DB 252
   \   000338   00           DB 0
   \   000339   00           DB 0
   \   00033A   00           DB 0
   \   00033B   1C           DB 28
   \   00033C   10           DB 16
   \   00033D   10           DB 16
   \   00033E   10           DB 16
   \   00033F   10           DB 16
   \   000340   10           DB 16
   \   000341   10           DB 16
   \   000342   10           DB 16
   \   000343   10           DB 16
   \   000344   10           DB 16
   \   000345   10           DB 16
   \   000346   1C           DB 28
   \   000347   00           DB 0
   \   000348   00           DB 0
   \   000349   70           DB 112
   \   00034A   10           DB 16
   \   00034B   10           DB 16
   \   00034C   10           DB 16
   \   00034D   10           DB 16
   \   00034E   10           DB 16
   \   00034F   10           DB 16
   \   000350   10           DB 16
   \   000351   10           DB 16
   \   000352   10           DB 16
   \   000353   10           DB 16
   \   000354   70           DB 112
   \   000355   00           DB 0
   \   000356   00           DB 0
   \   000357   70           DB 112
   \   000358   10           DB 16
   \   000359   10           DB 16
   \   00035A   10           DB 16
   \   00035B   10           DB 16
   \   00035C   10           DB 16
   \   00035D   10           DB 16
   \   00035E   10           DB 16
   \   00035F   10           DB 16
   \   000360   10           DB 16
   \   000361   10           DB 16
   \   000362   70           DB 112
   \   000363   00           DB 0
   \   000364   00           DB 0
   \   000365   10           DB 16
   \   000366   28           DB 40
   \   000367   00           DB 0
   \   000368   00           DB 0
   \   000369   00           DB 0
   \   00036A   00           DB 0
   \   00036B   00           DB 0
   \   00036C   00           DB 0
   \   00036D   00           DB 0
   \   00036E   00           DB 0
   \   00036F   00           DB 0
   \   000370   00           DB 0
   \   000371   00           DB 0
   \   000372   00           DB 0
   \   000373   00           DB 0
   \   000374   00           DB 0
   \   000375   00           DB 0
   \   000376   00           DB 0
   \   000377   00           DB 0
   \   000378   00           DB 0
   \   000379   00           DB 0
   \   00037A   00           DB 0
   \   00037B   00           DB 0
   \   00037C   00           DB 0
   \   00037D   00           DB 0
   \   00037E   00           DB 0
   \   00037F   FE           DB 254
   \   000380   00           DB 0
   \   000381   60           DB 96
   \   000382   60           DB 96
   \   000383   20           DB 32
   \   000384   C0           DB 192
   \   000385   00           DB 0
   \   000386   00           DB 0
   \   000387   00           DB 0
   \   000388   00           DB 0
   \   000389   00           DB 0
   \   00038A   00           DB 0
   \   00038B   00           DB 0
   \   00038C   00           DB 0
   \   00038D   00           DB 0
   \   00038E   00           DB 0
   \   00038F   00           DB 0
   \   000390   00           DB 0
   \   000391   00           DB 0
   \   000392   00           DB 0
   \   000393   00           DB 0
   \   000394   38           DB 56
   \   000395   44           DB 68
   \   000396   1C           DB 28
   \   000397   24           DB 36
   \   000398   44           DB 68
   \   000399   3E           DB 62
   \   00039A   00           DB 0
   \   00039B   00           DB 0
   \   00039C   00           DB 0
   \   00039D   00           DB 0
   \   00039E   00           DB 0
   \   00039F   C0           DB 192
   \   0003A0   40           DB 64
   \   0003A1   40           DB 64
   \   0003A2   78           DB 120
   \   0003A3   44           DB 68
   \   0003A4   44           DB 68
   \   0003A5   44           DB 68
   \   0003A6   44           DB 68
   \   0003A7   78           DB 120
   \   0003A8   00           DB 0
   \   0003A9   00           DB 0
   \   0003AA   00           DB 0
   \   0003AB   00           DB 0
   \   0003AC   00           DB 0
   \   0003AD   00           DB 0
   \   0003AE   00           DB 0
   \   0003AF   00           DB 0
   \   0003B0   3C           DB 60
   \   0003B1   44           DB 68
   \   0003B2   40           DB 64
   \   0003B3   40           DB 64
   \   0003B4   44           DB 68
   \   0003B5   38           DB 56
   \   0003B6   00           DB 0
   \   0003B7   00           DB 0
   \   0003B8   00           DB 0
   \   0003B9   00           DB 0
   \   0003BA   00           DB 0
   \   0003BB   0C           DB 12
   \   0003BC   04           DB 4
   \   0003BD   04           DB 4
   \   0003BE   3C           DB 60
   \   0003BF   44           DB 68
   \   0003C0   44           DB 68
   \   0003C1   44           DB 68
   \   0003C2   44           DB 68
   \   0003C3   3E           DB 62
   \   0003C4   00           DB 0
   \   0003C5   00           DB 0
   \   0003C6   00           DB 0
   \   0003C7   00           DB 0
   \   0003C8   00           DB 0
   \   0003C9   00           DB 0
   \   0003CA   00           DB 0
   \   0003CB   00           DB 0
   \   0003CC   38           DB 56
   \   0003CD   44           DB 68
   \   0003CE   7C           DB 124
   \   0003CF   40           DB 64
   \   0003D0   44           DB 68
   \   0003D1   38           DB 56
   \   0003D2   00           DB 0
   \   0003D3   00           DB 0
   \   0003D4   00           DB 0
   \   0003D5   00           DB 0
   \   0003D6   00           DB 0
   \   0003D7   1C           DB 28
   \   0003D8   24           DB 36
   \   0003D9   20           DB 32
   \   0003DA   F8           DB 248
   \   0003DB   20           DB 32
   \   0003DC   20           DB 32
   \   0003DD   20           DB 32
   \   0003DE   20           DB 32
   \   0003DF   78           DB 120
   \   0003E0   00           DB 0
   \   0003E1   00           DB 0
   \   0003E2   00           DB 0
   \   0003E3   00           DB 0
   \   0003E4   00           DB 0
   \   0003E5   00           DB 0
   \   0003E6   00           DB 0
   \   0003E7   00           DB 0
   \   0003E8   3C           DB 60
   \   0003E9   48           DB 72
   \   0003EA   48           DB 72
   \   0003EB   30           DB 48
   \   0003EC   40           DB 64
   \   0003ED   78           DB 120
   \   0003EE   44           DB 68
   \   0003EF   38           DB 56
   \   0003F0   00           DB 0
   \   0003F1   00           DB 0
   \   0003F2   00           DB 0
   \   0003F3   C0           DB 192
   \   0003F4   40           DB 64
   \   0003F5   40           DB 64
   \   0003F6   58           DB 88
   \   0003F7   64           DB 100
   \   0003F8   44           DB 68
   \   0003F9   44           DB 68
   \   0003FA   44           DB 68
   \   0003FB   EE           DB 238
   \   0003FC   00           DB 0
   \   0003FD   00           DB 0
   \   0003FE   00           DB 0
   \   0003FF   00           DB 0
   \   000400   00           DB 0
   \   000401   10           DB 16
   \   000402   00           DB 0
   \   000403   00           DB 0
   \   000404   70           DB 112
   \   000405   10           DB 16
   \   000406   10           DB 16
   \   000407   10           DB 16
   \   000408   10           DB 16
   \   000409   7C           DB 124
   \   00040A   00           DB 0
   \   00040B   00           DB 0
   \   00040C   00           DB 0
   \   00040D   00           DB 0
   \   00040E   00           DB 0
   \   00040F   08           DB 8
   \   000410   00           DB 0
   \   000411   00           DB 0
   \   000412   38           DB 56
   \   000413   08           DB 8
   \   000414   08           DB 8
   \   000415   08           DB 8
   \   000416   08           DB 8
   \   000417   08           DB 8
   \   000418   08           DB 8
   \   000419   70           DB 112
   \   00041A   00           DB 0
   \   00041B   00           DB 0
   \   00041C   00           DB 0
   \   00041D   C0           DB 192
   \   00041E   40           DB 64
   \   00041F   40           DB 64
   \   000420   5C           DB 92
   \   000421   48           DB 72
   \   000422   50           DB 80
   \   000423   70           DB 112
   \   000424   48           DB 72
   \   000425   EC           DB 236
   \   000426   00           DB 0
   \   000427   00           DB 0
   \   000428   00           DB 0
   \   000429   00           DB 0
   \   00042A   00           DB 0
   \   00042B   70           DB 112
   \   00042C   10           DB 16
   \   00042D   10           DB 16
   \   00042E   10           DB 16
   \   00042F   10           DB 16
   \   000430   10           DB 16
   \   000431   10           DB 16
   \   000432   10           DB 16
   \   000433   7C           DB 124
   \   000434   00           DB 0
   \   000435   00           DB 0
   \   000436   00           DB 0
   \   000437   00           DB 0
   \   000438   00           DB 0
   \   000439   00           DB 0
   \   00043A   00           DB 0
   \   00043B   00           DB 0
   \   00043C   F8           DB 248
   \   00043D   54           DB 84
   \   00043E   54           DB 84
   \   00043F   54           DB 84
   \   000440   54           DB 84
   \   000441   D6           DB 214
   \   000442   00           DB 0
   \   000443   00           DB 0
   \   000444   00           DB 0
   \   000445   00           DB 0
   \   000446   00           DB 0
   \   000447   00           DB 0
   \   000448   00           DB 0
   \   000449   00           DB 0
   \   00044A   D8           DB 216
   \   00044B   64           DB 100
   \   00044C   44           DB 68
   \   00044D   44           DB 68
   \   00044E   44           DB 68
   \   00044F   EE           DB 238
   \   000450   00           DB 0
   \   000451   00           DB 0
   \   000452   00           DB 0
   \   000453   00           DB 0
   \   000454   00           DB 0
   \   000455   00           DB 0
   \   000456   00           DB 0
   \   000457   00           DB 0
   \   000458   38           DB 56
   \   000459   44           DB 68
   \   00045A   44           DB 68
   \   00045B   44           DB 68
   \   00045C   44           DB 68
   \   00045D   38           DB 56
   \   00045E   00           DB 0
   \   00045F   00           DB 0
   \   000460   00           DB 0
   \   000461   00           DB 0
   \   000462   00           DB 0
   \   000463   00           DB 0
   \   000464   00           DB 0
   \   000465   00           DB 0
   \   000466   F8           DB 248
   \   000467   44           DB 68
   \   000468   44           DB 68
   \   000469   44           DB 68
   \   00046A   44           DB 68
   \   00046B   78           DB 120
   \   00046C   40           DB 64
   \   00046D   E0           DB 224
   \   00046E   00           DB 0
   \   00046F   00           DB 0
   \   000470   00           DB 0
   \   000471   00           DB 0
   \   000472   00           DB 0
   \   000473   00           DB 0
   \   000474   3C           DB 60
   \   000475   44           DB 68
   \   000476   44           DB 68
   \   000477   44           DB 68
   \   000478   44           DB 68
   \   000479   3C           DB 60
   \   00047A   04           DB 4
   \   00047B   0E           DB 14
   \   00047C   00           DB 0
   \   00047D   00           DB 0
   \   00047E   00           DB 0
   \   00047F   00           DB 0
   \   000480   00           DB 0
   \   000481   00           DB 0
   \   000482   EC           DB 236
   \   000483   30           DB 48
   \   000484   20           DB 32
   \   000485   20           DB 32
   \   000486   20           DB 32
   \   000487   F8           DB 248
   \   000488   00           DB 0
   \   000489   00           DB 0
   \   00048A   00           DB 0
   \   00048B   00           DB 0
   \   00048C   00           DB 0
   \   00048D   00           DB 0
   \   00048E   00           DB 0
   \   00048F   00           DB 0
   \   000490   3C           DB 60
   \   000491   44           DB 68
   \   000492   30           DB 48
   \   000493   08           DB 8
   \   000494   44           DB 68
   \   000495   78           DB 120
   \   000496   00           DB 0
   \   000497   00           DB 0
   \   000498   00           DB 0
   \   000499   00           DB 0
   \   00049A   00           DB 0
   \   00049B   00           DB 0
   \   00049C   10           DB 16
   \   00049D   10           DB 16
   \   00049E   7C           DB 124
   \   00049F   10           DB 16
   \   0004A0   10           DB 16
   \   0004A1   10           DB 16
   \   0004A2   10           DB 16
   \   0004A3   0C           DB 12
   \   0004A4   00           DB 0
   \   0004A5   00           DB 0
   \   0004A6   00           DB 0
   \   0004A7   00           DB 0
   \   0004A8   00           DB 0
   \   0004A9   00           DB 0
   \   0004AA   00           DB 0
   \   0004AB   00           DB 0
   \   0004AC   CC           DB 204
   \   0004AD   44           DB 68
   \   0004AE   44           DB 68
   \   0004AF   44           DB 68
   \   0004B0   44           DB 68
   \   0004B1   3E           DB 62
   \   0004B2   00           DB 0
   \   0004B3   00           DB 0
   \   0004B4   00           DB 0
   \   0004B5   00           DB 0
   \   0004B6   00           DB 0
   \   0004B7   00           DB 0
   \   0004B8   00           DB 0
   \   0004B9   00           DB 0
   \   0004BA   EE           DB 238
   \   0004BB   44           DB 68
   \   0004BC   28           DB 40
   \   0004BD   28           DB 40
   \   0004BE   28           DB 40
   \   0004BF   10           DB 16
   \   0004C0   00           DB 0
   \   0004C1   00           DB 0
   \   0004C2   00           DB 0
   \   0004C3   00           DB 0
   \   0004C4   00           DB 0
   \   0004C5   00           DB 0
   \   0004C6   00           DB 0
   \   0004C7   00           DB 0
   \   0004C8   D6           DB 214
   \   0004C9   54           DB 84
   \   0004CA   54           DB 84
   \   0004CB   54           DB 84
   \   0004CC   28           DB 40
   \   0004CD   28           DB 40
   \   0004CE   00           DB 0
   \   0004CF   00           DB 0
   \   0004D0   00           DB 0
   \   0004D1   00           DB 0
   \   0004D2   00           DB 0
   \   0004D3   00           DB 0
   \   0004D4   00           DB 0
   \   0004D5   00           DB 0
   \   0004D6   DC           DB 220
   \   0004D7   48           DB 72
   \   0004D8   30           DB 48
   \   0004D9   30           DB 48
   \   0004DA   48           DB 72
   \   0004DB   EC           DB 236
   \   0004DC   00           DB 0
   \   0004DD   00           DB 0
   \   0004DE   00           DB 0
   \   0004DF   00           DB 0
   \   0004E0   00           DB 0
   \   0004E1   00           DB 0
   \   0004E2   00           DB 0
   \   0004E3   00           DB 0
   \   0004E4   EE           DB 238
   \   0004E5   44           DB 68
   \   0004E6   28           DB 40
   \   0004E7   28           DB 40
   \   0004E8   10           DB 16
   \   0004E9   10           DB 16
   \   0004EA   20           DB 32
   \   0004EB   E0           DB 224
   \   0004EC   00           DB 0
   \   0004ED   00           DB 0
   \   0004EE   00           DB 0
   \   0004EF   00           DB 0
   \   0004F0   00           DB 0
   \   0004F1   00           DB 0
   \   0004F2   7C           DB 124
   \   0004F3   48           DB 72
   \   0004F4   10           DB 16
   \   0004F5   10           DB 16
   \   0004F6   24           DB 36
   \   0004F7   7C           DB 124
   \   0004F8   00           DB 0
   \   0004F9   00           DB 0
   \   0004FA   10           DB 16
   \   0004FB   10           DB 16
   \   0004FC   10           DB 16
   \   0004FD   10           DB 16
   \   0004FE   10           DB 16
   \   0004FF   10           DB 16
   \   000500   10           DB 16
   \   000501   10           DB 16
   \   000502   10           DB 16
   \   000503   10           DB 16
   \   000504   10           DB 16
   \   000505   10           DB 16
   \   000506   10           DB 16
   \   000507   10           DB 16
    241          {
    242          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//" ",0//
    243          {0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x30,0x30,0x00,0x00},//"!",1//
    244          {0x00,0x14,0x28,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//""",2//
    245          {0x00,0x00,0x00,0x28,0x28,0xFC,0x28,0x48,0x50,0xFC,0x50,0x50,0x00,0x00},//"#",3//
    246          {0x00,0x00,0x10,0x38,0x54,0x54,0x30,0x18,0x14,0x54,0x54,0x38,0x10,0x00},//"$",4//
    247          {0x00,0x00,0x00,0x44,0xA8,0xA8,0xB0,0x54,0x1A,0x2A,0x2A,0x44,0x00,0x00},//"%",5//
    248          {0x00,0x00,0x00,0x20,0x50,0x50,0x60,0xAC,0xA8,0x98,0x92,0x7C,0x00,0x00},//"&",6//
    249          {0x00,0x60,0x60,0x20,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"'",7//
    250          {0x00,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x00},//"(",8//
    251          {0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00,0x00},//">",9//
    252          {0x00,0x00,0x00,0x10,0x10,0xD6,0x38,0x38,0xD6,0x10,0x10,0x00,0x00,0x00},//"*",10//
    253          {0x00,0x00,0x00,0x10,0x10,0x10,0xFE,0x10,0x10,0x10,0x00,0x00,0x00,0x00},//"+",11//
    254          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x20,0xC0},//",",12//
    255          {0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"-",13//
    256          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00,0x00},//".",14//
    257          {0x00,0x02,0x04,0x04,0x04,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x00},//"/",15//
    258          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0x84,0x48,0x30,0x00,0x00},//"0",16//
    259          {0x00,0x00,0x00,0x10,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"1",17//
    260          {0x00,0x00,0x00,0x38,0x44,0x44,0x04,0x08,0x10,0x20,0x44,0x7C,0x00,0x00},//"2",18//
    261          {0x00,0x00,0x00,0x38,0x44,0x44,0x18,0x04,0x04,0x44,0x44,0x38,0x00,0x00},//"3",19//
    262          {0x00,0x00,0x08,0x08,0x18,0x28,0x48,0x48,0x88,0x7C,0x08,0x1C,0x00,0x00},//"4",20//
    263          {0x00,0x00,0x00,0x7C,0x40,0x40,0x78,0x44,0x04,0x44,0x44,0x38,0x00,0x00},//"5",21//
    264          {0x00,0x00,0x00,0x3C,0x44,0x80,0xB8,0xC4,0x84,0x84,0x84,0x78,0x00,0x00},//"6",22//
    265          {0x00,0x00,0x00,0x7C,0x44,0x48,0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00},//"7",23//
    266          {0x00,0x00,0x00,0x78,0x84,0x84,0x48,0x78,0x84,0x84,0x84,0x78,0x00,0x00},//"8",24//
    267          {0x00,0x00,0x00,0x78,0x84,0x84,0x84,0x8C,0x74,0x04,0x88,0xF0,0x00,0x00},//"9",25//
    268          {0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x30,0x30,0x00,0x00},//":",26//
    269          {0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x10,0x20},//";",27//
    270          {0x00,0x00,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x00,0x00,0x00},//"<",28//
    271          {0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00},//"=",29//
    272          {0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00,0x00},//">",30//
    273          {0x00,0x00,0x78,0x84,0x84,0x84,0x08,0x10,0x10,0x00,0x30,0x30,0x00,0x00},//"?",31//
    274          {0x00,0x00,0x00,0x38,0x44,0x9A,0xAA,0xAA,0xAA,0xB4,0x42,0x3C,0x00,0x00},//"@",32//
    275          {0x00,0x00,0x00,0x10,0x10,0x28,0x28,0x28,0x38,0x44,0x44,0xEE,0x00,0x00},//"A",33//
    276          {0x00,0x00,0x00,0xF8,0x44,0x44,0x78,0x44,0x44,0x44,0x44,0xF8,0x00,0x00},//"B",34//
    277          {0x00,0x00,0x00,0x3C,0x44,0x84,0x80,0x80,0x80,0x80,0x44,0x38,0x00,0x00},//"C",35//
    278          {0x00,0x00,0x00,0xF0,0x48,0x44,0x44,0x44,0x44,0x44,0x48,0xF0,0x00,0x00},//"D",36//
    279          {0x00,0x00,0x00,0xFC,0x44,0x40,0x48,0x78,0x48,0x40,0x44,0xFC,0x00,0x00},//"E",37//
    280          {0x00,0x00,0x00,0xFC,0x42,0x40,0x48,0x78,0x48,0x40,0x40,0xE0,0x00,0x00},//"F",38//
    281          {0x00,0x00,0x00,0x3C,0x44,0x84,0x80,0x80,0x8E,0x84,0x44,0x38,0x00,0x00},//"G",39//
    282          {0x00,0x00,0x00,0xEE,0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0xEE,0x00,0x00},//"H",40//
    283          {0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"I",41//
    284          {0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x90,0xE0},//"J",42//
    285          {0x00,0x00,0x00,0xEE,0x44,0x48,0x50,0x70,0x48,0x48,0x44,0xEE,0x00,0x00},//"K",43//
    286          {0x00,0x00,0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x40,0x44,0xFC,0x00,0x00},//"L",44//
    287          {0x00,0x00,0x00,0xEE,0x6C,0x6C,0x6C,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},//"M",45//
    288          {0x00,0x00,0x00,0xEE,0x64,0x64,0x54,0x54,0x54,0x4C,0x4C,0xE4,0x00,0x00},//"N",46//
    289          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0x84,0x48,0x30,0x00,0x00},//"O",47//
    290          {0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78,0x40,0x40,0x40,0xE0,0x00,0x00},//"P",48//
    291          {0x00,0x00,0x00,0x30,0x48,0x84,0x84,0x84,0x84,0xB4,0x48,0x38,0x0C,0x00},//"Q",49//
    292          {0x00,0x00,0x00,0xF8,0x44,0x44,0x78,0x50,0x48,0x48,0x44,0xE6,0x00,0x00},//"R",50//
    293          {0x00,0x00,0x00,0x3C,0x44,0x40,0x20,0x18,0x04,0x04,0x44,0x78,0x00,0x00},//"S",51//
    294          {0x00,0x00,0x00,0xFE,0x92,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},//"T",52//
    295          {0x00,0x00,0x00,0xEE,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x38,0x00,0x00},//"U",53//
    296          {0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x28,0x28,0x10,0x10,0x00,0x00},//"V",54//
    297          {0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x54,0x6C,0x28,0x28,0x28,0x00,0x00},//"W",55//
    298          {0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x28,0x28,0x44,0xEE,0x00,0x00},//"X",56//
    299          {0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x10,0x10,0x10,0x38,0x00,0x00},//"Y",57//
    300          {0x00,0x00,0x00,0x7C,0x88,0x08,0x10,0x20,0x20,0x40,0x44,0xFC,0x00,0x00},//"Z",58//
    301          {0x00,0x1C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1C,0x00},//"[",59//
    302          {0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00},//"]",60//
    303          {0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00},//"]",61//
    304          {0x00,0x10,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"^",62//
    305          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE},//"_",63//
    306          {0x00,0x60,0x60,0x20,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"'",64//
    307          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x1C,0x24,0x44,0x3E,0x00,0x00},//"a",65//
    308          {0x00,0x00,0x00,0xC0,0x40,0x40,0x78,0x44,0x44,0x44,0x44,0x78,0x00,0x00},//"b",66//
    309          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x40,0x40,0x44,0x38,0x00,0x00},//"c",67//
    310          {0x00,0x00,0x00,0x0C,0x04,0x04,0x3C,0x44,0x44,0x44,0x44,0x3E,0x00,0x00},//"d",68//
    311          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x7C,0x40,0x44,0x38,0x00,0x00},//"e",69//
    312          {0x00,0x00,0x00,0x1C,0x24,0x20,0xF8,0x20,0x20,0x20,0x20,0x78,0x00,0x00},//"f",70//
    313          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x48,0x48,0x30,0x40,0x78,0x44,0x38},//"g",71//
    314          {0x00,0x00,0x00,0xC0,0x40,0x40,0x58,0x64,0x44,0x44,0x44,0xEE,0x00,0x00},//"h",72//
    315          {0x00,0x00,0x00,0x10,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"i",73//
    316          {0x00,0x00,0x00,0x08,0x00,0x00,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x70},//"j",74//
    317          {0x00,0x00,0x00,0xC0,0x40,0x40,0x5C,0x48,0x50,0x70,0x48,0xEC,0x00,0x00},//"k",75//
    318          {0x00,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00},//"l",76//
    319          {0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x54,0x54,0x54,0x54,0xD6,0x00,0x00},//"m",77//
    320          {0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x64,0x44,0x44,0x44,0xEE,0x00,0x00},//"n",78//
    321          {0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x44,0x44,0x44,0x38,0x00,0x00},//"o",79//
    322          {0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x44,0x78,0x40,0xE0},//"p",80//
    323          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x44,0x44,0x44,0x3C,0x04,0x0E},//"q",81//
    324          {0x00,0x00,0x00,0x00,0x00,0x00,0xEC,0x30,0x20,0x20,0x20,0xF8,0x00,0x00},//"r",82//
    325          {0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x44,0x30,0x08,0x44,0x78,0x00,0x00},//"s",83//
    326          {0x00,0x00,0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x0C,0x00,0x00},//"t",84//
    327          {0x00,0x00,0x00,0x00,0x00,0x00,0xCC,0x44,0x44,0x44,0x44,0x3E,0x00,0x00},//"u",85//
    328          {0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x28,0x10,0x00,0x00},//"v",86//
    329          {0x00,0x00,0x00,0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x28,0x28,0x00,0x00},//"w",87//
    330          {0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x48,0x30,0x30,0x48,0xEC,0x00,0x00},//"x",88//
    331          {0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x28,0x28,0x10,0x10,0x20,0xE0},//"y",89//
    332          {0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x48,0x10,0x10,0x24,0x7C,0x00,0x00},//"z",90//
    333          {0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10},//"|",91//
    334          };
    335          //-----------------------------------------------------------------------------
    336          #endif //LCD
    337          
    338          
    339          /**************************************************************************************************
    340           * @fn      HalLcdInit
    341           *
    342           * @brief   Initilize LCD Service
    343           *
    344           * @param   init - pointer to void that contains the initialized value
    345           *
    346           * @return  None
    347           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    348          void HalLcdInit(void)
   \                     HalLcdInit:
    349          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    350          #if (HAL_LCD == TRUE)
    351            HalLcd_HW_Init();
   \   000004                ; Setup parameters for call to function HalLcd_HW_Init
   \   000004   12....       LCALL   `??HalLcd_HW_Init::?relay`; Banked call to: HalLcd_HW_Init
    352          #endif
    353          }
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    354          
    355          /**************************************************************************************************
    356           * @fn      HalLcdWriteValue
    357           *
    358           * @brief   Write a value to the LCD
    359           *
    360           * @param   value  - value that will be displayed
    361           *          radix  - 8, 10, 16
    362           *          option - display options
    363           *
    364           * @return  None
    365           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    366          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    367          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    368          #if (HAL_LCD == TRUE)
    369            uint8 buf[LCD_MAX_BUF];
    370          
    371            _ltoa( value, &buf[0], radix );
   \   00000C                ; Setup parameters for call to function _ltoa
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V4,R0
   \   000012   89..         MOV     ?V5,R1
   \   000014   78..         MOV     R0,#?V4
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
    372            HalLcdWriteString( (char*)buf, option );
   \   000023                ; Setup parameters for call to function HalLcdWriteString
   \   000023   7427         MOV     A,#0x27
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   AA..         MOV     R2,?XSP + 0
   \   00002C   AB..         MOV     R3,?XSP + 1
   \   00002E   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    373          #endif
    374          }
   \   000031   7419         MOV     A,#0x19
   \   000033   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine14_0
   \   000003                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    375          
    376          /**************************************************************************************************
    377           * @fn      HalLcdWriteScreen
    378           *
    379           * @brief   Write a value to the LCD
    380           *
    381           * @param   line1  - string that will be displayed on line 1
    382           *          line2  - string that will be displayed on line 2
    383           *
    384           * @return  None
    385           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
    387          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    388          #if (HAL_LCD == TRUE)
    389            HalLcdWriteString( line1, 0 );//andy 
   \   000009                ; Setup parameters for call to function HalLcdWriteString
   \   000009   7900         MOV     R1,#0x0
   \   00000B   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    390            HalLcdWriteString( line2, 1 );
   \   00000E                ; Setup parameters for call to function HalLcdWriteString
   \   00000E   7901         MOV     R1,#0x1
   \   000010   EE           MOV     A,R6
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    391          #endif
    392          }
   \   000017   80..         SJMP    ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    393          
    394          /**************************************************************************************************
    395           * @fn      HalLcdWriteStringValue
    396           *
    397           * @brief   Write a string followed by a value to the LCD
    398           *
    399           * @param   title  - Title that will be displayed before the value
    400           *          value  - value
    401           *          format - redix
    402           *          line   - line number
    403           *
    404           * @return  None
    405           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
    407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V4,R1
    408          #if (HAL_LCD == TRUE)
    409            uint8 tmpLen;
    410            uint8 buf[LCD_MAX_BUF];
    411            uint32 err;
    412          
    413            tmpLen = (uint8)osal_strlen( (char*)title );
   \   000014                ; Setup parameters for call to function osal_strlen
   \   000014   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000017   EA           MOV     A,R2
   \   000018   F5..         MOV     ?V3,A
    414            osal_memcpy( buf, title, tmpLen );
   \   00001A                ; Setup parameters for call to function osal_memcpy
   \   00001A   75..00       MOV     ?V2,#0x0
   \   00001D   78..         MOV     R0,#?V0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000022   AC..         MOV     R4,?V3
   \   000024   7D00         MOV     R5,#0x0
   \   000026   7403         MOV     A,#0x3
   \   000028   12....       LCALL   ?XSTACK_DISP101_8
   \   00002B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
    415            //buf[tmpLen] = ' ';
    416            err = (uint32)(value);
    417            _ltoa( err, &buf[tmpLen], format );
   \   000033                ; Setup parameters for call to function _ltoa
   \   000033   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   A9..         MOV     R1,?V4
   \   00003B   8E..         MOV     ?V0,R6
   \   00003D   8F..         MOV     ?V1,R7
   \   00003F   AA..         MOV     R2,?V0
   \   000041   AB..         MOV     R3,?V1
   \   000043   E4           CLR     A
   \   000044   FC           MOV     R4,A
   \   000045   FD           MOV     R5,A
   \   000046   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    418            HalLcdWriteString( (char*)buf, line );
   \   00004E                ; Setup parameters for call to function HalLcdWriteString
   \   00004E   7426         MOV     A,#0x26
   \   000050                REQUIRE ?Subroutine3
   \   000050                ; // Fall through to label ?Subroutine3
    419          #endif
    420          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?XSTACK_DISP0_8
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   AA..         MOV     R2,?XSP + 0
   \   000007   AB..         MOV     R3,?XSP + 1
   \   000009   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00000C   7419         MOV     A,#0x19
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine11_0
   \   000011                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   7F05         MOV     R7,#0x5
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A8..         MOV     R0,?V3
   \   000002                REQUIRE ??Subroutine12_0
   \   000002                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   28           ADD     A,R0
   \   000009   F5..         MOV     ?V0,A
   \   00000B   E4           CLR     A
   \   00000C   3583         ADDC    A,DPH
   \   00000E   F5..         MOV     ?V1,A
   \   000010   78..         MOV     R0,#?V0
   \   000012   22           RET
    421          
    422          
    423          //写英文字符串，只擦除字符串区域

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          void HalLcdWriteEnString(uint8 x, uint8 y, char *title)
   \                     HalLcdWriteEnString:
    425          {  
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    426          #if (HAL_LCD == TRUE)
    427            uint8 tmpLen;
    428          
    429            tmpLen = (uint8)osal_strlen( (char*)title );
    430            DrawRectFill(x, y, tmpLen*7, 14, WHITE); 
   \   00000D                ; Setup parameters for call to function DrawRectFill
   \   00000D   75..FF       MOV     ?V2,#-0x1
   \   000010   75..FF       MOV     ?V3,#-0x1
   \   000013   78..         MOV     R0,#?V2
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75..0E       MOV     ?V2,#0xe
   \   00001B   75..00       MOV     ?V3,#0x0
   \   00001E   78..         MOV     R0,#?V2
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023                ; Setup parameters for call to function osal_strlen
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   00002A   EA           MOV     A,R2
   \   00002B   75F007       MOV     B,#0x7
   \   00002E   A4           MUL     AB
   \   00002F   F5..         MOV     ?V2,A
   \   000031   E5F0         MOV     A,B
   \   000033   F5..         MOV     ?V3,A
   \   000035   78..         MOV     R0,#?V2
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   AC..         MOV     R4,?V0
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   AA..         MOV     R2,?V1
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   `??DrawRectFill::?relay`; Banked call to: DrawRectFill
   \   000045   7406         MOV     A,#0x6
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
    431            LCD_write_EN_string(x, y,(unsigned char *)title);
   \   00004A                ; Setup parameters for call to function LCD_write_EN_string
   \   00004A   EE           MOV     A,R6
   \   00004B   FC           MOV     R4,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FD           MOV     R5,A
   \   00004E   AA..         MOV     R2,?V0
   \   000050   A9..         MOV     R1,?V1
   \   000052   02....       LJMP    ?Subroutine4 & 0xFFFF
    432          #endif  
    433          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   `??LCD_write_EN_string::?relay`; Banked call to: LCD_write_EN_string
   \   000003                REQUIRE ??Subroutine13_0
   \   000003                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    434          
    435          /**************************************************************************************************
    436           * @fn      HalLcdWriteStringValue
    437           *
    438           * @brief   Write a string followed by a value to the LCD
    439           *
    440           * @param   title   - Title that will be displayed before the value
    441           *          value1  - value #1
    442           *          format1 - redix of value #1
    443           *          value2  - value #2
    444           *          format2 - redix of value #2
    445           *          line    - line number
    446           *
    447           * @return  None
    448           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
    450                                            uint16 value2, uint8 format2, uint8 line )
    451          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V4,R1
    452          #if (HAL_LCD == TRUE)
    453          
    454            uint8 tmpLen;
    455            uint8 buf[LCD_MAX_BUF];
    456            uint32 err;
    457          
    458            tmpLen = (uint8)osal_strlen( (char*)title );
   \   000014                ; Setup parameters for call to function osal_strlen
   \   000014   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000017   EA           MOV     A,R2
   \   000018   F5..         MOV     ?V3,A
    459            if ( tmpLen )
   \   00001A   6019         JZ      ??HalLcdWriteStringValueValue_0
    460            {
    461              osal_memcpy( buf, title, tmpLen );
   \   00001C                ; Setup parameters for call to function osal_memcpy
   \   00001C   75..00       MOV     ?V2,#0x0
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000024   AC..         MOV     R4,?V3
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7403         MOV     A,#0x3
   \   00002A   12....       LCALL   ?XSTACK_DISP101_8
   \   00002D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
    462              //buf[tmpLen++] = ' ';
    463            }
    464          
    465            err = (uint32)(value1);
    466            _ltoa( err, &buf[tmpLen], format1 );
   \                     ??HalLcdWriteStringValueValue_0:
   \   000035                ; Setup parameters for call to function _ltoa
   \   000035   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   A9..         MOV     R1,?V4
   \   00003D   8E..         MOV     ?V0,R6
   \   00003F   8F..         MOV     ?V1,R7
   \   000041   AA..         MOV     R2,?V0
   \   000043   AB..         MOV     R3,?V1
   \   000045   E4           CLR     A
   \   000046   FC           MOV     R4,A
   \   000047   FD           MOV     R5,A
   \   000048   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
    467            tmpLen = (uint8)osal_strlen( (char*)buf );
   \   000050                ; Setup parameters for call to function osal_strlen
   \   000050   AA..         MOV     R2,?XSP + 0
   \   000052   AB..         MOV     R3,?XSP + 1
   \   000054   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000057   EA           MOV     A,R2
   \   000058   F5..         MOV     ?V3,A
    468          
    469            buf[tmpLen++] = ',';
   \   00005A   F8           MOV     R0,A
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   E582         MOV     A,DPL
   \   000063   2A           ADD     A,R2
   \   000064   F582         MOV     DPL,A
   \   000066   E4           CLR     A
   \   000067   3583         ADDC    A,DPH
   \   000069   F583         MOV     DPH,A
   \   00006B   742C         MOV     A,#0x2c
   \   00006D   F0           MOVX    @DPTR,A
    470            buf[tmpLen++] = ' ';
   \   00006E   08           INC     R0
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   E582         MOV     A,DPL
   \   000077   28           ADD     A,R0
   \   000078   F582         MOV     DPL,A
   \   00007A   E4           CLR     A
   \   00007B   3583         ADDC    A,DPH
   \   00007D   F583         MOV     DPH,A
   \   00007F   7420         MOV     A,#0x20
   \   000081   F0           MOVX    @DPTR,A
    471            err = (uint32)(value2);
    472            _ltoa( err, &buf[tmpLen], format2 );
   \   000082                ; Setup parameters for call to function _ltoa
   \   000082   08           INC     R0
   \   000083   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   742A         MOV     A,#0x2a
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   7428         MOV     A,#0x28
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F5..         MOV     ?V0,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   AA..         MOV     R2,?V0
   \   00009C   FB           MOV     R3,A
   \   00009D   E4           CLR     A
   \   00009E   FC           MOV     R4,A
   \   00009F   FD           MOV     R5,A
   \   0000A0   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    473          
    474            HalLcdWriteString( (char *)buf, line );		
   \   0000A8                ; Setup parameters for call to function HalLcdWriteString
   \   0000A8   7429         MOV     A,#0x29
   \   0000AA   02....       LJMP    ?Subroutine3 & 0xFFFF
    475          
    476          #endif
    477          }
    478          
    479          #if (HAL_LCD == TRUE)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          void DelayMS(unsigned int msec)
   \                     DelayMS:
    481          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8019         SJMP    ??DelayMS_0
    482            unsigned int i;
    483            while(msec >0)
    484            {
    485              for (i=0; i<8000; i++) asm("NOP"); //1ms
   \                     ??DelayMS_1:
   \   000002   7840         MOV     R0,#0x40
   \   000004   791F         MOV     R1,#0x1f
   \                     ??DelayMS_2:
   \   000006   00           NOP
   \   000007   E8           MOV     A,R0
   \   000008   24FF         ADD     A,#-0x1
   \   00000A   18           DEC     R0
   \   00000B   E9           MOV     A,R1
   \   00000C   34FF         ADDC    A,#-0x1
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   70F3         JNZ     ??DelayMS_2
    486              msec--;
   \   000013   EA           MOV     A,R2
   \   000014   24FF         ADD     A,#-0x1
   \   000016   1A           DEC     R2
   \   000017   EB           MOV     A,R3
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   FB           MOV     R3,A
    487            }  
   \                     ??DelayMS_0:
   \   00001B   EA           MOV     A,R2
   \   00001C   4B           ORL     A,R3
   \   00001D   70E3         JNZ     ??DelayMS_1
    488          }
   \   00001F   02....       LJMP    ?BRET
    489          
    490          //option 1=第1行  2=第2行 其它类推

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    491          void HalLcdWriteString (char *s, uint8 option)
   \                     HalLcdWriteString:
    492          {  
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    493            Color = BLUE;
   \   00000B   90....       MOV     DPTR,#Color
   \   00000E   741F         MOV     A,#0x1f
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
    494            Color_BK = WHITE; 
   \   000014   90....       MOV     DPTR,#Color_BK
   \   000017   74FF         MOV     A,#-0x1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    495            DrawRectFill(7,option*15+20,118,15,WHITE); 
   \   00001C                ; Setup parameters for call to function DrawRectFill
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V2
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   75..0F       MOV     ?V2,#0xf
   \   000028   75..00       MOV     ?V3,#0x0
   \   00002B   78..         MOV     R0,#?V2
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..76       MOV     ?V2,#0x76
   \   000033   78..         MOV     R0,#?V2
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   E9           MOV     A,R1
   \   000039   75F00F       MOV     B,#0xf
   \   00003C   A4           MUL     AB
   \   00003D   A9F0         MOV     R1,B
   \   00003F   2414         ADD     A,#0x14
   \   000041   FC           MOV     R4,A
   \   000042   E4           CLR     A
   \   000043   39           ADDC    A,R1
   \   000044   FD           MOV     R5,A
   \   000045   7A07         MOV     R2,#0x7
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??DrawRectFill::?relay`; Banked call to: DrawRectFill
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    496            LCD_write_EN_string(7,option*15+20,(unsigned char *)s);
   \   000051                ; Setup parameters for call to function LCD_write_EN_string
   \   000051   EE           MOV     A,R6
   \   000052   FC           MOV     R4,A
   \   000053   EF           MOV     A,R7
   \   000054   FD           MOV     R5,A
   \   000055   75F00F       MOV     B,#0xf
   \   000058   E5..         MOV     A,?V0
   \   00005A   A4           MUL     AB
   \   00005B   2414         ADD     A,#0x14
   \   00005D   FA           MOV     R2,A
   \   00005E   7907         MOV     R1,#0x7
   \   000060   02....       LJMP    ?Subroutine4 & 0xFFFF
    497          }
    498          
    499          //向SPI总线传输一个8位数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          void SendByte(unsigned char Data)
   \                     SendByte:
    501          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    502            unsigned char i=0;
    503            
    504            for(i=8;i>0;i--)
   \   000000   7808         MOV     R0,#0x8
    505            {
    506              if(Data&0x80)	
   \                     ??SendByte_0:
   \   000002   E9           MOV     A,R1
   \   000003   A2E7         MOV     C,0xE0 /* A   */.7
   \   000005   5004         JNC     ??SendByte_1
    507                LCD_SDA_SET;//输出数据
   \   000007   D293         SETB    0x90.3
   \   000009   8002         SJMP    ??SendByte_2
    508              else 
    509                LCD_SDA_CLR;
   \                     ??SendByte_1:
   \   00000B   C293         CLR     0x90.3
    510              
    511              LCD_SCL_CLR;       
   \                     ??SendByte_2:
   \   00000D   C292         CLR     0x90.2
    512              LCD_SCL_SET;
   \   00000F   D292         SETB    0x90.2
    513              Data<<=1; 
   \   000011   C3           CLR     C
   \   000012   33           RLC     A
   \   000013   F9           MOV     R1,A
    514            }
   \   000014   18           DEC     R0
   \   000015   E8           MOV     A,R0
   \   000016   70EA         JNZ     ??SendByte_0
    515          }
   \   000018   02....       LJMP    ?BRET
   \   00001B                REQUIRE _A_P1
    516          
    517          //向SPI总线传输一个8位数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    518          void  SPI_WriteData(unsigned char Data)
   \                     SPI_WriteData:
    519          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    520            unsigned char i=0;
    521            
    522            for(i=8;i>0;i--)
   \   000000   7808         MOV     R0,#0x8
    523            {
    524              if(Data&0x80)	
   \                     ??SPI_WriteData_0:
   \   000002   E9           MOV     A,R1
   \   000003   A2E7         MOV     C,0xE0 /* A   */.7
   \   000005   5004         JNC     ??SPI_WriteData_1
    525                LCD_SDA_SET;//输出数据
   \   000007   D293         SETB    0x90.3
   \   000009   8002         SJMP    ??SPI_WriteData_2
    526              else 
    527                LCD_SDA_CLR;
   \                     ??SPI_WriteData_1:
   \   00000B   C293         CLR     0x90.3
    528              
    529              LCD_SCL_CLR;       
   \                     ??SPI_WriteData_2:
   \   00000D   C292         CLR     0x90.2
    530              LCD_SCL_SET;
   \   00000F   D292         SETB    0x90.2
    531              Data<<=1; 
   \   000011   C3           CLR     C
   \   000012   33           RLC     A
   \   000013   F9           MOV     R1,A
    532            }
   \   000014   18           DEC     R0
   \   000015   E8           MOV     A,R0
   \   000016   70EA         JNZ     ??SPI_WriteData_0
    533          }
   \   000018   02....       LJMP    ?BRET
   \   00001B                REQUIRE _A_P1
    534          
    535          //向液晶屏写一个8位指令

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   `??SPI_WriteData::?relay`; Banked call to: SPI_WriteData
   \   000003                REQUIRE ??Subroutine10_0
   \   000003                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    536          void LCD_WrCmd(unsigned char Index)
   \                     LCD_WrCmd:
    537          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    538            //LCD_CS_CLR;  //ALD del  SPI写命令时序开始
    539            LCD_DC_CLR;
   \   000005   C280         CLR     0x80.0
    540            SPI_WriteData(Index);
   \   000007                ; Setup parameters for call to function SPI_WriteData
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00000A                REQUIRE _A_P0
    541            //LCD_CS_SET;  //ALD del
    542          }
    543          
    544          //向液晶屏写一个8位数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    545          void LCD_WrDat(unsigned char Data)
   \                     LCD_WrDat:
    546          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    547            //LCD_CS_CLR;  //ALD del
    548            LCD_DC_SET;
   \   000005   D280         SETB    0x80.0
    549            SPI_WriteData(Data);
   \   000007                ; Setup parameters for call to function SPI_WriteData
   \   000007   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00000A                REQUIRE _A_P0
    550            //LCD_CS_SET;  //ALD del 
    551          }
    552          
    553          //向液晶屏写一个16位数据

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          void LCD_WriteData_16Bit(unsigned short Data)
   \                     LCD_WriteData_16Bit:
    555          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
    556            //LCD_CS_CLR;  //ALD del
    557            LCD_DC_SET;
   \   000008   D280         SETB    0x80.0
    558            SPI_WriteData(Data>>8); //写入高8位数据
   \   00000A                ; Setup parameters for call to function SPI_WriteData
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   `??SPI_WriteData::?relay`; Banked call to: SPI_WriteData
    559            SPI_WriteData(Data); 	  //写入低8位数据
   \   00000E                ; Setup parameters for call to function SPI_WriteData
   \   00000E   EE           MOV     A,R6
   \   00000F   F9           MOV     R1,A
   \   000010   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   000013                REQUIRE _A_P0
    560            //LCD_CS_SET;  //ALD del 
    561          }
    562          
    563          /****************************************************************************
    564          * 名    称: LCD_write_byte()
    565          * 功    能: 数据到LCD 
    566          * 入口参数: data    ―写入的数据
    567          *           command ―写数据/命令选择  
    568          * 出口参数: 无 
    569          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          static void LCD_write_byte(unsigned char data, unsigned char command)
   \                     LCD_write_byte:
    571          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    572            ////LCD_CS_CLR ;// 使能LCD
    573            if (command == 0)
   \   000006   7005         JNZ     ??LCD_write_byte_0
    574              LCD_WrCmd(data); // 传送命令
   \   000008                ; Setup parameters for call to function LCD_WrCmd
   \   000008   12....       LCALL   `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   00000B   8003         SJMP    ??LCD_write_byte_1
    575            else
    576              LCD_WrDat(data) ; // 传送数据
   \                     ??LCD_write_byte_0:
   \   00000D                ; Setup parameters for call to function LCD_WrDat
   \   00000D   12....       LCALL   `??LCD_WrDat::?relay`; Banked call to: LCD_WrDat
    577            //SendByte(data);
    578            //LCD_CS_SET; // 关闭LCD
    579            //LCD_DC_SET;	
    580          }
   \                     ??LCD_write_byte_1:
   \   000010   02....       LJMP    ??Subroutine10_0 & 0xFFFF
    581          
    582          // 复位lcd

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    583          void Lcd_Reset(void)
   \                     Lcd_Reset:
    584          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    585            LCD_RST_CLR;
   \   000004   C297         CLR     0x90.7
    586            DelayMS(110);
   \   000006                ; Setup parameters for call to function DelayMS
   \   000006   7A6E         MOV     R2,#0x6e
   \   000008   7B00         MOV     R3,#0x0
   \   00000A   12....       LCALL   `??DelayMS::?relay`  ; Banked call to: DelayMS
    587            LCD_RST_SET;
   \   00000D   D297         SETB    0x90.7
    588            DelayMS(50);
   \   00000F                ; Setup parameters for call to function DelayMS
   \   00000F   7A32         MOV     R2,#0x32
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??DelayMS::?relay`  ; Banked call to: DelayMS
    589          }
   \   000016   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000019                REQUIRE _A_P1
    590          
    591          /****************************************************************************
    592          * 名    称: LCD_set_window()
    593          * 功    能: 设置显示窗口
    594          * 入口参数: X - 显示窗口左上角横坐标      Y ―显示窗口左上角纵坐标
    595          *           Width ―显示窗口宽度          Height ―显示窗口高度
    596          * 出口参数: 无
    597          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    598          static void LCD_set_window(unsigned int X    , unsigned int Y, 
   \                     LCD_set_window:
    599                                     unsigned int Width, unsigned int Height)
    600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    601            LCD_write_byte(0x2A,LCD_COMMAND);         //列地址设置命令
   \   00000D                ; Setup parameters for call to function LCD_write_byte
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   792A         MOV     R1,#0x2a
   \   000011   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    602            LCD_write_byte(X>>8,LCD_DATA) ;           //设置显示窗口左上角横坐标高位
   \   000014                ; Setup parameters for call to function LCD_write_byte
   \   000014   7A01         MOV     R2,#0x1
   \   000016   EF           MOV     A,R7
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    603            LCD_write_byte((X+2)&0xFF,LCD_DATA);      //设置显示窗口左上角横坐标低位 	
   \   00001B                ; Setup parameters for call to function LCD_write_byte
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   EE           MOV     A,R6
   \   00001E   2402         ADD     A,#0x2
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   \   000024   740C         MOV     A,#0xc
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V3,A
    604            LCD_write_byte((X+Width+1)>>8,LCD_DATA);  //设置宽度高位 	
   \   000030                ; Setup parameters for call to function LCD_write_byte
   \   000030   7A01         MOV     R2,#0x1
   \   000032   EE           MOV     A,R6
   \   000033   25..         ADD     A,?V2
   \   000035   F8           MOV     R0,A
   \   000036   EF           MOV     A,R7
   \   000037   35..         ADDC    A,?V3
   \   000039   F9           MOV     R1,A
   \   00003A   E8           MOV     A,R0
   \   00003B   2A           ADD     A,R2
   \   00003C   5001         JNC     ??LCD_set_window_0
   \   00003E   09           INC     R1
   \                     ??LCD_set_window_0:
   \   00003F   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    605            LCD_write_byte((X+Width+1)&0xFF,LCD_DATA);// 设置宽度低位 	
   \   000042                ; Setup parameters for call to function LCD_write_byte
   \   000042   7A01         MOV     R2,#0x1
   \   000044   EE           MOV     A,R6
   \   000045   25..         ADD     A,?V2
   \   000047   2A           ADD     A,R2
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    606            
    607            LCD_write_byte(0x2B,LCD_COMMAND);         //行地址设置命令
   \   00004C                ; Setup parameters for call to function LCD_write_byte
   \   00004C   7A00         MOV     R2,#0x0
   \   00004E   792B         MOV     R1,#0x2b
   \   000050   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    608            LCD_write_byte(Y>>8,LCD_DATA) ;           //设置显示窗口左上角纵坐标高位
   \   000053                ; Setup parameters for call to function LCD_write_byte
   \   000053   7A01         MOV     R2,#0x1
   \   000055   A9..         MOV     R1,?V1
   \   000057   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    609            LCD_write_byte((Y+3)&0xFF,LCD_DATA);      //设置显示窗口左上角纵坐标低位 
   \   00005A                ; Setup parameters for call to function LCD_write_byte
   \   00005A   7A01         MOV     R2,#0x1
   \   00005C   E5..         MOV     A,?V0
   \   00005E   2403         ADD     A,#0x3
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   \   000064   740E         MOV     A,#0xe
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FE           MOV     R6,A
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   FF           MOV     R7,A
    610            LCD_write_byte((Y+Height+2)>>8,LCD_DATA); // 设置显示窗口高度高位 	
   \   00006E                ; Setup parameters for call to function LCD_write_byte
   \   00006E   7A01         MOV     R2,#0x1
   \   000070   E5..         MOV     A,?V0
   \   000072   2E           ADD     A,R6
   \   000073   F8           MOV     R0,A
   \   000074   E5..         MOV     A,?V1
   \   000076   3F           ADDC    A,R7
   \   000077   F9           MOV     R1,A
   \   000078   E8           MOV     A,R0
   \   000079   2402         ADD     A,#0x2
   \   00007B   5001         JNC     ??LCD_set_window_1
   \   00007D   09           INC     R1
   \                     ??LCD_set_window_1:
   \   00007E   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    611            LCD_write_byte((Y+Height+2)&0xFF,LCD_DATA);// 设置显示窗口高度低位 	  
   \   000081                ; Setup parameters for call to function LCD_write_byte
   \   000081   7A01         MOV     R2,#0x1
   \   000083   E5..         MOV     A,?V0
   \   000085   2E           ADD     A,R6
   \   000086   2402         ADD     A,#0x2
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    612            LCD_write_byte(0x2C,LCD_COMMAND) ;
   \   00008C                ; Setup parameters for call to function LCD_write_byte
   \   00008C   7A00         MOV     R2,#0x0
   \   00008E   792C         MOV     R1,#0x2c
   \   000090   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    613          }
   \   000093   80..         SJMP    ??Subroutine13_0
    614          
    615          /****************************************************************************
    616          * 名    称: DrawPixel()
    617          * 功    能: 在指定位置以指定颜色显示像素
    618          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    619          void DrawPixel(unsigned int x, unsigned int y, unsigned int color)
   \                     DrawPixel:
    620          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7409         MOV     A,#0x9
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
    621            //LCD_set_XY(x,y);  //设定显示位置 andy
    622            LCD_write_byte(color>>8,LCD_DATA);  //发送显示颜色数据高位字节
   \   00000E                ; Setup parameters for call to function LCD_write_byte
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    623            LCD_write_byte(color&0xFF,LCD_DATA);//发送显示颜色数据低位字节
   \   000014                ; Setup parameters for call to function LCD_write_byte
   \   000014   7A01         MOV     R2,#0x1
   \   000016   EE           MOV     A,R6
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    624          }
   \   00001B   02....       LJMP    ??Subroutine10_0 & 0xFFFF
    625          
    626          /****************************************************************************
    627          * 名    称: DrawVerticalLine()
    628          * 功    能: 在指定位置以指定颜色画垂直线
    629          * 入口参数: X - 垂直线起始位置横坐标      Y ―垂直线起始位置纵坐标
    630          *           Length ―垂直线长度           Color ―垂直线颜色
    631          * 出口参数: 无
    632          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void DrawVerticalLine(unsigned int x, unsigned int y, 
   \                     DrawVerticalLine:
    634                                unsigned int Length,unsigned int Color)               
    635          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    636            register int  index = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   \   00000B   7410         MOV     A,#0x10
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine8 & 0xFFFF
    637            register char ch,cl;
    638            
    639            ch = (unsigned char)(Color>>8);
    640            cl = (unsigned char)(Color);
   \                     ??CrossCallReturnLabel_2:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
    641            LCD_set_window(x,y,1,Length);
   \   00001B                ; Setup parameters for call to function LCD_set_window
   \   00001B   8E..         MOV     ?V4,R6
   \   00001D   8F..         MOV     ?V5,R7
   \   00001F   78..         MOV     R0,#?V4
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V4,#0x1
   \   000027   75..00       MOV     ?V5,#0x0
   \   00002A   78..         MOV     R0,#?V4
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   12....       LCALL   `??LCD_set_window::?relay`; Banked call to: LCD_set_window
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
    642            for(index=0;index<Length;index++)
   \   000037   8016         SJMP    ??DrawVerticalLine_0
    643            {
    644            LCD_write_byte(ch,LCD_DATA) ;
   \                     ??DrawVerticalLine_1:
   \   000039                ; Setup parameters for call to function LCD_write_byte
   \   000039   7A01         MOV     R2,#0x1
   \   00003B   A9..         MOV     R1,?V3
   \   00003D   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    645            LCD_write_byte(cl,LCD_DATA) ;
   \   000040                ; Setup parameters for call to function LCD_write_byte
   \   000040   7A01         MOV     R2,#0x1
   \   000042   A9..         MOV     R1,?V2
   \   000044   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    646            }
   \   000047   05..         INC     ?V0
   \   000049   E5..         MOV     A,?V0
   \   00004B   7002         JNZ     ??DrawVerticalLine_0
   \   00004D   05..         INC     ?V1
   \                     ??DrawVerticalLine_0:
   \   00004F   C3           CLR     C
   \   000050   E5..         MOV     A,?V0
   \   000052   9E           SUBB    A,R6
   \   000053   E5..         MOV     A,?V1
   \   000055   9F           SUBB    A,R7
   \   000056   40E1         JC      ??DrawVerticalLine_1
    647          }
   \   000058   80..         SJMP    ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V3,A
   \   000006   EE           MOV     A,R6
   \   000007   F5..         MOV     ?V2,A
   \   000009   740E         MOV     A,#0xe
   \   00000B   22           RET
    648          
    649          /****************************************************************************
    650          * 名    称: DrawHorizonLine()
    651          * 功    能: 在指定位置以指定颜色画水平线
    652          * 入口参数: X - 水平线起始位置横坐标      Y ―水平线起始位置纵坐标
    653          *           Length ―水平线长度           Color ―水平线颜色
    654          * 出口参数: 无
    655          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    656          void DrawHorizonLine(unsigned int x, unsigned int y, 
   \                     DrawHorizonLine:
    657                               unsigned int Length,unsigned int Color)               
    658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    659            register int  index = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   \   00000B   7410         MOV     A,#0x10
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine8 & 0xFFFF
    660            register char ch,cl;
    661            
    662            ch = (unsigned char)(Color>>8);
    663            cl = (unsigned char)(Color);
   \                     ??CrossCallReturnLabel_3:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
    664            LCD_set_window(x,y,Length,1);
   \   00001B                ; Setup parameters for call to function LCD_set_window
   \   00001B   75..01       MOV     ?V4,#0x1
   \   00001E   75..00       MOV     ?V5,#0x0
   \   000021   78..         MOV     R0,#?V4
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   8E..         MOV     ?V4,R6
   \   000028   8F..         MOV     ?V5,R7
   \   00002A   78..         MOV     R0,#?V4
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   12....       LCALL   `??LCD_set_window::?relay`; Banked call to: LCD_set_window
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
    665            for(index=0;index<Length;index++)
   \   000037   8016         SJMP    ??DrawHorizonLine_0
    666            {
    667              LCD_write_byte(ch,LCD_DATA);
   \                     ??DrawHorizonLine_1:
   \   000039                ; Setup parameters for call to function LCD_write_byte
   \   000039   7A01         MOV     R2,#0x1
   \   00003B   A9..         MOV     R1,?V3
   \   00003D   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    668              LCD_write_byte(cl,LCD_DATA);
   \   000040                ; Setup parameters for call to function LCD_write_byte
   \   000040   7A01         MOV     R2,#0x1
   \   000042   A9..         MOV     R1,?V2
   \   000044   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    669            }
   \   000047   05..         INC     ?V0
   \   000049   E5..         MOV     A,?V0
   \   00004B   7002         JNZ     ??DrawHorizonLine_0
   \   00004D   05..         INC     ?V1
   \                     ??DrawHorizonLine_0:
   \   00004F   C3           CLR     C
   \   000050   E5..         MOV     A,?V0
   \   000052   9E           SUBB    A,R6
   \   000053   E5..         MOV     A,?V1
   \   000055   9F           SUBB    A,R7
   \   000056   40E1         JC      ??DrawHorizonLine_1
    670          }
   \   000058   80..         SJMP    ??Subroutine14_0
    671          
    672          /****************************************************************************
    673          * 名    称: DrawRect()
    674          * 功    能: 在指定位置以指定颜色画矩形
    675          * 入口参数: X - 矩形起始位置横坐标      Y ―矩形起始位置纵坐标
    676          *           Width  ―矩形宽度           Height ―矩形高度                   
    677          *           Color  ―矩形颜色             
    678          * 出口参数: 无
    679          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    680          void DrawRect(unsigned int Xpos, unsigned int Ypos, unsigned int Width, 
   \                     DrawRect:
    681                        unsigned int Height,unsigned Color)
    682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EA           MOV     A,R2
   \   000016   FE           MOV     R6,A
   \   000017   EB           MOV     A,R3
   \   000018   FF           MOV     R7,A
   \   000019   7410         MOV     A,#0x10
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V4,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V5,A
   \   000025   7414         MOV     A,#0x14
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V1,A
    683            DrawHorizonLine(Xpos, Ypos, Width, Color) ;
   \   000031                ; Setup parameters for call to function DrawHorizonLine
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   78..         MOV     R0,#?V4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FC           MOV     R4,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FD           MOV     R5,A
   \   000045   12....       LCALL   `??DrawHorizonLine::?relay`; Banked call to: DrawHorizonLine
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   7412         MOV     A,#0x12
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V2,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V3,A
    684            DrawHorizonLine(Xpos, (Ypos + Height), Width, Color) ;
   \   000059                ; Setup parameters for call to function DrawHorizonLine
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   78..         MOV     R0,#?V4
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   25..         ADD     A,?V2
   \   00006B   FC           MOV     R4,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   35..         ADDC    A,?V3
   \   000070   FD           MOV     R5,A
   \   000071   EE           MOV     A,R6
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   `??DrawHorizonLine::?relay`; Banked call to: DrawHorizonLine
   \   000078   7404         MOV     A,#0x4
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
    685            DrawVerticalLine(Xpos, Ypos, Height, Color) ;
   \   00007D                ; Setup parameters for call to function DrawVerticalLine
   \   00007D   78..         MOV     R0,#?V0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V2
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   7404         MOV     A,#0x4
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FC           MOV     R4,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FD           MOV     R5,A
   \   000091   EE           MOV     A,R6
   \   000092   FA           MOV     R2,A
   \   000093   EF           MOV     A,R7
   \   000094   FB           MOV     R3,A
   \   000095   12....       LCALL   `??DrawVerticalLine::?relay`; Banked call to: DrawVerticalLine
   \   000098   7404         MOV     A,#0x4
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
    686            DrawVerticalLine((Xpos+Width-1) ,Ypos, Height, Color);
   \   00009D                ; Setup parameters for call to function DrawVerticalLine
   \   00009D   78..         MOV     R0,#?V0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   78..         MOV     R0,#?V2
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FC           MOV     R4,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   FD           MOV     R5,A
   \   0000B1   EE           MOV     A,R6
   \   0000B2   25..         ADD     A,?V4
   \   0000B4   F8           MOV     R0,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   35..         ADDC    A,?V5
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   24FF         ADD     A,#-0x1
   \   0000BC   FA           MOV     R2,A
   \   0000BD   E9           MOV     A,R1
   \   0000BE   34FF         ADDC    A,#-0x1
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   `??DrawVerticalLine::?relay`; Banked call to: DrawVerticalLine
   \   0000C4   7404         MOV     A,#0x4
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
    687          }
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   02....       LJMP    ?Subroutine1 & 0xFFFF
    688          
    689          /****************************************************************************
    690          * 名    称: DrawRectFill()
    691          * 功    能: 在指定位置以指定颜色画矩形
    692          * 入口参数: X - 矩形起始位置横坐标      Y ―矩形起始位置纵坐标
    693          *           Width  ―矩形宽度           Height ―矩形高度                   
    694          *           Color  ―矩形填充颜色             
    695          * 出口参数: 无
    696          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void DrawRectFill(unsigned int Xpos  , unsigned int Ypos, unsigned int Width, 
   \                     DrawRectFill:
    698                            unsigned int Height, unsigned Color                        )
    699          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   7410         MOV     A,#0x10
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V4,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V5,A
   \   000015   7412         MOV     A,#0x12
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FB           MOV     R3,A
    700            register unsigned int i;
    701            register unsigned int index = Width*Height/16+1;
   \   00001F   A8..         MOV     R0,?V4
   \   000021   E8           MOV     A,R0
   \   000022   8AF0         MOV     B,R2
   \   000024   A4           MUL     AB
   \   000025   C8           XCH     A,R0
   \   000026   AEF0         MOV     R6,B
   \   000028   8BF0         MOV     B,R3
   \   00002A   A4           MUL     AB
   \   00002B   2E           ADD     A,R6
   \   00002C   FE           MOV     R6,A
   \   00002D   8AF0         MOV     B,R2
   \   00002F   E5..         MOV     A,?V5
   \   000031   A4           MUL     AB
   \   000032   2E           ADD     A,R6
   \   000033   F9           MOV     R1,A
   \   000034   88..         MOV     ?V0,R0
   \   000036   89..         MOV     ?V1,R1
   \   000038   7404         MOV     A,#0x4
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?US_SHR
   \   00003F   E5..         MOV     A,?V0
   \   000041   2401         ADD     A,#0x1
   \   000043   FE           MOV     R6,A
   \   000044   E4           CLR     A
   \   000045   35..         ADDC    A,?V1
   \   000047   FF           MOV     R7,A
   \   000048   7414         MOV     A,#0x14
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V2,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
    702            register char ch,cl;
    703            
    704            ch = (unsigned char)(Color>>8);
   \   000052   F5..         MOV     ?V0,A
    705            cl = (unsigned char)(Color);
   \   000054   E5..         MOV     A,?V2
   \   000056   F5..         MOV     ?V1,A
    706            LCD_set_window(Xpos,Ypos,Width,Height);
   \   000058                ; Setup parameters for call to function LCD_set_window
   \   000058   8A..         MOV     ?V2,R2
   \   00005A   8B..         MOV     ?V3,R3
   \   00005C   78..         MOV     R0,#?V2
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   85....       MOV     ?V2,?V4
   \   000064   85....       MOV     ?V3,?V5
   \   000067   78..         MOV     R0,#?V2
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   AA..         MOV     R2,?V6
   \   00006E   AB..         MOV     R3,?V7
   \   000070   12....       LCALL   `??LCD_set_window::?relay`; Banked call to: LCD_set_window
   \   000073   7404         MOV     A,#0x4
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
    707            LCD_write_byte(0x2C,LCD_COMMAND);
   \   000078                ; Setup parameters for call to function LCD_write_byte
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   792C         MOV     R1,#0x2c
   \   00007C   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    708            //LCD_CS_CLR ; andy
    709            LCD_DC_SET ;
   \   00007F   D280         SETB    0x80.0
    710            for(i=0;i<index;i++)
   \   000081   75..00       MOV     ?V2,#0x0
   \   000084   75..00       MOV     ?V3,#0x0
   \   000087   02....       LJMP    ??DrawRectFill_0 & 0xFFFF
    711            {
    712                SendByte(ch);
   \                     ??DrawRectFill_1:
   \   00008A                ; Setup parameters for call to function SendByte
   \   00008A   A9..         MOV     R1,?V0
   \   00008C   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    713                SendByte(cl);
   \   00008F                ; Setup parameters for call to function SendByte
   \   00008F   A9..         MOV     R1,?V1
   \   000091   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    714                SendByte(ch);
   \   000094                ; Setup parameters for call to function SendByte
   \   000094   A9..         MOV     R1,?V0
   \   000096   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    715                SendByte(cl); 
   \   000099                ; Setup parameters for call to function SendByte
   \   000099   A9..         MOV     R1,?V1
   \   00009B   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    716                SendByte(ch);
   \   00009E                ; Setup parameters for call to function SendByte
   \   00009E   A9..         MOV     R1,?V0
   \   0000A0   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    717                SendByte(cl);      
   \   0000A3                ; Setup parameters for call to function SendByte
   \   0000A3   A9..         MOV     R1,?V1
   \   0000A5   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    718                SendByte(ch);
   \   0000A8                ; Setup parameters for call to function SendByte
   \   0000A8   A9..         MOV     R1,?V0
   \   0000AA   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    719                SendByte(cl);
   \   0000AD                ; Setup parameters for call to function SendByte
   \   0000AD   A9..         MOV     R1,?V1
   \   0000AF   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    720                SendByte(ch);
   \   0000B2                ; Setup parameters for call to function SendByte
   \   0000B2   A9..         MOV     R1,?V0
   \   0000B4   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    721                SendByte(cl);
   \   0000B7                ; Setup parameters for call to function SendByte
   \   0000B7   A9..         MOV     R1,?V1
   \   0000B9   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    722                SendByte(ch);
   \   0000BC                ; Setup parameters for call to function SendByte
   \   0000BC   A9..         MOV     R1,?V0
   \   0000BE   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    723                SendByte(cl);
   \   0000C1                ; Setup parameters for call to function SendByte
   \   0000C1   A9..         MOV     R1,?V1
   \   0000C3   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    724                SendByte(ch);
   \   0000C6                ; Setup parameters for call to function SendByte
   \   0000C6   A9..         MOV     R1,?V0
   \   0000C8   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    725                SendByte(cl);
   \   0000CB                ; Setup parameters for call to function SendByte
   \   0000CB   A9..         MOV     R1,?V1
   \   0000CD   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    726                SendByte(ch);
   \   0000D0                ; Setup parameters for call to function SendByte
   \   0000D0   A9..         MOV     R1,?V0
   \   0000D2   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    727                SendByte(cl);
   \   0000D5                ; Setup parameters for call to function SendByte
   \   0000D5   A9..         MOV     R1,?V1
   \   0000D7   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    728                SendByte(ch);
   \   0000DA                ; Setup parameters for call to function SendByte
   \   0000DA   A9..         MOV     R1,?V0
   \   0000DC   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    729                SendByte(cl);
   \   0000DF                ; Setup parameters for call to function SendByte
   \   0000DF   A9..         MOV     R1,?V1
   \   0000E1   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    730                SendByte(ch);
   \   0000E4                ; Setup parameters for call to function SendByte
   \   0000E4   A9..         MOV     R1,?V0
   \   0000E6   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    731                SendByte(cl);
   \   0000E9                ; Setup parameters for call to function SendByte
   \   0000E9   A9..         MOV     R1,?V1
   \   0000EB   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    732                SendByte(ch);
   \   0000EE                ; Setup parameters for call to function SendByte
   \   0000EE   A9..         MOV     R1,?V0
   \   0000F0   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    733                SendByte(cl);
   \   0000F3                ; Setup parameters for call to function SendByte
   \   0000F3   A9..         MOV     R1,?V1
   \   0000F5   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    734                SendByte(ch);
   \   0000F8                ; Setup parameters for call to function SendByte
   \   0000F8   A9..         MOV     R1,?V0
   \   0000FA   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    735                SendByte(cl);
   \   0000FD                ; Setup parameters for call to function SendByte
   \   0000FD   A9..         MOV     R1,?V1
   \   0000FF   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    736                SendByte(ch);
   \   000102                ; Setup parameters for call to function SendByte
   \   000102   A9..         MOV     R1,?V0
   \   000104   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    737                SendByte(cl);
   \   000107                ; Setup parameters for call to function SendByte
   \   000107   A9..         MOV     R1,?V1
   \   000109   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    738                SendByte(ch);
   \   00010C                ; Setup parameters for call to function SendByte
   \   00010C   A9..         MOV     R1,?V0
   \   00010E   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    739                SendByte(cl);
   \   000111                ; Setup parameters for call to function SendByte
   \   000111   A9..         MOV     R1,?V1
   \   000113   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    740                SendByte(ch);
   \   000116                ; Setup parameters for call to function SendByte
   \   000116   A9..         MOV     R1,?V0
   \   000118   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    741                SendByte(cl);
   \   00011B                ; Setup parameters for call to function SendByte
   \   00011B   A9..         MOV     R1,?V1
   \   00011D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    742                SendByte(ch);
   \   000120                ; Setup parameters for call to function SendByte
   \   000120   A9..         MOV     R1,?V0
   \   000122   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    743                SendByte(cl);
   \   000125                ; Setup parameters for call to function SendByte
   \   000125   A9..         MOV     R1,?V1
   \   000127   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    744            }    
   \   00012A   05..         INC     ?V2
   \   00012C   E5..         MOV     A,?V2
   \   00012E   7002         JNZ     ??DrawRectFill_0
   \   000130   05..         INC     ?V3
   \                     ??DrawRectFill_0:
   \   000132   C3           CLR     C
   \   000133   E5..         MOV     A,?V2
   \   000135   9E           SUBB    A,R6
   \   000136   E5..         MOV     A,?V3
   \   000138   9F           SUBB    A,R7
   \   000139   5003         JNC     $+5
   \   00013B   02....       LJMP    ??DrawRectFill_1 & 0xFFFF
    745          }
   \   00013E   7F08         MOV     R7,#0x8
   \   000140   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000143                REQUIRE _A_P0
    746          
    747          /****************************************************************************
    748          * 名    称: LCD_clear()
    749          * 功    能: 以指定颜色清屏
    750          * 入口参数: color ―清屏颜色
    751          * 出口参数: 无
    752          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    753          void LCD_clear(unsigned int color)
   \                     LCD_clear:
    754          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    755            register unsigned int  i=0,j=0;
    756            register unsigned char ch;
    757            register unsigned char cl;
    758            
    759            LCD_set_window(0,0,X_MAX_PIXEL,Y_MAX_PIXEL);
   \   000009                ; Setup parameters for call to function LCD_set_window
   \   000009   75..80       MOV     ?V0,#-0x80
   \   00000C   75..00       MOV     ?V1,#0x0
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   7C00         MOV     R4,#0x0
   \   00001B   7D00         MOV     R5,#0x0
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   `??LCD_set_window::?relay`; Banked call to: LCD_set_window
   \   000024   7404         MOV     A,#0x4
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
    760            ch = color>>8;
   \   000029   EF           MOV     A,R7
   \   00002A   F5..         MOV     ?V0,A
    761            cl = color&0xFF;
   \   00002C   EE           MOV     A,R6
   \   00002D   FE           MOV     R6,A
    762            LCD_write_byte(0x2C,LCD_COMMAND);
   \   00002E                ; Setup parameters for call to function LCD_write_byte
   \   00002E   7A00         MOV     R2,#0x0
   \   000030   792C         MOV     R1,#0x2c
   \   000032   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
    763            //LCD_CS_CLR;
    764            LCD_DC_SET;
   \   000035   D280         SETB    0x80.0
    765            for (i=0;i<Y_MAX_PIXEL;i++)
   \   000037   75..80       MOV     ?V1,#-0x80
    766              for (j=0;j<2;j++)
   \                     ??LCD_clear_0:
   \   00003A   7F02         MOV     R7,#0x2
    767              {
    768                SendByte(ch);
   \                     ??LCD_clear_1:
   \   00003C                ; Setup parameters for call to function SendByte
   \   00003C   A9..         MOV     R1,?V0
   \   00003E   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    769                SendByte(cl);
   \   000041                ; Setup parameters for call to function SendByte
   \   000041   EE           MOV     A,R6
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    770                SendByte(ch);
   \   000046                ; Setup parameters for call to function SendByte
   \   000046   A9..         MOV     R1,?V0
   \   000048   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    771                SendByte(cl);
   \   00004B                ; Setup parameters for call to function SendByte
   \   00004B   EE           MOV     A,R6
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    772                SendByte(ch);
   \   000050                ; Setup parameters for call to function SendByte
   \   000050   A9..         MOV     R1,?V0
   \   000052   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    773                SendByte(cl);
   \   000055                ; Setup parameters for call to function SendByte
   \   000055   EE           MOV     A,R6
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    774                SendByte(ch);
   \   00005A                ; Setup parameters for call to function SendByte
   \   00005A   A9..         MOV     R1,?V0
   \   00005C   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    775                SendByte(cl);
   \   00005F                ; Setup parameters for call to function SendByte
   \   00005F   EE           MOV     A,R6
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    776                SendByte(ch);
   \   000064                ; Setup parameters for call to function SendByte
   \   000064   A9..         MOV     R1,?V0
   \   000066   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    777                SendByte(cl);
   \   000069                ; Setup parameters for call to function SendByte
   \   000069   EE           MOV     A,R6
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    778                SendByte(ch);
   \   00006E                ; Setup parameters for call to function SendByte
   \   00006E   A9..         MOV     R1,?V0
   \   000070   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    779                SendByte(cl);
   \   000073                ; Setup parameters for call to function SendByte
   \   000073   EE           MOV     A,R6
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    780                SendByte(ch);
   \   000078                ; Setup parameters for call to function SendByte
   \   000078   A9..         MOV     R1,?V0
   \   00007A   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    781                SendByte(cl);
   \   00007D                ; Setup parameters for call to function SendByte
   \   00007D   EE           MOV     A,R6
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    782                SendByte(ch);
   \   000082                ; Setup parameters for call to function SendByte
   \   000082   A9..         MOV     R1,?V0
   \   000084   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    783                SendByte(cl);
   \   000087                ; Setup parameters for call to function SendByte
   \   000087   EE           MOV     A,R6
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    784                SendByte(ch);
   \   00008C                ; Setup parameters for call to function SendByte
   \   00008C   A9..         MOV     R1,?V0
   \   00008E   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    785                SendByte(cl);
   \   000091                ; Setup parameters for call to function SendByte
   \   000091   EE           MOV     A,R6
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    786                SendByte(ch);
   \   000096                ; Setup parameters for call to function SendByte
   \   000096   A9..         MOV     R1,?V0
   \   000098   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    787                SendByte(cl);
   \   00009B                ; Setup parameters for call to function SendByte
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    788                SendByte(ch);
   \   0000A0                ; Setup parameters for call to function SendByte
   \   0000A0   A9..         MOV     R1,?V0
   \   0000A2   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    789                SendByte(cl);
   \   0000A5                ; Setup parameters for call to function SendByte
   \   0000A5   EE           MOV     A,R6
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    790                SendByte(ch);
   \   0000AA                ; Setup parameters for call to function SendByte
   \   0000AA   A9..         MOV     R1,?V0
   \   0000AC   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    791                SendByte(cl);
   \   0000AF                ; Setup parameters for call to function SendByte
   \   0000AF   EE           MOV     A,R6
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    792                SendByte(ch);
   \   0000B4                ; Setup parameters for call to function SendByte
   \   0000B4   A9..         MOV     R1,?V0
   \   0000B6   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    793                SendByte(cl);
   \   0000B9                ; Setup parameters for call to function SendByte
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F9           MOV     R1,A
   \   0000BB   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    794                SendByte(ch);
   \   0000BE                ; Setup parameters for call to function SendByte
   \   0000BE   A9..         MOV     R1,?V0
   \   0000C0   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    795                SendByte(cl);
   \   0000C3                ; Setup parameters for call to function SendByte
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F9           MOV     R1,A
   \   0000C5   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    796                SendByte(ch);
   \   0000C8                ; Setup parameters for call to function SendByte
   \   0000C8   A9..         MOV     R1,?V0
   \   0000CA   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    797                SendByte(cl);
   \   0000CD                ; Setup parameters for call to function SendByte
   \   0000CD   EE           MOV     A,R6
   \   0000CE   F9           MOV     R1,A
   \   0000CF   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    798                SendByte(ch);
   \   0000D2                ; Setup parameters for call to function SendByte
   \   0000D2   A9..         MOV     R1,?V0
   \   0000D4   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    799                SendByte(cl);
   \   0000D7                ; Setup parameters for call to function SendByte
   \   0000D7   EE           MOV     A,R6
   \   0000D8   F9           MOV     R1,A
   \   0000D9   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    800                SendByte(ch);
   \   0000DC                ; Setup parameters for call to function SendByte
   \   0000DC   A9..         MOV     R1,?V0
   \   0000DE   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    801                SendByte(cl);
   \   0000E1                ; Setup parameters for call to function SendByte
   \   0000E1   EE           MOV     A,R6
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    802                SendByte(ch);
   \   0000E6                ; Setup parameters for call to function SendByte
   \   0000E6   A9..         MOV     R1,?V0
   \   0000E8   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    803                SendByte(cl);
   \   0000EB                ; Setup parameters for call to function SendByte
   \   0000EB   EE           MOV     A,R6
   \   0000EC   F9           MOV     R1,A
   \   0000ED   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    804                SendByte(ch);
   \   0000F0                ; Setup parameters for call to function SendByte
   \   0000F0   A9..         MOV     R1,?V0
   \   0000F2   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    805                SendByte(cl);
   \   0000F5                ; Setup parameters for call to function SendByte
   \   0000F5   EE           MOV     A,R6
   \   0000F6   F9           MOV     R1,A
   \   0000F7   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    806                SendByte(ch);
   \   0000FA                ; Setup parameters for call to function SendByte
   \   0000FA   A9..         MOV     R1,?V0
   \   0000FC   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    807                SendByte(cl);
   \   0000FF                ; Setup parameters for call to function SendByte
   \   0000FF   EE           MOV     A,R6
   \   000100   F9           MOV     R1,A
   \   000101   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    808                SendByte(ch);
   \   000104                ; Setup parameters for call to function SendByte
   \   000104   A9..         MOV     R1,?V0
   \   000106   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    809                SendByte(cl);
   \   000109                ; Setup parameters for call to function SendByte
   \   000109   EE           MOV     A,R6
   \   00010A   F9           MOV     R1,A
   \   00010B   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    810                SendByte(ch);
   \   00010E                ; Setup parameters for call to function SendByte
   \   00010E   A9..         MOV     R1,?V0
   \   000110   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    811                SendByte(cl);
   \   000113                ; Setup parameters for call to function SendByte
   \   000113   EE           MOV     A,R6
   \   000114   F9           MOV     R1,A
   \   000115   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    812                SendByte(ch);
   \   000118                ; Setup parameters for call to function SendByte
   \   000118   A9..         MOV     R1,?V0
   \   00011A   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    813                SendByte(cl);
   \   00011D                ; Setup parameters for call to function SendByte
   \   00011D   EE           MOV     A,R6
   \   00011E   F9           MOV     R1,A
   \   00011F   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    814                SendByte(ch);
   \   000122                ; Setup parameters for call to function SendByte
   \   000122   A9..         MOV     R1,?V0
   \   000124   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    815                SendByte(cl);
   \   000127                ; Setup parameters for call to function SendByte
   \   000127   EE           MOV     A,R6
   \   000128   F9           MOV     R1,A
   \   000129   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    816                SendByte(ch);
   \   00012C                ; Setup parameters for call to function SendByte
   \   00012C   A9..         MOV     R1,?V0
   \   00012E   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    817                SendByte(cl);
   \   000131                ; Setup parameters for call to function SendByte
   \   000131   EE           MOV     A,R6
   \   000132   F9           MOV     R1,A
   \   000133   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    818                SendByte(ch);
   \   000136                ; Setup parameters for call to function SendByte
   \   000136   A9..         MOV     R1,?V0
   \   000138   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    819                SendByte(cl);
   \   00013B                ; Setup parameters for call to function SendByte
   \   00013B   EE           MOV     A,R6
   \   00013C   F9           MOV     R1,A
   \   00013D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    820                SendByte(ch);
   \   000140                ; Setup parameters for call to function SendByte
   \   000140   A9..         MOV     R1,?V0
   \   000142   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    821                SendByte(cl);
   \   000145                ; Setup parameters for call to function SendByte
   \   000145   EE           MOV     A,R6
   \   000146   F9           MOV     R1,A
   \   000147   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    822                SendByte(ch);
   \   00014A                ; Setup parameters for call to function SendByte
   \   00014A   A9..         MOV     R1,?V0
   \   00014C   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    823                SendByte(cl);
   \   00014F                ; Setup parameters for call to function SendByte
   \   00014F   EE           MOV     A,R6
   \   000150   F9           MOV     R1,A
   \   000151   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    824                SendByte(ch);
   \   000154                ; Setup parameters for call to function SendByte
   \   000154   A9..         MOV     R1,?V0
   \   000156   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    825                SendByte(cl);
   \   000159                ; Setup parameters for call to function SendByte
   \   000159   EE           MOV     A,R6
   \   00015A   F9           MOV     R1,A
   \   00015B   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    826                SendByte(ch);
   \   00015E                ; Setup parameters for call to function SendByte
   \   00015E   A9..         MOV     R1,?V0
   \   000160   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    827                SendByte(cl);
   \   000163                ; Setup parameters for call to function SendByte
   \   000163   EE           MOV     A,R6
   \   000164   F9           MOV     R1,A
   \   000165   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    828                SendByte(ch);
   \   000168                ; Setup parameters for call to function SendByte
   \   000168   A9..         MOV     R1,?V0
   \   00016A   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    829                SendByte(cl);
   \   00016D                ; Setup parameters for call to function SendByte
   \   00016D   EE           MOV     A,R6
   \   00016E   F9           MOV     R1,A
   \   00016F   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    830                SendByte(ch);
   \   000172                ; Setup parameters for call to function SendByte
   \   000172   A9..         MOV     R1,?V0
   \   000174   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    831                SendByte(cl);      
   \   000177                ; Setup parameters for call to function SendByte
   \   000177   EE           MOV     A,R6
   \   000178   F9           MOV     R1,A
   \   000179   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    832                SendByte(ch);
   \   00017C                ; Setup parameters for call to function SendByte
   \   00017C   A9..         MOV     R1,?V0
   \   00017E   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    833                SendByte(cl);
   \   000181                ; Setup parameters for call to function SendByte
   \   000181   EE           MOV     A,R6
   \   000182   F9           MOV     R1,A
   \   000183   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    834                SendByte(ch);
   \   000186                ; Setup parameters for call to function SendByte
   \   000186   A9..         MOV     R1,?V0
   \   000188   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    835                SendByte(cl);
   \   00018B                ; Setup parameters for call to function SendByte
   \   00018B   EE           MOV     A,R6
   \   00018C   F9           MOV     R1,A
   \   00018D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    836                SendByte(ch);
   \   000190                ; Setup parameters for call to function SendByte
   \   000190   A9..         MOV     R1,?V0
   \   000192   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    837                SendByte(cl);
   \   000195                ; Setup parameters for call to function SendByte
   \   000195   EE           MOV     A,R6
   \   000196   F9           MOV     R1,A
   \   000197   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    838                SendByte(ch);
   \   00019A                ; Setup parameters for call to function SendByte
   \   00019A   A9..         MOV     R1,?V0
   \   00019C   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    839                SendByte(cl);
   \   00019F                ; Setup parameters for call to function SendByte
   \   00019F   EE           MOV     A,R6
   \   0001A0   F9           MOV     R1,A
   \   0001A1   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    840                SendByte(ch);
   \   0001A4                ; Setup parameters for call to function SendByte
   \   0001A4   A9..         MOV     R1,?V0
   \   0001A6   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    841                SendByte(cl);
   \   0001A9                ; Setup parameters for call to function SendByte
   \   0001A9   EE           MOV     A,R6
   \   0001AA   F9           MOV     R1,A
   \   0001AB   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    842                SendByte(ch);
   \   0001AE                ; Setup parameters for call to function SendByte
   \   0001AE   A9..         MOV     R1,?V0
   \   0001B0   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    843                SendByte(cl);
   \   0001B3                ; Setup parameters for call to function SendByte
   \   0001B3   EE           MOV     A,R6
   \   0001B4   F9           MOV     R1,A
   \   0001B5   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    844                SendByte(ch);
   \   0001B8                ; Setup parameters for call to function SendByte
   \   0001B8   A9..         MOV     R1,?V0
   \   0001BA   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    845                SendByte(cl);
   \   0001BD                ; Setup parameters for call to function SendByte
   \   0001BD   EE           MOV     A,R6
   \   0001BE   F9           MOV     R1,A
   \   0001BF   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    846                SendByte(ch);
   \   0001C2                ; Setup parameters for call to function SendByte
   \   0001C2   A9..         MOV     R1,?V0
   \   0001C4   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    847                SendByte(cl);
   \   0001C7                ; Setup parameters for call to function SendByte
   \   0001C7   EE           MOV     A,R6
   \   0001C8   F9           MOV     R1,A
   \   0001C9   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    848                SendByte(ch);
   \   0001CC                ; Setup parameters for call to function SendByte
   \   0001CC   A9..         MOV     R1,?V0
   \   0001CE   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    849                SendByte(cl);
   \   0001D1                ; Setup parameters for call to function SendByte
   \   0001D1   EE           MOV     A,R6
   \   0001D2   F9           MOV     R1,A
   \   0001D3   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    850                SendByte(ch);
   \   0001D6                ; Setup parameters for call to function SendByte
   \   0001D6   A9..         MOV     R1,?V0
   \   0001D8   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    851                SendByte(cl);
   \   0001DB                ; Setup parameters for call to function SendByte
   \   0001DB   EE           MOV     A,R6
   \   0001DC   F9           MOV     R1,A
   \   0001DD   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    852                SendByte(ch);
   \   0001E0                ; Setup parameters for call to function SendByte
   \   0001E0   A9..         MOV     R1,?V0
   \   0001E2   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    853                SendByte(cl);
   \   0001E5                ; Setup parameters for call to function SendByte
   \   0001E5   EE           MOV     A,R6
   \   0001E6   F9           MOV     R1,A
   \   0001E7   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    854                SendByte(ch);
   \   0001EA                ; Setup parameters for call to function SendByte
   \   0001EA   A9..         MOV     R1,?V0
   \   0001EC   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    855                SendByte(cl);
   \   0001EF                ; Setup parameters for call to function SendByte
   \   0001EF   EE           MOV     A,R6
   \   0001F0   F9           MOV     R1,A
   \   0001F1   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    856                SendByte(ch);
   \   0001F4                ; Setup parameters for call to function SendByte
   \   0001F4   A9..         MOV     R1,?V0
   \   0001F6   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    857                SendByte(cl);
   \   0001F9                ; Setup parameters for call to function SendByte
   \   0001F9   EE           MOV     A,R6
   \   0001FA   F9           MOV     R1,A
   \   0001FB   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    858                SendByte(ch);
   \   0001FE                ; Setup parameters for call to function SendByte
   \   0001FE   A9..         MOV     R1,?V0
   \   000200   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    859                SendByte(cl);
   \   000203                ; Setup parameters for call to function SendByte
   \   000203   EE           MOV     A,R6
   \   000204   F9           MOV     R1,A
   \   000205   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    860                SendByte(ch);
   \   000208                ; Setup parameters for call to function SendByte
   \   000208   A9..         MOV     R1,?V0
   \   00020A   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    861                SendByte(cl);
   \   00020D                ; Setup parameters for call to function SendByte
   \   00020D   EE           MOV     A,R6
   \   00020E   F9           MOV     R1,A
   \   00020F   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    862                SendByte(ch);
   \   000212                ; Setup parameters for call to function SendByte
   \   000212   A9..         MOV     R1,?V0
   \   000214   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    863                SendByte(cl);
   \   000217                ; Setup parameters for call to function SendByte
   \   000217   EE           MOV     A,R6
   \   000218   F9           MOV     R1,A
   \   000219   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    864                SendByte(ch);
   \   00021C                ; Setup parameters for call to function SendByte
   \   00021C   A9..         MOV     R1,?V0
   \   00021E   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    865                SendByte(cl);
   \   000221                ; Setup parameters for call to function SendByte
   \   000221   EE           MOV     A,R6
   \   000222   F9           MOV     R1,A
   \   000223   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    866                SendByte(ch);
   \   000226                ; Setup parameters for call to function SendByte
   \   000226   A9..         MOV     R1,?V0
   \   000228   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    867                SendByte(cl);
   \   00022B                ; Setup parameters for call to function SendByte
   \   00022B   EE           MOV     A,R6
   \   00022C   F9           MOV     R1,A
   \   00022D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    868                SendByte(ch);
   \   000230                ; Setup parameters for call to function SendByte
   \   000230   A9..         MOV     R1,?V0
   \   000232   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    869                SendByte(cl);
   \   000235                ; Setup parameters for call to function SendByte
   \   000235   EE           MOV     A,R6
   \   000236   F9           MOV     R1,A
   \   000237   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    870                SendByte(ch);
   \   00023A                ; Setup parameters for call to function SendByte
   \   00023A   A9..         MOV     R1,?V0
   \   00023C   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    871                SendByte(cl);
   \   00023F                ; Setup parameters for call to function SendByte
   \   00023F   EE           MOV     A,R6
   \   000240   F9           MOV     R1,A
   \   000241   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    872                SendByte(ch);
   \   000244                ; Setup parameters for call to function SendByte
   \   000244   A9..         MOV     R1,?V0
   \   000246   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    873                SendByte(cl);
   \   000249                ; Setup parameters for call to function SendByte
   \   000249   EE           MOV     A,R6
   \   00024A   F9           MOV     R1,A
   \   00024B   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    874                SendByte(ch);
   \   00024E                ; Setup parameters for call to function SendByte
   \   00024E   A9..         MOV     R1,?V0
   \   000250   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    875                SendByte(cl);
   \   000253                ; Setup parameters for call to function SendByte
   \   000253   EE           MOV     A,R6
   \   000254   F9           MOV     R1,A
   \   000255   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    876                SendByte(ch);
   \   000258                ; Setup parameters for call to function SendByte
   \   000258   A9..         MOV     R1,?V0
   \   00025A   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    877                SendByte(cl);
   \   00025D                ; Setup parameters for call to function SendByte
   \   00025D   EE           MOV     A,R6
   \   00025E   F9           MOV     R1,A
   \   00025F   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    878                SendByte(ch);
   \   000262                ; Setup parameters for call to function SendByte
   \   000262   A9..         MOV     R1,?V0
   \   000264   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    879                SendByte(cl);
   \   000267                ; Setup parameters for call to function SendByte
   \   000267   EE           MOV     A,R6
   \   000268   F9           MOV     R1,A
   \   000269   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    880                SendByte(ch);
   \   00026C                ; Setup parameters for call to function SendByte
   \   00026C   A9..         MOV     R1,?V0
   \   00026E   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    881                SendByte(cl);
   \   000271                ; Setup parameters for call to function SendByte
   \   000271   EE           MOV     A,R6
   \   000272   F9           MOV     R1,A
   \   000273   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    882                SendByte(ch);
   \   000276                ; Setup parameters for call to function SendByte
   \   000276   A9..         MOV     R1,?V0
   \   000278   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    883                SendByte(cl);
   \   00027B                ; Setup parameters for call to function SendByte
   \   00027B   EE           MOV     A,R6
   \   00027C   F9           MOV     R1,A
   \   00027D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    884                SendByte(ch);
   \   000280                ; Setup parameters for call to function SendByte
   \   000280   A9..         MOV     R1,?V0
   \   000282   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    885                SendByte(cl);
   \   000285                ; Setup parameters for call to function SendByte
   \   000285   EE           MOV     A,R6
   \   000286   F9           MOV     R1,A
   \   000287   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    886                SendByte(ch);
   \   00028A                ; Setup parameters for call to function SendByte
   \   00028A   A9..         MOV     R1,?V0
   \   00028C   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    887                SendByte(cl);
   \   00028F                ; Setup parameters for call to function SendByte
   \   00028F   EE           MOV     A,R6
   \   000290   F9           MOV     R1,A
   \   000291   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    888                SendByte(ch);
   \   000294                ; Setup parameters for call to function SendByte
   \   000294   A9..         MOV     R1,?V0
   \   000296   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    889                SendByte(cl);
   \   000299                ; Setup parameters for call to function SendByte
   \   000299   EE           MOV     A,R6
   \   00029A   F9           MOV     R1,A
   \   00029B   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    890                SendByte(ch);
   \   00029E                ; Setup parameters for call to function SendByte
   \   00029E   A9..         MOV     R1,?V0
   \   0002A0   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    891                SendByte(cl);
   \   0002A3                ; Setup parameters for call to function SendByte
   \   0002A3   EE           MOV     A,R6
   \   0002A4   F9           MOV     R1,A
   \   0002A5   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    892                SendByte(ch);
   \   0002A8                ; Setup parameters for call to function SendByte
   \   0002A8   A9..         MOV     R1,?V0
   \   0002AA   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    893                SendByte(cl);
   \   0002AD                ; Setup parameters for call to function SendByte
   \   0002AD   EE           MOV     A,R6
   \   0002AE   F9           MOV     R1,A
   \   0002AF   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    894                SendByte(ch);
   \   0002B2                ; Setup parameters for call to function SendByte
   \   0002B2   A9..         MOV     R1,?V0
   \   0002B4   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    895                SendByte(cl);
   \   0002B7                ; Setup parameters for call to function SendByte
   \   0002B7   EE           MOV     A,R6
   \   0002B8   F9           MOV     R1,A
   \   0002B9   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    896              }
   \   0002BC   1F           DEC     R7
   \   0002BD   EF           MOV     A,R7
   \   0002BE   6003         JZ      $+5
   \   0002C0   02....       LJMP    ??LCD_clear_1 & 0xFFFF
   \   0002C3   15..         DEC     ?V1
   \   0002C5   E5..         MOV     A,?V1
   \   0002C7   6003         JZ      $+5
   \   0002C9   02....       LJMP    ??LCD_clear_0 & 0xFFFF
    897            LCD_DC_SET;
   \   0002CC                REQUIRE ?Subroutine5
   \   0002CC                REQUIRE _A_P0
   \   0002CC                ; // Fall through to label ?Subroutine5
    898            //LCD_CS_SET;
    899          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D280         SETB    0x80.0
   \   000002   7F02         MOV     R7,#0x2
   \   000004   02....       LJMP    ?BANKED_LEAVE_XDATA
    900          
    901          /****************************************************************************
    902          * 名    称: LCD_write_EN()
    903          * 功    能: 在指定位置显示 7 ×14 点阵ASCII字符 
    904          * 入口参数: X - 显示位置左上角横坐标      Y ―显示位置左上角纵坐标
    905          *           c ―显示字符                  
    906          * 出口参数: 无
    907          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    908          static void LCD_write_EN(unsigned int X, unsigned int Y, unsigned char c)
   \                     LCD_write_EN:
    909          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    910            unsigned char i,j,temp;
    911            
    912            LCD_set_window(X,Y,7,14);
   \   000007                ; Setup parameters for call to function LCD_set_window
   \   000007   75..0E       MOV     ?V0,#0xe
   \   00000A   75..00       MOV     ?V1,#0x0
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   75..07       MOV     ?V0,#0x7
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   12....       LCALL   `??LCD_set_window::?relay`; Banked call to: LCD_set_window
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
    913            //LCD_CS_CLR ;
    914            LCD_DC_SET ;
   \   000022   D280         SETB    0x80.0
    915            for(i=0;i<14;i++)
   \   000024   7F00         MOV     R7,#0x0
    916            {
    917              temp = ASCII7x14[c-32][i];
   \                     ??LCD_write_EN_0:
   \   000026   EE           MOV     A,R6
   \   000027   75F00E       MOV     B,#0xe
   \   00002A   A4           MUL     AB
   \   00002B   F8           MOV     R0,A
   \   00002C   A9F0         MOV     R1,B
   \   00002E   EF           MOV     A,R7
   \   00002F   FA           MOV     R2,A
   \   000030   74..         MOV     A,#(ASCII7x14 + 64) & 0xff
   \   000032   2A           ADD     A,R2
   \   000033   FA           MOV     R2,A
   \   000034   E4           CLR     A
   \   000035   34..         ADDC    A,#((ASCII7x14 - 448) >> 8) & 0xff
   \   000037   FB           MOV     R3,A
   \   000038   EA           MOV     A,R2
   \   000039   28           ADD     A,R0
   \   00003A   F582         MOV     DPL,A
   \   00003C   EB           MOV     A,R3
   \   00003D   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000040   F5..         MOV     ?V0,A
    918              for(j=0;j<7;j++)
   \   000042   75..07       MOV     ?V1,#0x7
    919              {
    920                if(temp&0x80)
   \                     ??LCD_write_EN_1:
   \   000045   E5..         MOV     A,?V0
   \   000047   A2E7         MOV     C,0xE0 /* A   */.7
   \   000049   500D         JNC     ??LCD_write_EN_2
    921                {
    922                  SendByte(Color>>8);  
   \   00004B                ; Setup parameters for call to function SendByte
   \   00004B   90....       MOV     DPTR,#Color + 1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    923                  SendByte(Color) ;
   \   000053                ; Setup parameters for call to function SendByte
   \   000053   90....       MOV     DPTR,#Color
   \   000056   800B         SJMP    ??LCD_write_EN_3
    924                }
    925                else
    926                {
    927                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_EN_2:
   \   000058                ; Setup parameters for call to function SendByte
   \   000058   90....       MOV     DPTR,#Color_BK + 1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    928                  SendByte(Color_BK);
   \   000060                ; Setup parameters for call to function SendByte
   \   000060   90....       MOV     DPTR,#Color_BK
   \                     ??LCD_write_EN_3:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    929                }            
    930                temp <<= 1 ;
   \   000068   E5..         MOV     A,?V0
   \   00006A   C3           CLR     C
   \   00006B   33           RLC     A
   \   00006C   F5..         MOV     ?V0,A
    931              }
   \   00006E   15..         DEC     ?V1
   \   000070   E5..         MOV     A,?V1
   \   000072   70D1         JNZ     ??LCD_write_EN_1
    932            }
   \   000074   0F           INC     R7
   \   000075   EF           MOV     A,R7
   \   000076   C3           CLR     C
   \   000077   940E         SUBB    A,#0xe
   \   000079   40AB         JC      ??LCD_write_EN_0
    933            //LCD_CS_SET ; andy
    934            LCD_DC_SET ;
   \   00007B   02....       LJMP    ?Subroutine5 & 0xFFFF
   \   00007E                REQUIRE _A_P0
    935          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   22           RET
    936          
    937          /****************************************************************************
    938          * 名    称: LCD_write_EN_string()
    939          * 功    能: 在指定位置显示 7 ×14 点阵ASCII字符串 
    940          * 入口参数: X - 显示位置左上角横坐标      Y ―显示位置左上角纵坐标
    941          *           s ―字符串指针                  
    942          * 出口参数: 无
    943          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    944          void LCD_write_EN_string(unsigned char X,unsigned char Y,uint8 *s)
   \                     LCD_write_EN_string:
    945          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    946            unsigned char i=0;
   \   00000D   75..00       MOV     ?V0,#0x0
    947            
    948            while (*s)
   \                     ??LCD_write_EN_string_0:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   602D         JZ      ??LCD_write_EN_string_1
    949            {
    950              LCD_write_EN(X+i*7,Y,*s);
   \   000017                ; Setup parameters for call to function LCD_write_EN
   \   000017   F9           MOV     R1,A
   \   000018   AC..         MOV     R4,?V1
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   85....       MOV     ?V4,?V2
   \   00001F   E5..         MOV     A,?V0
   \   000021   75F007       MOV     B,#0x7
   \   000024   A4           MUL     AB
   \   000025   FA           MOV     R2,A
   \   000026   ABF0         MOV     R3,B
   \   000028   E5..         MOV     A,?V4
   \   00002A   2A           ADD     A,R2
   \   00002B   FA           MOV     R2,A
   \   00002C   E4           CLR     A
   \   00002D   3B           ADDC    A,R3
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??LCD_write_EN::?relay`; Banked call to: LCD_write_EN
    951              s++;
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   AE82         MOV     R6,DPL
   \   000039   AF83         MOV     R7,DPH
    952              i++;
   \   00003B   05..         INC     ?V0
    953              if(i>=HAL_LCD_MAX_CHARS)return;
   \   00003D   E5..         MOV     A,?V0
   \   00003F   C3           CLR     C
   \   000040   9410         SUBB    A,#0x10
   \   000042   40CC         JC      ??LCD_write_EN_string_0
    954            }
    955            return;
   \                     ??LCD_write_EN_string_1:
   \   000044   02....       LJMP    ??Subroutine14_0 & 0xFFFF
    956          }
    957          
    958          /****************************************************************************
    959          * 名    称: LCD_write_CN()
    960          * 功    能: 在指定位置显示 14 ×14 点阵汉字字符  
    961          * 入口参数: X - 显示位置左上角横坐标      Y ―显示位置左上角纵坐标
    962          *           c ―显示字符指针                  
    963          * 出口参数: 无
    964          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          static void LCD_write_CN(unsigned int X, unsigned int Y, unsigned char c)
   \                     LCD_write_CN:
    966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    967            unsigned char i,j,temp;
    968            
    969            LCD_set_window(X,Y,14,14);  //按字符点阵大小设置显示窗口
   \   000007                ; Setup parameters for call to function LCD_set_window
   \   000007   75..0E       MOV     ?V0,#0xe
   \   00000A   75..00       MOV     ?V1,#0x0
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017   12....       LCALL   `??LCD_set_window::?relay`; Banked call to: LCD_set_window
   \   00001A   7404         MOV     A,#0x4
   \   00001C   12....       LCALL   ?DEALLOC_XSTACK8
    970            //LCD_CS_CLR;               //液晶SPI使能andy
    971            LCD_DC_SET;                 //发送数据信号使能
   \   00001F   D280         SETB    0x80.0
    972            for(i=0;i<28;i++)           // 14x14字符点阵数据大小为2x14=28字节
   \   000021   75..00       MOV     ?V0,#0x0
    973            {
    974              temp = CN14x14[c][i] ;    //读字模数组
   \                     ??LCD_write_CN_0:
   \   000024   12....       LCALL   ?Subroutine7 & 0xFFFF
    975              for(j=0;j<8;j++)          // 按位显示
   \                     ??CrossCallReturnLabel_0:
   \   000027   75..08       MOV     ?V1,#0x8
    976              {
    977                if(temp&0x80)           //如果位值为1，显示字符色
   \                     ??LCD_write_CN_1:
   \   00002A   EE           MOV     A,R6
   \   00002B   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002D   500D         JNC     ??LCD_write_CN_2
    978                {
    979                  SendByte(Color>>8);  
   \   00002F                ; Setup parameters for call to function SendByte
   \   00002F   90....       MOV     DPTR,#Color + 1
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    980                  SendByte(Color) ;
   \   000037                ; Setup parameters for call to function SendByte
   \   000037   90....       MOV     DPTR,#Color
   \   00003A   800B         SJMP    ??LCD_write_CN_3
    981                }
    982                else                    //如果位值为0，显示背景色
    983                {
    984                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_CN_2:
   \   00003C                ; Setup parameters for call to function SendByte
   \   00003C   90....       MOV     DPTR,#Color_BK + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    985                  SendByte(Color_BK);
   \   000044                ; Setup parameters for call to function SendByte
   \   000044   90....       MOV     DPTR,#Color_BK
   \                     ??LCD_write_CN_3:
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    986                }            
    987                temp <<= 1 ;
   \   00004C   EE           MOV     A,R6
   \   00004D   C3           CLR     C
   \   00004E   33           RLC     A
   \   00004F   FE           MOV     R6,A
    988              }
   \   000050   15..         DEC     ?V1
   \   000052   E5..         MOV     A,?V1
   \   000054   70D4         JNZ     ??LCD_write_CN_1
    989              i++ ;                     //指向下一字节
   \   000056   05..         INC     ?V0
    990              temp = CN14x14[c][i];
   \   000058   12....       LCALL   ?Subroutine7 & 0xFFFF
    991              for(j=0;j<6;j++)          // 按位显示，点阵横向为14像素，
   \                     ??CrossCallReturnLabel_1:
   \   00005B   75..06       MOV     ?V1,#0x6
    992              {                         // 所以每行第2字节最后2位抛弃
    993                if(temp&0x80)           // 如果位值为1，显示字符色
   \                     ??LCD_write_CN_4:
   \   00005E   EE           MOV     A,R6
   \   00005F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000061   500D         JNC     ??LCD_write_CN_5
    994                {
    995                  SendByte(Color>>8);  
   \   000063                ; Setup parameters for call to function SendByte
   \   000063   90....       MOV     DPTR,#Color + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
    996                  SendByte(Color) ;
   \   00006B                ; Setup parameters for call to function SendByte
   \   00006B   90....       MOV     DPTR,#Color
   \   00006E   800B         SJMP    ??LCD_write_CN_6
    997                }
    998                else                    // 如果位值为0，显示背景色
    999                {
   1000                  SendByte(Color_BK>>8) ;  
   \                     ??LCD_write_CN_5:
   \   000070                ; Setup parameters for call to function SendByte
   \   000070   90....       MOV     DPTR,#Color_BK + 1
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
   1001                  SendByte(Color_BK);
   \   000078                ; Setup parameters for call to function SendByte
   \   000078   90....       MOV     DPTR,#Color_BK
   \                     ??LCD_write_CN_6:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   12....       LCALL   `??SendByte::?relay` ; Banked call to: SendByte
   1002                }            
   1003                temp <<= 1 ;
   \   000080   EE           MOV     A,R6
   \   000081   C3           CLR     C
   \   000082   33           RLC     A
   \   000083   FE           MOV     R6,A
   1004              }
   \   000084   15..         DEC     ?V1
   \   000086   E5..         MOV     A,?V1
   \   000088   70D4         JNZ     ??LCD_write_CN_4
   1005            }
   \   00008A   05..         INC     ?V0
   \   00008C   E5..         MOV     A,?V0
   \   00008E   C3           CLR     C
   \   00008F   941C         SUBB    A,#0x1c
   \   000091   4091         JC      ??LCD_write_CN_0
   1006            //LCD_CS_SET;               //液晶SPI禁止
   1007            LCD_DC_SET;                 //数据控制信号禁止
   \   000093   02....       LJMP    ?Subroutine5 & 0xFFFF
   \   000096                REQUIRE _A_P0
   1008          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   AA..         MOV     R2,?V0
   \   000002   EF           MOV     A,R7
   \   000003   75F01C       MOV     B,#0x1c
   \   000006   A4           MUL     AB
   \   000007   F8           MOV     R0,A
   \   000008   A9F0         MOV     R1,B
   \   00000A   74..         MOV     A,#CN14x14 & 0xff
   \   00000C   28           ADD     A,R0
   \   00000D   F8           MOV     R0,A
   \   00000E   74..         MOV     A,#(CN14x14 >> 8) & 0xff
   \   000010   39           ADDC    A,R1
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   2A           ADD     A,R2
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00001A   FE           MOV     R6,A
   \   00001B   22           RET
   1009          
   1010          /****************************************************************************
   1011          * 名    称: LCD_write_CN_string()
   1012          * 功    能: 在指定位置显示 14 ×14 点阵中文字符串   
   1013          * 入口参数: X - 显示位置左上角横坐标      Y ―显示位置左上角纵坐标
   1014          *           s ―字符串指针                  
   1015          * 出口参数: 无
   1016          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1017          void LCD_write_CN_string(unsigned char X,unsigned char Y,uint8 *s)
   \                     LCD_write_CN_string:
   1018          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1019            unsigned char i=0;
   \   00000D   75..00       MOV     ?V0,#0x0
   1020            static unsigned char j=0;
   1021            
   1022            while (*s)
   \                     ??LCD_write_CN_string_0:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7003         JNZ     $+5
   \   000017   02....       LJMP    ??LCD_write_CN_string_1 & 0xFFFF
   1023            {
   1024              for(j=0;j<ALL_CNS;j++)                  //搜索点阵字模
   \   00001A   90....       MOV     DPTR,#??j
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   1025              { 
   1026                if(  *s    ==CN14x14_Index[j*2]            
   1027                   &&*(s+1)==CN14x14_Index[j*2+1])    //汉字内码存在于字模索引数组中
   \                     ??LCD_write_CN_string_2:
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   90....       MOV     DPTR,#??j
   \   000028   E0           MOVX    A,@DPTR
   \   000029   25E0         ADD     A,0xE0 /* A   */
   \   00002B   F8           MOV     R0,A
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   F9           MOV     R1,A
   \   00002F   74..         MOV     A,#CN14x14_Index & 0xff
   \   000031   28           ADD     A,R0
   \   000032   F582         MOV     DPL,A
   \   000034   74..         MOV     A,#(CN14x14_Index >> 8) & 0xff
   \   000036   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000039   6A           XRL     A,R2
   \   00003A   7035         JNZ     ??LCD_write_CN_string_3
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FA           MOV     R2,A
   \   000043   74..         MOV     A,#(CN14x14_Index + 1) & 0xff
   \   000045   28           ADD     A,R0
   \   000046   F582         MOV     DPL,A
   \   000048   74..         MOV     A,#((CN14x14_Index + 1) >> 8) & 0xff
   \   00004A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00004D   6A           XRL     A,R2
   \   00004E   7021         JNZ     ??LCD_write_CN_string_3
   1028                {
   1029                  LCD_write_CN(X+i*14,Y,j) ;          //显示汉字
   \   000050                ; Setup parameters for call to function LCD_write_CN
   \   000050   90....       MOV     DPTR,#??j
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   AC..         MOV     R4,?V1
   \   000057   7D00         MOV     R5,#0x0
   \   000059   85....       MOV     ?V2,?V4
   \   00005C   E5..         MOV     A,?V0
   \   00005E   75F00E       MOV     B,#0xe
   \   000061   A4           MUL     AB
   \   000062   FA           MOV     R2,A
   \   000063   ABF0         MOV     R3,B
   \   000065   E5..         MOV     A,?V2
   \   000067   2A           ADD     A,R2
   \   000068   FA           MOV     R2,A
   \   000069   E4           CLR     A
   \   00006A   3B           ADDC    A,R3
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??LCD_write_CN::?relay`; Banked call to: LCD_write_CN
   1030                  break; 
   \   00006F   800B         SJMP    ??LCD_write_CN_string_4
   1031                }
   1032              }
   \                     ??LCD_write_CN_string_3:
   \   000071   90....       MOV     DPTR,#??j
   \   000074   E0           MOVX    A,@DPTR
   \   000075   04           INC     A
   \   000076   F0           MOVX    @DPTR,A
   \   000077   C3           CLR     C
   \   000078   9480         SUBB    A,#-0x80
   \   00007A   40A3         JC      ??LCD_write_CN_string_2
   1033              if(j>=ALL_CNS)                          //无此字的点阵字模
   \                     ??LCD_write_CN_string_4:
   \   00007C   90....       MOV     DPTR,#??j
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C3           CLR     C
   \   000081   9480         SUBB    A,#-0x80
   \   000083   4035         JC      ??LCD_write_CN_string_5
   1034              {
   1035                DrawRectFill(X+i*14,Y,14,14,Color_BK);//显示空格
   \   000085                ; Setup parameters for call to function DrawRectFill
   \   000085   90....       MOV     DPTR,#Color_BK
   \   000088   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008B   75..0E       MOV     ?V2,#0xe
   \   00008E   75..00       MOV     ?V3,#0x0
   \   000091   78..         MOV     R0,#?V2
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   78..         MOV     R0,#?V2
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   AC..         MOV     R4,?V1
   \   00009D   7D00         MOV     R5,#0x0
   \   00009F   E5..         MOV     A,?V0
   \   0000A1   75F00E       MOV     B,#0xe
   \   0000A4   A4           MUL     AB
   \   0000A5   F8           MOV     R0,A
   \   0000A6   85F0..       MOV     ?V2,B
   \   0000A9   A9..         MOV     R1,?V2
   \   0000AB   E5..         MOV     A,?V4
   \   0000AD   28           ADD     A,R0
   \   0000AE   FA           MOV     R2,A
   \   0000AF   E4           CLR     A
   \   0000B0   39           ADDC    A,R1
   \   0000B1   FB           MOV     R3,A
   \   0000B2   12....       LCALL   `??DrawRectFill::?relay`; Banked call to: DrawRectFill
   \   0000B5   7406         MOV     A,#0x6
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   1036              }
   1037              s++; s++ ;                              //字符指针移位
   \                     ??LCD_write_CN_string_5:
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2402         ADD     A,#0x2
   \   0000BD   FE           MOV     R6,A
   \   0000BE   5001         JNC     ??LCD_write_CN_string_6
   \   0000C0   0F           INC     R7
   1038              i++;
   \                     ??LCD_write_CN_string_6:
   \   0000C1   05..         INC     ?V0
   1039              if(i>=HAL_LCD_MAX_CHARS/2)  
   \   0000C3   E5..         MOV     A,?V0
   \   0000C5   C3           CLR     C
   \   0000C6   9408         SUBB    A,#0x8
   \   0000C8   5003         JNC     $+5
   \   0000CA   02....       LJMP    ??LCD_write_CN_string_0 & 0xFFFF
   1040                return;                               //超过最大显示字符数，返回
   1041            }
   1042            return ;
   \                     ??LCD_write_CN_string_1:
   \   0000CD   02....       LJMP    ??Subroutine11_0 & 0xFFFF
   1043          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??j:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1044          
   1045          /****************************************************************************
   1046          * 名    称: ShowImage()
   1047          * 功    能: 显示图片   
   1048          * 入口参数: p - 图片点阵数据  取模方式 水平扫描 从左到右 低位在前           
   1049          * 出口参数: 无
   1050          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1051          void ShowImage(const unsigned char *p) 
   \                     ShowImage:
   1052          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1053            int i; 
   1054            unsigned char picH,picL;
   1055            
   1056            LCD_set_window(24,5,80,40); //坐标设置
   \   000009                ; Setup parameters for call to function LCD_set_window
   \   000009   75..28       MOV     ?V2,#0x28
   \   00000C   75..00       MOV     ?V3,#0x0
   \   00000F   78..         MOV     R0,#?V2
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..50       MOV     ?V2,#0x50
   \   000017   78..         MOV     R0,#?V2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C05         MOV     R4,#0x5
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7A18         MOV     R2,#0x18
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??LCD_set_window::?relay`; Banked call to: LCD_set_window
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   1057            for(i=0;i<80*40;i++)
   \   00002C   7E00         MOV     R6,#0x0
   \   00002E   7F00         MOV     R7,#0x0
   1058            {	
   1059              picL=*(p+i*2);	//数据低位在前
   1060              picH=*(p+i*2+1);				
   1061              LCD_WriteData_16Bit(picH<<8|picL);  						
   \                     ??ShowImage_0:
   \   000030   EE           MOV     A,R6
   \   000031   F8           MOV     R0,A
   \   000032   EF           MOV     A,R7
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   28           ADD     A,R0
   \   000036   F8           MOV     R0,A
   \   000037   E9           MOV     A,R1
   \   000038   33           RLC     A
   \   000039   F9           MOV     R1,A
   \   00003A   E5..         MOV     A,?V0
   \   00003C   28           ADD     A,R0
   \   00003D   F8           MOV     R0,A
   \   00003E   E5..         MOV     A,?V1
   \   000040   39           ADDC    A,R1
   \   000041   F9           MOV     R1,A
   \   000042                ; Setup parameters for call to function LCD_WriteData_16Bit
   \   000042   8882         MOV     DPL,R0
   \   000044   8983         MOV     DPH,R1
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FB           MOV     R3,A
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   12....       LCALL   `??LCD_WriteData_16Bit::?relay`; Banked call to: LCD_WriteData_16Bit
   1062            }	
   \   000052   0E           INC     R6
   \   000053   EE           MOV     A,R6
   \   000054   7001         JNZ     ??ShowImage_1
   \   000056   0F           INC     R7
   \                     ??ShowImage_1:
   \   000057   C3           CLR     C
   \   000058   9480         SUBB    A,#-0x80
   \   00005A   EF           MOV     A,R7
   \   00005B   940C         SUBB    A,#0xc
   \   00005D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00005F   65D0         XRL     A,PSW
   \   000061   33           RLC     A
   \   000062   40CC         JC      ??ShowImage_0
   1063          }
   \   000064   02....       LJMP    ??Subroutine13_0 & 0xFFFF
   1064          
   1065          //初始化LCD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1066          void HalLcd_HW_Init(void)
   \                     HalLcd_HW_Init:
   1067          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1068            P0SEL &= 0xFE; //设置P00为普通IO口，
   \   000004   53F3FE       ANL     0xf3,#0xfe
   1069            P0DIR |= 0x01; //设置P00为输出
   \   000007   43FD01       ORL     0xfd,#0x1
   1070            P1SEL &= 0x73; //设置P12，P13,P17为普通IO口
   \   00000A   53F473       ANL     0xf4,#0x73
   1071            P1DIR |= 0x8c; //设置P12，P13,P17为输出 
   \   00000D   43FE8C       ORL     0xfe,#0x8c
   1072          
   1073            Lcd_Reset();
   \   000010                ; Setup parameters for call to function Lcd_Reset
   \   000010   12....       LCALL   `??Lcd_Reset::?relay`; Banked call to: Lcd_Reset
   1074            
   1075          #ifdef HARDWARE_SPI                                         
   1076            P1DIR &= 0x9F;
   1077            SPI_Init();   //初始化SPI端口  
   1078          #endif
   1079           
   1080            LCD_write_byte(0x11,LCD_COMMAND); //退出睡眠模式
   \   000013                ; Setup parameters for call to function LCD_write_byte
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7911         MOV     R1,#0x11
   \   000017   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1081            DelayMS(1); 
   \   00001A                ; Setup parameters for call to function DelayMS
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??DelayMS::?relay`  ; Banked call to: DelayMS
   1082          
   1083            ///ST7735R Frame Rate
   1084            LCD_write_byte(0xB1,LCD_COMMAND); 
   \   000021                ; Setup parameters for call to function LCD_write_byte
   \   000021   7A00         MOV     R2,#0x0
   \   000023   79B1         MOV     R1,#-0x4f
   \   000025   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1085            LCD_write_byte(0x01,LCD_DATA); 
   \   000028                ; Setup parameters for call to function LCD_write_byte
   \   000028   7A01         MOV     R2,#0x1
   \   00002A   7901         MOV     R1,#0x1
   \   00002C   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1086            LCD_write_byte(0x2C,LCD_DATA); 
   \   00002F                ; Setup parameters for call to function LCD_write_byte
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   792C         MOV     R1,#0x2c
   \   000033   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1087            LCD_write_byte(0x2D,LCD_DATA); 
   \   000036                ; Setup parameters for call to function LCD_write_byte
   \   000036   7A01         MOV     R2,#0x1
   \   000038   792D         MOV     R1,#0x2d
   \   00003A   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1088            LCD_write_byte(0xB2,LCD_COMMAND); 
   \   00003D                ; Setup parameters for call to function LCD_write_byte
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   79B2         MOV     R1,#-0x4e
   \   000041   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1089            LCD_write_byte(0x01,LCD_DATA); 
   \   000044                ; Setup parameters for call to function LCD_write_byte
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7901         MOV     R1,#0x1
   \   000048   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1090            LCD_write_byte(0x2C,LCD_DATA); 
   \   00004B                ; Setup parameters for call to function LCD_write_byte
   \   00004B   7A01         MOV     R2,#0x1
   \   00004D   792C         MOV     R1,#0x2c
   \   00004F   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1091            LCD_write_byte(0x2D,LCD_DATA); 
   \   000052                ; Setup parameters for call to function LCD_write_byte
   \   000052   7A01         MOV     R2,#0x1
   \   000054   792D         MOV     R1,#0x2d
   \   000056   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1092            LCD_write_byte(0xB3,LCD_COMMAND); 
   \   000059                ; Setup parameters for call to function LCD_write_byte
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   79B3         MOV     R1,#-0x4d
   \   00005D   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1093            LCD_write_byte(0x01,LCD_DATA); 
   \   000060                ; Setup parameters for call to function LCD_write_byte
   \   000060   7A01         MOV     R2,#0x1
   \   000062   7901         MOV     R1,#0x1
   \   000064   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1094            LCD_write_byte(0x2C,LCD_DATA); 
   \   000067                ; Setup parameters for call to function LCD_write_byte
   \   000067   7A01         MOV     R2,#0x1
   \   000069   792C         MOV     R1,#0x2c
   \   00006B   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1095            LCD_write_byte(0x2D,LCD_DATA); 
   \   00006E                ; Setup parameters for call to function LCD_write_byte
   \   00006E   7A01         MOV     R2,#0x1
   \   000070   792D         MOV     R1,#0x2d
   \   000072   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1096            LCD_write_byte(0x01,LCD_DATA); 
   \   000075                ; Setup parameters for call to function LCD_write_byte
   \   000075   7A01         MOV     R2,#0x1
   \   000077   7901         MOV     R1,#0x1
   \   000079   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1097            LCD_write_byte(0x2C,LCD_DATA); 
   \   00007C                ; Setup parameters for call to function LCD_write_byte
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   792C         MOV     R1,#0x2c
   \   000080   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1098            LCD_write_byte(0x2D,LCD_DATA); 
   \   000083                ; Setup parameters for call to function LCD_write_byte
   \   000083   7A01         MOV     R2,#0x1
   \   000085   792D         MOV     R1,#0x2d
   \   000087   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1099          
   1100            LCD_write_byte(0xB4,LCD_COMMAND);//列对调
   \   00008A                ; Setup parameters for call to function LCD_write_byte
   \   00008A   7A00         MOV     R2,#0x0
   \   00008C   79B4         MOV     R1,#-0x4c
   \   00008E   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1101            LCD_write_byte(0x07,LCD_DATA); 
   \   000091                ; Setup parameters for call to function LCD_write_byte
   \   000091   7A01         MOV     R2,#0x1
   \   000093   7907         MOV     R1,#0x7
   \   000095   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1102            //ST7735R加电序列
   1103            LCD_write_byte(0xC0,LCD_COMMAND); 
   \   000098                ; Setup parameters for call to function LCD_write_byte
   \   000098   7A00         MOV     R2,#0x0
   \   00009A   79C0         MOV     R1,#-0x40
   \   00009C   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1104            LCD_write_byte(0xA2,LCD_DATA); 
   \   00009F                ; Setup parameters for call to function LCD_write_byte
   \   00009F   7A01         MOV     R2,#0x1
   \   0000A1   79A2         MOV     R1,#-0x5e
   \   0000A3   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1105            LCD_write_byte(0x02,LCD_DATA); 
   \   0000A6                ; Setup parameters for call to function LCD_write_byte
   \   0000A6   7A01         MOV     R2,#0x1
   \   0000A8   7902         MOV     R1,#0x2
   \   0000AA   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1106            LCD_write_byte(0x84,LCD_DATA); 
   \   0000AD                ; Setup parameters for call to function LCD_write_byte
   \   0000AD   7A01         MOV     R2,#0x1
   \   0000AF   7984         MOV     R1,#-0x7c
   \   0000B1   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1107            LCD_write_byte(0xC1,LCD_COMMAND); 
   \   0000B4                ; Setup parameters for call to function LCD_write_byte
   \   0000B4   7A00         MOV     R2,#0x0
   \   0000B6   79C1         MOV     R1,#-0x3f
   \   0000B8   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1108            LCD_write_byte(0xC5,LCD_DATA); 
   \   0000BB                ; Setup parameters for call to function LCD_write_byte
   \   0000BB   7A01         MOV     R2,#0x1
   \   0000BD   79C5         MOV     R1,#-0x3b
   \   0000BF   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1109            LCD_write_byte(0xC2,LCD_COMMAND); 
   \   0000C2                ; Setup parameters for call to function LCD_write_byte
   \   0000C2   7A00         MOV     R2,#0x0
   \   0000C4   79C2         MOV     R1,#-0x3e
   \   0000C6   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1110            LCD_write_byte(0x0A,LCD_DATA); 
   \   0000C9                ; Setup parameters for call to function LCD_write_byte
   \   0000C9   7A01         MOV     R2,#0x1
   \   0000CB   790A         MOV     R1,#0xa
   \   0000CD   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1111            LCD_write_byte(0x00,LCD_DATA); 
   \   0000D0                ; Setup parameters for call to function LCD_write_byte
   \   0000D0   7A01         MOV     R2,#0x1
   \   0000D2   7900         MOV     R1,#0x0
   \   0000D4   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1112            LCD_write_byte(0xC3,LCD_COMMAND); 
   \   0000D7                ; Setup parameters for call to function LCD_write_byte
   \   0000D7   7A00         MOV     R2,#0x0
   \   0000D9   79C3         MOV     R1,#-0x3d
   \   0000DB   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1113            LCD_write_byte(0x8A,LCD_DATA); 
   \   0000DE                ; Setup parameters for call to function LCD_write_byte
   \   0000DE   7A01         MOV     R2,#0x1
   \   0000E0   798A         MOV     R1,#-0x76
   \   0000E2   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1114            LCD_write_byte(0x2A,LCD_DATA); 
   \   0000E5                ; Setup parameters for call to function LCD_write_byte
   \   0000E5   7A01         MOV     R2,#0x1
   \   0000E7   792A         MOV     R1,#0x2a
   \   0000E9   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1115            LCD_write_byte(0xC4,LCD_COMMAND); 
   \   0000EC                ; Setup parameters for call to function LCD_write_byte
   \   0000EC   7A00         MOV     R2,#0x0
   \   0000EE   79C4         MOV     R1,#-0x3c
   \   0000F0   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1116            LCD_write_byte(0x8A,LCD_DATA); 
   \   0000F3                ; Setup parameters for call to function LCD_write_byte
   \   0000F3   7A01         MOV     R2,#0x1
   \   0000F5   798A         MOV     R1,#-0x76
   \   0000F7   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1117            LCD_write_byte(0xEE,LCD_DATA); 
   \   0000FA                ; Setup parameters for call to function LCD_write_byte
   \   0000FA   7A01         MOV     R2,#0x1
   \   0000FC   79EE         MOV     R1,#-0x12
   \   0000FE   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1118          
   1119            LCD_write_byte(0xC5,LCD_COMMAND); //加VCOM 
   \   000101                ; Setup parameters for call to function LCD_write_byte
   \   000101   7A00         MOV     R2,#0x0
   \   000103   79C5         MOV     R1,#-0x3b
   \   000105   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1120            LCD_write_byte(0x0E,LCD_DATA); 
   \   000108                ; Setup parameters for call to function LCD_write_byte
   \   000108   7A01         MOV     R2,#0x1
   \   00010A   790E         MOV     R1,#0xe
   \   00010C   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1121          
   1122            LCD_write_byte(0x36,LCD_COMMAND); //RGB模式 
   \   00010F                ; Setup parameters for call to function LCD_write_byte
   \   00010F   7A00         MOV     R2,#0x0
   \   000111   7936         MOV     R1,#0x36
   \   000113   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1123            LCD_write_byte(0xC8,LCD_DATA); 
   \   000116                ; Setup parameters for call to function LCD_write_byte
   \   000116   7A01         MOV     R2,#0x1
   \   000118   79C8         MOV     R1,#-0x38
   \   00011A   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1124            
   1125            // ST7735R Gamma 校正序列
   1126            LCD_write_byte(0xe0,LCD_COMMAND); 
   \   00011D                ; Setup parameters for call to function LCD_write_byte
   \   00011D   7A00         MOV     R2,#0x0
   \   00011F   79E0         MOV     R1,#-0x20
   \   000121   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1127            LCD_write_byte(0x0f,LCD_DATA); 
   \   000124                ; Setup parameters for call to function LCD_write_byte
   \   000124   7A01         MOV     R2,#0x1
   \   000126   790F         MOV     R1,#0xf
   \   000128   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1128            LCD_write_byte(0x1a,LCD_DATA); 
   \   00012B                ; Setup parameters for call to function LCD_write_byte
   \   00012B   7A01         MOV     R2,#0x1
   \   00012D   791A         MOV     R1,#0x1a
   \   00012F   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1129            LCD_write_byte(0x0f,LCD_DATA); 
   \   000132                ; Setup parameters for call to function LCD_write_byte
   \   000132   7A01         MOV     R2,#0x1
   \   000134   790F         MOV     R1,#0xf
   \   000136   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1130            LCD_write_byte(0x18,LCD_DATA); 
   \   000139                ; Setup parameters for call to function LCD_write_byte
   \   000139   7A01         MOV     R2,#0x1
   \   00013B   7918         MOV     R1,#0x18
   \   00013D   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1131            LCD_write_byte(0x2f,LCD_DATA); 
   \   000140                ; Setup parameters for call to function LCD_write_byte
   \   000140   7A01         MOV     R2,#0x1
   \   000142   792F         MOV     R1,#0x2f
   \   000144   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1132            LCD_write_byte(0x28,LCD_DATA); 
   \   000147                ; Setup parameters for call to function LCD_write_byte
   \   000147   7A01         MOV     R2,#0x1
   \   000149   7928         MOV     R1,#0x28
   \   00014B   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1133            LCD_write_byte(0x20,LCD_DATA); 
   \   00014E                ; Setup parameters for call to function LCD_write_byte
   \   00014E   7A01         MOV     R2,#0x1
   \   000150   7920         MOV     R1,#0x20
   \   000152   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1134            LCD_write_byte(0x22,LCD_DATA); 
   \   000155                ; Setup parameters for call to function LCD_write_byte
   \   000155   7A01         MOV     R2,#0x1
   \   000157   7922         MOV     R1,#0x22
   \   000159   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1135            LCD_write_byte(0x1f,LCD_DATA); 
   \   00015C                ; Setup parameters for call to function LCD_write_byte
   \   00015C   7A01         MOV     R2,#0x1
   \   00015E   791F         MOV     R1,#0x1f
   \   000160   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1136            LCD_write_byte(0x1b,LCD_DATA); 
   \   000163                ; Setup parameters for call to function LCD_write_byte
   \   000163   7A01         MOV     R2,#0x1
   \   000165   791B         MOV     R1,#0x1b
   \   000167   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1137            LCD_write_byte(0x23,LCD_DATA); 
   \   00016A                ; Setup parameters for call to function LCD_write_byte
   \   00016A   7A01         MOV     R2,#0x1
   \   00016C   7923         MOV     R1,#0x23
   \   00016E   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1138            LCD_write_byte(0x37,LCD_DATA); 
   \   000171                ; Setup parameters for call to function LCD_write_byte
   \   000171   7A01         MOV     R2,#0x1
   \   000173   7937         MOV     R1,#0x37
   \   000175   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1139            LCD_write_byte(0x00,LCD_DATA); 
   \   000178                ; Setup parameters for call to function LCD_write_byte
   \   000178   7A01         MOV     R2,#0x1
   \   00017A   7900         MOV     R1,#0x0
   \   00017C   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1140          
   1141            LCD_write_byte(0x07,LCD_DATA); 
   \   00017F                ; Setup parameters for call to function LCD_write_byte
   \   00017F   7A01         MOV     R2,#0x1
   \   000181   7907         MOV     R1,#0x7
   \   000183   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1142            LCD_write_byte(0x02,LCD_DATA); 
   \   000186                ; Setup parameters for call to function LCD_write_byte
   \   000186   7A01         MOV     R2,#0x1
   \   000188   7902         MOV     R1,#0x2
   \   00018A   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1143            LCD_write_byte(0x10,LCD_DATA); 
   \   00018D                ; Setup parameters for call to function LCD_write_byte
   \   00018D   7A01         MOV     R2,#0x1
   \   00018F   7910         MOV     R1,#0x10
   \   000191   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1144            LCD_write_byte(0xe1,LCD_COMMAND); 
   \   000194                ; Setup parameters for call to function LCD_write_byte
   \   000194   7A00         MOV     R2,#0x0
   \   000196   79E1         MOV     R1,#-0x1f
   \   000198   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1145            LCD_write_byte(0x0f,LCD_DATA); 
   \   00019B                ; Setup parameters for call to function LCD_write_byte
   \   00019B   7A01         MOV     R2,#0x1
   \   00019D   790F         MOV     R1,#0xf
   \   00019F   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1146            LCD_write_byte(0x1b,LCD_DATA); 
   \   0001A2                ; Setup parameters for call to function LCD_write_byte
   \   0001A2   7A01         MOV     R2,#0x1
   \   0001A4   791B         MOV     R1,#0x1b
   \   0001A6   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1147            LCD_write_byte(0x0f,LCD_DATA); 
   \   0001A9                ; Setup parameters for call to function LCD_write_byte
   \   0001A9   7A01         MOV     R2,#0x1
   \   0001AB   790F         MOV     R1,#0xf
   \   0001AD   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1148            LCD_write_byte(0x17,LCD_DATA); 
   \   0001B0                ; Setup parameters for call to function LCD_write_byte
   \   0001B0   7A01         MOV     R2,#0x1
   \   0001B2   7917         MOV     R1,#0x17
   \   0001B4   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1149            LCD_write_byte(0x33,LCD_DATA); 
   \   0001B7                ; Setup parameters for call to function LCD_write_byte
   \   0001B7   7A01         MOV     R2,#0x1
   \   0001B9   7933         MOV     R1,#0x33
   \   0001BB   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1150            LCD_write_byte(0x2c,LCD_DATA); 
   \   0001BE                ; Setup parameters for call to function LCD_write_byte
   \   0001BE   7A01         MOV     R2,#0x1
   \   0001C0   792C         MOV     R1,#0x2c
   \   0001C2   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1151            LCD_write_byte(0x29,LCD_DATA); 
   \   0001C5                ; Setup parameters for call to function LCD_write_byte
   \   0001C5   7A01         MOV     R2,#0x1
   \   0001C7   7929         MOV     R1,#0x29
   \   0001C9   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1152            LCD_write_byte(0x2e,LCD_DATA); 
   \   0001CC                ; Setup parameters for call to function LCD_write_byte
   \   0001CC   7A01         MOV     R2,#0x1
   \   0001CE   792E         MOV     R1,#0x2e
   \   0001D0   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1153            LCD_write_byte(0x30,LCD_DATA); 
   \   0001D3                ; Setup parameters for call to function LCD_write_byte
   \   0001D3   7A01         MOV     R2,#0x1
   \   0001D5   7930         MOV     R1,#0x30
   \   0001D7   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1154            LCD_write_byte(0x30,LCD_DATA); 
   \   0001DA                ; Setup parameters for call to function LCD_write_byte
   \   0001DA   7A01         MOV     R2,#0x1
   \   0001DC   7930         MOV     R1,#0x30
   \   0001DE   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1155            LCD_write_byte(0x39,LCD_DATA); 
   \   0001E1                ; Setup parameters for call to function LCD_write_byte
   \   0001E1   7A01         MOV     R2,#0x1
   \   0001E3   7939         MOV     R1,#0x39
   \   0001E5   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1156            LCD_write_byte(0x3f,LCD_DATA); 
   \   0001E8                ; Setup parameters for call to function LCD_write_byte
   \   0001E8   7A01         MOV     R2,#0x1
   \   0001EA   793F         MOV     R1,#0x3f
   \   0001EC   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1157            LCD_write_byte(0x00,LCD_DATA); 
   \   0001EF                ; Setup parameters for call to function LCD_write_byte
   \   0001EF   7A01         MOV     R2,#0x1
   \   0001F1   7900         MOV     R1,#0x0
   \   0001F3   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1158            LCD_write_byte(0x07,LCD_DATA); 
   \   0001F6                ; Setup parameters for call to function LCD_write_byte
   \   0001F6   7A01         MOV     R2,#0x1
   \   0001F8   7907         MOV     R1,#0x7
   \   0001FA   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1159            LCD_write_byte(0x03,LCD_DATA); 
   \   0001FD                ; Setup parameters for call to function LCD_write_byte
   \   0001FD   7A01         MOV     R2,#0x1
   \   0001FF   7903         MOV     R1,#0x3
   \   000201   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1160            LCD_write_byte(0x10,LCD_DATA);  
   \   000204                ; Setup parameters for call to function LCD_write_byte
   \   000204   7A01         MOV     R2,#0x1
   \   000206   7910         MOV     R1,#0x10
   \   000208   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1161          
   1162            LCD_write_byte(0x2a,LCD_COMMAND);
   \   00020B                ; Setup parameters for call to function LCD_write_byte
   \   00020B   7A00         MOV     R2,#0x0
   \   00020D   792A         MOV     R1,#0x2a
   \   00020F   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1163            LCD_write_byte(0x00,LCD_DATA);
   \   000212                ; Setup parameters for call to function LCD_write_byte
   \   000212   7A01         MOV     R2,#0x1
   \   000214   7900         MOV     R1,#0x0
   \   000216   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1164            LCD_write_byte(0x00,LCD_DATA);
   \   000219                ; Setup parameters for call to function LCD_write_byte
   \   000219   7A01         MOV     R2,#0x1
   \   00021B   7900         MOV     R1,#0x0
   \   00021D   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1165            LCD_write_byte(0x00,LCD_DATA);
   \   000220                ; Setup parameters for call to function LCD_write_byte
   \   000220   7A01         MOV     R2,#0x1
   \   000222   7900         MOV     R1,#0x0
   \   000224   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1166            LCD_write_byte(0x7f,LCD_DATA);
   \   000227                ; Setup parameters for call to function LCD_write_byte
   \   000227   7A01         MOV     R2,#0x1
   \   000229   797F         MOV     R1,#0x7f
   \   00022B   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1167            LCD_write_byte(0x2b,LCD_COMMAND);
   \   00022E                ; Setup parameters for call to function LCD_write_byte
   \   00022E   7A00         MOV     R2,#0x0
   \   000230   792B         MOV     R1,#0x2b
   \   000232   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1168            LCD_write_byte(0x00,LCD_DATA);
   \   000235                ; Setup parameters for call to function LCD_write_byte
   \   000235   7A01         MOV     R2,#0x1
   \   000237   7900         MOV     R1,#0x0
   \   000239   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1169            LCD_write_byte(0x00,LCD_DATA);
   \   00023C                ; Setup parameters for call to function LCD_write_byte
   \   00023C   7A01         MOV     R2,#0x1
   \   00023E   7900         MOV     R1,#0x0
   \   000240   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1170            LCD_write_byte(0x00,LCD_DATA);
   \   000243                ; Setup parameters for call to function LCD_write_byte
   \   000243   7A01         MOV     R2,#0x1
   \   000245   7900         MOV     R1,#0x0
   \   000247   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1171            LCD_write_byte(0x9f,LCD_DATA);
   \   00024A                ; Setup parameters for call to function LCD_write_byte
   \   00024A   7A01         MOV     R2,#0x1
   \   00024C   799F         MOV     R1,#-0x61
   \   00024E   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1172          
   1173            LCD_write_byte(0xF0,LCD_COMMAND); //使能测试命令  
   \   000251                ; Setup parameters for call to function LCD_write_byte
   \   000251   7A00         MOV     R2,#0x0
   \   000253   79F0         MOV     R1,#-0x10
   \   000255   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1174            LCD_write_byte(0x01,LCD_DATA); 
   \   000258                ; Setup parameters for call to function LCD_write_byte
   \   000258   7A01         MOV     R2,#0x1
   \   00025A   7901         MOV     R1,#0x1
   \   00025C   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1175            LCD_write_byte(0xF6,LCD_COMMAND); //关闭ram省电模式 
   \   00025F                ; Setup parameters for call to function LCD_write_byte
   \   00025F   7A00         MOV     R2,#0x0
   \   000261   79F6         MOV     R1,#-0xa
   \   000263   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1176            LCD_write_byte(0x00,LCD_DATA); 
   \   000266                ; Setup parameters for call to function LCD_write_byte
   \   000266   7A01         MOV     R2,#0x1
   \   000268   7900         MOV     R1,#0x0
   \   00026A   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1177          
   1178            LCD_write_byte(0x3A,LCD_COMMAND); //色深16bit 
   \   00026D                ; Setup parameters for call to function LCD_write_byte
   \   00026D   7A00         MOV     R2,#0x0
   \   00026F   793A         MOV     R1,#0x3a
   \   000271   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1179            LCD_write_byte(0x05,LCD_DATA); 
   \   000274                ; Setup parameters for call to function LCD_write_byte
   \   000274   7A01         MOV     R2,#0x1
   \   000276   7905         MOV     R1,#0x5
   \   000278   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1180            
   1181            LCD_write_byte(0x29,LCD_COMMAND); //开显示  
   \   00027B                ; Setup parameters for call to function LCD_write_byte
   \   00027B   7A00         MOV     R2,#0x0
   \   00027D   7929         MOV     R1,#0x29
   \   00027F   12....       LCALL   `??LCD_write_byte::?relay`; Banked call to: LCD_write_byte
   1182            LCD_clear(GREEN);                 //清屏 
   \   000282                ; Setup parameters for call to function LCD_clear
   \   000282   7AE0         MOV     R2,#-0x20
   \   000284   7B07         MOV     R3,#0x7
   \   000286   12....       LCALL   `??LCD_clear::?relay`; Banked call to: LCD_clear
   1183          }
   \   000289   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00028C                REQUIRE P0SEL
   \   00028C                REQUIRE P0DIR
   \   00028C                REQUIRE P1SEL
   \   00028C                REQUIRE P1DIR

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Color>`:
   \   000000   1F00         DW 31

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Color_BK>`:
   \   000000   E007         DW 2016

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteValue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteScreen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteScreen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteStringValue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteEnString::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteEnString

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteStringValueValue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValueValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DelayMS::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DelayMS

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcdWriteString::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteString

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SendByte::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SPI_WriteData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SPI_WriteData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_WrCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WrCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_WrDat::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WrDat

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_WriteData_16Bit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WriteData_16Bit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_write_byte::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_byte

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Lcd_Reset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Lcd_Reset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_set_window::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_set_window

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DrawPixel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawPixel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DrawVerticalLine::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawVerticalLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DrawHorizonLine::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawHorizonLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DrawRect::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawRect

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DrawRectFill::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DrawRectFill

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_clear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_clear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_write_EN::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_EN

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_write_EN_string::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_EN_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_write_CN::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_CN

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??LCD_write_CN_string::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_write_CN_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ShowImage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ShowImage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLcd_HW_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Init
   1184          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   DelayMS
      0     38   DrawHorizonLine
        0     18   -> LCD_set_window
        0     14   -> LCD_write_byte
      0     11   DrawPixel
        0      9   -> LCD_write_byte
      0     26   DrawRect
        0     20   -> DrawHorizonLine
        0     20   -> DrawVerticalLine
      0     39   DrawRectFill
        0     20   -> LCD_set_window
        0     16   -> LCD_write_byte
        0     16   -> SendByte
      0     38   DrawVerticalLine
        0     18   -> LCD_set_window
        0     14   -> LCD_write_byte
      2      0   HalLcdInit
        2      0   -> HalLcd_HW_Init
      0     18   HalLcdWriteEnString
        0     18   -> DrawRectFill
        0     12   -> LCD_write_EN_string
        0     16   -> osal_strlen
      0      9   HalLcdWriteScreen
        0      9   -> HalLcdWriteString
      0     57   HalLcdWriteString
        0     18   -> DrawRectFill
        0     12   -> LCD_write_EN_string
      0     42   HalLcdWriteStringValue
        0     38   -> HalLcdWriteString
        0     40   -> _ltoa
        0     41   -> osal_memcpy
        0     38   -> osal_strlen
      0     45   HalLcdWriteStringValueValue
        0     38   -> HalLcdWriteString
        0     40   -> _ltoa
        0     41   -> osal_memcpy
        0     38   -> osal_strlen
      0     42   HalLcdWriteValue
        0     39   -> HalLcdWriteString
        0     41   -> _ltoa
      2      0   HalLcd_HW_Init
        2      0   -> DelayMS
        2      0   -> LCD_clear
        2      0   -> LCD_write_byte
        2      0   -> Lcd_Reset
      0     18   LCD_WrCmd
        0      9   -> SPI_WriteData
      0     18   LCD_WrDat
        0      9   -> SPI_WriteData
      0     21   LCD_WriteData_16Bit
        0      9   -> SPI_WriteData
      0     14   LCD_clear
        0     14   -> LCD_set_window
        0     10   -> LCD_write_byte
        0     10   -> SendByte
      0     32   LCD_set_window
        0     12   -> LCD_write_byte
      0     27   LCD_write_CN
        0     14   -> LCD_set_window
        0     10   -> SendByte
      0     19   LCD_write_CN_string
        0     19   -> DrawRectFill
        0     13   -> LCD_write_CN
      0     28   LCD_write_EN
        0     14   -> LCD_set_window
        0     10   -> SendByte
      0     26   LCD_write_EN_string
        0     14   -> LCD_write_EN
      0     25   LCD_write_byte
        0      9   -> LCD_WrCmd
        0      9   -> LCD_WrDat
      2      0   Lcd_Reset
        2      0   -> DelayMS
      0      9   SPI_WriteData
      0     16   SendByte
      0     16   ShowImage
        0     12   -> LCD_WriteData_16Bit
        0     16   -> LCD_set_window


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for Color>
       2  ?<Initializer for Color_BK>
       5  ??Subroutine10_0
       5  ??Subroutine11_0
      19  ??Subroutine12_0
       5  ??Subroutine13_0
       5  ??Subroutine14_0
       7  ?Subroutine0
       3  ?Subroutine1
       3  ?Subroutine2
      17  ?Subroutine3
       3  ?Subroutine4
       7  ?Subroutine5
       2  ?Subroutine6
      28  ?Subroutine7
      12  ?Subroutine8
       6  ?Subroutine9
    1288  ASCII7x14
     896  CN14x14
      65  CN14x14_Index
       2  Color
       2  Color_BK
      34  DelayMS
       6  DelayMS::?relay
      90  DrawHorizonLine
       6  DrawHorizonLine::?relay
      30  DrawPixel
       6  DrawPixel::?relay
     206  DrawRect
       6  DrawRect::?relay
     323  DrawRectFill
       6  DrawRectFill::?relay
      90  DrawVerticalLine
       6  DrawVerticalLine::?relay
       7  HalLcdInit
       6  HalLcdInit::?relay
      85  HalLcdWriteEnString
       6  HalLcdWriteEnString::?relay
      25  HalLcdWriteScreen
       6  HalLcdWriteScreen::?relay
      99  HalLcdWriteString
       6  HalLcdWriteString::?relay
      80  HalLcdWriteStringValue
       6  HalLcdWriteStringValue::?relay
     173  HalLcdWriteStringValueValue
       6  HalLcdWriteStringValueValue::?relay
      54  HalLcdWriteValue
       6  HalLcdWriteValue::?relay
     652  HalLcd_HW_Init
       6  HalLcd_HW_Init::?relay
      10  LCD_WrCmd
       6  LCD_WrCmd::?relay
      10  LCD_WrDat
       6  LCD_WrDat::?relay
      19  LCD_WriteData_16Bit
       6  LCD_WriteData_16Bit::?relay
     716  LCD_clear
       6  LCD_clear::?relay
     149  LCD_set_window
       6  LCD_set_window::?relay
     150  LCD_write_CN
       6  LCD_write_CN::?relay
     208  LCD_write_CN_string
       6  LCD_write_CN_string::?relay
     126  LCD_write_EN
       6  LCD_write_EN::?relay
      71  LCD_write_EN_string
       6  LCD_write_EN_string::?relay
      19  LCD_write_byte
       6  LCD_write_byte::?relay
      25  Lcd_Reset
       6  Lcd_Reset::?relay
       1  P0DIR
       1  P0SEL
       1  P1DIR
       1  P1SEL
      27  SPI_WriteData
       6  SPI_WriteData::?relay
      27  SendByte
       6  SendByte::?relay
     103  ShowImage
       6  ShowImage::?relay
       1  _A_P0
       1  _A_P1
       1  j

 
 3 735 bytes in segment BANKED_CODE
   168 bytes in segment BANK_RELAYS
 2 249 bytes in segment CODE_C
     6 bytes in segment SFR_AN
     4 bytes in segment XDATA_I
     4 bytes in segment XDATA_ID
     1 byte  in segment XDATA_Z
 
 6 156 bytes of CODE  memory
     0 bytes of DATA  memory (+ 6 bytes shared)
     5 bytes of XDATA memory

Errors: none
Warnings: none
